/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64InstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 's', 'h', 'a', '1', 's', 'u', '0', 9, 0,
  /* 9 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', 9, 0,
  /* 20 */ 'l', 'd', '1', 9, 0,
  /* 25 */ 't', 'r', 'n', '1', 9, 0,
  /* 31 */ 'z', 'i', 'p', '1', 9, 0,
  /* 37 */ 'u', 'z', 'p', '1', 9, 0,
  /* 43 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 50 */ 's', 't', '1', 9, 0,
  /* 55 */ 's', 'h', 'a', '1', 's', 'u', '1', 9, 0,
  /* 64 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', 9, 0,
  /* 75 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 82 */ 'l', 'd', '2', 9, 0,
  /* 87 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', 9, 0,
  /* 97 */ 's', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 105 */ 'u', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 113 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 123 */ 's', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 131 */ 'u', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 139 */ 's', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 147 */ 'u', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 155 */ 's', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 163 */ 'u', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 171 */ 's', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 179 */ 'u', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 187 */ 's', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 195 */ 'u', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 203 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 213 */ 'p', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 221 */ 's', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 229 */ 'u', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 237 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 247 */ 's', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 255 */ 'u', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 263 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 271 */ 'r', 's', 'u', 'b', 'h', 'n', '2', 9, 0,
  /* 280 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', 9, 0,
  /* 289 */ 's', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 298 */ 'u', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 307 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 317 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 327 */ 't', 'r', 'n', '2', 9, 0,
  /* 333 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 341 */ 's', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 349 */ 'u', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 357 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 367 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 378 */ 's', 'q', 'x', 't', 'u', 'n', '2', 9, 0,
  /* 387 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 396 */ 'z', 'i', 'p', '2', 9, 0,
  /* 402 */ 'u', 'z', 'p', '2', 9, 0,
  /* 408 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 415 */ 's', 't', '2', 9, 0,
  /* 420 */ 's', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 428 */ 'u', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 436 */ 's', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 444 */ 'u', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 452 */ 'l', 'd', '3', 9, 0,
  /* 457 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 464 */ 's', 't', '3', 9, 0,
  /* 469 */ 'r', 'e', 'v', '6', '4', 9, 0,
  /* 476 */ 'l', 'd', '4', 9, 0,
  /* 481 */ 's', 't', '4', 9, 0,
  /* 486 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 493 */ 'b', 'r', 'a', 'a', 9, 0,
  /* 499 */ 'l', 'd', 'r', 'a', 'a', 9, 0,
  /* 506 */ 'b', 'l', 'r', 'a', 'a', 9, 0,
  /* 513 */ 's', 'a', 'b', 'a', 9, 0,
  /* 519 */ 'u', 'a', 'b', 'a', 9, 0,
  /* 525 */ 'p', 'a', 'c', 'd', 'a', 9, 0,
  /* 532 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 540 */ 'a', 'u', 't', 'd', 'a', 9, 0,
  /* 547 */ 'p', 'a', 'c', 'g', 'a', 9, 0,
  /* 554 */ 'p', 'a', 'c', 'i', 'a', 9, 0,
  /* 561 */ 'a', 'u', 't', 'i', 'a', 9, 0,
  /* 568 */ 'f', 'c', 'm', 'l', 'a', 9, 0,
  /* 575 */ 'f', 'm', 'l', 'a', 9, 0,
  /* 581 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 590 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 599 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 606 */ 's', 'w', 'p', 'a', 9, 0,
  /* 612 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 620 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 628 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 635 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 642 */ 's', 's', 'r', 'a', 9, 0,
  /* 648 */ 'u', 's', 'r', 'a', 9, 0,
  /* 654 */ 'c', 'a', 's', 'a', 9, 0,
  /* 660 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 668 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 676 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 685 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 694 */ 'p', 'a', 'c', 'd', 'z', 'a', 9, 0,
  /* 702 */ 'a', 'u', 't', 'd', 'z', 'a', 9, 0,
  /* 710 */ 'p', 'a', 'c', 'i', 'z', 'a', 9, 0,
  /* 718 */ 'a', 'u', 't', 'i', 'z', 'a', 9, 0,
  /* 726 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 734 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 743 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 753 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 763 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 770 */ 'b', 'r', 'a', 'b', 9, 0,
  /* 776 */ 'l', 'd', 'r', 'a', 'b', 9, 0,
  /* 783 */ 'b', 'l', 'r', 'a', 'b', 9, 0,
  /* 790 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 799 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 808 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 815 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 824 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 834 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 844 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 853 */ 'p', 'a', 'c', 'd', 'b', 9, 0,
  /* 860 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 868 */ 'a', 'u', 't', 'd', 'b', 9, 0,
  /* 875 */ 'p', 'a', 'c', 'i', 'b', 9, 0,
  /* 882 */ 'a', 'u', 't', 'i', 'b', 9, 0,
  /* 889 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 899 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 910 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 921 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 929 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 939 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 949 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 957 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 967 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 978 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 989 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 998 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 1008 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 1018 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 1025 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 1034 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 1043 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 1050 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 1059 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 1069 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 1079 */ 'd', 'm', 'b', 9, 0,
  /* 1084 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 1093 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 1102 */ 's', 'w', 'p', 'b', 9, 0,
  /* 1108 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 1115 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 1123 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 1129 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 1137 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 1145 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 1152 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 1160 */ 'l', 'd', 'a', 'p', 'r', 'b', 9, 0,
  /* 1168 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 1175 */ 's', 't', 'r', 'b', 9, 0,
  /* 1181 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 1188 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 1195 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 1202 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 1210 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 1217 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 1225 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 1232 */ 'c', 'a', 's', 'b', 9, 0,
  /* 1238 */ 'd', 's', 'b', 9, 0,
  /* 1243 */ 'i', 's', 'b', 9, 0,
  /* 1248 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 1255 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 1263 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 1271 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 1279 */ 'f', 's', 'u', 'b', 9, 0,
  /* 1285 */ 's', 'h', 's', 'u', 'b', 9, 0,
  /* 1292 */ 'u', 'h', 's', 'u', 'b', 9, 0,
  /* 1299 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 1306 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 1314 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 1321 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 1328 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 1337 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 1346 */ 'p', 'a', 'c', 'd', 'z', 'b', 9, 0,
  /* 1354 */ 'a', 'u', 't', 'd', 'z', 'b', 9, 0,
  /* 1362 */ 'p', 'a', 'c', 'i', 'z', 'b', 9, 0,
  /* 1370 */ 'a', 'u', 't', 'i', 'z', 'b', 9, 0,
  /* 1378 */ 's', 'h', 'a', '1', 'c', 9, 0,
  /* 1385 */ 's', 'b', 'c', 9, 0,
  /* 1390 */ 'a', 'd', 'c', 9, 0,
  /* 1395 */ 'b', 'i', 'c', 9, 0,
  /* 1400 */ 'a', 'e', 's', 'i', 'm', 'c', 9, 0,
  /* 1408 */ 'a', 'e', 's', 'm', 'c', 9, 0,
  /* 1415 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 1422 */ 'h', 'v', 'c', 9, 0,
  /* 1427 */ 's', 'v', 'c', 9, 0,
  /* 1432 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 1438 */ 's', 'a', 'b', 'd', 9, 0,
  /* 1444 */ 'u', 'a', 'b', 'd', 9, 0,
  /* 1450 */ 'x', 'p', 'a', 'c', 'd', 9, 0,
  /* 1457 */ 'f', 'c', 'a', 'd', 'd', 9, 0,
  /* 1464 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 1471 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 1477 */ 's', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 1485 */ 'u', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 1493 */ 's', 'h', 'a', 'd', 'd', 9, 0,
  /* 1500 */ 'u', 'h', 'a', 'd', 'd', 9, 0,
  /* 1507 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 1514 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 1522 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 1530 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 1538 */ 'a', 'n', 'd', 9, 0,
  /* 1543 */ 'a', 'e', 's', 'd', 9, 0,
  /* 1549 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 1556 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 1563 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 1570 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 1578 */ 'u', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 1586 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 1594 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 1601 */ 'a', 'e', 's', 'e', 9, 0,
  /* 1607 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 1616 */ 'u', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 1625 */ 'b', 'i', 'f', 9, 0,
  /* 1630 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 1637 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 1644 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 1650 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 1657 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 1664 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 1671 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 1679 */ 's', 'h', 'a', '2', '5', '6', 'h', 9, 0,
  /* 1688 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 1697 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 1707 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 1717 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 1727 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 1734 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 1743 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 1752 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 1759 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 1768 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 1778 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 1788 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 1797 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 1805 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 1815 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 1826 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 1837 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 1845 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 1855 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 1865 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 1873 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 1883 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 1894 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 1905 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 1914 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 1924 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 1934 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 1941 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 1950 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 1959 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 1966 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 1975 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 1984 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 1994 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 2001 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 2008 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 2018 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 2028 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 2037 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 2046 */ 's', 'w', 'p', 'h', 9, 0,
  /* 2052 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 2059 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 2067 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 2073 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 2081 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 2089 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 2096 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 2104 */ 'l', 'd', 'a', 'p', 'r', 'h', 9, 0,
  /* 2112 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 2119 */ 's', 't', 'r', 'h', 9, 0,
  /* 2125 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 2132 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 2139 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 2146 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 2154 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 2161 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 2169 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 2176 */ 'c', 'a', 's', 'h', 9, 0,
  /* 2182 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 2192 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 2199 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 2207 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 2215 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 2223 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 2232 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 2241 */ 'x', 'p', 'a', 'c', 'i', 9, 0,
  /* 2248 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 2254 */ 's', 'l', 'i', 9, 0,
  /* 2259 */ 'm', 'v', 'n', 'i', 9, 0,
  /* 2265 */ 's', 'r', 'i', 9, 0,
  /* 2270 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 2278 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 2284 */ 'b', 'r', 'k', 9, 0,
  /* 2289 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 2295 */ 's', 'a', 'b', 'a', 'l', 9, 0,
  /* 2302 */ 'u', 'a', 'b', 'a', 'l', 9, 0,
  /* 2309 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 2318 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 2327 */ 's', 'm', 'l', 'a', 'l', 9, 0,
  /* 2334 */ 'u', 'm', 'l', 'a', 'l', 9, 0,
  /* 2341 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 2351 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 2361 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 2369 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 2376 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 2385 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 2394 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 2401 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 2410 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 2420 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 2430 */ 't', 'b', 'l', 9, 0,
  /* 2435 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 2443 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 2451 */ 's', 's', 'u', 'b', 'l', 9, 0,
  /* 2458 */ 'u', 's', 'u', 'b', 'l', 9, 0,
  /* 2465 */ 's', 'a', 'b', 'd', 'l', 9, 0,
  /* 2472 */ 'u', 'a', 'b', 'd', 'l', 9, 0,
  /* 2479 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 2487 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 2495 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 2503 */ 's', 'a', 'd', 'd', 'l', 9, 0,
  /* 2510 */ 'u', 'a', 'd', 'd', 'l', 9, 0,
  /* 2517 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 2524 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 2531 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 2538 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 2546 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 2554 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 2561 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 2568 */ 's', 's', 'h', 'l', 9, 0,
  /* 2574 */ 'u', 's', 'h', 'l', 9, 0,
  /* 2580 */ 's', 's', 'h', 'l', 'l', 9, 0,
  /* 2587 */ 'u', 's', 'h', 'l', 'l', 9, 0,
  /* 2594 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 2603 */ 'p', 'm', 'u', 'l', 'l', 9, 0,
  /* 2610 */ 's', 'm', 'u', 'l', 'l', 9, 0,
  /* 2617 */ 'u', 'm', 'u', 'l', 'l', 9, 0,
  /* 2624 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 2633 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 2642 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 2649 */ 's', 'w', 'p', 'l', 9, 0,
  /* 2655 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 2663 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 2671 */ 'c', 'a', 's', 'l', 9, 0,
  /* 2677 */ 'b', 's', 'l', 9, 0,
  /* 2682 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 2691 */ 's', 'm', 'l', 's', 'l', 9, 0,
  /* 2698 */ 'u', 'm', 'l', 's', 'l', 9, 0,
  /* 2705 */ 's', 'y', 's', 'l', 9, 0,
  /* 2711 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 2719 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 2726 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 2732 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 2739 */ 'p', 'm', 'u', 'l', 9, 0,
  /* 2745 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 2754 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 2763 */ 's', 'h', 'a', '1', 'm', 9, 0,
  /* 2770 */ 's', 'b', 'f', 'm', 9, 0,
  /* 2776 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 2782 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 2788 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 2796 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 2804 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 2812 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 2819 */ 'r', 's', 'u', 'b', 'h', 'n', 9, 0,
  /* 2827 */ 'r', 'a', 'd', 'd', 'h', 'n', 9, 0,
  /* 2835 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 2841 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 2849 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 2857 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 2863 */ 'e', 'o', 'n', 9, 0,
  /* 2868 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 2876 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 2884 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 2893 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 2902 */ 'o', 'r', 'n', 9, 0,
  /* 2907 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 2915 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 2922 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 2929 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 2936 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 2945 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 2955 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 2963 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 2969 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 2977 */ 's', 'h', 'a', '1', 'p', 9, 0,
  /* 2984 */ 'f', 'a', 'd', 'd', 'p', 9, 0,
  /* 2991 */ 'l', 'd', 'p', 9, 0,
  /* 2996 */ 's', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 3004 */ 'u', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 3012 */ 's', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 3020 */ 'u', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 3028 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 3035 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 3041 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', 9, 0,
  /* 3050 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', 9, 0,
  /* 3059 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 3065 */ 'f', 'm', 'i', 'n', 'p', 9, 0,
  /* 3072 */ 's', 'm', 'i', 'n', 'p', 9, 0,
  /* 3079 */ 'u', 'm', 'i', 'n', 'p', 9, 0,
  /* 3086 */ 's', 't', 'n', 'p', 9, 0,
  /* 3092 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 3098 */ 'c', 'a', 's', 'p', 9, 0,
  /* 3104 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 3112 */ 's', 't', 'p', 9, 0,
  /* 3117 */ 'd', 'u', 'p', 9, 0,
  /* 3122 */ 's', 'w', 'p', 9, 0,
  /* 3127 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 3134 */ 'f', 'm', 'a', 'x', 'p', 9, 0,
  /* 3141 */ 's', 'm', 'a', 'x', 'p', 9, 0,
  /* 3148 */ 'u', 'm', 'a', 'x', 'p', 9, 0,
  /* 3155 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 3161 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 3168 */ 's', 't', 'x', 'p', 9, 0,
  /* 3174 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 3181 */ 'l', 'd', '1', 'r', 9, 0,
  /* 3187 */ 'l', 'd', '2', 'r', 9, 0,
  /* 3193 */ 'l', 'd', '3', 'r', 9, 0,
  /* 3199 */ 'l', 'd', '4', 'r', 9, 0,
  /* 3205 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 3211 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 3218 */ 'b', 'r', 9, 0,
  /* 3222 */ 'a', 'd', 'r', 9, 0,
  /* 3227 */ 'l', 'd', 'r', 9, 0,
  /* 3232 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 3239 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 3246 */ 's', 's', 'h', 'r', 9, 0,
  /* 3252 */ 'u', 's', 'h', 'r', 9, 0,
  /* 3258 */ 'b', 'l', 'r', 9, 0,
  /* 3263 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 3270 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 3277 */ 's', 't', 'l', 'r', 9, 0,
  /* 3283 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 3290 */ 'r', 'o', 'r', 9, 0,
  /* 3295 */ 'l', 'd', 'a', 'p', 'r', 9, 0,
  /* 3302 */ 'o', 'r', 'r', 9, 0,
  /* 3307 */ 'a', 's', 'r', 9, 0,
  /* 3312 */ 'l', 's', 'r', 9, 0,
  /* 3317 */ 'm', 's', 'r', 9, 0,
  /* 3322 */ 'l', 'd', 't', 'r', 9, 0,
  /* 3328 */ 's', 't', 'r', 9, 0,
  /* 3333 */ 's', 't', 't', 'r', 9, 0,
  /* 3339 */ 'e', 'x', 't', 'r', 9, 0,
  /* 3345 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 3351 */ 's', 't', 'u', 'r', 9, 0,
  /* 3357 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 3364 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 3370 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 3377 */ 's', 't', 'x', 'r', 9, 0,
  /* 3383 */ 'c', 'a', 's', 9, 0,
  /* 3388 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 3396 */ 'f', 'a', 'b', 's', 9, 0,
  /* 3402 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 3409 */ 's', 'u', 'b', 's', 9, 0,
  /* 3415 */ 's', 'b', 'c', 's', 9, 0,
  /* 3421 */ 'a', 'd', 'c', 's', 9, 0,
  /* 3427 */ 'b', 'i', 'c', 's', 9, 0,
  /* 3433 */ 'a', 'd', 'd', 's', 9, 0,
  /* 3439 */ 'a', 'n', 'd', 's', 9, 0,
  /* 3445 */ 'c', 'm', 'h', 's', 9, 0,
  /* 3451 */ 'c', 'l', 's', 9, 0,
  /* 3456 */ 'f', 'm', 'l', 's', 9, 0,
  /* 3462 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 3470 */ 'i', 'n', 's', 9, 0,
  /* 3475 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 3483 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 3491 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 3499 */ 'm', 'r', 's', 9, 0,
  /* 3504 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 3513 */ 's', 'y', 's', 9, 0,
  /* 3518 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 3526 */ 'f', 'j', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 3535 */ 'r', 'e', 't', 9, 0,
  /* 3540 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 3547 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 3554 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 3561 */ 'r', 'b', 'i', 't', 9, 0,
  /* 3567 */ 'h', 'l', 't', 9, 0,
  /* 3572 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 3579 */ 'c', 'n', 't', 9, 0,
  /* 3584 */ 'h', 'i', 'n', 't', 9, 0,
  /* 3590 */ 's', 'd', 'o', 't', 9, 0,
  /* 3596 */ 'u', 'd', 'o', 't', 9, 0,
  /* 3602 */ 'n', 'o', 't', 9, 0,
  /* 3607 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 3614 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 3621 */ 'f', 'c', 'v', 't', 9, 0,
  /* 3627 */ 'e', 'x', 't', 9, 0,
  /* 3632 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 3640 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 3648 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 3656 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 3664 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 3672 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 3680 */ 'a', 'd', 'd', 'v', 9, 0,
  /* 3686 */ 'r', 'e', 'v', 9, 0,
  /* 3691 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 3697 */ 's', 'd', 'i', 'v', 9, 0,
  /* 3703 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 3709 */ 's', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 3717 */ 'u', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 3725 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', 9, 0,
  /* 3734 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', 9, 0,
  /* 3743 */ 'f', 'm', 'i', 'n', 'v', 9, 0,
  /* 3750 */ 's', 'm', 'i', 'n', 'v', 9, 0,
  /* 3757 */ 'u', 'm', 'i', 'n', 'v', 9, 0,
  /* 3764 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 3771 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 3777 */ 's', 'm', 'o', 'v', 9, 0,
  /* 3783 */ 'u', 'm', 'o', 'v', 9, 0,
  /* 3789 */ 'f', 'm', 'a', 'x', 'v', 9, 0,
  /* 3796 */ 's', 'm', 'a', 'x', 'v', 9, 0,
  /* 3803 */ 'u', 'm', 'a', 'x', 'v', 9, 0,
  /* 3810 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 3818 */ 's', 's', 'u', 'b', 'w', 9, 0,
  /* 3825 */ 'u', 's', 'u', 'b', 'w', 9, 0,
  /* 3832 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 3841 */ 's', 'a', 'd', 'd', 'w', 9, 0,
  /* 3848 */ 'u', 'a', 'd', 'd', 'w', 9, 0,
  /* 3855 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 3862 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 3869 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 3877 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 3885 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 3893 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 3899 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 3907 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 3915 */ 't', 'b', 'x', 9, 0,
  /* 3920 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 3929 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 3936 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 3943 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 3951 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 3959 */ 'b', 'r', 'a', 'a', 'z', 9, 0,
  /* 3966 */ 'b', 'l', 'r', 'a', 'a', 'z', 9, 0,
  /* 3974 */ 'b', 'r', 'a', 'b', 'z', 9, 0,
  /* 3981 */ 'b', 'l', 'r', 'a', 'b', 'z', 9, 0,
  /* 3989 */ 'c', 'b', 'z', 9, 0,
  /* 3994 */ 't', 'b', 'z', 9, 0,
  /* 3999 */ 'c', 'l', 'z', 9, 0,
  /* 4004 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 4010 */ 't', 'b', 'n', 'z', 9, 0,
  /* 4016 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 4024 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 4030 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 4044 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 4075 */ 'b', '.', 0,
  /* 4078 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 4103 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 4126 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 4149 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 4171 */ 'p', 'a', 'c', 'i', 'a', '1', '7', '1', '6', 0,
  /* 4181 */ 'a', 'u', 't', 'i', 'a', '1', '7', '1', '6', 0,
  /* 4191 */ 'p', 'a', 'c', 'i', 'b', '1', '7', '1', '6', 0,
  /* 4201 */ 'a', 'u', 't', 'i', 'b', '1', '7', '1', '6', 0,
  /* 4211 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 4224 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 4231 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 4241 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 4256 */ 'e', 'r', 'e', 't', 'a', 'a', 0,
  /* 4263 */ 'e', 'r', 'e', 't', 'a', 'b', 0,
  /* 4270 */ 'x', 'p', 'a', 'c', 'l', 'r', 'i', 0,
  /* 4278 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 4292 */ 'p', 'a', 'c', 'i', 'a', 's', 'p', 0,
  /* 4300 */ 'a', 'u', 't', 'i', 'a', 's', 'p', 0,
  /* 4308 */ 'p', 'a', 'c', 'i', 'b', 's', 'p', 0,
  /* 4316 */ 'a', 'u', 't', 'i', 'b', 's', 'p', 0,
  /* 4324 */ 'd', 'r', 'p', 's', 0,
  /* 4329 */ 'e', 'r', 'e', 't', 0,
  /* 4334 */ 'p', 'a', 'c', 'i', 'a', 'z', 0,
  /* 4341 */ 'a', 'u', 't', 'i', 'a', 'z', 0,
  /* 4348 */ 'p', 'a', 'c', 'i', 'b', 'z', 0,
  /* 4355 */ 'a', 'u', 't', 'i', 'b', 'z', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    4232U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    4225U,	// BUNDLE
    4242U,	// LIFETIME_START
    4212U,	// LIFETIME_END
    0U,	// STACKMAP
    4279U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    4104U,	// PATCHABLE_FUNCTION_ENTER
    4045U,	// PATCHABLE_RET
    4150U,	// PATCHABLE_FUNCTION_EXIT
    4127U,	// PATCHABLE_TAIL_CALL
    4079U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    11590U,	// ABSv16i8
    1107840326U,	// ABSv1i64
    2148543814U,	// ABSv2i32
    3222809926U,	// ABSv2i64
    2108742U,	// ABSv4i16
    1076374854U,	// ABSv4i32
    2150640966U,	// ABSv8i16
    3224907078U,	// ABSv8i8
    34098526U,	// ADCSWr
    34098526U,	// ADCSXr
    34096495U,	// ADCWr
    34096495U,	// ADCXr
    1074801421U,	// ADDHNv2i64_v2i32
    1143496986U,	// ADDHNv2i64_v4i32
    2149591821U,	// ADDHNv4i32_v4i16
    2217763098U,	// ADDHNv4i32_v8i16
    3288359194U,	// ADDHNv8i16_v16i8
    3224906509U,	// ADDHNv8i16_v8i8
    11178U,	// ADDPv16i8
    1074801578U,	// ADDPv2i32
    1075325866U,	// ADDPv2i64
    3221769130U,	// ADDPv2i64p
    2149591978U,	// ADDPv4i16
    2150116266U,	// ADDPv4i32
    3224382378U,	// ADDPv8i16
    3224906666U,	// ADDPv8i8
    34098538U,	// ADDSWri
    0U,	// ADDSWrr
    34098538U,	// ADDSWrs
    34098538U,	// ADDSWrx
    34098538U,	// ADDSXri
    0U,	// ADDSXrr
    34098538U,	// ADDSXrs
    34098538U,	// ADDSXrx
    34098538U,	// ADDSXrx64
    544353U,	// ADDVv16i8v
    544353U,	// ADDVv4i16v
    1074286177U,	// ADDVv4i32v
    2148028001U,	// ADDVv8i16v
    3221769825U,	// ADDVv8i8v
    34096564U,	// ADDWri
    0U,	// ADDWrr
    34096564U,	// ADDWrs
    34096564U,	// ADDWrx
    34096564U,	// ADDXri
    0U,	// ADDXrr
    34096564U,	// ADDXrs
    34096564U,	// ADDXrx
    34096564U,	// ADDXrx64
    34228U,	// ADD_ZZZ_B
    42420U,	// ADD_ZZZ_D
    50612U,	// ADD_ZZZ_H
    58804U,	// ADD_ZZZ_S
    9652U,	// ADDv16i8
    34096564U,	// ADDv1i64
    1074800052U,	// ADDv2i32
    1075324340U,	// ADDv2i64
    2149590452U,	// ADDv4i16
    2150114740U,	// ADDv4i32
    3224380852U,	// ADDv8i16
    3224905140U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    1107840151U,	// ADR
    101207061U,	// ADRP
    67134984U,	// AESDrr
    67135042U,	// AESErr
    9593U,	// AESIMCrr
    0U,	// AESIMCrrTied
    9601U,	// AESMCrr
    0U,	// AESMCrrTied
    34098544U,	// ANDSWri
    0U,	// ANDSWrr
    34098544U,	// ANDSWrs
    34098544U,	// ANDSXri
    0U,	// ANDSXrr
    34098544U,	// ANDSXrs
    34096643U,	// ANDWri
    0U,	// ANDWrr
    34096643U,	// ANDWrs
    34096643U,	// ANDXri
    0U,	// ANDXrr
    34096643U,	// ANDXrs
    9731U,	// ANDv16i8
    3224905219U,	// ANDv8i8
    34098412U,	// ASRVWr
    34098412U,	// ASRVXr
    1107837469U,	// AUTDA
    1107837797U,	// AUTDB
    4211391U,	// AUTDZA
    4212043U,	// AUTDZB
    1107837490U,	// AUTIA
    4182U,	// AUTIA1716
    4301U,	// AUTIASP
    4342U,	// AUTIAZ
    1107837811U,	// AUTIB
    4202U,	// AUTIB1716
    4317U,	// AUTIBSP
    4356U,	// AUTIBZ
    4211407U,	// AUTIZA
    4212059U,	// AUTIZB
    66268U,	// B
    134761172U,	// BFMWri
    134761172U,	// BFMXri
    0U,	// BICSWrr
    34098532U,	// BICSWrs
    0U,	// BICSXrr
    34098532U,	// BICSXrs
    0U,	// BICWrr
    34096500U,	// BICWrs
    0U,	// BICXrr
    34096500U,	// BICXrs
    9588U,	// BICv16i8
    168846708U,	// BICv2i32
    169895284U,	// BICv4i16
    170419572U,	// BICv4i32
    170943860U,	// BICv8i16
    3224905076U,	// BICv8i8
    9818U,	// BIFv16i8
    3224905306U,	// BIFv8i8
    67137003U,	// BITv16i8
    3292032491U,	// BITv8i8
    67968U,	// BL
    4213947U,	// BLR
    1107837435U,	// BLRAA
    4214655U,	// BLRAAZ
    1107837712U,	// BLRAB
    4214670U,	// BLRABZ
    4213907U,	// BR
    1107837422U,	// BRAA
    4214648U,	// BRAAZ
    1107837699U,	// BRAB
    4214663U,	// BRABZ
    76013U,	// BRK
    67136118U,	// BSLv16i8
    3292031606U,	// BSLv8i8
    85996U,	// Bcc
    134832937U,	// CASAB
    134833881U,	// CASAH
    134833078U,	// CASALB
    134833994U,	// CASALH
    134834523U,	// CASALW
    134834523U,	// CASALX
    134832783U,	// CASAW
    134832783U,	// CASAX
    134833361U,	// CASB
    134834305U,	// CASH
    134833172U,	// CASLB
    134834088U,	// CASLH
    134834800U,	// CASLW
    134834800U,	// CASLX
    100666U,	// CASPALW
    108858U,	// CASPALX
    98904U,	// CASPAW
    107096U,	// CASPAX
    100947U,	// CASPLW
    109139U,	// CASPLX
    101403U,	// CASPW
    109595U,	// CASPX
    134835512U,	// CASW
    134835512U,	// CASX
    201871269U,	// CBNZW
    201871269U,	// CBNZX
    201871254U,	// CBZW
    201871254U,	// CBZX
    34097962U,	// CCMNWi
    34097962U,	// CCMNWr
    34097962U,	// CCMNXi
    34097962U,	// CCMNXr
    34098134U,	// CCMPWi
    34098134U,	// CCMPWr
    34098134U,	// CCMPXi
    34098134U,	// CCMPXr
    4214618U,	// CLREX
    1107840380U,	// CLSWr
    1107840380U,	// CLSXr
    11644U,	// CLSv16i8
    2148543868U,	// CLSv2i32
    2108796U,	// CLSv4i16
    1076374908U,	// CLSv4i32
    2150641020U,	// CLSv8i16
    3224907132U,	// CLSv8i8
    1107840928U,	// CLZWr
    1107840928U,	// CLZXr
    12192U,	// CLZv16i8
    2148544416U,	// CLZv2i32
    2109344U,	// CLZv4i16
    1076375456U,	// CLZv4i32
    2150641568U,	// CLZv8i16
    3224907680U,	// CLZv8i8
    11368U,	// CMEQv16i8
    1073753192U,	// CMEQv16i8rz
    34098280U,	// CMEQv1i64
    2181581928U,	// CMEQv1i64rz
    1074801768U,	// CMEQv2i32
    3222285416U,	// CMEQv2i32rz
    1075326056U,	// CMEQv2i64
    1584232U,	// CMEQv2i64rz
    2149592168U,	// CMEQv4i16
    1075850344U,	// CMEQv4i16rz
    2150116456U,	// CMEQv4i32
    2150116456U,	// CMEQv4i32rz
    3224382568U,	// CMEQv8i16
    3224382568U,	// CMEQv8i16rz
    3224906856U,	// CMEQv8i8
    3681384U,	// CMEQv8i8rz
    9750U,	// CMGEv16i8
    1073751574U,	// CMGEv16i8rz
    34096662U,	// CMGEv1i64
    2181580310U,	// CMGEv1i64rz
    1074800150U,	// CMGEv2i32
    3222283798U,	// CMGEv2i32rz
    1075324438U,	// CMGEv2i64
    1582614U,	// CMGEv2i64rz
    2149590550U,	// CMGEv4i16
    1075848726U,	// CMGEv4i16rz
    2150114838U,	// CMGEv4i32
    2150114838U,	// CMGEv4i32rz
    3224380950U,	// CMGEv8i16
    3224380950U,	// CMGEv8i16rz
    3224905238U,	// CMGEv8i8
    3679766U,	// CMGEv8i8rz
    11748U,	// CMGTv16i8
    1073753572U,	// CMGTv16i8rz
    34098660U,	// CMGTv1i64
    2181582308U,	// CMGTv1i64rz
    1074802148U,	// CMGTv2i32
    3222285796U,	// CMGTv2i32rz
    1075326436U,	// CMGTv2i64
    1584612U,	// CMGTv2i64rz
    2149592548U,	// CMGTv4i16
    1075850724U,	// CMGTv4i16rz
    2150116836U,	// CMGTv4i32
    2150116836U,	// CMGTv4i32rz
    3224382948U,	// CMGTv8i16
    3224382948U,	// CMGTv8i16rz
    3224907236U,	// CMGTv8i8
    3681764U,	// CMGTv8i8rz
    10441U,	// CMHIv16i8
    34097353U,	// CMHIv1i64
    1074800841U,	// CMHIv2i32
    1075325129U,	// CMHIv2i64
    2149591241U,	// CMHIv4i16
    2150115529U,	// CMHIv4i32
    3224381641U,	// CMHIv8i16
    3224905929U,	// CMHIv8i8
    11638U,	// CMHSv16i8
    34098550U,	// CMHSv1i64
    1074802038U,	// CMHSv2i32
    1075326326U,	// CMHSv2i64
    2149592438U,	// CMHSv4i16
    2150116726U,	// CMHSv4i32
    3224382838U,	// CMHSv8i16
    3224907126U,	// CMHSv8i8
    1073751581U,	// CMLEv16i8rz
    2181580317U,	// CMLEv1i64rz
    3222283805U,	// CMLEv2i32rz
    1582621U,	// CMLEv2i64rz
    1075848733U,	// CMLEv4i16rz
    2150114845U,	// CMLEv4i32rz
    3224380957U,	// CMLEv8i16rz
    3679773U,	// CMLEv8i8rz
    1073753590U,	// CMLTv16i8rz
    2181582326U,	// CMLTv1i64rz
    3222285814U,	// CMLTv2i32rz
    1584630U,	// CMLTv2i64rz
    1075850742U,	// CMLTv4i16rz
    2150116854U,	// CMLTv4i32rz
    3224382966U,	// CMLTv8i16rz
    3681782U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    11807U,	// CMTSTv16i8
    34098719U,	// CMTSTv1i64
    1074802207U,	// CMTSTv2i32
    1075326495U,	// CMTSTv2i64
    2149592607U,	// CMTSTv4i16
    2150116895U,	// CMTSTv4i32
    3224383007U,	// CMTSTv8i16
    3224907295U,	// CMTSTv8i8
    11772U,	// CNTv16i8
    3224907260U,	// CNTv8i8
    1074286269U,	// CPYi16
    2148028093U,	// CPYi32
    3221769917U,	// CPYi64
    544445U,	// CPYi8
    34095831U,	// CRC32Brr
    34095949U,	// CRC32CBrr
    34096893U,	// CRC32CHrr
    34098937U,	// CRC32CWrr
    34099025U,	// CRC32CXrr
    34096776U,	// CRC32Hrr
    34098915U,	// CRC32Wrr
    34098990U,	// CRC32Xrr
    34097623U,	// CSELWr
    34097623U,	// CSELXr
    34096520U,	// CSINCWr
    34096520U,	// CSINCXr
    34098869U,	// CSINVWr
    34098869U,	// CSINVXr
    34096762U,	// CSNEGWr
    34096762U,	// CSNEGXr
    0U,	// CompilerBarrier
    73772U,	// DCPS1
    74137U,	// DCPS2
    74186U,	// DCPS3
    115768U,	// DMB
    4325U,	// DRPS
    115927U,	// DSB
    1107307566U,	// DUPv16i8gpr
    11310U,	// DUPv16i8lane
    1108356142U,	// DUPv2i32gpr
    2148543534U,	// DUPv2i32lane
    1108880430U,	// DUPv2i64gpr
    3222809646U,	// DUPv2i64lane
    1109404718U,	// DUPv4i16gpr
    1075850286U,	// DUPv4i16lane
    1109929006U,	// DUPv4i32gpr
    2150116398U,	// DUPv4i32lane
    1110453294U,	// DUPv8i16gpr
    1076898862U,	// DUPv8i16lane
    1110977582U,	// DUPv8i8gpr
    3681326U,	// DUPv8i8lane
    0U,	// EONWrr
    34097968U,	// EONWrs
    0U,	// EONXrr
    34097968U,	// EONXrs
    34098390U,	// EORWri
    0U,	// EORWrr
    34098390U,	// EORWrs
    34098390U,	// EORXri
    0U,	// EORXrr
    34098390U,	// EORXrs
    11478U,	// EORv16i8
    3224906966U,	// EORv8i8
    4330U,	// ERET
    4257U,	// ERETAA
    4264U,	// ERETAB
    34098444U,	// EXTRWrri
    34098444U,	// EXTRXrri
    11820U,	// EXTv16i8
    3224907308U,	// EXTv8i8
    0U,	// F128CSEL
    34096537U,	// FABD16
    34096537U,	// FABD32
    34096537U,	// FABD64
    1074800025U,	// FABDv2f32
    1075324313U,	// FABDv2f64
    2149590425U,	// FABDv4f16
    2150114713U,	// FABDv4f32
    3224380825U,	// FABDv8f16
    1107840325U,	// FABSDr
    1107840325U,	// FABSHr
    1107840325U,	// FABSSr
    2148543813U,	// FABSv2f32
    3222809925U,	// FABSv2f64
    2108741U,	// FABSv4f16
    1076374853U,	// FABSv4f32
    2150640965U,	// FABSv8f16
    34096654U,	// FACGE16
    34096654U,	// FACGE32
    34096654U,	// FACGE64
    1074800142U,	// FACGEv2f32
    1075324430U,	// FACGEv2f64
    2149590542U,	// FACGEv4f16
    2150114830U,	// FACGEv4f32
    3224380942U,	// FACGEv8f16
    34098652U,	// FACGT16
    34098652U,	// FACGT32
    34098652U,	// FACGT64
    1074802140U,	// FACGTv2f32
    1075326428U,	// FACGTv2f64
    2149592540U,	// FACGTv4f16
    2150116828U,	// FACGTv4f32
    3224382940U,	// FACGTv8f16
    34096576U,	// FADDDrr
    34096576U,	// FADDHrr
    1074801577U,	// FADDPv2f32
    1075325865U,	// FADDPv2f64
    1074285481U,	// FADDPv2i16p
    2148027305U,	// FADDPv2i32p
    3221769129U,	// FADDPv2i64p
    2149591977U,	// FADDPv4f16
    2150116265U,	// FADDPv4f32
    3224382377U,	// FADDPv8f16
    34096576U,	// FADDSrr
    1074800064U,	// FADDv2f32
    1075324352U,	// FADDv2f64
    2149590464U,	// FADDv4f16
    2150114752U,	// FADDv4f32
    3224380864U,	// FADDv8f16
    1074800050U,	// FCADDv2f32
    1075324338U,	// FCADDv2f64
    2149590450U,	// FCADDv4f16
    2150114738U,	// FCADDv4f32
    3224380850U,	// FCADDv8f16
    34098133U,	// FCCMPDrr
    34096691U,	// FCCMPEDrr
    34096691U,	// FCCMPEHrr
    34096691U,	// FCCMPESrr
    34098133U,	// FCCMPHrr
    34098133U,	// FCCMPSrr
    34098279U,	// FCMEQ16
    34098279U,	// FCMEQ32
    34098279U,	// FCMEQ64
    2181581927U,	// FCMEQv1i16rz
    2181581927U,	// FCMEQv1i32rz
    2181581927U,	// FCMEQv1i64rz
    1074801767U,	// FCMEQv2f32
    1075326055U,	// FCMEQv2f64
    3222285415U,	// FCMEQv2i32rz
    1584231U,	// FCMEQv2i64rz
    2149592167U,	// FCMEQv4f16
    2150116455U,	// FCMEQv4f32
    1075850343U,	// FCMEQv4i16rz
    2150116455U,	// FCMEQv4i32rz
    3224382567U,	// FCMEQv8f16
    3224382567U,	// FCMEQv8i16rz
    34096661U,	// FCMGE16
    34096661U,	// FCMGE32
    34096661U,	// FCMGE64
    2181580309U,	// FCMGEv1i16rz
    2181580309U,	// FCMGEv1i32rz
    2181580309U,	// FCMGEv1i64rz
    1074800149U,	// FCMGEv2f32
    1075324437U,	// FCMGEv2f64
    3222283797U,	// FCMGEv2i32rz
    1582613U,	// FCMGEv2i64rz
    2149590549U,	// FCMGEv4f16
    2150114837U,	// FCMGEv4f32
    1075848725U,	// FCMGEv4i16rz
    2150114837U,	// FCMGEv4i32rz
    3224380949U,	// FCMGEv8f16
    3224380949U,	// FCMGEv8i16rz
    34098659U,	// FCMGT16
    34098659U,	// FCMGT32
    34098659U,	// FCMGT64
    2181582307U,	// FCMGTv1i16rz
    2181582307U,	// FCMGTv1i32rz
    2181582307U,	// FCMGTv1i64rz
    1074802147U,	// FCMGTv2f32
    1075326435U,	// FCMGTv2f64
    3222285795U,	// FCMGTv2i32rz
    1584611U,	// FCMGTv2i64rz
    2149592547U,	// FCMGTv4f16
    2150116835U,	// FCMGTv4f32
    1075850723U,	// FCMGTv4i16rz
    2150116835U,	// FCMGTv4i32rz
    3224382947U,	// FCMGTv8f16
    3224382947U,	// FCMGTv8i16rz
    1141924409U,	// FCMLAv2f32
    1142448697U,	// FCMLAv2f64
    2216714809U,	// FCMLAv4f16
    2216714809U,	// FCMLAv4f16_indexed
    2217239097U,	// FCMLAv4f32
    2217239097U,	// FCMLAv4f32_indexed
    3291505209U,	// FCMLAv8f16
    3291505209U,	// FCMLAv8f16_indexed
    2181580316U,	// FCMLEv1i16rz
    2181580316U,	// FCMLEv1i32rz
    2181580316U,	// FCMLEv1i64rz
    3222283804U,	// FCMLEv2i32rz
    1582620U,	// FCMLEv2i64rz
    1075848732U,	// FCMLEv4i16rz
    2150114844U,	// FCMLEv4i32rz
    3224380956U,	// FCMLEv8i16rz
    2181582325U,	// FCMLTv1i16rz
    2181582325U,	// FCMLTv1i32rz
    2181582325U,	// FCMLTv1i64rz
    3222285813U,	// FCMLTv2i32rz
    1584629U,	// FCMLTv2i64rz
    1075850741U,	// FCMLTv4i16rz
    2150116853U,	// FCMLTv4i32rz
    3224382965U,	// FCMLTv8i16rz
    4738012U,	// FCMPDri
    1107839964U,	// FCMPDrr
    4736571U,	// FCMPEDri
    1107838523U,	// FCMPEDrr
    4736571U,	// FCMPEHri
    1107838523U,	// FCMPEHrr
    4736571U,	// FCMPESri
    1107838523U,	// FCMPESrr
    4738012U,	// FCMPHri
    1107839964U,	// FCMPHrr
    4738012U,	// FCMPSri
    1107839964U,	// FCMPSrr
    34097622U,	// FCSELDrrr
    34097622U,	// FCSELHrrr
    34097622U,	// FCSELSrrr
    1107840317U,	// FCVTASUWDr
    1107840317U,	// FCVTASUWHr
    1107840317U,	// FCVTASUWSr
    1107840317U,	// FCVTASUXDr
    1107840317U,	// FCVTASUXHr
    1107840317U,	// FCVTASUXSr
    1107840317U,	// FCVTASv1f16
    1107840317U,	// FCVTASv1i32
    1107840317U,	// FCVTASv1i64
    2148543805U,	// FCVTASv2f32
    3222809917U,	// FCVTASv2f64
    2108733U,	// FCVTASv4f16
    1076374845U,	// FCVTASv4f32
    2150640957U,	// FCVTASv8f16
    1107840561U,	// FCVTAUUWDr
    1107840561U,	// FCVTAUUWHr
    1107840561U,	// FCVTAUUWSr
    1107840561U,	// FCVTAUUXDr
    1107840561U,	// FCVTAUUXHr
    1107840561U,	// FCVTAUUXSr
    1107840561U,	// FCVTAUv1f16
    1107840561U,	// FCVTAUv1i32
    1107840561U,	// FCVTAUv1i64
    2148544049U,	// FCVTAUv2f32
    3222810161U,	// FCVTAUv2f64
    2108977U,	// FCVTAUv4f16
    1076375089U,	// FCVTAUv4f32
    2150641201U,	// FCVTAUv8f16
    1107840550U,	// FCVTDHr
    1107840550U,	// FCVTDSr
    1107840550U,	// FCVTHDr
    1107840550U,	// FCVTHSr
    2149067424U,	// FCVTLv2i32
    2632352U,	// FCVTLv4i16
    1075323144U,	// FCVTLv4i32
    2150113544U,	// FCVTLv8i16
    1107840391U,	// FCVTMSUWDr
    1107840391U,	// FCVTMSUWHr
    1107840391U,	// FCVTMSUWSr
    1107840391U,	// FCVTMSUXDr
    1107840391U,	// FCVTMSUXHr
    1107840391U,	// FCVTMSUXSr
    1107840391U,	// FCVTMSv1f16
    1107840391U,	// FCVTMSv1i32
    1107840391U,	// FCVTMSv1i64
    2148543879U,	// FCVTMSv2f32
    3222809991U,	// FCVTMSv2f64
    2108807U,	// FCVTMSv4f16
    1076374919U,	// FCVTMSv4f32
    2150641031U,	// FCVTMSv8f16
    1107840577U,	// FCVTMUUWDr
    1107840577U,	// FCVTMUUWHr
    1107840577U,	// FCVTMUUWSr
    1107840577U,	// FCVTMUUXDr
    1107840577U,	// FCVTMUUXHr
    1107840577U,	// FCVTMUUXSr
    1107840577U,	// FCVTMUv1f16
    1107840577U,	// FCVTMUv1i32
    1107840577U,	// FCVTMUv1i64
    2148544065U,	// FCVTMUv2f32
    3222810177U,	// FCVTMUv2f64
    2108993U,	// FCVTMUv4f16
    1076375105U,	// FCVTMUv4f32
    2150641217U,	// FCVTMUv8f16
    1107840404U,	// FCVTNSUWDr
    1107840404U,	// FCVTNSUWHr
    1107840404U,	// FCVTNSUWSr
    1107840404U,	// FCVTNSUXDr
    1107840404U,	// FCVTNSUXHr
    1107840404U,	// FCVTNSUXSr
    1107840404U,	// FCVTNSv1f16
    1107840404U,	// FCVTNSv1i32
    1107840404U,	// FCVTNSv1i64
    2148543892U,	// FCVTNSv2f32
    3222810004U,	// FCVTNSv2f64
    2108820U,	// FCVTNSv4f16
    1076374932U,	// FCVTNSv4f32
    2150641044U,	// FCVTNSv8f16
    1107840585U,	// FCVTNUUWDr
    1107840585U,	// FCVTNUUWHr
    1107840585U,	// FCVTNUUWSr
    1107840585U,	// FCVTNUUXDr
    1107840585U,	// FCVTNUUXHr
    1107840585U,	// FCVTNUUXSr
    1107840585U,	// FCVTNUv1f16
    1107840585U,	// FCVTNUv1i32
    1107840585U,	// FCVTNUv1i64
    2148544073U,	// FCVTNUv2f32
    3222810185U,	// FCVTNUv2f64
    2109001U,	// FCVTNUv4f16
    1076375113U,	// FCVTNUv4f32
    2150641225U,	// FCVTNUv8f16
    3222285156U,	// FCVTNv2i32
    1075850084U,	// FCVTNv4i16
    3290980686U,	// FCVTNv4i32
    1144021326U,	// FCVTNv8i16
    1107840420U,	// FCVTPSUWDr
    1107840420U,	// FCVTPSUWHr
    1107840420U,	// FCVTPSUWSr
    1107840420U,	// FCVTPSUXDr
    1107840420U,	// FCVTPSUXHr
    1107840420U,	// FCVTPSUXSr
    1107840420U,	// FCVTPSv1f16
    1107840420U,	// FCVTPSv1i32
    1107840420U,	// FCVTPSv1i64
    2148543908U,	// FCVTPSv2f32
    3222810020U,	// FCVTPSv2f64
    2108836U,	// FCVTPSv4f16
    1076374948U,	// FCVTPSv4f32
    2150641060U,	// FCVTPSv8f16
    1107840593U,	// FCVTPUUWDr
    1107840593U,	// FCVTPUUWHr
    1107840593U,	// FCVTPUUWSr
    1107840593U,	// FCVTPUUXDr
    1107840593U,	// FCVTPUUXHr
    1107840593U,	// FCVTPUUXSr
    1107840593U,	// FCVTPUv1f16
    1107840593U,	// FCVTPUv1i32
    1107840593U,	// FCVTPUv1i64
    2148544081U,	// FCVTPUv2f32
    3222810193U,	// FCVTPUv2f64
    2109009U,	// FCVTPUv4f16
    1076375121U,	// FCVTPUv4f32
    2150641233U,	// FCVTPUv8f16
    1107840550U,	// FCVTSDr
    1107840550U,	// FCVTSHr
    1107839898U,	// FCVTXNv1i64
    3222285210U,	// FCVTXNv2f32
    3290980740U,	// FCVTXNv4f32
    34098623U,	// FCVTZSSWDri
    34098623U,	// FCVTZSSWHri
    34098623U,	// FCVTZSSWSri
    34098623U,	// FCVTZSSXDri
    34098623U,	// FCVTZSSXHri
    34098623U,	// FCVTZSSXSri
    1107840447U,	// FCVTZSUWDr
    1107840447U,	// FCVTZSUWHr
    1107840447U,	// FCVTZSUWSr
    1107840447U,	// FCVTZSUXDr
    1107840447U,	// FCVTZSUXHr
    1107840447U,	// FCVTZSUXSr
    34098623U,	// FCVTZSd
    34098623U,	// FCVTZSh
    34098623U,	// FCVTZSs
    1107840447U,	// FCVTZSv1f16
    1107840447U,	// FCVTZSv1i32
    1107840447U,	// FCVTZSv1i64
    2148543935U,	// FCVTZSv2f32
    3222810047U,	// FCVTZSv2f64
    1074802111U,	// FCVTZSv2i32_shift
    1075326399U,	// FCVTZSv2i64_shift
    2108863U,	// FCVTZSv4f16
    1076374975U,	// FCVTZSv4f32
    2149592511U,	// FCVTZSv4i16_shift
    2150116799U,	// FCVTZSv4i32_shift
    2150641087U,	// FCVTZSv8f16
    3224382911U,	// FCVTZSv8i16_shift
    34098777U,	// FCVTZUSWDri
    34098777U,	// FCVTZUSWHri
    34098777U,	// FCVTZUSWSri
    34098777U,	// FCVTZUSXDri
    34098777U,	// FCVTZUSXHri
    34098777U,	// FCVTZUSXSri
    1107840601U,	// FCVTZUUWDr
    1107840601U,	// FCVTZUUWHr
    1107840601U,	// FCVTZUUWSr
    1107840601U,	// FCVTZUUXDr
    1107840601U,	// FCVTZUUXHr
    1107840601U,	// FCVTZUUXSr
    34098777U,	// FCVTZUd
    34098777U,	// FCVTZUh
    34098777U,	// FCVTZUs
    1107840601U,	// FCVTZUv1f16
    1107840601U,	// FCVTZUv1i32
    1107840601U,	// FCVTZUv1i64
    2148544089U,	// FCVTZUv2f32
    3222810201U,	// FCVTZUv2f64
    1074802265U,	// FCVTZUv2i32_shift
    1075326553U,	// FCVTZUv2i64_shift
    2109017U,	// FCVTZUv4f16
    1076375129U,	// FCVTZUv4f32
    2149592665U,	// FCVTZUv4i16_shift
    2150116953U,	// FCVTZUv4i32_shift
    2150641241U,	// FCVTZUv8f16
    3224383065U,	// FCVTZUv8i16_shift
    34098796U,	// FDIVDrr
    34098796U,	// FDIVHrr
    34098796U,	// FDIVSrr
    1074802284U,	// FDIVv2f32
    1075326572U,	// FDIVv2f64
    2149592684U,	// FDIVv4f16
    2150116972U,	// FDIVv4f32
    3224383084U,	// FDIVv8f16
    1107840455U,	// FJCVTZS
    34096612U,	// FMADDDrrr
    34096612U,	// FMADDHrrr
    34096612U,	// FMADDSrrr
    34098998U,	// FMAXDrr
    34098998U,	// FMAXHrr
    34097901U,	// FMAXNMDrr
    34097901U,	// FMAXNMHrr
    1074801643U,	// FMAXNMPv2f32
    1075325931U,	// FMAXNMPv2f64
    1074285547U,	// FMAXNMPv2i16p
    2148027371U,	// FMAXNMPv2i32p
    3221769195U,	// FMAXNMPv2i64p
    2149592043U,	// FMAXNMPv4f16
    2150116331U,	// FMAXNMPv4f32
    3224382443U,	// FMAXNMPv8f16
    34097901U,	// FMAXNMSrr
    544407U,	// FMAXNMVv4i16v
    1074286231U,	// FMAXNMVv4i32v
    2148028055U,	// FMAXNMVv8i16v
    1074801389U,	// FMAXNMv2f32
    1075325677U,	// FMAXNMv2f64
    2149591789U,	// FMAXNMv4f16
    2150116077U,	// FMAXNMv4f32
    3224382189U,	// FMAXNMv8f16
    1074801727U,	// FMAXPv2f32
    1075326015U,	// FMAXPv2f64
    1074285631U,	// FMAXPv2i16p
    2148027455U,	// FMAXPv2i32p
    3221769279U,	// FMAXPv2i64p
    2149592127U,	// FMAXPv4f16
    2150116415U,	// FMAXPv4f32
    3224382527U,	// FMAXPv8f16
    34098998U,	// FMAXSrr
    544462U,	// FMAXVv4i16v
    1074286286U,	// FMAXVv4i32v
    2148028110U,	// FMAXVv8i16v
    1074802486U,	// FMAXv2f32
    1075326774U,	// FMAXv2f64
    2149592886U,	// FMAXv4f16
    2150117174U,	// FMAXv4f32
    3224383286U,	// FMAXv8f16
    34097940U,	// FMINDrr
    34097940U,	// FMINHrr
    34097893U,	// FMINNMDrr
    34097893U,	// FMINNMHrr
    1074801634U,	// FMINNMPv2f32
    1075325922U,	// FMINNMPv2f64
    1074285538U,	// FMINNMPv2i16p
    2148027362U,	// FMINNMPv2i32p
    3221769186U,	// FMINNMPv2i64p
    2149592034U,	// FMINNMPv4f16
    2150116322U,	// FMINNMPv4f32
    3224382434U,	// FMINNMPv8f16
    34097893U,	// FMINNMSrr
    544398U,	// FMINNMVv4i16v
    1074286222U,	// FMINNMVv4i32v
    2148028046U,	// FMINNMVv8i16v
    1074801381U,	// FMINNMv2f32
    1075325669U,	// FMINNMv2f64
    2149591781U,	// FMINNMv4f16
    2150116069U,	// FMINNMv4f32
    3224382181U,	// FMINNMv8f16
    1074801658U,	// FMINPv2f32
    1075325946U,	// FMINPv2f64
    1074285562U,	// FMINPv2i16p
    2148027386U,	// FMINPv2i32p
    3221769210U,	// FMINPv2i64p
    2149592058U,	// FMINPv4f16
    2150116346U,	// FMINPv4f32
    3224382458U,	// FMINPv8f16
    34097940U,	// FMINSrr
    544416U,	// FMINVv4i16v
    1074286240U,	// FMINVv4i32v
    2148028064U,	// FMINVv8i16v
    1074801428U,	// FMINv2f32
    1075325716U,	// FMINv2f64
    2149591828U,	// FMINv4f16
    2150116116U,	// FMINv4f32
    3224382228U,	// FMINv8f16
    134832704U,	// FMLAv1i16_indexed
    134832704U,	// FMLAv1i32_indexed
    134832704U,	// FMLAv1i64_indexed
    1141924416U,	// FMLAv2f32
    1142448704U,	// FMLAv2f64
    1141924416U,	// FMLAv2i32_indexed
    1142448704U,	// FMLAv2i64_indexed
    2216714816U,	// FMLAv4f16
    2217239104U,	// FMLAv4f32
    2216714816U,	// FMLAv4i16_indexed
    2217239104U,	// FMLAv4i32_indexed
    3291505216U,	// FMLAv8f16
    3291505216U,	// FMLAv8i16_indexed
    134835585U,	// FMLSv1i16_indexed
    134835585U,	// FMLSv1i32_indexed
    134835585U,	// FMLSv1i64_indexed
    1141927297U,	// FMLSv2f32
    1142451585U,	// FMLSv2f64
    1141927297U,	// FMLSv2i32_indexed
    1142451585U,	// FMLSv2i64_indexed
    2216717697U,	// FMLSv4f16
    2217241985U,	// FMLSv4f32
    2216717697U,	// FMLSv4i16_indexed
    2217241985U,	// FMLSv4i32_indexed
    3291508097U,	// FMLSv8f16
    3291508097U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    3221769916U,	// FMOVDXHighr
    1107840700U,	// FMOVDXr
    235425468U,	// FMOVDi
    1107840700U,	// FMOVDr
    0U,	// FMOVH0
    1107840700U,	// FMOVHWr
    1107840700U,	// FMOVHXr
    235425468U,	// FMOVHi
    1107840700U,	// FMOVHr
    0U,	// FMOVS0
    1107840700U,	// FMOVSWr
    235425468U,	// FMOVSi
    1107840700U,	// FMOVSr
    1107840700U,	// FMOVWHr
    1107840700U,	// FMOVWSr
    1112551100U,	// FMOVXDHighr
    1107840700U,	// FMOVXDr
    1107840700U,	// FMOVXHr
    235941564U,	// FMOVv2f32_ns
    236465852U,	// FMOVv2f64_ns
    236990140U,	// FMOVv4f16_ns
    237514428U,	// FMOVv4f32_ns
    238038716U,	// FMOVv8f16_ns
    34096404U,	// FMSUBDrrr
    34096404U,	// FMSUBHrrr
    34096404U,	// FMSUBSrrr
    34097831U,	// FMULDrr
    34097831U,	// FMULHrr
    34097831U,	// FMULSrr
    34099041U,	// FMULX16
    34099041U,	// FMULX32
    34099041U,	// FMULX64
    34099041U,	// FMULXv1i16_indexed
    34099041U,	// FMULXv1i32_indexed
    34099041U,	// FMULXv1i64_indexed
    1074802529U,	// FMULXv2f32
    1075326817U,	// FMULXv2f64
    1074802529U,	// FMULXv2i32_indexed
    1075326817U,	// FMULXv2i64_indexed
    2149592929U,	// FMULXv4f16
    2150117217U,	// FMULXv4f32
    2149592929U,	// FMULXv4i16_indexed
    2150117217U,	// FMULXv4i32_indexed
    3224383329U,	// FMULXv8f16
    3224383329U,	// FMULXv8i16_indexed
    34097831U,	// FMULv1i16_indexed
    34097831U,	// FMULv1i32_indexed
    34097831U,	// FMULv1i64_indexed
    1074801319U,	// FMULv2f32
    1075325607U,	// FMULv2f64
    1074801319U,	// FMULv2i32_indexed
    1075325607U,	// FMULv2i64_indexed
    2149591719U,	// FMULv4f16
    2150116007U,	// FMULv4f32
    2149591719U,	// FMULv4i16_indexed
    2150116007U,	// FMULv4i32_indexed
    3224382119U,	// FMULv8f16
    3224382119U,	// FMULv8i16_indexed
    1107838573U,	// FNEGDr
    1107838573U,	// FNEGHr
    1107838573U,	// FNEGSr
    2148542061U,	// FNEGv2f32
    3222808173U,	// FNEGv2f64
    2106989U,	// FNEGv4f16
    1076373101U,	// FNEGv4f32
    2150639213U,	// FNEGv8f16
    34096619U,	// FNMADDDrrr
    34096619U,	// FNMADDHrrr
    34096619U,	// FNMADDSrrr
    34096411U,	// FNMSUBDrrr
    34096411U,	// FNMSUBHrrr
    34096411U,	// FNMSUBSrrr
    34097837U,	// FNMULDrr
    34097837U,	// FNMULHrr
    34097837U,	// FNMULSrr
    1107838499U,	// FRECPEv1f16
    1107838499U,	// FRECPEv1i32
    1107838499U,	// FRECPEv1i64
    2148541987U,	// FRECPEv2f32
    3222808099U,	// FRECPEv2f64
    2106915U,	// FRECPEv4f16
    1076373027U,	// FRECPEv4f32
    2150639139U,	// FRECPEv8f16
    34098588U,	// FRECPS16
    34098588U,	// FRECPS32
    34098588U,	// FRECPS64
    1074802076U,	// FRECPSv2f32
    1075326364U,	// FRECPSv2f64
    2149592476U,	// FRECPSv4f16
    2150116764U,	// FRECPSv4f32
    3224382876U,	// FRECPSv8f16
    1107840872U,	// FRECPXv1f16
    1107840872U,	// FRECPXv1i32
    1107840872U,	// FRECPXv1i64
    1107837597U,	// FRINTADr
    1107837597U,	// FRINTAHr
    1107837597U,	// FRINTASr
    2148541085U,	// FRINTAv2f32
    3222807197U,	// FRINTAv2f64
    2106013U,	// FRINTAv4f16
    1076372125U,	// FRINTAv4f32
    2150638237U,	// FRINTAv8f16
    1107839199U,	// FRINTIDr
    1107839199U,	// FRINTIHr
    1107839199U,	// FRINTISr
    2148542687U,	// FRINTIv2f32
    3222808799U,	// FRINTIv2f64
    2107615U,	// FRINTIv4f16
    1076373727U,	// FRINTIv4f32
    2150639839U,	// FRINTIv8f16
    1107839733U,	// FRINTMDr
    1107839733U,	// FRINTMHr
    1107839733U,	// FRINTMSr
    2148543221U,	// FRINTMv2f32
    3222809333U,	// FRINTMv2f64
    2108149U,	// FRINTMv4f16
    1076374261U,	// FRINTMv4f32
    2150640373U,	// FRINTMv8f16
    1107839836U,	// FRINTNDr
    1107839836U,	// FRINTNHr
    1107839836U,	// FRINTNSr
    2148543324U,	// FRINTNv2f32
    3222809436U,	// FRINTNv2f64
    2108252U,	// FRINTNv4f16
    1076374364U,	// FRINTNv4f32
    2150640476U,	// FRINTNv8f16
    1107840033U,	// FRINTPDr
    1107840033U,	// FRINTPHr
    1107840033U,	// FRINTPSr
    2148543521U,	// FRINTPv2f32
    3222809633U,	// FRINTPv2f64
    2108449U,	// FRINTPv4f16
    1076374561U,	// FRINTPv4f32
    2150640673U,	// FRINTPv8f16
    1107840880U,	// FRINTXDr
    1107840880U,	// FRINTXHr
    1107840880U,	// FRINTXSr
    2148544368U,	// FRINTXv2f32
    3222810480U,	// FRINTXv2f64
    2109296U,	// FRINTXv4f16
    1076375408U,	// FRINTXv4f32
    2150641520U,	// FRINTXv8f16
    1107840945U,	// FRINTZDr
    1107840945U,	// FRINTZHr
    1107840945U,	// FRINTZSr
    2148544433U,	// FRINTZv2f32
    3222810545U,	// FRINTZv2f64
    2109361U,	// FRINTZv4f16
    1076375473U,	// FRINTZv4f32
    2150641585U,	// FRINTZv8f16
    1107838536U,	// FRSQRTEv1f16
    1107838536U,	// FRSQRTEv1i32
    1107838536U,	// FRSQRTEv1i64
    2148542024U,	// FRSQRTEv2f32
    3222808136U,	// FRSQRTEv2f64
    2106952U,	// FRSQRTEv4f16
    1076373064U,	// FRSQRTEv4f32
    2150639176U,	// FRSQRTEv8f16
    34098609U,	// FRSQRTS16
    34098609U,	// FRSQRTS32
    34098609U,	// FRSQRTS64
    1074802097U,	// FRSQRTSv2f32
    1075326385U,	// FRSQRTSv2f64
    2149592497U,	// FRSQRTSv4f16
    2150116785U,	// FRSQRTSv4f32
    3224382897U,	// FRSQRTSv8f16
    1107840536U,	// FSQRTDr
    1107840536U,	// FSQRTHr
    1107840536U,	// FSQRTSr
    2148544024U,	// FSQRTv2f32
    3222810136U,	// FSQRTv2f64
    2108952U,	// FSQRTv4f16
    1076375064U,	// FSQRTv4f32
    2150641176U,	// FSQRTv8f16
    34096384U,	// FSUBDrr
    34096384U,	// FSUBHrr
    34096384U,	// FSUBSrr
    1074799872U,	// FSUBv2f32
    1075324160U,	// FSUBv2f64
    2149590272U,	// FSUBv4f16
    2150114560U,	// FSUBv4f32
    3224380672U,	// FSUBv8f16
    126465U,	// HINT
    77296U,	// HLT
    75151U,	// HVC
    274230671U,	// INSvi16gpr
    1381526927U,	// INSvi16lane
    274754959U,	// INSvi32gpr
    2455793039U,	// INSvi32lane
    273706383U,	// INSvi64gpr
    3528486287U,	// INSvi64lane
    275279247U,	// INSvi8gpr
    308833679U,	// INSvi8lane
    115932U,	// ISB
    131093U,	// LD1Fourv16b
    7479317U,	// LD1Fourv16b_POST
    147477U,	// LD1Fourv1d
    8019989U,	// LD1Fourv1d_POST
    163861U,	// LD1Fourv2d
    7512085U,	// LD1Fourv2d_POST
    180245U,	// LD1Fourv2s
    8052757U,	// LD1Fourv2s_POST
    196629U,	// LD1Fourv4h
    8069141U,	// LD1Fourv4h_POST
    213013U,	// LD1Fourv4s
    7561237U,	// LD1Fourv4s_POST
    229397U,	// LD1Fourv8b
    8101909U,	// LD1Fourv8b_POST
    245781U,	// LD1Fourv8h
    7594005U,	// LD1Fourv8h_POST
    131093U,	// LD1Onev16b
    8527893U,	// LD1Onev16b_POST
    147477U,	// LD1Onev1d
    9068565U,	// LD1Onev1d_POST
    163861U,	// LD1Onev2d
    8560661U,	// LD1Onev2d_POST
    180245U,	// LD1Onev2s
    9101333U,	// LD1Onev2s_POST
    196629U,	// LD1Onev4h
    9117717U,	// LD1Onev4h_POST
    213013U,	// LD1Onev4s
    8609813U,	// LD1Onev4s_POST
    229397U,	// LD1Onev8b
    9150485U,	// LD1Onev8b_POST
    245781U,	// LD1Onev8h
    8642581U,	// LD1Onev8h_POST
    134254U,	// LD1Rv16b
    9579630U,	// LD1Rv16b_POST
    150638U,	// LD1Rv1d
    9071726U,	// LD1Rv1d_POST
    167022U,	// LD1Rv2d
    9088110U,	// LD1Rv2d_POST
    183406U,	// LD1Rv2s
    10153070U,	// LD1Rv2s_POST
    199790U,	// LD1Rv4h
    10693742U,	// LD1Rv4h_POST
    216174U,	// LD1Rv4s
    10185838U,	// LD1Rv4s_POST
    232558U,	// LD1Rv8b
    9677934U,	// LD1Rv8b_POST
    248942U,	// LD1Rv8h
    10742894U,	// LD1Rv8h_POST
    131093U,	// LD1Threev16b
    11149333U,	// LD1Threev16b_POST
    147477U,	// LD1Threev1d
    11690005U,	// LD1Threev1d_POST
    163861U,	// LD1Threev2d
    11182101U,	// LD1Threev2d_POST
    180245U,	// LD1Threev2s
    11722773U,	// LD1Threev2s_POST
    196629U,	// LD1Threev4h
    11739157U,	// LD1Threev4h_POST
    213013U,	// LD1Threev4s
    11231253U,	// LD1Threev4s_POST
    229397U,	// LD1Threev8b
    11771925U,	// LD1Threev8b_POST
    245781U,	// LD1Threev8h
    11264021U,	// LD1Threev8h_POST
    131093U,	// LD1Twov16b
    8003605U,	// LD1Twov16b_POST
    147477U,	// LD1Twov1d
    8544277U,	// LD1Twov1d_POST
    163861U,	// LD1Twov2d
    8036373U,	// LD1Twov2d_POST
    180245U,	// LD1Twov2s
    8577045U,	// LD1Twov2s_POST
    196629U,	// LD1Twov4h
    8593429U,	// LD1Twov4h_POST
    213013U,	// LD1Twov4s
    8085525U,	// LD1Twov4s_POST
    229397U,	// LD1Twov8b
    8626197U,	// LD1Twov8b_POST
    245781U,	// LD1Twov8h
    8118293U,	// LD1Twov8h_POST
    12320789U,	// LD1i16
    12853269U,	// LD1i16_POST
    12337173U,	// LD1i32
    13393941U,	// LD1i32_POST
    12353557U,	// LD1i64
    13934613U,	// LD1i64_POST
    12369941U,	// LD1i8
    14475285U,	// LD1i8_POST
    134260U,	// LD2Rv16b
    10628212U,	// LD2Rv16b_POST
    150644U,	// LD2Rv1d
    8547444U,	// LD2Rv1d_POST
    167028U,	// LD2Rv2d
    8563828U,	// LD2Rv2d_POST
    183412U,	// LD2Rv2s
    9104500U,	// LD2Rv2s_POST
    199796U,	// LD2Rv4h
    10169460U,	// LD2Rv4h_POST
    216180U,	// LD2Rv4s
    9137268U,	// LD2Rv4s_POST
    232564U,	// LD2Rv8b
    10726516U,	// LD2Rv8b_POST
    248948U,	// LD2Rv8h
    10218612U,	// LD2Rv8h_POST
    131155U,	// LD2Twov16b
    8003667U,	// LD2Twov16b_POST
    163923U,	// LD2Twov2d
    8036435U,	// LD2Twov2d_POST
    180307U,	// LD2Twov2s
    8577107U,	// LD2Twov2s_POST
    196691U,	// LD2Twov4h
    8593491U,	// LD2Twov4h_POST
    213075U,	// LD2Twov4s
    8085587U,	// LD2Twov4s_POST
    229459U,	// LD2Twov8b
    8626259U,	// LD2Twov8b_POST
    245843U,	// LD2Twov8h
    8118355U,	// LD2Twov8h_POST
    12320851U,	// LD2i16
    13377619U,	// LD2i16_POST
    12337235U,	// LD2i32
    13918291U,	// LD2i32_POST
    12353619U,	// LD2i64
    14983251U,	// LD2i64_POST
    12370003U,	// LD2i8
    12902483U,	// LD2i8_POST
    134266U,	// LD3Rv16b
    15346810U,	// LD3Rv16b_POST
    150650U,	// LD3Rv1d
    11693178U,	// LD3Rv1d_POST
    167034U,	// LD3Rv2d
    11709562U,	// LD3Rv2d_POST
    183418U,	// LD3Rv2s
    15920250U,	// LD3Rv2s_POST
    199802U,	// LD3Rv4h
    16460922U,	// LD3Rv4h_POST
    216186U,	// LD3Rv4s
    15953018U,	// LD3Rv4s_POST
    232570U,	// LD3Rv8b
    15445114U,	// LD3Rv8b_POST
    248954U,	// LD3Rv8h
    16510074U,	// LD3Rv8h_POST
    131525U,	// LD3Threev16b
    11149765U,	// LD3Threev16b_POST
    164293U,	// LD3Threev2d
    11182533U,	// LD3Threev2d_POST
    180677U,	// LD3Threev2s
    11723205U,	// LD3Threev2s_POST
    197061U,	// LD3Threev4h
    11739589U,	// LD3Threev4h_POST
    213445U,	// LD3Threev4s
    11231685U,	// LD3Threev4s_POST
    229829U,	// LD3Threev8b
    11772357U,	// LD3Threev8b_POST
    246213U,	// LD3Threev8h
    11264453U,	// LD3Threev8h_POST
    12321221U,	// LD3i16
    17048005U,	// LD3i16_POST
    12337605U,	// LD3i32
    17588677U,	// LD3i32_POST
    12353989U,	// LD3i64
    18129349U,	// LD3i64_POST
    12370373U,	// LD3i8
    18670021U,	// LD3i8_POST
    131549U,	// LD4Fourv16b
    7479773U,	// LD4Fourv16b_POST
    164317U,	// LD4Fourv2d
    7512541U,	// LD4Fourv2d_POST
    180701U,	// LD4Fourv2s
    8053213U,	// LD4Fourv2s_POST
    197085U,	// LD4Fourv4h
    8069597U,	// LD4Fourv4h_POST
    213469U,	// LD4Fourv4s
    7561693U,	// LD4Fourv4s_POST
    229853U,	// LD4Fourv8b
    8102365U,	// LD4Fourv8b_POST
    246237U,	// LD4Fourv8h
    7594461U,	// LD4Fourv8h_POST
    134272U,	// LD4Rv16b
    10103936U,	// LD4Rv16b_POST
    150656U,	// LD4Rv1d
    8023168U,	// LD4Rv1d_POST
    167040U,	// LD4Rv2d
    8039552U,	// LD4Rv2d_POST
    183424U,	// LD4Rv2s
    8580224U,	// LD4Rv2s_POST
    199808U,	// LD4Rv4h
    9120896U,	// LD4Rv4h_POST
    216192U,	// LD4Rv4s
    8612992U,	// LD4Rv4s_POST
    232576U,	// LD4Rv8b
    10202240U,	// LD4Rv8b_POST
    248960U,	// LD4Rv8h
    9170048U,	// LD4Rv8h_POST
    12321245U,	// LD4i16
    13902301U,	// LD4i16_POST
    12337629U,	// LD4i32
    14967261U,	// LD4i32_POST
    12354013U,	// LD4i64
    19177949U,	// LD4i64_POST
    12370397U,	// LD4i8
    13427165U,	// LD4i8_POST
    336159455U,	// LDADDAB
    336160409U,	// LDADDAH
    336159610U,	// LDADDALB
    336160526U,	// LDADDALH
    336161030U,	// LDADDALW
    336161030U,	// LDADDALX
    336159253U,	// LDADDAW
    336159253U,	// LDADDAX
    336159581U,	// LDADDB
    336160518U,	// LDADDH
    336159710U,	// LDADDLB
    336160626U,	// LDADDLH
    336161200U,	// LDADDLW
    336161200U,	// LDADDLX
    336160185U,	// LDADDW
    336160185U,	// LDADDX
    52970633U,	// LDAPRB
    52971577U,	// LDAPRH
    52972768U,	// LDAPRW
    52972768U,	// LDAPRX
    52970581U,	// LDARB
    52971525U,	// LDARH
    52972678U,	// LDARW
    52972678U,	// LDARX
    34098232U,	// LDAXPW
    34098232U,	// LDAXPX
    52970675U,	// LDAXRB
    52971619U,	// LDAXRH
    52972830U,	// LDAXRW
    52972830U,	// LDAXRX
    336159511U,	// LDCLRAB
    336160455U,	// LDCLRAH
    336159650U,	// LDCLRALB
    336160566U,	// LDCLRALH
    336161097U,	// LDCLRALW
    336161097U,	// LDCLRALX
    336159333U,	// LDCLRAW
    336159333U,	// LDCLRAX
    336159850U,	// LDCLRB
    336160794U,	// LDCLRH
    336159746U,	// LDCLRLB
    336160662U,	// LDCLRLH
    336161376U,	// LDCLRLW
    336161376U,	// LDCLRLX
    336161984U,	// LDCLRW
    336161984U,	// LDCLRX
    336159520U,	// LDEORAB
    336160464U,	// LDEORAH
    336159660U,	// LDEORALB
    336160576U,	// LDEORALH
    336161106U,	// LDEORALW
    336161106U,	// LDEORALX
    336159341U,	// LDEORAW
    336159341U,	// LDEORAX
    336159873U,	// LDEORB
    336160817U,	// LDEORH
    336159755U,	// LDEORLB
    336160671U,	// LDEORLH
    336161384U,	// LDEORLW
    336161384U,	// LDEORLX
    336162004U,	// LDEORW
    336162004U,	// LDEORX
    52970588U,	// LDLARB
    52971532U,	// LDLARH
    52972684U,	// LDLARW
    52972684U,	// LDLARX
    34098164U,	// LDNPDi
    34098164U,	// LDNPQi
    34098164U,	// LDNPSi
    34098164U,	// LDNPWi
    34098164U,	// LDNPXi
    34098096U,	// LDPDi
    134835120U,	// LDPDpost
    134835120U,	// LDPDpre
    34098096U,	// LDPQi
    134835120U,	// LDPQpost
    134835120U,	// LDPQpre
    34098960U,	// LDPSWi
    134835984U,	// LDPSWpost
    134835984U,	// LDPSWpre
    34098096U,	// LDPSi
    134835120U,	// LDPSpost
    134835120U,	// LDPSpre
    34098096U,	// LDPWi
    134835120U,	// LDPWpost
    134835120U,	// LDPWpre
    34098096U,	// LDPXi
    134835120U,	// LDPXpost
    134835120U,	// LDPXpre
    52969972U,	// LDRAAindexed
    153706996U,	// LDRAAwriteback
    52970249U,	// LDRABindexed
    153707273U,	// LDRABwriteback
    1227449444U,	// LDRBBpost
    153707620U,	// LDRBBpre
    52970596U,	// LDRBBroW
    52970596U,	// LDRBBroX
    52970596U,	// LDRBBui
    1227451548U,	// LDRBpost
    153709724U,	// LDRBpre
    52972700U,	// LDRBroW
    52972700U,	// LDRBroX
    52972700U,	// LDRBui
    201870492U,	// LDRDl
    1227451548U,	// LDRDpost
    153709724U,	// LDRDpre
    52972700U,	// LDRDroW
    52972700U,	// LDRDroX
    52972700U,	// LDRDui
    1227450388U,	// LDRHHpost
    153708564U,	// LDRHHpre
    52971540U,	// LDRHHroW
    52971540U,	// LDRHHroX
    52971540U,	// LDRHHui
    1227451548U,	// LDRHpost
    153709724U,	// LDRHpre
    52972700U,	// LDRHroW
    52972700U,	// LDRHroX
    52972700U,	// LDRHui
    201870492U,	// LDRQl
    1227451548U,	// LDRQpost
    153709724U,	// LDRQpre
    52972700U,	// LDRQroW
    52972700U,	// LDRQroX
    52972700U,	// LDRQui
    1227449569U,	// LDRSBWpost
    153707745U,	// LDRSBWpre
    52970721U,	// LDRSBWroW
    52970721U,	// LDRSBWroX
    52970721U,	// LDRSBWui
    1227449569U,	// LDRSBXpost
    153707745U,	// LDRSBXpre
    52970721U,	// LDRSBXroW
    52970721U,	// LDRSBXroX
    52970721U,	// LDRSBXui
    1227450513U,	// LDRSHWpost
    153708689U,	// LDRSHWpre
    52971665U,	// LDRSHWroW
    52971665U,	// LDRSHWroX
    52971665U,	// LDRSHWui
    1227450513U,	// LDRSHXpost
    153708689U,	// LDRSHXpre
    52971665U,	// LDRSHXroW
    52971665U,	// LDRSHXroX
    52971665U,	// LDRSHXui
    201871127U,	// LDRSWl
    1227452183U,	// LDRSWpost
    153710359U,	// LDRSWpre
    52973335U,	// LDRSWroW
    52973335U,	// LDRSWroX
    52973335U,	// LDRSWui
    201870492U,	// LDRSl
    1227451548U,	// LDRSpost
    153709724U,	// LDRSpre
    52972700U,	// LDRSroW
    52972700U,	// LDRSroX
    52972700U,	// LDRSui
    201870492U,	// LDRWl
    1227451548U,	// LDRWpost
    153709724U,	// LDRWpre
    52972700U,	// LDRWroW
    52972700U,	// LDRWroX
    52972700U,	// LDRWui
    201870492U,	// LDRXl
    1227451548U,	// LDRXpost
    153709724U,	// LDRXpre
    52972700U,	// LDRXroW
    52972700U,	// LDRXroX
    52972700U,	// LDRXui
    336159536U,	// LDSETAB
    336160480U,	// LDSETAH
    336159678U,	// LDSETALB
    336160594U,	// LDSETALH
    336161122U,	// LDSETALW
    336161122U,	// LDSETALX
    336159381U,	// LDSETAW
    336159381U,	// LDSETAX
    336159992U,	// LDSETB
    336160936U,	// LDSETH
    336159771U,	// LDSETLB
    336160687U,	// LDSETLH
    336161432U,	// LDSETLW
    336161432U,	// LDSETLX
    336162261U,	// LDSETW
    336162261U,	// LDSETX
    336159545U,	// LDSMAXAB
    336160489U,	// LDSMAXAH
    336159688U,	// LDSMAXALB
    336160604U,	// LDSMAXALH
    336161131U,	// LDSMAXALW
    336161131U,	// LDSMAXALX
    336159397U,	// LDSMAXAW
    336159397U,	// LDSMAXAX
    336160049U,	// LDSMAXB
    336160944U,	// LDSMAXH
    336159780U,	// LDSMAXLB
    336160729U,	// LDSMAXLH
    336161466U,	// LDSMAXLW
    336161466U,	// LDSMAXLX
    336162620U,	// LDSMAXW
    336162620U,	// LDSMAXX
    336159464U,	// LDSMINAB
    336160428U,	// LDSMINAH
    336159620U,	// LDSMINALB
    336160536U,	// LDSMINALH
    336161062U,	// LDSMINALW
    336161062U,	// LDSMINALX
    336159302U,	// LDSMINAW
    336159302U,	// LDSMINAX
    336159805U,	// LDSMINB
    336160749U,	// LDSMINH
    336159719U,	// LDSMINLB
    336160635U,	// LDSMINLH
    336161345U,	// LDSMINLW
    336161345U,	// LDSMINLX
    336161562U,	// LDSMINW
    336161562U,	// LDSMINX
    52970641U,	// LDTRBi
    52971585U,	// LDTRHi
    52970728U,	// LDTRSBWi
    52970728U,	// LDTRSBXi
    52971672U,	// LDTRSHWi
    52971672U,	// LDTRSHXi
    52973342U,	// LDTRSWi
    52972795U,	// LDTRWi
    52972795U,	// LDTRXi
    336159555U,	// LDUMAXAB
    336160499U,	// LDUMAXAH
    336159699U,	// LDUMAXALB
    336160615U,	// LDUMAXALH
    336161141U,	// LDUMAXALW
    336161141U,	// LDUMAXALX
    336159406U,	// LDUMAXAW
    336159406U,	// LDUMAXAX
    336160058U,	// LDUMAXB
    336160953U,	// LDUMAXH
    336159790U,	// LDUMAXLB
    336160739U,	// LDUMAXLH
    336161475U,	// LDUMAXLW
    336161475U,	// LDUMAXLX
    336162628U,	// LDUMAXW
    336162628U,	// LDUMAXX
    336159474U,	// LDUMINAB
    336160438U,	// LDUMINAH
    336159631U,	// LDUMINALB
    336160547U,	// LDUMINALH
    336161072U,	// LDUMINALW
    336161072U,	// LDUMINALX
    336159311U,	// LDUMINAW
    336159311U,	// LDUMINAX
    336159814U,	// LDUMINB
    336160758U,	// LDUMINH
    336159729U,	// LDUMINLB
    336160645U,	// LDUMINLH
    336161354U,	// LDUMINLW
    336161354U,	// LDUMINLX
    336161570U,	// LDUMINW
    336161570U,	// LDUMINX
    52970661U,	// LDURBBi
    52972818U,	// LDURBi
    52972818U,	// LDURDi
    52971605U,	// LDURHHi
    52972818U,	// LDURHi
    52972818U,	// LDURQi
    52970736U,	// LDURSBWi
    52970736U,	// LDURSBXi
    52971680U,	// LDURSHWi
    52971680U,	// LDURSHXi
    52973350U,	// LDURSWi
    52972818U,	// LDURSi
    52972818U,	// LDURWi
    52972818U,	// LDURXi
    34098260U,	// LDXPW
    34098260U,	// LDXPX
    52970683U,	// LDXRB
    52971627U,	// LDXRH
    52972837U,	// LDXRW
    52972837U,	// LDXRX
    0U,	// LOADgot
    34097791U,	// LSLVWr
    34097791U,	// LSLVXr
    34098417U,	// LSRVWr
    34098417U,	// LSRVXr
    34096613U,	// MADDWrrr
    34096613U,	// MADDXrrr
    67134011U,	// MLAv16i8
    1141924411U,	// MLAv2i32
    1141924411U,	// MLAv2i32_indexed
    2216714811U,	// MLAv4i16
    2216714811U,	// MLAv4i16_indexed
    2217239099U,	// MLAv4i32
    2217239099U,	// MLAv4i32_indexed
    3291505211U,	// MLAv8i16
    3291505211U,	// MLAv8i16_indexed
    3292029499U,	// MLAv8i8
    67136898U,	// MLSv16i8
    1141927298U,	// MLSv2i32
    1141927298U,	// MLSv2i32_indexed
    2216717698U,	// MLSv4i16
    2216717698U,	// MLSv4i16_indexed
    2217241986U,	// MLSv4i32
    2217241986U,	// MLSv4i32_indexed
    3291508098U,	// MLSv8i16
    3291508098U,	// MLSv8i16_indexed
    3292032386U,	// MLSv8i8
    369641703U,	// MOVID
    1476405479U,	// MOVIv16b_ns
    370682087U,	// MOVIv2d_ns
    2551195879U,	// MOVIv2i32
    2551195879U,	// MOVIv2s_msl
    2552244455U,	// MOVIv4i16
    2552768743U,	// MOVIv4i32
    2552768743U,	// MOVIv4s_msl
    1480075495U,	// MOVIv8b_ns
    2553293031U,	// MOVIv8i16
    168315122U,	// MOVKWi
    168315122U,	// MOVKXi
    2550680468U,	// MOVNWi
    2550680468U,	// MOVNXi
    2550681529U,	// MOVZWi
    2550681529U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    436751788U,	// MRS
    330998U,	// MSR
    339190U,	// MSRpstateImm1
    339190U,	// MSRpstateImm4
    34096405U,	// MSUBWrrr
    34096405U,	// MSUBXrrr
    10920U,	// MULv16i8
    1074801320U,	// MULv2i32
    1074801320U,	// MULv2i32_indexed
    2149591720U,	// MULv4i16
    2149591720U,	// MULv4i16_indexed
    2150116008U,	// MULv4i32
    2150116008U,	// MULv4i32_indexed
    3224382120U,	// MULv8i16
    3224382120U,	// MULv8i16_indexed
    3224906408U,	// MULv8i8
    2551195860U,	// MVNIv2i32
    2551195860U,	// MVNIv2s_msl
    2552244436U,	// MVNIv4i16
    2552768724U,	// MVNIv4i32
    2552768724U,	// MVNIv4s_msl
    2553293012U,	// MVNIv8i16
    9838U,	// NEGv16i8
    1107838574U,	// NEGv1i64
    2148542062U,	// NEGv2i32
    3222808174U,	// NEGv2i64
    2106990U,	// NEGv4i16
    1076373102U,	// NEGv4i32
    2150639214U,	// NEGv8i16
    3224905326U,	// NEGv8i8
    11795U,	// NOTv16i8
    3224907283U,	// NOTv8i8
    0U,	// ORNWrr
    34098007U,	// ORNWrs
    0U,	// ORNXrr
    34098007U,	// ORNXrs
    11095U,	// ORNv16i8
    3224906583U,	// ORNv8i8
    34098407U,	// ORRWri
    0U,	// ORRWrr
    34098407U,	// ORRWrs
    34098407U,	// ORRXri
    0U,	// ORRXrr
    34098407U,	// ORRXrs
    11495U,	// ORRv16i8
    168848615U,	// ORRv2i32
    169897191U,	// ORRv4i16
    170421479U,	// ORRv4i32
    170945767U,	// ORRv8i16
    3224906983U,	// ORRv8i8
    1107837454U,	// PACDA
    1107837782U,	// PACDB
    4211383U,	// PACDZA
    4212035U,	// PACDZB
    34095652U,	// PACGA
    1107837483U,	// PACIA
    4172U,	// PACIA1716
    4293U,	// PACIASP
    4335U,	// PACIAZ
    1107837804U,	// PACIB
    4192U,	// PACIB1716
    4309U,	// PACIBSP
    4349U,	// PACIBZ
    4211399U,	// PACIZA
    4212051U,	// PACIZB
    3154134U,	// PMULLv16i8
    489695788U,	// PMULLv1i64
    523247830U,	// PMULLv2i64
    3224381996U,	// PMULLv8i8
    10932U,	// PMULv16i8
    3224906420U,	// PMULv8i8
    202197727U,	// PRFMl
    53299935U,	// PRFMroW
    53299935U,	// PRFMroX
    53299935U,	// PRFMui
    53299965U,	// PRFUMi
    1074801420U,	// RADDHNv2i64_v2i32
    1143496985U,	// RADDHNv2i64_v4i32
    2149591820U,	// RADDHNv4i32_v4i16
    2217763097U,	// RADDHNv4i32_v8i16
    3288359193U,	// RADDHNv8i16_v16i8
    3224906508U,	// RADDHNv8i16_v8i8
    1107840490U,	// RBITWr
    1107840490U,	// RBITXr
    11754U,	// RBITv16i8
    3224907242U,	// RBITv8i8
    4214224U,	// RET
    4258U,	// RETAA
    4265U,	// RETAB
    0U,	// RET_ReallyLR
    1107837415U,	// REV16Wr
    1107837415U,	// REV16Xr
    8679U,	// REV16v16i8
    3224904167U,	// REV16v8i8
    1107837004U,	// REV32Xr
    8268U,	// REV32v16i8
    2105420U,	// REV32v4i16
    2150637644U,	// REV32v8i16
    3224903756U,	// REV32v8i8
    8662U,	// REV64v16i8
    2148540886U,	// REV64v2i32
    2105814U,	// REV64v4i16
    1076371926U,	// REV64v4i32
    2150638038U,	// REV64v8i16
    3224904150U,	// REV64v8i8
    1107840615U,	// REVWr
    1107840615U,	// REVXr
    34098395U,	// RORVWr
    34098395U,	// RORVXr
    3288359222U,	// RSHRNv16i8_shift
    1074801479U,	// RSHRNv2i32_shift
    2149591879U,	// RSHRNv4i16_shift
    1143497014U,	// RSHRNv4i32_shift
    2217763126U,	// RSHRNv8i16_shift
    3224906567U,	// RSHRNv8i8_shift
    1074801412U,	// RSUBHNv2i64_v2i32
    1143496976U,	// RSUBHNv2i64_v4i32
    2149591812U,	// RSUBHNv4i32_v4i16
    2217763088U,	// RSUBHNv4i32_v8i16
    3288359184U,	// RSUBHNv8i16_v16i8
    3224906500U,	// RSUBHNv8i16_v8i8
    70279266U,	// SABALv16i8_v8i16
    1142450424U,	// SABALv2i32_v2i64
    2217240824U,	// SABALv4i16_v4i32
    2216190050U,	// SABALv4i32_v2i64
    3290980450U,	// SABALv8i16_v4i32
    3291506936U,	// SABALv8i8_v8i16
    67133954U,	// SABAv16i8
    1141924354U,	// SABAv2i32
    2216714754U,	// SABAv4i16
    2217239042U,	// SABAv4i32
    3291505154U,	// SABAv8i16
    3292029442U,	// SABAv8i8
    3154076U,	// SABDLv16i8_v8i16
    1075325346U,	// SABDLv2i32_v2i64
    2150115746U,	// SABDLv4i16_v4i32
    2149064860U,	// SABDLv4i32_v2i64
    3223855260U,	// SABDLv8i16_v4i32
    3224381858U,	// SABDLv8i8_v8i16
    9631U,	// SABDv16i8
    1074800031U,	// SABDv2i32
    2149590431U,	// SABDv4i16
    2150114719U,	// SABDv4i32
    3224380831U,	// SABDv8i16
    3224905119U,	// SABDv8i8
    70282165U,	// SADALPv16i8_v8i16
    2235067317U,	// SADALPv2i32_v1i64
    68185013U,	// SADALPv4i16_v2i32
    1142451125U,	// SADALPv4i32_v2i64
    2217241525U,	// SADALPv8i16_v4i32
    3290459061U,	// SADALPv8i8_v4i16
    3156933U,	// SADDLPv16i8_v8i16
    2167942085U,	// SADDLPv2i32_v1i64
    1059781U,	// SADDLPv4i16_v2i32
    1075325893U,	// SADDLPv4i32_v2i64
    2150116293U,	// SADDLPv8i16_v4i32
    3223333829U,	// SADDLPv8i8_v4i16
    544382U,	// SADDLVv16i8v
    544382U,	// SADDLVv4i16v
    1074286206U,	// SADDLVv4i32v
    2148028030U,	// SADDLVv8i16v
    3221769854U,	// SADDLVv8i8v
    3154092U,	// SADDLv16i8_v8i16
    1075325384U,	// SADDLv2i32_v2i64
    2150115784U,	// SADDLv4i16_v4i32
    2149064876U,	// SADDLv4i32_v2i64
    3223855276U,	// SADDLv8i16_v4i32
    3224381896U,	// SADDLv8i8_v8i16
    3224379829U,	// SADDWv16i8_v8i16
    1075326722U,	// SADDWv2i32_v2i64
    2150117122U,	// SADDWv4i16_v4i32
    1075323317U,	// SADDWv4i32_v2i64
    2150113717U,	// SADDWv8i16_v4i32
    3224383234U,	// SADDWv8i8_v8i16
    34098520U,	// SBCSWr
    34098520U,	// SBCSXr
    34096490U,	// SBCWr
    34096490U,	// SBCXr
    34097875U,	// SBFMWri
    34097875U,	// SBFMXri
    34096735U,	// SCVTFSWDri
    34096735U,	// SCVTFSWHri
    34096735U,	// SCVTFSWSri
    34096735U,	// SCVTFSXDri
    34096735U,	// SCVTFSXHri
    34096735U,	// SCVTFSXSri
    1107838559U,	// SCVTFUWDri
    1107838559U,	// SCVTFUWHri
    1107838559U,	// SCVTFUWSri
    1107838559U,	// SCVTFUXDri
    1107838559U,	// SCVTFUXHri
    1107838559U,	// SCVTFUXSri
    34096735U,	// SCVTFd
    34096735U,	// SCVTFh
    34096735U,	// SCVTFs
    1107838559U,	// SCVTFv1i16
    1107838559U,	// SCVTFv1i32
    1107838559U,	// SCVTFv1i64
    2148542047U,	// SCVTFv2f32
    3222808159U,	// SCVTFv2f64
    1074800223U,	// SCVTFv2i32_shift
    1075324511U,	// SCVTFv2i64_shift
    2106975U,	// SCVTFv4f16
    1076373087U,	// SCVTFv4f32
    2149590623U,	// SCVTFv4i16_shift
    2150114911U,	// SCVTFv4i32_shift
    2150639199U,	// SCVTFv8f16
    3224381023U,	// SCVTFv8i16_shift
    34098802U,	// SDIVWr
    34098802U,	// SDIVXr
    3222285831U,	// SDOT2S
    2633223U,	// SDOT4S
    3289411079U,	// SDOTIDX2S
    69758471U,	// SDOTIDX4S
    134833507U,	// SHA1Crrr
    1107838593U,	// SHA1Hrr
    134834892U,	// SHA1Mrrr
    134835106U,	// SHA1Prrr
    2217238529U,	// SHA1SU0rrr
    1143496760U,	// SHA1SU1rr
    134832216U,	// SHA256H2rrr
    134833808U,	// SHA256Hrrr
    1143496714U,	// SHA256SU0rr
    2217238593U,	// SHA256SU1rrr
    9686U,	// SHADDv16i8
    1074800086U,	// SHADDv2i32
    2149590486U,	// SHADDv4i16
    2150114774U,	// SHADDv4i32
    3224380886U,	// SHADDv8i16
    3224905174U,	// SHADDv8i8
    3224379581U,	// SHLLv16i8
    1583638U,	// SHLLv2i32
    1076374038U,	// SHLLv4i16
    2149064893U,	// SHLLv4i32
    3223855293U,	// SHLLv8i16
    3156502U,	// SHLLv8i8
    34097631U,	// SHLd
    10719U,	// SHLv16i8_shift
    1074801119U,	// SHLv2i32_shift
    1075325407U,	// SHLv2i64_shift
    2149591519U,	// SHLv4i16_shift
    2150115807U,	// SHLv4i32_shift
    3224381919U,	// SHLv8i16_shift
    3224906207U,	// SHLv8i8_shift
    3288359204U,	// SHRNv16i8_shift
    1074801463U,	// SHRNv2i32_shift
    2149591863U,	// SHRNv4i16_shift
    1143496996U,	// SHRNv4i32_shift
    2217763108U,	// SHRNv8i16_shift
    3224906551U,	// SHRNv8i8_shift
    9478U,	// SHSUBv16i8
    1074799878U,	// SHSUBv2i32
    2149590278U,	// SHSUBv4i16
    2150114566U,	// SHSUBv4i32
    3224380678U,	// SHSUBv8i16
    3224904966U,	// SHSUBv8i8
    134834383U,	// SLId
    67135695U,	// SLIv16i8_shift
    1141926095U,	// SLIv2i32_shift
    1142450383U,	// SLIv2i64_shift
    2216716495U,	// SLIv4i16_shift
    2217240783U,	// SLIv4i32_shift
    3291506895U,	// SLIv8i16_shift
    3292031183U,	// SLIv8i8_shift
    34097592U,	// SMADDLrrr
    11334U,	// SMAXPv16i8
    1074801734U,	// SMAXPv2i32
    2149592134U,	// SMAXPv4i16
    2150116422U,	// SMAXPv4i32
    3224382534U,	// SMAXPv8i16
    3224906822U,	// SMAXPv8i8
    544469U,	// SMAXVv16i8v
    544469U,	// SMAXVv4i16v
    1074286293U,	// SMAXVv4i32v
    2148028117U,	// SMAXVv8i16v
    3221769941U,	// SMAXVv8i8v
    12094U,	// SMAXv16i8
    1074802494U,	// SMAXv2i32
    2149592894U,	// SMAXv4i16
    2150117182U,	// SMAXv4i32
    3224383294U,	// SMAXv8i16
    3224907582U,	// SMAXv8i8
    75139U,	// SMC
    11265U,	// SMINPv16i8
    1074801665U,	// SMINPv2i32
    2149592065U,	// SMINPv4i16
    2150116353U,	// SMINPv4i32
    3224382465U,	// SMINPv8i16
    3224906753U,	// SMINPv8i8
    544423U,	// SMINVv16i8v
    544423U,	// SMINVv4i16v
    1074286247U,	// SMINVv4i32v
    2148028071U,	// SMINVv8i16v
    3221769895U,	// SMINVv8i8v
    11036U,	// SMINv16i8
    1074801436U,	// SMINv2i32
    2149591836U,	// SMINv4i16
    2150116124U,	// SMINv4i32
    3224382236U,	// SMINv8i16
    3224906524U,	// SMINv8i8
    70279292U,	// SMLALv16i8_v8i16
    1142450456U,	// SMLALv2i32_indexed
    1142450456U,	// SMLALv2i32_v2i64
    2217240856U,	// SMLALv4i16_indexed
    2217240856U,	// SMLALv4i16_v4i32
    2216190076U,	// SMLALv4i32_indexed
    2216190076U,	// SMLALv4i32_v2i64
    3290980476U,	// SMLALv8i16_indexed
    3290980476U,	// SMLALv8i16_v4i32
    3291506968U,	// SMLALv8i8_v8i16
    70279416U,	// SMLSLv16i8_v8i16
    1142450820U,	// SMLSLv2i32_indexed
    1142450820U,	// SMLSLv2i32_v2i64
    2217241220U,	// SMLSLv4i16_indexed
    2217241220U,	// SMLSLv4i16_v4i32
    2216190200U,	// SMLSLv4i32_indexed
    2216190200U,	// SMLSLv4i32_v2i64
    3290980600U,	// SMLSLv8i16_indexed
    3290980600U,	// SMLSLv8i16_v4i32
    3291507332U,	// SMLSLv8i8_v8i16
    1074286274U,	// SMOVvi16to32
    1074286274U,	// SMOVvi16to64
    2148028098U,	// SMOVvi32to64
    544450U,	// SMOVvi8to32
    544450U,	// SMOVvi8to64
    34097540U,	// SMSUBLrrr
    34097099U,	// SMULHrr
    3154142U,	// SMULLv16i8_v8i16
    1075325491U,	// SMULLv2i32_indexed
    1075325491U,	// SMULLv2i32_v2i64
    2150115891U,	// SMULLv4i16_indexed
    2150115891U,	// SMULLv4i16_v4i32
    2149064926U,	// SMULLv4i32_indexed
    2149064926U,	// SMULLv4i32_v2i64
    3223855326U,	// SMULLv8i16_indexed
    3223855326U,	// SMULLv8i16_v4i32
    3224382003U,	// SMULLv8i8_v8i16
    11595U,	// SQABSv16i8
    1107840331U,	// SQABSv1i16
    1107840331U,	// SQABSv1i32
    1107840331U,	// SQABSv1i64
    1107840331U,	// SQABSv1i8
    2148543819U,	// SQABSv2i32
    3222809931U,	// SQABSv2i64
    2108747U,	// SQABSv4i16
    1076374859U,	// SQABSv4i32
    2150640971U,	// SQABSv8i16
    3224907083U,	// SQABSv8i8
    9716U,	// SQADDv16i8
    34096628U,	// SQADDv1i16
    34096628U,	// SQADDv1i32
    34096628U,	// SQADDv1i64
    34096628U,	// SQADDv1i8
    1074800116U,	// SQADDv2i32
    1075324404U,	// SQADDv2i64
    2149590516U,	// SQADDv4i16
    2150114804U,	// SQADDv4i32
    3224380916U,	// SQADDv8i16
    3224905204U,	// SQADDv8i8
    134834447U,	// SQDMLALi16
    134834447U,	// SQDMLALi32
    134834447U,	// SQDMLALv1i32_indexed
    134834447U,	// SQDMLALv1i64_indexed
    1142450447U,	// SQDMLALv2i32_indexed
    1142450447U,	// SQDMLALv2i32_v2i64
    2217240847U,	// SQDMLALv4i16_indexed
    2217240847U,	// SQDMLALv4i16_v4i32
    2216190066U,	// SQDMLALv4i32_indexed
    2216190066U,	// SQDMLALv4i32_v2i64
    3290980466U,	// SQDMLALv8i16_indexed
    3290980466U,	// SQDMLALv8i16_v4i32
    134834811U,	// SQDMLSLi16
    134834811U,	// SQDMLSLi32
    134834811U,	// SQDMLSLv1i32_indexed
    134834811U,	// SQDMLSLv1i64_indexed
    1142450811U,	// SQDMLSLv2i32_indexed
    1142450811U,	// SQDMLSLv2i32_v2i64
    2217241211U,	// SQDMLSLv4i16_indexed
    2217241211U,	// SQDMLSLv4i16_v4i32
    2216190190U,	// SQDMLSLv4i32_indexed
    2216190190U,	// SQDMLSLv4i32_v2i64
    3290980590U,	// SQDMLSLv8i16_indexed
    3290980590U,	// SQDMLSLv8i16_v4i32
    34097080U,	// SQDMULHv1i16
    34097080U,	// SQDMULHv1i16_indexed
    34097080U,	// SQDMULHv1i32
    34097080U,	// SQDMULHv1i32_indexed
    1074800568U,	// SQDMULHv2i32
    1074800568U,	// SQDMULHv2i32_indexed
    2149590968U,	// SQDMULHv4i16
    2149590968U,	// SQDMULHv4i16_indexed
    2150115256U,	// SQDMULHv4i32
    2150115256U,	// SQDMULHv4i32_indexed
    3224381368U,	// SQDMULHv8i16
    3224381368U,	// SQDMULHv8i16_indexed
    34097699U,	// SQDMULLi16
    34097699U,	// SQDMULLi32
    34097699U,	// SQDMULLv1i32_indexed
    34097699U,	// SQDMULLv1i64_indexed
    1075325475U,	// SQDMULLv2i32_indexed
    1075325475U,	// SQDMULLv2i32_v2i64
    2150115875U,	// SQDMULLv4i16_indexed
    2150115875U,	// SQDMULLv4i16_v4i32
    2149064908U,	// SQDMULLv4i32_indexed
    2149064908U,	// SQDMULLv4i32_v2i64
    3223855308U,	// SQDMULLv8i16_indexed
    3223855308U,	// SQDMULLv8i16_v4i32
    9843U,	// SQNEGv16i8
    1107838579U,	// SQNEGv1i16
    1107838579U,	// SQNEGv1i32
    1107838579U,	// SQNEGv1i64
    1107838579U,	// SQNEGv1i8
    2148542067U,	// SQNEGv2i32
    3222808179U,	// SQNEGv2i64
    2106995U,	// SQNEGv4i16
    1076373107U,	// SQNEGv4i32
    2150639219U,	// SQNEGv8i16
    3224905331U,	// SQNEGv8i8
    134833826U,	// SQRDMLAHi16_indexed
    134833826U,	// SQRDMLAHi32_indexed
    134833826U,	// SQRDMLAHv1i16
    134833826U,	// SQRDMLAHv1i32
    1141925538U,	// SQRDMLAHv2i32
    1141925538U,	// SQRDMLAHv2i32_indexed
    2216715938U,	// SQRDMLAHv4i16
    2216715938U,	// SQRDMLAHv4i16_indexed
    2217240226U,	// SQRDMLAHv4i32
    2217240226U,	// SQRDMLAHv4i32_indexed
    3291506338U,	// SQRDMLAHv8i16
    3291506338U,	// SQRDMLAHv8i16_indexed
    134834311U,	// SQRDMLSHi16_indexed
    134834311U,	// SQRDMLSHi32_indexed
    134834311U,	// SQRDMLSHv1i16
    134834311U,	// SQRDMLSHv1i32
    1141926023U,	// SQRDMLSHv2i32
    1141926023U,	// SQRDMLSHv2i32_indexed
    2216716423U,	// SQRDMLSHv4i16
    2216716423U,	// SQRDMLSHv4i16_indexed
    2217240711U,	// SQRDMLSHv4i32
    2217240711U,	// SQRDMLSHv4i32_indexed
    3291506823U,	// SQRDMLSHv8i16
    3291506823U,	// SQRDMLSHv8i16_indexed
    34097089U,	// SQRDMULHv1i16
    34097089U,	// SQRDMULHv1i16_indexed
    34097089U,	// SQRDMULHv1i32
    34097089U,	// SQRDMULHv1i32_indexed
    1074800577U,	// SQRDMULHv2i32
    1074800577U,	// SQRDMULHv2i32_indexed
    2149590977U,	// SQRDMULHv4i16
    2149590977U,	// SQRDMULHv4i16_indexed
    2150115265U,	// SQRDMULHv4i32
    2150115265U,	// SQRDMULHv4i32_indexed
    3224381377U,	// SQRDMULHv8i16
    3224381377U,	// SQRDMULHv8i16_indexed
    10731U,	// SQRSHLv16i8
    34097643U,	// SQRSHLv1i16
    34097643U,	// SQRSHLv1i32
    34097643U,	// SQRSHLv1i64
    34097643U,	// SQRSHLv1i8
    1074801131U,	// SQRSHLv2i32
    1075325419U,	// SQRSHLv2i64
    2149591531U,	// SQRSHLv4i16
    2150115819U,	// SQRSHLv4i32
    3224381931U,	// SQRSHLv8i16
    3224906219U,	// SQRSHLv8i8
    34097989U,	// SQRSHRNb
    34097989U,	// SQRSHRNh
    34097989U,	// SQRSHRNs
    3288359220U,	// SQRSHRNv16i8_shift
    1074801477U,	// SQRSHRNv2i32_shift
    2149591877U,	// SQRSHRNv4i16_shift
    1143497012U,	// SQRSHRNv4i32_shift
    2217763124U,	// SQRSHRNv8i16_shift
    3224906565U,	// SQRSHRNv8i8_shift
    34098050U,	// SQRSHRUNb
    34098050U,	// SQRSHRUNh
    34098050U,	// SQRSHRUNs
    3288359280U,	// SQRSHRUNv16i8_shift
    1074801538U,	// SQRSHRUNv2i32_shift
    2149591938U,	// SQRSHRUNv4i16_shift
    1143497072U,	// SQRSHRUNv4i32_shift
    2217763184U,	// SQRSHRUNv8i16_shift
    3224906626U,	// SQRSHRUNv8i8_shift
    34098745U,	// SQSHLUb
    34098745U,	// SQSHLUd
    34098745U,	// SQSHLUh
    34098745U,	// SQSHLUs
    11833U,	// SQSHLUv16i8_shift
    1074802233U,	// SQSHLUv2i32_shift
    1075326521U,	// SQSHLUv2i64_shift
    2149592633U,	// SQSHLUv4i16_shift
    2150116921U,	// SQSHLUv4i32_shift
    3224383033U,	// SQSHLUv8i16_shift
    3224907321U,	// SQSHLUv8i8_shift
    34097629U,	// SQSHLb
    34097629U,	// SQSHLd
    34097629U,	// SQSHLh
    34097629U,	// SQSHLs
    10717U,	// SQSHLv16i8
    10717U,	// SQSHLv16i8_shift
    34097629U,	// SQSHLv1i16
    34097629U,	// SQSHLv1i32
    34097629U,	// SQSHLv1i64
    34097629U,	// SQSHLv1i8
    1074801117U,	// SQSHLv2i32
    1074801117U,	// SQSHLv2i32_shift
    1075325405U,	// SQSHLv2i64
    1075325405U,	// SQSHLv2i64_shift
    2149591517U,	// SQSHLv4i16
    2149591517U,	// SQSHLv4i16_shift
    2150115805U,	// SQSHLv4i32
    2150115805U,	// SQSHLv4i32_shift
    3224381917U,	// SQSHLv8i16
    3224381917U,	// SQSHLv8i16_shift
    3224906205U,	// SQSHLv8i8
    3224906205U,	// SQSHLv8i8_shift
    34097973U,	// SQSHRNb
    34097973U,	// SQSHRNh
    34097973U,	// SQSHRNs
    3288359202U,	// SQSHRNv16i8_shift
    1074801461U,	// SQSHRNv2i32_shift
    2149591861U,	// SQSHRNv4i16_shift
    1143496994U,	// SQSHRNv4i32_shift
    2217763106U,	// SQSHRNv8i16_shift
    3224906549U,	// SQSHRNv8i8_shift
    34098041U,	// SQSHRUNb
    34098041U,	// SQSHRUNh
    34098041U,	// SQSHRUNs
    3288359270U,	// SQSHRUNv16i8_shift
    1074801529U,	// SQSHRUNv2i32_shift
    2149591929U,	// SQSHRUNv4i16_shift
    1143497062U,	// SQSHRUNv4i32_shift
    2217763174U,	// SQSHRUNv8i16_shift
    3224906617U,	// SQSHRUNv8i8_shift
    9507U,	// SQSUBv16i8
    34096419U,	// SQSUBv1i16
    34096419U,	// SQSUBv1i32
    34096419U,	// SQSUBv1i64
    34096419U,	// SQSUBv1i8
    1074799907U,	// SQSUBv2i32
    1075324195U,	// SQSUBv2i64
    2149590307U,	// SQSUBv4i16
    2150114595U,	// SQSUBv4i32
    3224380707U,	// SQSUBv8i16
    3224904995U,	// SQSUBv8i8
    2214617430U,	// SQXTNv16i8
    1107839851U,	// SQXTNv1i16
    1107839851U,	// SQXTNv1i32
    1107839851U,	// SQXTNv1i8
    3222285163U,	// SQXTNv2i32
    1075850091U,	// SQXTNv4i16
    3290980694U,	// SQXTNv4i32
    1144021334U,	// SQXTNv8i16
    2151164779U,	// SQXTNv8i8
    2214617467U,	// SQXTUNv16i8
    1107839884U,	// SQXTUNv1i16
    1107839884U,	// SQXTUNv1i32
    1107839884U,	// SQXTUNv1i8
    3222285196U,	// SQXTUNv2i32
    1075850124U,	// SQXTUNv4i16
    3290980731U,	// SQXTUNv4i32
    1144021371U,	// SQXTUNv8i16
    2151164812U,	// SQXTUNv8i8
    9670U,	// SRHADDv16i8
    1074800070U,	// SRHADDv2i32
    2149590470U,	// SRHADDv4i16
    2150114758U,	// SRHADDv4i32
    3224380870U,	// SRHADDv8i16
    3224905158U,	// SRHADDv8i8
    134834394U,	// SRId
    67135706U,	// SRIv16i8_shift
    1141926106U,	// SRIv2i32_shift
    1142450394U,	// SRIv2i64_shift
    2216716506U,	// SRIv4i16_shift
    2217240794U,	// SRIv4i32_shift
    3291506906U,	// SRIv8i16_shift
    3292031194U,	// SRIv8i8_shift
    10747U,	// SRSHLv16i8
    34097659U,	// SRSHLv1i64
    1074801147U,	// SRSHLv2i32
    1075325435U,	// SRSHLv2i64
    2149591547U,	// SRSHLv4i16
    2150115835U,	// SRSHLv4i32
    3224381947U,	// SRSHLv8i16
    3224906235U,	// SRSHLv8i8
    34098337U,	// SRSHRd
    11425U,	// SRSHRv16i8_shift
    1074801825U,	// SRSHRv2i32_shift
    1075326113U,	// SRSHRv2i64_shift
    2149592225U,	// SRSHRv4i16_shift
    2150116513U,	// SRSHRv4i32_shift
    3224382625U,	// SRSHRv8i16_shift
    3224906913U,	// SRSHRv8i8_shift
    134832757U,	// SRSRAd
    67134069U,	// SRSRAv16i8_shift
    1141924469U,	// SRSRAv2i32_shift
    1142448757U,	// SRSRAv2i64_shift
    2216714869U,	// SRSRAv4i16_shift
    2217239157U,	// SRSRAv4i32_shift
    3291505269U,	// SRSRAv8i16_shift
    3292029557U,	// SRSRAv8i8_shift
    3154108U,	// SSHLLv16i8_shift
    1075325461U,	// SSHLLv2i32_shift
    2150115861U,	// SSHLLv4i16_shift
    2149064892U,	// SSHLLv4i32_shift
    3223855292U,	// SSHLLv8i16_shift
    3224381973U,	// SSHLLv8i8_shift
    10761U,	// SSHLv16i8
    34097673U,	// SSHLv1i64
    1074801161U,	// SSHLv2i32
    1075325449U,	// SSHLv2i64
    2149591561U,	// SSHLv4i16
    2150115849U,	// SSHLv4i32
    3224381961U,	// SSHLv8i16
    3224906249U,	// SSHLv8i8
    34098351U,	// SSHRd
    11439U,	// SSHRv16i8_shift
    1074801839U,	// SSHRv2i32_shift
    1075326127U,	// SSHRv2i64_shift
    2149592239U,	// SSHRv4i16_shift
    2150116527U,	// SSHRv4i32_shift
    3224382639U,	// SSHRv8i16_shift
    3224906927U,	// SSHRv8i8_shift
    134832771U,	// SSRAd
    67134083U,	// SSRAv16i8_shift
    1141924483U,	// SSRAv2i32_shift
    1142448771U,	// SSRAv2i64_shift
    2216714883U,	// SSRAv4i16_shift
    2217239171U,	// SSRAv4i32_shift
    3291505283U,	// SSRAv8i16_shift
    3292029571U,	// SSRAv8i8_shift
    3154060U,	// SSUBLv16i8_v8i16
    1075325332U,	// SSUBLv2i32_v2i64
    2150115732U,	// SSUBLv4i16_v4i32
    2149064844U,	// SSUBLv4i32_v2i64
    3223855244U,	// SSUBLv8i16_v4i32
    3224381844U,	// SSUBLv8i8_v8i16
    3224379813U,	// SSUBWv16i8_v8i16
    1075326699U,	// SSUBWv2i32_v2i64
    2150117099U,	// SSUBWv4i16_v4i32
    1075323301U,	// SSUBWv4i32_v2i64
    2150113701U,	// SSUBWv8i16_v4i32
    3224383211U,	// SSUBWv8i8_v8i16
    131123U,	// ST1Fourv16b
    7479347U,	// ST1Fourv16b_POST
    147507U,	// ST1Fourv1d
    8020019U,	// ST1Fourv1d_POST
    163891U,	// ST1Fourv2d
    7512115U,	// ST1Fourv2d_POST
    180275U,	// ST1Fourv2s
    8052787U,	// ST1Fourv2s_POST
    196659U,	// ST1Fourv4h
    8069171U,	// ST1Fourv4h_POST
    213043U,	// ST1Fourv4s
    7561267U,	// ST1Fourv4s_POST
    229427U,	// ST1Fourv8b
    8101939U,	// ST1Fourv8b_POST
    245811U,	// ST1Fourv8h
    7594035U,	// ST1Fourv8h_POST
    131123U,	// ST1Onev16b
    8527923U,	// ST1Onev16b_POST
    147507U,	// ST1Onev1d
    9068595U,	// ST1Onev1d_POST
    163891U,	// ST1Onev2d
    8560691U,	// ST1Onev2d_POST
    180275U,	// ST1Onev2s
    9101363U,	// ST1Onev2s_POST
    196659U,	// ST1Onev4h
    9117747U,	// ST1Onev4h_POST
    213043U,	// ST1Onev4s
    8609843U,	// ST1Onev4s_POST
    229427U,	// ST1Onev8b
    9150515U,	// ST1Onev8b_POST
    245811U,	// ST1Onev8h
    8642611U,	// ST1Onev8h_POST
    131123U,	// ST1Threev16b
    11149363U,	// ST1Threev16b_POST
    147507U,	// ST1Threev1d
    11690035U,	// ST1Threev1d_POST
    163891U,	// ST1Threev2d
    11182131U,	// ST1Threev2d_POST
    180275U,	// ST1Threev2s
    11722803U,	// ST1Threev2s_POST
    196659U,	// ST1Threev4h
    11739187U,	// ST1Threev4h_POST
    213043U,	// ST1Threev4s
    11231283U,	// ST1Threev4s_POST
    229427U,	// ST1Threev8b
    11771955U,	// ST1Threev8b_POST
    245811U,	// ST1Threev8h
    11264051U,	// ST1Threev8h_POST
    131123U,	// ST1Twov16b
    8003635U,	// ST1Twov16b_POST
    147507U,	// ST1Twov1d
    8544307U,	// ST1Twov1d_POST
    163891U,	// ST1Twov2d
    8036403U,	// ST1Twov2d_POST
    180275U,	// ST1Twov2s
    8577075U,	// ST1Twov2s_POST
    196659U,	// ST1Twov4h
    8593459U,	// ST1Twov4h_POST
    213043U,	// ST1Twov4s
    8085555U,	// ST1Twov4s_POST
    229427U,	// ST1Twov8b
    8626227U,	// ST1Twov8b_POST
    245811U,	// ST1Twov8h
    8118323U,	// ST1Twov8h_POST
    352307U,	// ST1i16
    558104627U,	// ST1i16_POST
    360499U,	// ST1i32
    591675443U,	// ST1i32_POST
    368691U,	// ST1i64
    625246259U,	// ST1i64_POST
    376883U,	// ST1i8
    658817075U,	// ST1i8_POST
    131488U,	// ST2Twov16b
    8004000U,	// ST2Twov16b_POST
    164256U,	// ST2Twov2d
    8036768U,	// ST2Twov2d_POST
    180640U,	// ST2Twov2s
    8577440U,	// ST2Twov2s_POST
    197024U,	// ST2Twov4h
    8593824U,	// ST2Twov4h_POST
    213408U,	// ST2Twov4s
    8085920U,	// ST2Twov4s_POST
    229792U,	// ST2Twov8b
    8626592U,	// ST2Twov8b_POST
    246176U,	// ST2Twov8h
    8118688U,	// ST2Twov8h_POST
    352672U,	// ST2i16
    591659424U,	// ST2i16_POST
    360864U,	// ST2i32
    625230240U,	// ST2i32_POST
    369056U,	// ST2i64
    692355488U,	// ST2i64_POST
    377248U,	// ST2i8
    558154144U,	// ST2i8_POST
    131537U,	// ST3Threev16b
    11149777U,	// ST3Threev16b_POST
    164305U,	// ST3Threev2d
    11182545U,	// ST3Threev2d_POST
    180689U,	// ST3Threev2s
    11723217U,	// ST3Threev2s_POST
    197073U,	// ST3Threev4h
    11739601U,	// ST3Threev4h_POST
    213457U,	// ST3Threev4s
    11231697U,	// ST3Threev4s_POST
    229841U,	// ST3Threev8b
    11772369U,	// ST3Threev8b_POST
    246225U,	// ST3Threev8h
    11264465U,	// ST3Threev8h_POST
    352721U,	// ST3i16
    725877201U,	// ST3i16_POST
    360913U,	// ST3i32
    759448017U,	// ST3i32_POST
    369105U,	// ST3i64
    793018833U,	// ST3i64_POST
    377297U,	// ST3i8
    826589649U,	// ST3i8_POST
    131554U,	// ST4Fourv16b
    7479778U,	// ST4Fourv16b_POST
    164322U,	// ST4Fourv2d
    7512546U,	// ST4Fourv2d_POST
    180706U,	// ST4Fourv2s
    8053218U,	// ST4Fourv2s_POST
    197090U,	// ST4Fourv4h
    8069602U,	// ST4Fourv4h_POST
    213474U,	// ST4Fourv4s
    7561698U,	// ST4Fourv4s_POST
    229858U,	// ST4Fourv8b
    8102370U,	// ST4Fourv8b_POST
    246242U,	// ST4Fourv8h
    7594466U,	// ST4Fourv8h_POST
    352738U,	// ST4i16
    625213922U,	// ST4i16_POST
    360930U,	// ST4i32
    692339170U,	// ST4i32_POST
    369122U,	// ST4i64
    860127714U,	// ST4i64_POST
    377314U,	// ST4i8
    591708642U,	// ST4i8_POST
    52970610U,	// STLLRB
    52971554U,	// STLLRH
    52972743U,	// STLLRW
    52972743U,	// STLLRX
    52970618U,	// STLRB
    52971562U,	// STLRH
    52972750U,	// STLRW
    52972750U,	// STLRX
    34098266U,	// STLXPW
    34098266U,	// STLXPX
    34096322U,	// STLXRB
    34097266U,	// STLXRH
    34098475U,	// STLXRW
    34098475U,	// STLXRX
    34098191U,	// STNPDi
    34098191U,	// STNPQi
    34098191U,	// STNPSi
    34098191U,	// STNPWi
    34098191U,	// STNPXi
    34098217U,	// STPDi
    134835241U,	// STPDpost
    134835241U,	// STPDpre
    34098217U,	// STPQi
    134835241U,	// STPQpost
    134835241U,	// STPQpre
    34098217U,	// STPSi
    134835241U,	// STPSpost
    134835241U,	// STPSpre
    34098217U,	// STPWi
    134835241U,	// STPWpost
    134835241U,	// STPWpre
    34098217U,	// STPXi
    134835241U,	// STPXpost
    134835241U,	// STPXpre
    1227449496U,	// STRBBpost
    153707672U,	// STRBBpre
    52970648U,	// STRBBroW
    52970648U,	// STRBBroX
    52970648U,	// STRBBui
    1227451649U,	// STRBpost
    153709825U,	// STRBpre
    52972801U,	// STRBroW
    52972801U,	// STRBroX
    52972801U,	// STRBui
    1227451649U,	// STRDpost
    153709825U,	// STRDpre
    52972801U,	// STRDroW
    52972801U,	// STRDroX
    52972801U,	// STRDui
    1227450440U,	// STRHHpost
    153708616U,	// STRHHpre
    52971592U,	// STRHHroW
    52971592U,	// STRHHroX
    52971592U,	// STRHHui
    1227451649U,	// STRHpost
    153709825U,	// STRHpre
    52972801U,	// STRHroW
    52972801U,	// STRHroX
    52972801U,	// STRHui
    1227451649U,	// STRQpost
    153709825U,	// STRQpre
    52972801U,	// STRQroW
    52972801U,	// STRQroX
    52972801U,	// STRQui
    1227451649U,	// STRSpost
    153709825U,	// STRSpre
    52972801U,	// STRSroW
    52972801U,	// STRSroX
    52972801U,	// STRSui
    1227451649U,	// STRWpost
    153709825U,	// STRWpre
    52972801U,	// STRWroW
    52972801U,	// STRWroX
    52972801U,	// STRWui
    1227451649U,	// STRXpost
    153709825U,	// STRXpre
    52972801U,	// STRXroW
    52972801U,	// STRXroX
    52972801U,	// STRXui
    52970654U,	// STTRBi
    52971598U,	// STTRHi
    52972806U,	// STTRWi
    52972806U,	// STTRXi
    52970668U,	// STURBBi
    52972824U,	// STURBi
    52972824U,	// STURDi
    52971612U,	// STURHHi
    52972824U,	// STURHi
    52972824U,	// STURQi
    52972824U,	// STURSi
    52972824U,	// STURWi
    52972824U,	// STURXi
    34098273U,	// STXPW
    34098273U,	// STXPX
    34096330U,	// STXRB
    34097274U,	// STXRH
    34098482U,	// STXRW
    34098482U,	// STXRX
    1074801413U,	// SUBHNv2i64_v2i32
    1143496977U,	// SUBHNv2i64_v4i32
    2149591813U,	// SUBHNv4i32_v4i16
    2217763089U,	// SUBHNv4i32_v8i16
    3288359185U,	// SUBHNv8i16_v16i8
    3224906501U,	// SUBHNv8i16_v8i8
    34098514U,	// SUBSWri
    0U,	// SUBSWrr
    34098514U,	// SUBSWrs
    34098514U,	// SUBSWrx
    34098514U,	// SUBSXri
    0U,	// SUBSXrr
    34098514U,	// SUBSXrs
    34098514U,	// SUBSXrx
    34098514U,	// SUBSXrx64
    34096385U,	// SUBWri
    0U,	// SUBWrr
    34096385U,	// SUBWrs
    34096385U,	// SUBWrx
    34096385U,	// SUBXri
    0U,	// SUBXrr
    34096385U,	// SUBXrs
    34096385U,	// SUBXrx
    34096385U,	// SUBXrx64
    34049U,	// SUB_ZZZ_B
    42241U,	// SUB_ZZZ_D
    50433U,	// SUB_ZZZ_H
    58625U,	// SUB_ZZZ_S
    9473U,	// SUBv16i8
    34096385U,	// SUBv1i64
    1074799873U,	// SUBv2i32
    1075324161U,	// SUBv2i64
    2149590273U,	// SUBv4i16
    2150114561U,	// SUBv4i32
    3224380673U,	// SUBv8i16
    3224904961U,	// SUBv8i8
    67134971U,	// SUQADDv16i8
    1208575483U,	// SUQADDv1i16
    1208575483U,	// SUQADDv1i32
    1208575483U,	// SUQADDv1i64
    1208575483U,	// SUQADDv1i8
    2215667195U,	// SUQADDv2i32
    3289933307U,	// SUQADDv2i64
    69232123U,	// SUQADDv4i16
    1143498235U,	// SUQADDv4i32
    2217764347U,	// SUQADDv8i16
    3292030459U,	// SUQADDv8i8
    75156U,	// SVC
    336159484U,	// SWPAB
    336160448U,	// SWPAH
    336159642U,	// SWPALB
    336160558U,	// SWPALH
    336161090U,	// SWPALW
    336161090U,	// SWPALX
    336159327U,	// SWPAW
    336159327U,	// SWPAX
    336159823U,	// SWPB
    336160767U,	// SWPH
    336159739U,	// SWPLB
    336160655U,	// SWPLH
    336161370U,	// SWPLW
    336161370U,	// SWPLX
    336161843U,	// SWPW
    336161843U,	// SWPX
    34097810U,	// SYSLxt
    872959418U,	// SYSxt
    905980287U,	// TBLv16i8Four
    905980287U,	// TBLv16i8One
    905980287U,	// TBLv16i8Three
    905980287U,	// TBLv16i8Two
    4130875775U,	// TBLv8i8Four
    4130875775U,	// TBLv8i8One
    4130875775U,	// TBLv8i8Three
    4130875775U,	// TBLv8i8Two
    34099115U,	// TBNZW
    34099115U,	// TBNZX
    939552588U,	// TBXv16i8Four
    939552588U,	// TBXv16i8One
    939552588U,	// TBXv16i8Three
    939552588U,	// TBXv16i8Two
    4164448076U,	// TBXv8i8Four
    4164448076U,	// TBXv8i8One
    4164448076U,	// TBXv8i8Three
    4164448076U,	// TBXv8i8Two
    34099099U,	// TBZW
    34099099U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    4214719U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    8218U,	// TRN1v16i8
    1074798618U,	// TRN1v2i32
    1075322906U,	// TRN1v2i64
    2149589018U,	// TRN1v4i16
    2150113306U,	// TRN1v4i32
    3224379418U,	// TRN1v8i16
    3224903706U,	// TRN1v8i8
    8520U,	// TRN2v16i8
    1074798920U,	// TRN2v2i32
    1075323208U,	// TRN2v2i64
    2149589320U,	// TRN2v4i16
    2150113608U,	// TRN2v4i32
    3224379720U,	// TRN2v8i16
    3224904008U,	// TRN2v8i8
    70279274U,	// UABALv16i8_v8i16
    1142450431U,	// UABALv2i32_v2i64
    2217240831U,	// UABALv4i16_v4i32
    2216190058U,	// UABALv4i32_v2i64
    3290980458U,	// UABALv8i16_v4i32
    3291506943U,	// UABALv8i8_v8i16
    67133960U,	// UABAv16i8
    1141924360U,	// UABAv2i32
    2216714760U,	// UABAv4i16
    2217239048U,	// UABAv4i32
    3291505160U,	// UABAv8i16
    3292029448U,	// UABAv8i8
    3154084U,	// UABDLv16i8_v8i16
    1075325353U,	// UABDLv2i32_v2i64
    2150115753U,	// UABDLv4i16_v4i32
    2149064868U,	// UABDLv4i32_v2i64
    3223855268U,	// UABDLv8i16_v4i32
    3224381865U,	// UABDLv8i8_v8i16
    9637U,	// UABDv16i8
    1074800037U,	// UABDv2i32
    2149590437U,	// UABDv4i16
    2150114725U,	// UABDv4i32
    3224380837U,	// UABDv8i16
    3224905125U,	// UABDv8i8
    70282173U,	// UADALPv16i8_v8i16
    2235067325U,	// UADALPv2i32_v1i64
    68185021U,	// UADALPv4i16_v2i32
    1142451133U,	// UADALPv4i32_v2i64
    2217241533U,	// UADALPv8i16_v4i32
    3290459069U,	// UADALPv8i8_v4i16
    3156941U,	// UADDLPv16i8_v8i16
    2167942093U,	// UADDLPv2i32_v1i64
    1059789U,	// UADDLPv4i16_v2i32
    1075325901U,	// UADDLPv4i32_v2i64
    2150116301U,	// UADDLPv8i16_v4i32
    3223333837U,	// UADDLPv8i8_v4i16
    544390U,	// UADDLVv16i8v
    544390U,	// UADDLVv4i16v
    1074286214U,	// UADDLVv4i32v
    2148028038U,	// UADDLVv8i16v
    3221769862U,	// UADDLVv8i8v
    3154100U,	// UADDLv16i8_v8i16
    1075325391U,	// UADDLv2i32_v2i64
    2150115791U,	// UADDLv4i16_v4i32
    2149064884U,	// UADDLv4i32_v2i64
    3223855284U,	// UADDLv8i16_v4i32
    3224381903U,	// UADDLv8i8_v8i16
    3224379837U,	// UADDWv16i8_v8i16
    1075326729U,	// UADDWv2i32_v2i64
    2150117129U,	// UADDWv4i16_v4i32
    1075323325U,	// UADDWv4i32_v2i64
    2150113725U,	// UADDWv8i16_v4i32
    3224383241U,	// UADDWv8i8_v8i16
    34097881U,	// UBFMWri
    34097881U,	// UBFMXri
    34096742U,	// UCVTFSWDri
    34096742U,	// UCVTFSWHri
    34096742U,	// UCVTFSWSri
    34096742U,	// UCVTFSXDri
    34096742U,	// UCVTFSXHri
    34096742U,	// UCVTFSXSri
    1107838566U,	// UCVTFUWDri
    1107838566U,	// UCVTFUWHri
    1107838566U,	// UCVTFUWSri
    1107838566U,	// UCVTFUXDri
    1107838566U,	// UCVTFUXHri
    1107838566U,	// UCVTFUXSri
    34096742U,	// UCVTFd
    34096742U,	// UCVTFh
    34096742U,	// UCVTFs
    1107838566U,	// UCVTFv1i16
    1107838566U,	// UCVTFv1i32
    1107838566U,	// UCVTFv1i64
    2148542054U,	// UCVTFv2f32
    3222808166U,	// UCVTFv2f64
    1074800230U,	// UCVTFv2i32_shift
    1075324518U,	// UCVTFv2i64_shift
    2106982U,	// UCVTFv4f16
    1076373094U,	// UCVTFv4f32
    2149590630U,	// UCVTFv4i16_shift
    2150114918U,	// UCVTFv4i32_shift
    2150639206U,	// UCVTFv8f16
    3224381030U,	// UCVTFv8i16_shift
    34098808U,	// UDIVWr
    34098808U,	// UDIVXr
    3222285837U,	// UDOT2S
    2633229U,	// UDOT4S
    3289411085U,	// UDOTIDX2S
    69758477U,	// UDOTIDX4S
    9693U,	// UHADDv16i8
    1074800093U,	// UHADDv2i32
    2149590493U,	// UHADDv4i16
    2150114781U,	// UHADDv4i32
    3224380893U,	// UHADDv8i16
    3224905181U,	// UHADDv8i8
    9485U,	// UHSUBv16i8
    1074799885U,	// UHSUBv2i32
    2149590285U,	// UHSUBv4i16
    2150114573U,	// UHSUBv4i32
    3224380685U,	// UHSUBv8i16
    3224904973U,	// UHSUBv8i8
    34097600U,	// UMADDLrrr
    11341U,	// UMAXPv16i8
    1074801741U,	// UMAXPv2i32
    2149592141U,	// UMAXPv4i16
    2150116429U,	// UMAXPv4i32
    3224382541U,	// UMAXPv8i16
    3224906829U,	// UMAXPv8i8
    544476U,	// UMAXVv16i8v
    544476U,	// UMAXVv4i16v
    1074286300U,	// UMAXVv4i32v
    2148028124U,	// UMAXVv8i16v
    3221769948U,	// UMAXVv8i8v
    12102U,	// UMAXv16i8
    1074802502U,	// UMAXv2i32
    2149592902U,	// UMAXv4i16
    2150117190U,	// UMAXv4i32
    3224383302U,	// UMAXv8i16
    3224907590U,	// UMAXv8i8
    11272U,	// UMINPv16i8
    1074801672U,	// UMINPv2i32
    2149592072U,	// UMINPv4i16
    2150116360U,	// UMINPv4i32
    3224382472U,	// UMINPv8i16
    3224906760U,	// UMINPv8i8
    544430U,	// UMINVv16i8v
    544430U,	// UMINVv4i16v
    1074286254U,	// UMINVv4i32v
    2148028078U,	// UMINVv8i16v
    3221769902U,	// UMINVv8i8v
    11044U,	// UMINv16i8
    1074801444U,	// UMINv2i32
    2149591844U,	// UMINv4i16
    2150116132U,	// UMINv4i32
    3224382244U,	// UMINv8i16
    3224906532U,	// UMINv8i8
    70279300U,	// UMLALv16i8_v8i16
    1142450463U,	// UMLALv2i32_indexed
    1142450463U,	// UMLALv2i32_v2i64
    2217240863U,	// UMLALv4i16_indexed
    2217240863U,	// UMLALv4i16_v4i32
    2216190084U,	// UMLALv4i32_indexed
    2216190084U,	// UMLALv4i32_v2i64
    3290980484U,	// UMLALv8i16_indexed
    3290980484U,	// UMLALv8i16_v4i32
    3291506975U,	// UMLALv8i8_v8i16
    70279424U,	// UMLSLv16i8_v8i16
    1142450827U,	// UMLSLv2i32_indexed
    1142450827U,	// UMLSLv2i32_v2i64
    2217241227U,	// UMLSLv4i16_indexed
    2217241227U,	// UMLSLv4i16_v4i32
    2216190208U,	// UMLSLv4i32_indexed
    2216190208U,	// UMLSLv4i32_v2i64
    3290980608U,	// UMLSLv8i16_indexed
    3290980608U,	// UMLSLv8i16_v4i32
    3291507339U,	// UMLSLv8i8_v8i16
    1074286280U,	// UMOVvi16
    2148028104U,	// UMOVvi32
    3221769928U,	// UMOVvi64
    544456U,	// UMOVvi8
    34097548U,	// UMSUBLrrr
    34097106U,	// UMULHrr
    3154150U,	// UMULLv16i8_v8i16
    1075325498U,	// UMULLv2i32_indexed
    1075325498U,	// UMULLv2i32_v2i64
    2150115898U,	// UMULLv4i16_indexed
    2150115898U,	// UMULLv4i16_v4i32
    2149064934U,	// UMULLv4i32_indexed
    2149064934U,	// UMULLv4i32_v2i64
    3223855334U,	// UMULLv8i16_indexed
    3223855334U,	// UMULLv8i16_v4i32
    3224382010U,	// UMULLv8i8_v8i16
    9724U,	// UQADDv16i8
    34096636U,	// UQADDv1i16
    34096636U,	// UQADDv1i32
    34096636U,	// UQADDv1i64
    34096636U,	// UQADDv1i8
    1074800124U,	// UQADDv2i32
    1075324412U,	// UQADDv2i64
    2149590524U,	// UQADDv4i16
    2150114812U,	// UQADDv4i32
    3224380924U,	// UQADDv8i16
    3224905212U,	// UQADDv8i8
    10739U,	// UQRSHLv16i8
    34097651U,	// UQRSHLv1i16
    34097651U,	// UQRSHLv1i32
    34097651U,	// UQRSHLv1i64
    34097651U,	// UQRSHLv1i8
    1074801139U,	// UQRSHLv2i32
    1075325427U,	// UQRSHLv2i64
    2149591539U,	// UQRSHLv4i16
    2150115827U,	// UQRSHLv4i32
    3224381939U,	// UQRSHLv8i16
    3224906227U,	// UQRSHLv8i8
    34097998U,	// UQRSHRNb
    34097998U,	// UQRSHRNh
    34097998U,	// UQRSHRNs
    3288359230U,	// UQRSHRNv16i8_shift
    1074801486U,	// UQRSHRNv2i32_shift
    2149591886U,	// UQRSHRNv4i16_shift
    1143497022U,	// UQRSHRNv4i32_shift
    2217763134U,	// UQRSHRNv8i16_shift
    3224906574U,	// UQRSHRNv8i8_shift
    34097636U,	// UQSHLb
    34097636U,	// UQSHLd
    34097636U,	// UQSHLh
    34097636U,	// UQSHLs
    10724U,	// UQSHLv16i8
    10724U,	// UQSHLv16i8_shift
    34097636U,	// UQSHLv1i16
    34097636U,	// UQSHLv1i32
    34097636U,	// UQSHLv1i64
    34097636U,	// UQSHLv1i8
    1074801124U,	// UQSHLv2i32
    1074801124U,	// UQSHLv2i32_shift
    1075325412U,	// UQSHLv2i64
    1075325412U,	// UQSHLv2i64_shift
    2149591524U,	// UQSHLv4i16
    2149591524U,	// UQSHLv4i16_shift
    2150115812U,	// UQSHLv4i32
    2150115812U,	// UQSHLv4i32_shift
    3224381924U,	// UQSHLv8i16
    3224381924U,	// UQSHLv8i16_shift
    3224906212U,	// UQSHLv8i8
    3224906212U,	// UQSHLv8i8_shift
    34097981U,	// UQSHRNb
    34097981U,	// UQSHRNh
    34097981U,	// UQSHRNs
    3288359211U,	// UQSHRNv16i8_shift
    1074801469U,	// UQSHRNv2i32_shift
    2149591869U,	// UQSHRNv4i16_shift
    1143497003U,	// UQSHRNv4i32_shift
    2217763115U,	// UQSHRNv8i16_shift
    3224906557U,	// UQSHRNv8i8_shift
    9514U,	// UQSUBv16i8
    34096426U,	// UQSUBv1i16
    34096426U,	// UQSUBv1i32
    34096426U,	// UQSUBv1i64
    34096426U,	// UQSUBv1i8
    1074799914U,	// UQSUBv2i32
    1075324202U,	// UQSUBv2i64
    2149590314U,	// UQSUBv4i16
    2150114602U,	// UQSUBv4i32
    3224380714U,	// UQSUBv8i16
    3224905002U,	// UQSUBv8i8
    2214617438U,	// UQXTNv16i8
    1107839858U,	// UQXTNv1i16
    1107839858U,	// UQXTNv1i32
    1107839858U,	// UQXTNv1i8
    3222285170U,	// UQXTNv2i32
    1075850098U,	// UQXTNv4i16
    3290980702U,	// UQXTNv4i32
    1144021342U,	// UQXTNv8i16
    2151164786U,	// UQXTNv8i8
    2148541995U,	// URECPEv2i32
    1076373035U,	// URECPEv4i32
    9678U,	// URHADDv16i8
    1074800078U,	// URHADDv2i32
    2149590478U,	// URHADDv4i16
    2150114766U,	// URHADDv4i32
    3224380878U,	// URHADDv8i16
    3224905166U,	// URHADDv8i8
    10754U,	// URSHLv16i8
    34097666U,	// URSHLv1i64
    1074801154U,	// URSHLv2i32
    1075325442U,	// URSHLv2i64
    2149591554U,	// URSHLv4i16
    2150115842U,	// URSHLv4i32
    3224381954U,	// URSHLv8i16
    3224906242U,	// URSHLv8i8
    34098344U,	// URSHRd
    11432U,	// URSHRv16i8_shift
    1074801832U,	// URSHRv2i32_shift
    1075326120U,	// URSHRv2i64_shift
    2149592232U,	// URSHRv4i16_shift
    2150116520U,	// URSHRv4i32_shift
    3224382632U,	// URSHRv8i16_shift
    3224906920U,	// URSHRv8i8_shift
    2148542033U,	// URSQRTEv2i32
    1076373073U,	// URSQRTEv4i32
    134832764U,	// URSRAd
    67134076U,	// URSRAv16i8_shift
    1141924476U,	// URSRAv2i32_shift
    1142448764U,	// URSRAv2i64_shift
    2216714876U,	// URSRAv4i16_shift
    2217239164U,	// URSRAv4i32_shift
    3291505276U,	// URSRAv8i16_shift
    3292029564U,	// URSRAv8i8_shift
    3154116U,	// USHLLv16i8_shift
    1075325468U,	// USHLLv2i32_shift
    2150115868U,	// USHLLv4i16_shift
    2149064900U,	// USHLLv4i32_shift
    3223855300U,	// USHLLv8i16_shift
    3224381980U,	// USHLLv8i8_shift
    10767U,	// USHLv16i8
    34097679U,	// USHLv1i64
    1074801167U,	// USHLv2i32
    1075325455U,	// USHLv2i64
    2149591567U,	// USHLv4i16
    2150115855U,	// USHLv4i32
    3224381967U,	// USHLv8i16
    3224906255U,	// USHLv8i8
    34098357U,	// USHRd
    11445U,	// USHRv16i8_shift
    1074801845U,	// USHRv2i32_shift
    1075326133U,	// USHRv2i64_shift
    2149592245U,	// USHRv4i16_shift
    2150116533U,	// USHRv4i32_shift
    3224382645U,	// USHRv8i16_shift
    3224906933U,	// USHRv8i8_shift
    67134963U,	// USQADDv16i8
    1208575475U,	// USQADDv1i16
    1208575475U,	// USQADDv1i32
    1208575475U,	// USQADDv1i64
    1208575475U,	// USQADDv1i8
    2215667187U,	// USQADDv2i32
    3289933299U,	// USQADDv2i64
    69232115U,	// USQADDv4i16
    1143498227U,	// USQADDv4i32
    2217764339U,	// USQADDv8i16
    3292030451U,	// USQADDv8i8
    134832777U,	// USRAd
    67134089U,	// USRAv16i8_shift
    1141924489U,	// USRAv2i32_shift
    1142448777U,	// USRAv2i64_shift
    2216714889U,	// USRAv4i16_shift
    2217239177U,	// USRAv4i32_shift
    3291505289U,	// USRAv8i16_shift
    3292029577U,	// USRAv8i8_shift
    3154068U,	// USUBLv16i8_v8i16
    1075325339U,	// USUBLv2i32_v2i64
    2150115739U,	// USUBLv4i16_v4i32
    2149064852U,	// USUBLv4i32_v2i64
    3223855252U,	// USUBLv8i16_v4i32
    3224381851U,	// USUBLv8i8_v8i16
    3224379821U,	// USUBWv16i8_v8i16
    1075326706U,	// USUBWv2i32_v2i64
    2150117106U,	// USUBWv4i16_v4i32
    1075323309U,	// USUBWv4i32_v2i64
    2150113709U,	// USUBWv8i16_v4i32
    3224383218U,	// USUBWv8i8_v8i16
    8230U,	// UZP1v16i8
    1074798630U,	// UZP1v2i32
    1075322918U,	// UZP1v2i64
    2149589030U,	// UZP1v4i16
    2150113318U,	// UZP1v4i32
    3224379430U,	// UZP1v8i16
    3224903718U,	// UZP1v8i8
    8595U,	// UZP2v16i8
    1074798995U,	// UZP2v2i32
    1075323283U,	// UZP2v2i64
    2149589395U,	// UZP2v4i16
    2150113683U,	// UZP2v4i32
    3224379795U,	// UZP2v8i16
    3224904083U,	// UZP2v8i8
    4212139U,	// XPACD
    4212930U,	// XPACI
    4271U,	// XPACLRI
    2214617432U,	// XTNv16i8
    3222285165U,	// XTNv2i32
    1075850093U,	// XTNv4i16
    3290980696U,	// XTNv4i32
    1144021336U,	// XTNv8i16
    2151164781U,	// XTNv8i8
    32800U,	// ZIP1_PPP_B
    40992U,	// ZIP1_PPP_D
    49184U,	// ZIP1_PPP_H
    57376U,	// ZIP1_PPP_S
    32800U,	// ZIP1_ZZZ_B
    40992U,	// ZIP1_ZZZ_D
    49184U,	// ZIP1_ZZZ_H
    57376U,	// ZIP1_ZZZ_S
    8224U,	// ZIP1v16i8
    1074798624U,	// ZIP1v2i32
    1075322912U,	// ZIP1v2i64
    2149589024U,	// ZIP1v4i16
    2150113312U,	// ZIP1v4i32
    3224379424U,	// ZIP1v8i16
    3224903712U,	// ZIP1v8i8
    33165U,	// ZIP2_PPP_B
    41357U,	// ZIP2_PPP_D
    49549U,	// ZIP2_PPP_H
    57741U,	// ZIP2_PPP_S
    33165U,	// ZIP2_ZZZ_B
    41357U,	// ZIP2_ZZZ_D
    49549U,	// ZIP2_ZZZ_H
    57741U,	// ZIP2_ZZZ_S
    8589U,	// ZIP2v16i8
    1074798989U,	// ZIP2v2i32
    1075323277U,	// ZIP2v2i64
    2149589389U,	// ZIP2v4i16
    2150113677U,	// ZIP2v4i32
    3224379789U,	// ZIP2v8i16
    3224904077U,	// ZIP2v8i8
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    1U,	// ABSv4i16
    1U,	// ABSv4i32
    1U,	// ABSv8i16
    1U,	// ABSv8i8
    2U,	// ADCSWr
    2U,	// ADCSXr
    2U,	// ADCWr
    2U,	// ADCXr
    530U,	// ADDHNv2i64_v2i32
    546U,	// ADDHNv2i64_v4i32
    1042U,	// ADDHNv4i32_v4i16
    1058U,	// ADDHNv4i32_v8i16
    1570U,	// ADDHNv8i16_v16i8
    1554U,	// ADDHNv8i16_v8i8
    2067U,	// ADDPv16i8
    2579U,	// ADDPv2i32
    530U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    3091U,	// ADDPv4i16
    1042U,	// ADDPv4i32
    1554U,	// ADDPv8i16
    3603U,	// ADDPv8i8
    50U,	// ADDSWri
    0U,	// ADDSWrr
    66U,	// ADDSWrs
    82U,	// ADDSWrx
    50U,	// ADDSXri
    0U,	// ADDSXrr
    66U,	// ADDSXrs
    82U,	// ADDSXrx
    4098U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    1U,	// ADDVv4i16v
    1U,	// ADDVv4i32v
    1U,	// ADDVv8i16v
    1U,	// ADDVv8i8v
    50U,	// ADDWri
    0U,	// ADDWrr
    66U,	// ADDWrs
    82U,	// ADDWrx
    50U,	// ADDXri
    0U,	// ADDXrr
    66U,	// ADDXrs
    82U,	// ADDXrx
    4098U,	// ADDXrx64
    0U,	// ADD_ZZZ_B
    0U,	// ADD_ZZZ_D
    0U,	// ADD_ZZZ_H
    0U,	// ADD_ZZZ_S
    2067U,	// ADDv16i8
    2U,	// ADDv1i64
    2579U,	// ADDv2i32
    530U,	// ADDv2i64
    3091U,	// ADDv4i16
    1042U,	// ADDv4i32
    1554U,	// ADDv8i16
    3603U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    98U,	// ANDSWri
    0U,	// ANDSWrr
    66U,	// ANDSWrs
    114U,	// ANDSXri
    0U,	// ANDSXrr
    66U,	// ANDSXrs
    98U,	// ANDWri
    0U,	// ANDWrr
    66U,	// ANDWrs
    114U,	// ANDXri
    0U,	// ANDXrr
    66U,	// ANDXrs
    2067U,	// ANDv16i8
    3603U,	// ANDv8i8
    2U,	// ASRVWr
    2U,	// ASRVXr
    0U,	// AUTDA
    0U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    0U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    0U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    4738U,	// BFMWri
    4738U,	// BFMXri
    0U,	// BICSWrr
    66U,	// BICSWrs
    0U,	// BICSXrr
    66U,	// BICSXrs
    0U,	// BICWrr
    66U,	// BICWrs
    0U,	// BICXrr
    66U,	// BICXrs
    2067U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    3603U,	// BICv8i8
    2067U,	// BIFv16i8
    3603U,	// BIFv8i8
    2083U,	// BITv16i8
    3619U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BLRAA
    0U,	// BLRAAZ
    0U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    0U,	// BRAA
    0U,	// BRAAZ
    0U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    2083U,	// BSLv16i8
    3619U,	// BSLv8i8
    0U,	// Bcc
    5252U,	// CASAB
    5252U,	// CASAH
    5252U,	// CASALB
    5252U,	// CASALH
    5252U,	// CASALW
    5252U,	// CASALX
    5252U,	// CASAW
    5252U,	// CASAX
    5252U,	// CASB
    5252U,	// CASH
    5252U,	// CASLB
    5252U,	// CASLH
    5252U,	// CASLW
    5252U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    5252U,	// CASW
    5252U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    20994U,	// CCMNWi
    20994U,	// CCMNWr
    20994U,	// CCMNXi
    20994U,	// CCMNXr
    20994U,	// CCMPWi
    20994U,	// CCMPWr
    20994U,	// CCMPXi
    20994U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    1U,	// CLSv4i16
    1U,	// CLSv4i32
    1U,	// CLSv8i16
    1U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    1U,	// CLZv4i16
    1U,	// CLZv4i32
    1U,	// CLZv8i16
    1U,	// CLZv8i8
    2067U,	// CMEQv16i8
    4U,	// CMEQv16i8rz
    2U,	// CMEQv1i64
    4U,	// CMEQv1i64rz
    2579U,	// CMEQv2i32
    4U,	// CMEQv2i32rz
    530U,	// CMEQv2i64
    5U,	// CMEQv2i64rz
    3091U,	// CMEQv4i16
    5U,	// CMEQv4i16rz
    1042U,	// CMEQv4i32
    5U,	// CMEQv4i32rz
    1554U,	// CMEQv8i16
    5U,	// CMEQv8i16rz
    3603U,	// CMEQv8i8
    6U,	// CMEQv8i8rz
    2067U,	// CMGEv16i8
    4U,	// CMGEv16i8rz
    2U,	// CMGEv1i64
    4U,	// CMGEv1i64rz
    2579U,	// CMGEv2i32
    4U,	// CMGEv2i32rz
    530U,	// CMGEv2i64
    5U,	// CMGEv2i64rz
    3091U,	// CMGEv4i16
    5U,	// CMGEv4i16rz
    1042U,	// CMGEv4i32
    5U,	// CMGEv4i32rz
    1554U,	// CMGEv8i16
    5U,	// CMGEv8i16rz
    3603U,	// CMGEv8i8
    6U,	// CMGEv8i8rz
    2067U,	// CMGTv16i8
    4U,	// CMGTv16i8rz
    2U,	// CMGTv1i64
    4U,	// CMGTv1i64rz
    2579U,	// CMGTv2i32
    4U,	// CMGTv2i32rz
    530U,	// CMGTv2i64
    5U,	// CMGTv2i64rz
    3091U,	// CMGTv4i16
    5U,	// CMGTv4i16rz
    1042U,	// CMGTv4i32
    5U,	// CMGTv4i32rz
    1554U,	// CMGTv8i16
    5U,	// CMGTv8i16rz
    3603U,	// CMGTv8i8
    6U,	// CMGTv8i8rz
    2067U,	// CMHIv16i8
    2U,	// CMHIv1i64
    2579U,	// CMHIv2i32
    530U,	// CMHIv2i64
    3091U,	// CMHIv4i16
    1042U,	// CMHIv4i32
    1554U,	// CMHIv8i16
    3603U,	// CMHIv8i8
    2067U,	// CMHSv16i8
    2U,	// CMHSv1i64
    2579U,	// CMHSv2i32
    530U,	// CMHSv2i64
    3091U,	// CMHSv4i16
    1042U,	// CMHSv4i32
    1554U,	// CMHSv8i16
    3603U,	// CMHSv8i8
    4U,	// CMLEv16i8rz
    4U,	// CMLEv1i64rz
    4U,	// CMLEv2i32rz
    5U,	// CMLEv2i64rz
    5U,	// CMLEv4i16rz
    5U,	// CMLEv4i32rz
    5U,	// CMLEv8i16rz
    6U,	// CMLEv8i8rz
    4U,	// CMLTv16i8rz
    4U,	// CMLTv1i64rz
    4U,	// CMLTv2i32rz
    5U,	// CMLTv2i64rz
    5U,	// CMLTv4i16rz
    5U,	// CMLTv4i32rz
    5U,	// CMLTv8i16rz
    6U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    2067U,	// CMTSTv16i8
    2U,	// CMTSTv1i64
    2579U,	// CMTSTv2i32
    530U,	// CMTSTv2i64
    3091U,	// CMTSTv4i16
    1042U,	// CMTSTv4i32
    1554U,	// CMTSTv8i16
    3603U,	// CMTSTv8i8
    0U,	// CNTv16i8
    1U,	// CNTv8i8
    150U,	// CPYi16
    150U,	// CPYi32
    150U,	// CPYi64
    151U,	// CPYi8
    2U,	// CRC32Brr
    2U,	// CRC32CBrr
    2U,	// CRC32CHrr
    2U,	// CRC32CWrr
    2U,	// CRC32CXrr
    2U,	// CRC32Hrr
    2U,	// CRC32Wrr
    2U,	// CRC32Xrr
    20994U,	// CSELWr
    20994U,	// CSELXr
    20994U,	// CSINCWr
    20994U,	// CSINCXr
    20994U,	// CSINVWr
    20994U,	// CSINVXr
    20994U,	// CSNEGWr
    20994U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    151U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    150U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    150U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    150U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    150U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    150U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    151U,	// DUPv8i8lane
    0U,	// EONWrr
    66U,	// EONWrs
    0U,	// EONXrr
    66U,	// EONXrs
    98U,	// EORWri
    0U,	// EORWrr
    66U,	// EORWrs
    114U,	// EORXri
    0U,	// EORXrr
    66U,	// EORXrs
    2067U,	// EORv16i8
    3603U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    37378U,	// EXTRWrri
    37378U,	// EXTRXrri
    5651U,	// EXTv16i8
    6163U,	// EXTv8i8
    0U,	// F128CSEL
    2U,	// FABD16
    2U,	// FABD32
    2U,	// FABD64
    2579U,	// FABDv2f32
    530U,	// FABDv2f64
    3091U,	// FABDv4f16
    1042U,	// FABDv4f32
    1554U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    1U,	// FABSv4f16
    1U,	// FABSv4f32
    1U,	// FABSv8f16
    2U,	// FACGE16
    2U,	// FACGE32
    2U,	// FACGE64
    2579U,	// FACGEv2f32
    530U,	// FACGEv2f64
    3091U,	// FACGEv4f16
    1042U,	// FACGEv4f32
    1554U,	// FACGEv8f16
    2U,	// FACGT16
    2U,	// FACGT32
    2U,	// FACGT64
    2579U,	// FACGTv2f32
    530U,	// FACGTv2f64
    3091U,	// FACGTv4f16
    1042U,	// FACGTv4f32
    1554U,	// FACGTv8f16
    2U,	// FADDDrr
    2U,	// FADDHrr
    2579U,	// FADDPv2f32
    530U,	// FADDPv2f64
    7U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    3091U,	// FADDPv4f16
    1042U,	// FADDPv4f32
    1554U,	// FADDPv8f16
    2U,	// FADDSrr
    2579U,	// FADDv2f32
    530U,	// FADDv2f64
    3091U,	// FADDv4f16
    1042U,	// FADDv4f32
    1554U,	// FADDv8f16
    55827U,	// FCADDv2f32
    56338U,	// FCADDv2f64
    56851U,	// FCADDv4f16
    57362U,	// FCADDv4f32
    57874U,	// FCADDv8f16
    20994U,	// FCCMPDrr
    20994U,	// FCCMPEDrr
    20994U,	// FCCMPEHrr
    20994U,	// FCCMPESrr
    20994U,	// FCCMPHrr
    20994U,	// FCCMPSrr
    2U,	// FCMEQ16
    2U,	// FCMEQ32
    2U,	// FCMEQ64
    7U,	// FCMEQv1i16rz
    7U,	// FCMEQv1i32rz
    7U,	// FCMEQv1i64rz
    2579U,	// FCMEQv2f32
    530U,	// FCMEQv2f64
    7U,	// FCMEQv2i32rz
    8U,	// FCMEQv2i64rz
    3091U,	// FCMEQv4f16
    1042U,	// FCMEQv4f32
    8U,	// FCMEQv4i16rz
    8U,	// FCMEQv4i32rz
    1554U,	// FCMEQv8f16
    8U,	// FCMEQv8i16rz
    2U,	// FCMGE16
    2U,	// FCMGE32
    2U,	// FCMGE64
    7U,	// FCMGEv1i16rz
    7U,	// FCMGEv1i32rz
    7U,	// FCMGEv1i64rz
    2579U,	// FCMGEv2f32
    530U,	// FCMGEv2f64
    7U,	// FCMGEv2i32rz
    8U,	// FCMGEv2i64rz
    3091U,	// FCMGEv4f16
    1042U,	// FCMGEv4f32
    8U,	// FCMGEv4i16rz
    8U,	// FCMGEv4i32rz
    1554U,	// FCMGEv8f16
    8U,	// FCMGEv8i16rz
    2U,	// FCMGT16
    2U,	// FCMGT32
    2U,	// FCMGT64
    7U,	// FCMGTv1i16rz
    7U,	// FCMGTv1i32rz
    7U,	// FCMGTv1i64rz
    2579U,	// FCMGTv2f32
    530U,	// FCMGTv2f64
    7U,	// FCMGTv2i32rz
    8U,	// FCMGTv2i64rz
    3091U,	// FCMGTv4f16
    1042U,	// FCMGTv4f32
    8U,	// FCMGTv4i16rz
    8U,	// FCMGTv4i32rz
    1554U,	// FCMGTv8f16
    8U,	// FCMGTv8i16rz
    6691U,	// FCMLAv2f32
    7202U,	// FCMLAv2f64
    7715U,	// FCMLAv4f16
    25635U,	// FCMLAv4f16_indexed
    8226U,	// FCMLAv4f32
    26146U,	// FCMLAv4f32_indexed
    8738U,	// FCMLAv8f16
    25634U,	// FCMLAv8f16_indexed
    7U,	// FCMLEv1i16rz
    7U,	// FCMLEv1i32rz
    7U,	// FCMLEv1i64rz
    7U,	// FCMLEv2i32rz
    8U,	// FCMLEv2i64rz
    8U,	// FCMLEv4i16rz
    8U,	// FCMLEv4i32rz
    8U,	// FCMLEv8i16rz
    7U,	// FCMLTv1i16rz
    7U,	// FCMLTv1i32rz
    7U,	// FCMLTv1i64rz
    7U,	// FCMLTv2i32rz
    8U,	// FCMLTv2i64rz
    8U,	// FCMLTv4i16rz
    8U,	// FCMLTv4i32rz
    8U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    20994U,	// FCSELDrrr
    20994U,	// FCSELHrrr
    20994U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    1U,	// FCVTASv4f16
    1U,	// FCVTASv4f32
    1U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    1U,	// FCVTAUv4f16
    1U,	// FCVTAUv4f32
    1U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    1U,	// FCVTLv4i16
    1U,	// FCVTLv4i32
    1U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    1U,	// FCVTMSv4f16
    1U,	// FCVTMSv4f32
    1U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    1U,	// FCVTMUv4f16
    1U,	// FCVTMUv4f32
    1U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    1U,	// FCVTNSv4f16
    1U,	// FCVTNSv4f32
    1U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    1U,	// FCVTNUv4f16
    1U,	// FCVTNUv4f32
    1U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    1U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    1U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    1U,	// FCVTPSv4f16
    1U,	// FCVTPSv4f32
    1U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    1U,	// FCVTPUv4f16
    1U,	// FCVTPUv4f32
    1U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    2U,	// FCVTZSSWDri
    2U,	// FCVTZSSWHri
    2U,	// FCVTZSSWSri
    2U,	// FCVTZSSXDri
    2U,	// FCVTZSSXHri
    2U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    2U,	// FCVTZSd
    2U,	// FCVTZSh
    2U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    3U,	// FCVTZSv2i32_shift
    2U,	// FCVTZSv2i64_shift
    1U,	// FCVTZSv4f16
    1U,	// FCVTZSv4f32
    3U,	// FCVTZSv4i16_shift
    2U,	// FCVTZSv4i32_shift
    1U,	// FCVTZSv8f16
    2U,	// FCVTZSv8i16_shift
    2U,	// FCVTZUSWDri
    2U,	// FCVTZUSWHri
    2U,	// FCVTZUSWSri
    2U,	// FCVTZUSXDri
    2U,	// FCVTZUSXHri
    2U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    2U,	// FCVTZUd
    2U,	// FCVTZUh
    2U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    3U,	// FCVTZUv2i32_shift
    2U,	// FCVTZUv2i64_shift
    1U,	// FCVTZUv4f16
    1U,	// FCVTZUv4f32
    3U,	// FCVTZUv4i16_shift
    2U,	// FCVTZUv4i32_shift
    1U,	// FCVTZUv8f16
    2U,	// FCVTZUv8i16_shift
    2U,	// FDIVDrr
    2U,	// FDIVHrr
    2U,	// FDIVSrr
    2579U,	// FDIVv2f32
    530U,	// FDIVv2f64
    3091U,	// FDIVv4f16
    1042U,	// FDIVv4f32
    1554U,	// FDIVv8f16
    0U,	// FJCVTZS
    37378U,	// FMADDDrrr
    37378U,	// FMADDHrrr
    37378U,	// FMADDSrrr
    2U,	// FMAXDrr
    2U,	// FMAXHrr
    2U,	// FMAXNMDrr
    2U,	// FMAXNMHrr
    2579U,	// FMAXNMPv2f32
    530U,	// FMAXNMPv2f64
    7U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    3091U,	// FMAXNMPv4f16
    1042U,	// FMAXNMPv4f32
    1554U,	// FMAXNMPv8f16
    2U,	// FMAXNMSrr
    1U,	// FMAXNMVv4i16v
    1U,	// FMAXNMVv4i32v
    1U,	// FMAXNMVv8i16v
    2579U,	// FMAXNMv2f32
    530U,	// FMAXNMv2f64
    3091U,	// FMAXNMv4f16
    1042U,	// FMAXNMv4f32
    1554U,	// FMAXNMv8f16
    2579U,	// FMAXPv2f32
    530U,	// FMAXPv2f64
    7U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    3091U,	// FMAXPv4f16
    1042U,	// FMAXPv4f32
    1554U,	// FMAXPv8f16
    2U,	// FMAXSrr
    1U,	// FMAXVv4i16v
    1U,	// FMAXVv4i32v
    1U,	// FMAXVv8i16v
    2579U,	// FMAXv2f32
    530U,	// FMAXv2f64
    3091U,	// FMAXv4f16
    1042U,	// FMAXv4f32
    1554U,	// FMAXv8f16
    2U,	// FMINDrr
    2U,	// FMINHrr
    2U,	// FMINNMDrr
    2U,	// FMINNMHrr
    2579U,	// FMINNMPv2f32
    530U,	// FMINNMPv2f64
    7U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    3091U,	// FMINNMPv4f16
    1042U,	// FMINNMPv4f32
    1554U,	// FMINNMPv8f16
    2U,	// FMINNMSrr
    1U,	// FMINNMVv4i16v
    1U,	// FMINNMVv4i32v
    1U,	// FMINNMVv8i16v
    2579U,	// FMINNMv2f32
    530U,	// FMINNMv2f64
    3091U,	// FMINNMv4f16
    1042U,	// FMINNMv4f32
    1554U,	// FMINNMv8f16
    2579U,	// FMINPv2f32
    530U,	// FMINPv2f64
    7U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    3091U,	// FMINPv4f16
    1042U,	// FMINPv4f32
    1554U,	// FMINPv8f16
    2U,	// FMINSrr
    1U,	// FMINVv4i16v
    1U,	// FMINVv4i32v
    1U,	// FMINVv8i16v
    2579U,	// FMINv2f32
    530U,	// FMINv2f64
    3091U,	// FMINv4f16
    1042U,	// FMINv4f32
    1554U,	// FMINv8f16
    25634U,	// FMLAv1i16_indexed
    26146U,	// FMLAv1i32_indexed
    26658U,	// FMLAv1i64_indexed
    2595U,	// FMLAv2f32
    546U,	// FMLAv2f64
    26147U,	// FMLAv2i32_indexed
    26658U,	// FMLAv2i64_indexed
    3107U,	// FMLAv4f16
    1058U,	// FMLAv4f32
    25635U,	// FMLAv4i16_indexed
    26146U,	// FMLAv4i32_indexed
    1570U,	// FMLAv8f16
    25634U,	// FMLAv8i16_indexed
    25634U,	// FMLSv1i16_indexed
    26146U,	// FMLSv1i32_indexed
    26658U,	// FMLSv1i64_indexed
    2595U,	// FMLSv2f32
    546U,	// FMLSv2f64
    26147U,	// FMLSv2i32_indexed
    26658U,	// FMLSv2i64_indexed
    3107U,	// FMLSv4f16
    1058U,	// FMLSv4f32
    25635U,	// FMLSv4i16_indexed
    26146U,	// FMLSv4i32_indexed
    1570U,	// FMLSv8f16
    25634U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    150U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVH0
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    37378U,	// FMSUBDrrr
    37378U,	// FMSUBHrrr
    37378U,	// FMSUBSrrr
    2U,	// FMULDrr
    2U,	// FMULHrr
    2U,	// FMULSrr
    2U,	// FMULX16
    2U,	// FMULX32
    2U,	// FMULX64
    42002U,	// FMULXv1i16_indexed
    42514U,	// FMULXv1i32_indexed
    43026U,	// FMULXv1i64_indexed
    2579U,	// FMULXv2f32
    530U,	// FMULXv2f64
    42515U,	// FMULXv2i32_indexed
    43026U,	// FMULXv2i64_indexed
    3091U,	// FMULXv4f16
    1042U,	// FMULXv4f32
    42003U,	// FMULXv4i16_indexed
    42514U,	// FMULXv4i32_indexed
    1554U,	// FMULXv8f16
    42002U,	// FMULXv8i16_indexed
    42002U,	// FMULv1i16_indexed
    42514U,	// FMULv1i32_indexed
    43026U,	// FMULv1i64_indexed
    2579U,	// FMULv2f32
    530U,	// FMULv2f64
    42515U,	// FMULv2i32_indexed
    43026U,	// FMULv2i64_indexed
    3091U,	// FMULv4f16
    1042U,	// FMULv4f32
    42003U,	// FMULv4i16_indexed
    42514U,	// FMULv4i32_indexed
    1554U,	// FMULv8f16
    42002U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    1U,	// FNEGv4f16
    1U,	// FNEGv4f32
    1U,	// FNEGv8f16
    37378U,	// FNMADDDrrr
    37378U,	// FNMADDHrrr
    37378U,	// FNMADDSrrr
    37378U,	// FNMSUBDrrr
    37378U,	// FNMSUBHrrr
    37378U,	// FNMSUBSrrr
    2U,	// FNMULDrr
    2U,	// FNMULHrr
    2U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    1U,	// FRECPEv4f16
    1U,	// FRECPEv4f32
    1U,	// FRECPEv8f16
    2U,	// FRECPS16
    2U,	// FRECPS32
    2U,	// FRECPS64
    2579U,	// FRECPSv2f32
    530U,	// FRECPSv2f64
    3091U,	// FRECPSv4f16
    1042U,	// FRECPSv4f32
    1554U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    1U,	// FRINTAv4f16
    1U,	// FRINTAv4f32
    1U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    1U,	// FRINTIv4f16
    1U,	// FRINTIv4f32
    1U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    1U,	// FRINTMv4f16
    1U,	// FRINTMv4f32
    1U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    1U,	// FRINTNv4f16
    1U,	// FRINTNv4f32
    1U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    1U,	// FRINTPv4f16
    1U,	// FRINTPv4f32
    1U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    1U,	// FRINTXv4f16
    1U,	// FRINTXv4f32
    1U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    1U,	// FRINTZv4f16
    1U,	// FRINTZv4f32
    1U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    1U,	// FRSQRTEv4f16
    1U,	// FRSQRTEv4f32
    1U,	// FRSQRTEv8f16
    2U,	// FRSQRTS16
    2U,	// FRSQRTS32
    2U,	// FRSQRTS64
    2579U,	// FRSQRTSv2f32
    530U,	// FRSQRTSv2f64
    3091U,	// FRSQRTSv4f16
    1042U,	// FRSQRTSv4f32
    1554U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    1U,	// FSQRTv4f16
    1U,	// FSQRTv4f32
    1U,	// FSQRTv8f16
    2U,	// FSUBDrr
    2U,	// FSUBHrr
    2U,	// FSUBSrr
    2579U,	// FSUBv2f32
    530U,	// FSUBv2f64
    3091U,	// FSUBv4f16
    1042U,	// FSUBv4f32
    1554U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    166U,	// INSvi16lane
    0U,	// INSvi32gpr
    166U,	// INSvi32lane
    0U,	// INSvi64gpr
    166U,	// INSvi64lane
    0U,	// INSvi8gpr
    167U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    9U,	// LDAPRB
    9U,	// LDAPRH
    9U,	// LDAPRW
    9U,	// LDAPRX
    9U,	// LDARB
    9U,	// LDARH
    9U,	// LDARW
    9U,	// LDARX
    5124U,	// LDAXPW
    5124U,	// LDAXPX
    9U,	// LDAXRB
    9U,	// LDAXRH
    9U,	// LDAXRW
    9U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    9U,	// LDLARB
    9U,	// LDLARH
    9U,	// LDLARW
    9U,	// LDLARX
    53764U,	// LDNPDi
    4612U,	// LDNPQi
    20996U,	// LDNPSi
    20996U,	// LDNPWi
    53764U,	// LDNPXi
    53764U,	// LDPDi
    43652U,	// LDPDpost
    37508U,	// LDPDpre
    4612U,	// LDPQi
    60036U,	// LDPQpost
    53892U,	// LDPQpre
    20996U,	// LDPSWi
    10884U,	// LDPSWpost
    4740U,	// LDPSWpre
    20996U,	// LDPSi
    10884U,	// LDPSpost
    4740U,	// LDPSpre
    20996U,	// LDPWi
    10884U,	// LDPWpost
    4740U,	// LDPWpre
    53764U,	// LDPXi
    43652U,	// LDPXpost
    37508U,	// LDPXpre
    178U,	// LDRAAindexed
    194U,	// LDRAAwriteback
    178U,	// LDRABindexed
    194U,	// LDRABwriteback
    9U,	// LDRBBpost
    11394U,	// LDRBBpre
    20994U,	// LDRBBroW
    37378U,	// LDRBBroX
    210U,	// LDRBBui
    9U,	// LDRBpost
    11394U,	// LDRBpre
    20994U,	// LDRBroW
    37378U,	// LDRBroX
    210U,	// LDRBui
    0U,	// LDRDl
    9U,	// LDRDpost
    11394U,	// LDRDpre
    53762U,	// LDRDroW
    4610U,	// LDRDroX
    226U,	// LDRDui
    9U,	// LDRHHpost
    11394U,	// LDRHHpre
    20994U,	// LDRHHroW
    37378U,	// LDRHHroX
    242U,	// LDRHHui
    9U,	// LDRHpost
    11394U,	// LDRHpre
    20994U,	// LDRHroW
    37378U,	// LDRHroX
    242U,	// LDRHui
    0U,	// LDRQl
    9U,	// LDRQpost
    11394U,	// LDRQpre
    53762U,	// LDRQroW
    4610U,	// LDRQroX
    258U,	// LDRQui
    9U,	// LDRSBWpost
    11394U,	// LDRSBWpre
    20994U,	// LDRSBWroW
    37378U,	// LDRSBWroX
    210U,	// LDRSBWui
    9U,	// LDRSBXpost
    11394U,	// LDRSBXpre
    20994U,	// LDRSBXroW
    37378U,	// LDRSBXroX
    210U,	// LDRSBXui
    9U,	// LDRSHWpost
    11394U,	// LDRSHWpre
    20994U,	// LDRSHWroW
    37378U,	// LDRSHWroX
    242U,	// LDRSHWui
    9U,	// LDRSHXpost
    11394U,	// LDRSHXpre
    20994U,	// LDRSHXroW
    37378U,	// LDRSHXroX
    242U,	// LDRSHXui
    0U,	// LDRSWl
    9U,	// LDRSWpost
    11394U,	// LDRSWpre
    20994U,	// LDRSWroW
    37378U,	// LDRSWroX
    274U,	// LDRSWui
    0U,	// LDRSl
    9U,	// LDRSpost
    11394U,	// LDRSpre
    20994U,	// LDRSroW
    37378U,	// LDRSroX
    274U,	// LDRSui
    0U,	// LDRWl
    9U,	// LDRWpost
    11394U,	// LDRWpre
    20994U,	// LDRWroW
    37378U,	// LDRWroX
    274U,	// LDRWui
    0U,	// LDRXl
    9U,	// LDRXpost
    11394U,	// LDRXpre
    53762U,	// LDRXroW
    4610U,	// LDRXroX
    226U,	// LDRXui
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    5122U,	// LDTRBi
    5122U,	// LDTRHi
    5122U,	// LDTRSBWi
    5122U,	// LDTRSBXi
    5122U,	// LDTRSHWi
    5122U,	// LDTRSHXi
    5122U,	// LDTRSWi
    5122U,	// LDTRWi
    5122U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    5122U,	// LDURBBi
    5122U,	// LDURBi
    5122U,	// LDURDi
    5122U,	// LDURHHi
    5122U,	// LDURHi
    5122U,	// LDURQi
    5122U,	// LDURSBWi
    5122U,	// LDURSBXi
    5122U,	// LDURSHWi
    5122U,	// LDURSHXi
    5122U,	// LDURSWi
    5122U,	// LDURSi
    5122U,	// LDURWi
    5122U,	// LDURXi
    5124U,	// LDXPW
    5124U,	// LDXPX
    9U,	// LDXRB
    9U,	// LDXRH
    9U,	// LDXRW
    9U,	// LDXRX
    0U,	// LOADgot
    2U,	// LSLVWr
    2U,	// LSLVXr
    2U,	// LSRVWr
    2U,	// LSRVXr
    37378U,	// MADDWrrr
    37378U,	// MADDXrrr
    2083U,	// MLAv16i8
    2595U,	// MLAv2i32
    26147U,	// MLAv2i32_indexed
    3107U,	// MLAv4i16
    25635U,	// MLAv4i16_indexed
    1058U,	// MLAv4i32
    26146U,	// MLAv4i32_indexed
    1570U,	// MLAv8i16
    25634U,	// MLAv8i16_indexed
    3619U,	// MLAv8i8
    2083U,	// MLSv16i8
    2595U,	// MLSv2i32
    26147U,	// MLSv2i32_indexed
    3107U,	// MLSv4i16
    25635U,	// MLSv4i16_indexed
    1058U,	// MLSv4i32
    26146U,	// MLSv4i32_indexed
    1570U,	// MLSv8i16
    25634U,	// MLSv8i16_indexed
    3619U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    9U,	// MOVIv2i32
    9U,	// MOVIv2s_msl
    9U,	// MOVIv4i16
    9U,	// MOVIv4i32
    9U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    9U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    9U,	// MOVNWi
    9U,	// MOVNXi
    9U,	// MOVZWi
    9U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    37378U,	// MSUBWrrr
    37378U,	// MSUBXrrr
    2067U,	// MULv16i8
    2579U,	// MULv2i32
    42515U,	// MULv2i32_indexed
    3091U,	// MULv4i16
    42003U,	// MULv4i16_indexed
    1042U,	// MULv4i32
    42514U,	// MULv4i32_indexed
    1554U,	// MULv8i16
    42002U,	// MULv8i16_indexed
    3603U,	// MULv8i8
    9U,	// MVNIv2i32
    9U,	// MVNIv2s_msl
    9U,	// MVNIv4i16
    9U,	// MVNIv4i32
    9U,	// MVNIv4s_msl
    9U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    1U,	// NEGv4i16
    1U,	// NEGv4i32
    1U,	// NEGv8i16
    1U,	// NEGv8i8
    0U,	// NOTv16i8
    1U,	// NOTv8i8
    0U,	// ORNWrr
    66U,	// ORNWrs
    0U,	// ORNXrr
    66U,	// ORNXrs
    2067U,	// ORNv16i8
    3603U,	// ORNv8i8
    98U,	// ORRWri
    0U,	// ORRWrr
    66U,	// ORRWrs
    114U,	// ORRXri
    0U,	// ORRXrr
    66U,	// ORRXrs
    2067U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    3603U,	// ORRv8i8
    0U,	// PACDA
    0U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    2U,	// PACGA
    0U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    0U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    2067U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    3603U,	// PMULLv8i8
    2067U,	// PMULv16i8
    3603U,	// PMULv8i8
    0U,	// PRFMl
    53762U,	// PRFMroW
    4610U,	// PRFMroX
    226U,	// PRFMui
    5122U,	// PRFUMi
    530U,	// RADDHNv2i64_v2i32
    546U,	// RADDHNv2i64_v4i32
    1042U,	// RADDHNv4i32_v4i16
    1058U,	// RADDHNv4i32_v8i16
    1570U,	// RADDHNv8i16_v16i8
    1554U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    1U,	// RBITv8i8
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    1U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    1U,	// REV32v4i16
    1U,	// REV32v8i16
    1U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    1U,	// REV64v4i16
    1U,	// REV64v4i32
    1U,	// REV64v8i16
    1U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    2U,	// RORVWr
    2U,	// RORVXr
    130U,	// RSHRNv16i8_shift
    2U,	// RSHRNv2i32_shift
    2U,	// RSHRNv4i16_shift
    130U,	// RSHRNv4i32_shift
    130U,	// RSHRNv8i16_shift
    2U,	// RSHRNv8i8_shift
    530U,	// RSUBHNv2i64_v2i32
    546U,	// RSUBHNv2i64_v4i32
    1042U,	// RSUBHNv4i32_v4i16
    1058U,	// RSUBHNv4i32_v8i16
    1570U,	// RSUBHNv8i16_v16i8
    1554U,	// RSUBHNv8i16_v8i8
    2083U,	// SABALv16i8_v8i16
    2595U,	// SABALv2i32_v2i64
    3107U,	// SABALv4i16_v4i32
    1058U,	// SABALv4i32_v2i64
    1570U,	// SABALv8i16_v4i32
    3619U,	// SABALv8i8_v8i16
    2083U,	// SABAv16i8
    2595U,	// SABAv2i32
    3107U,	// SABAv4i16
    1058U,	// SABAv4i32
    1570U,	// SABAv8i16
    3619U,	// SABAv8i8
    2067U,	// SABDLv16i8_v8i16
    2579U,	// SABDLv2i32_v2i64
    3091U,	// SABDLv4i16_v4i32
    1042U,	// SABDLv4i32_v2i64
    1554U,	// SABDLv8i16_v4i32
    3603U,	// SABDLv8i8_v8i16
    2067U,	// SABDv16i8
    2579U,	// SABDv2i32
    3091U,	// SABDv4i16
    1042U,	// SABDv4i32
    1554U,	// SABDv8i16
    3603U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    1U,	// SADALPv4i16_v2i32
    1U,	// SADALPv4i32_v2i64
    1U,	// SADALPv8i16_v4i32
    1U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    1U,	// SADDLPv4i16_v2i32
    1U,	// SADDLPv4i32_v2i64
    1U,	// SADDLPv8i16_v4i32
    1U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    1U,	// SADDLVv4i16v
    1U,	// SADDLVv4i32v
    1U,	// SADDLVv8i16v
    1U,	// SADDLVv8i8v
    2067U,	// SADDLv16i8_v8i16
    2579U,	// SADDLv2i32_v2i64
    3091U,	// SADDLv4i16_v4i32
    1042U,	// SADDLv4i32_v2i64
    1554U,	// SADDLv8i16_v4i32
    3603U,	// SADDLv8i8_v8i16
    2066U,	// SADDWv16i8_v8i16
    2578U,	// SADDWv2i32_v2i64
    3090U,	// SADDWv4i16_v4i32
    1042U,	// SADDWv4i32_v2i64
    1554U,	// SADDWv8i16_v4i32
    3602U,	// SADDWv8i8_v8i16
    2U,	// SBCSWr
    2U,	// SBCSXr
    2U,	// SBCWr
    2U,	// SBCXr
    37378U,	// SBFMWri
    37378U,	// SBFMXri
    2U,	// SCVTFSWDri
    2U,	// SCVTFSWHri
    2U,	// SCVTFSWSri
    2U,	// SCVTFSXDri
    2U,	// SCVTFSXHri
    2U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    2U,	// SCVTFd
    2U,	// SCVTFh
    2U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    3U,	// SCVTFv2i32_shift
    2U,	// SCVTFv2i64_shift
    1U,	// SCVTFv4f16
    1U,	// SCVTFv4f32
    3U,	// SCVTFv4i16_shift
    2U,	// SCVTFv4i32_shift
    1U,	// SCVTFv8f16
    2U,	// SCVTFv8i16_shift
    2U,	// SDIVWr
    2U,	// SDIVXr
    3603U,	// SDOT2S
    2067U,	// SDOT4S
    11811U,	// SDOTIDX2S
    11811U,	// SDOTIDX4S
    1058U,	// SHA1Crrr
    0U,	// SHA1Hrr
    1058U,	// SHA1Mrrr
    1058U,	// SHA1Prrr
    1058U,	// SHA1SU0rrr
    1U,	// SHA1SU1rr
    1058U,	// SHA256H2rrr
    1058U,	// SHA256Hrrr
    1U,	// SHA256SU0rr
    1058U,	// SHA256SU1rrr
    2067U,	// SHADDv16i8
    2579U,	// SHADDv2i32
    3091U,	// SHADDv4i16
    1042U,	// SHADDv4i32
    1554U,	// SHADDv8i16
    3603U,	// SHADDv8i8
    9U,	// SHLLv16i8
    10U,	// SHLLv2i32
    10U,	// SHLLv4i16
    10U,	// SHLLv4i32
    10U,	// SHLLv8i16
    11U,	// SHLLv8i8
    2U,	// SHLd
    3U,	// SHLv16i8_shift
    3U,	// SHLv2i32_shift
    2U,	// SHLv2i64_shift
    3U,	// SHLv4i16_shift
    2U,	// SHLv4i32_shift
    2U,	// SHLv8i16_shift
    3U,	// SHLv8i8_shift
    130U,	// SHRNv16i8_shift
    2U,	// SHRNv2i32_shift
    2U,	// SHRNv4i16_shift
    130U,	// SHRNv4i32_shift
    130U,	// SHRNv8i16_shift
    2U,	// SHRNv8i8_shift
    2067U,	// SHSUBv16i8
    2579U,	// SHSUBv2i32
    3091U,	// SHSUBv4i16
    1042U,	// SHSUBv4i32
    1554U,	// SHSUBv8i16
    3603U,	// SHSUBv8i8
    130U,	// SLId
    131U,	// SLIv16i8_shift
    131U,	// SLIv2i32_shift
    130U,	// SLIv2i64_shift
    131U,	// SLIv4i16_shift
    130U,	// SLIv4i32_shift
    130U,	// SLIv8i16_shift
    131U,	// SLIv8i8_shift
    37378U,	// SMADDLrrr
    2067U,	// SMAXPv16i8
    2579U,	// SMAXPv2i32
    3091U,	// SMAXPv4i16
    1042U,	// SMAXPv4i32
    1554U,	// SMAXPv8i16
    3603U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    1U,	// SMAXVv4i16v
    1U,	// SMAXVv4i32v
    1U,	// SMAXVv8i16v
    1U,	// SMAXVv8i8v
    2067U,	// SMAXv16i8
    2579U,	// SMAXv2i32
    3091U,	// SMAXv4i16
    1042U,	// SMAXv4i32
    1554U,	// SMAXv8i16
    3603U,	// SMAXv8i8
    0U,	// SMC
    2067U,	// SMINPv16i8
    2579U,	// SMINPv2i32
    3091U,	// SMINPv4i16
    1042U,	// SMINPv4i32
    1554U,	// SMINPv8i16
    3603U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    1U,	// SMINVv4i16v
    1U,	// SMINVv4i32v
    1U,	// SMINVv8i16v
    1U,	// SMINVv8i8v
    2067U,	// SMINv16i8
    2579U,	// SMINv2i32
    3091U,	// SMINv4i16
    1042U,	// SMINv4i32
    1554U,	// SMINv8i16
    3603U,	// SMINv8i8
    2083U,	// SMLALv16i8_v8i16
    26147U,	// SMLALv2i32_indexed
    2595U,	// SMLALv2i32_v2i64
    25635U,	// SMLALv4i16_indexed
    3107U,	// SMLALv4i16_v4i32
    26146U,	// SMLALv4i32_indexed
    1058U,	// SMLALv4i32_v2i64
    25634U,	// SMLALv8i16_indexed
    1570U,	// SMLALv8i16_v4i32
    3619U,	// SMLALv8i8_v8i16
    2083U,	// SMLSLv16i8_v8i16
    26147U,	// SMLSLv2i32_indexed
    2595U,	// SMLSLv2i32_v2i64
    25635U,	// SMLSLv4i16_indexed
    3107U,	// SMLSLv4i16_v4i32
    26146U,	// SMLSLv4i32_indexed
    1058U,	// SMLSLv4i32_v2i64
    25634U,	// SMLSLv8i16_indexed
    1570U,	// SMLSLv8i16_v4i32
    3619U,	// SMLSLv8i8_v8i16
    150U,	// SMOVvi16to32
    150U,	// SMOVvi16to64
    150U,	// SMOVvi32to64
    151U,	// SMOVvi8to32
    151U,	// SMOVvi8to64
    37378U,	// SMSUBLrrr
    2U,	// SMULHrr
    2067U,	// SMULLv16i8_v8i16
    42515U,	// SMULLv2i32_indexed
    2579U,	// SMULLv2i32_v2i64
    42003U,	// SMULLv4i16_indexed
    3091U,	// SMULLv4i16_v4i32
    42514U,	// SMULLv4i32_indexed
    1042U,	// SMULLv4i32_v2i64
    42002U,	// SMULLv8i16_indexed
    1554U,	// SMULLv8i16_v4i32
    3603U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    1U,	// SQABSv4i16
    1U,	// SQABSv4i32
    1U,	// SQABSv8i16
    1U,	// SQABSv8i8
    2067U,	// SQADDv16i8
    2U,	// SQADDv1i16
    2U,	// SQADDv1i32
    2U,	// SQADDv1i64
    2U,	// SQADDv1i8
    2579U,	// SQADDv2i32
    530U,	// SQADDv2i64
    3091U,	// SQADDv4i16
    1042U,	// SQADDv4i32
    1554U,	// SQADDv8i16
    3603U,	// SQADDv8i8
    130U,	// SQDMLALi16
    130U,	// SQDMLALi32
    25634U,	// SQDMLALv1i32_indexed
    26146U,	// SQDMLALv1i64_indexed
    26147U,	// SQDMLALv2i32_indexed
    2595U,	// SQDMLALv2i32_v2i64
    25635U,	// SQDMLALv4i16_indexed
    3107U,	// SQDMLALv4i16_v4i32
    26146U,	// SQDMLALv4i32_indexed
    1058U,	// SQDMLALv4i32_v2i64
    25634U,	// SQDMLALv8i16_indexed
    1570U,	// SQDMLALv8i16_v4i32
    130U,	// SQDMLSLi16
    130U,	// SQDMLSLi32
    25634U,	// SQDMLSLv1i32_indexed
    26146U,	// SQDMLSLv1i64_indexed
    26147U,	// SQDMLSLv2i32_indexed
    2595U,	// SQDMLSLv2i32_v2i64
    25635U,	// SQDMLSLv4i16_indexed
    3107U,	// SQDMLSLv4i16_v4i32
    26146U,	// SQDMLSLv4i32_indexed
    1058U,	// SQDMLSLv4i32_v2i64
    25634U,	// SQDMLSLv8i16_indexed
    1570U,	// SQDMLSLv8i16_v4i32
    2U,	// SQDMULHv1i16
    42002U,	// SQDMULHv1i16_indexed
    2U,	// SQDMULHv1i32
    42514U,	// SQDMULHv1i32_indexed
    2579U,	// SQDMULHv2i32
    42515U,	// SQDMULHv2i32_indexed
    3091U,	// SQDMULHv4i16
    42003U,	// SQDMULHv4i16_indexed
    1042U,	// SQDMULHv4i32
    42514U,	// SQDMULHv4i32_indexed
    1554U,	// SQDMULHv8i16
    42002U,	// SQDMULHv8i16_indexed
    2U,	// SQDMULLi16
    2U,	// SQDMULLi32
    42002U,	// SQDMULLv1i32_indexed
    42514U,	// SQDMULLv1i64_indexed
    42515U,	// SQDMULLv2i32_indexed
    2579U,	// SQDMULLv2i32_v2i64
    42003U,	// SQDMULLv4i16_indexed
    3091U,	// SQDMULLv4i16_v4i32
    42514U,	// SQDMULLv4i32_indexed
    1042U,	// SQDMULLv4i32_v2i64
    42002U,	// SQDMULLv8i16_indexed
    1554U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    1U,	// SQNEGv4i16
    1U,	// SQNEGv4i32
    1U,	// SQNEGv8i16
    1U,	// SQNEGv8i8
    25634U,	// SQRDMLAHi16_indexed
    26146U,	// SQRDMLAHi32_indexed
    130U,	// SQRDMLAHv1i16
    130U,	// SQRDMLAHv1i32
    2595U,	// SQRDMLAHv2i32
    26147U,	// SQRDMLAHv2i32_indexed
    3107U,	// SQRDMLAHv4i16
    25635U,	// SQRDMLAHv4i16_indexed
    1058U,	// SQRDMLAHv4i32
    26146U,	// SQRDMLAHv4i32_indexed
    1570U,	// SQRDMLAHv8i16
    25634U,	// SQRDMLAHv8i16_indexed
    25634U,	// SQRDMLSHi16_indexed
    26146U,	// SQRDMLSHi32_indexed
    130U,	// SQRDMLSHv1i16
    130U,	// SQRDMLSHv1i32
    2595U,	// SQRDMLSHv2i32
    26147U,	// SQRDMLSHv2i32_indexed
    3107U,	// SQRDMLSHv4i16
    25635U,	// SQRDMLSHv4i16_indexed
    1058U,	// SQRDMLSHv4i32
    26146U,	// SQRDMLSHv4i32_indexed
    1570U,	// SQRDMLSHv8i16
    25634U,	// SQRDMLSHv8i16_indexed
    2U,	// SQRDMULHv1i16
    42002U,	// SQRDMULHv1i16_indexed
    2U,	// SQRDMULHv1i32
    42514U,	// SQRDMULHv1i32_indexed
    2579U,	// SQRDMULHv2i32
    42515U,	// SQRDMULHv2i32_indexed
    3091U,	// SQRDMULHv4i16
    42003U,	// SQRDMULHv4i16_indexed
    1042U,	// SQRDMULHv4i32
    42514U,	// SQRDMULHv4i32_indexed
    1554U,	// SQRDMULHv8i16
    42002U,	// SQRDMULHv8i16_indexed
    2067U,	// SQRSHLv16i8
    2U,	// SQRSHLv1i16
    2U,	// SQRSHLv1i32
    2U,	// SQRSHLv1i64
    2U,	// SQRSHLv1i8
    2579U,	// SQRSHLv2i32
    530U,	// SQRSHLv2i64
    3091U,	// SQRSHLv4i16
    1042U,	// SQRSHLv4i32
    1554U,	// SQRSHLv8i16
    3603U,	// SQRSHLv8i8
    2U,	// SQRSHRNb
    2U,	// SQRSHRNh
    2U,	// SQRSHRNs
    130U,	// SQRSHRNv16i8_shift
    2U,	// SQRSHRNv2i32_shift
    2U,	// SQRSHRNv4i16_shift
    130U,	// SQRSHRNv4i32_shift
    130U,	// SQRSHRNv8i16_shift
    2U,	// SQRSHRNv8i8_shift
    2U,	// SQRSHRUNb
    2U,	// SQRSHRUNh
    2U,	// SQRSHRUNs
    130U,	// SQRSHRUNv16i8_shift
    2U,	// SQRSHRUNv2i32_shift
    2U,	// SQRSHRUNv4i16_shift
    130U,	// SQRSHRUNv4i32_shift
    130U,	// SQRSHRUNv8i16_shift
    2U,	// SQRSHRUNv8i8_shift
    2U,	// SQSHLUb
    2U,	// SQSHLUd
    2U,	// SQSHLUh
    2U,	// SQSHLUs
    3U,	// SQSHLUv16i8_shift
    3U,	// SQSHLUv2i32_shift
    2U,	// SQSHLUv2i64_shift
    3U,	// SQSHLUv4i16_shift
    2U,	// SQSHLUv4i32_shift
    2U,	// SQSHLUv8i16_shift
    3U,	// SQSHLUv8i8_shift
    2U,	// SQSHLb
    2U,	// SQSHLd
    2U,	// SQSHLh
    2U,	// SQSHLs
    2067U,	// SQSHLv16i8
    3U,	// SQSHLv16i8_shift
    2U,	// SQSHLv1i16
    2U,	// SQSHLv1i32
    2U,	// SQSHLv1i64
    2U,	// SQSHLv1i8
    2579U,	// SQSHLv2i32
    3U,	// SQSHLv2i32_shift
    530U,	// SQSHLv2i64
    2U,	// SQSHLv2i64_shift
    3091U,	// SQSHLv4i16
    3U,	// SQSHLv4i16_shift
    1042U,	// SQSHLv4i32
    2U,	// SQSHLv4i32_shift
    1554U,	// SQSHLv8i16
    2U,	// SQSHLv8i16_shift
    3603U,	// SQSHLv8i8
    3U,	// SQSHLv8i8_shift
    2U,	// SQSHRNb
    2U,	// SQSHRNh
    2U,	// SQSHRNs
    130U,	// SQSHRNv16i8_shift
    2U,	// SQSHRNv2i32_shift
    2U,	// SQSHRNv4i16_shift
    130U,	// SQSHRNv4i32_shift
    130U,	// SQSHRNv8i16_shift
    2U,	// SQSHRNv8i8_shift
    2U,	// SQSHRUNb
    2U,	// SQSHRUNh
    2U,	// SQSHRUNs
    130U,	// SQSHRUNv16i8_shift
    2U,	// SQSHRUNv2i32_shift
    2U,	// SQSHRUNv4i16_shift
    130U,	// SQSHRUNv4i32_shift
    130U,	// SQSHRUNv8i16_shift
    2U,	// SQSHRUNv8i8_shift
    2067U,	// SQSUBv16i8
    2U,	// SQSUBv1i16
    2U,	// SQSUBv1i32
    2U,	// SQSUBv1i64
    2U,	// SQSUBv1i8
    2579U,	// SQSUBv2i32
    530U,	// SQSUBv2i64
    3091U,	// SQSUBv4i16
    1042U,	// SQSUBv4i32
    1554U,	// SQSUBv8i16
    3603U,	// SQSUBv8i8
    1U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    1U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    1U,	// SQXTNv8i16
    1U,	// SQXTNv8i8
    1U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    1U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    1U,	// SQXTUNv8i16
    1U,	// SQXTUNv8i8
    2067U,	// SRHADDv16i8
    2579U,	// SRHADDv2i32
    3091U,	// SRHADDv4i16
    1042U,	// SRHADDv4i32
    1554U,	// SRHADDv8i16
    3603U,	// SRHADDv8i8
    130U,	// SRId
    131U,	// SRIv16i8_shift
    131U,	// SRIv2i32_shift
    130U,	// SRIv2i64_shift
    131U,	// SRIv4i16_shift
    130U,	// SRIv4i32_shift
    130U,	// SRIv8i16_shift
    131U,	// SRIv8i8_shift
    2067U,	// SRSHLv16i8
    2U,	// SRSHLv1i64
    2579U,	// SRSHLv2i32
    530U,	// SRSHLv2i64
    3091U,	// SRSHLv4i16
    1042U,	// SRSHLv4i32
    1554U,	// SRSHLv8i16
    3603U,	// SRSHLv8i8
    2U,	// SRSHRd
    3U,	// SRSHRv16i8_shift
    3U,	// SRSHRv2i32_shift
    2U,	// SRSHRv2i64_shift
    3U,	// SRSHRv4i16_shift
    2U,	// SRSHRv4i32_shift
    2U,	// SRSHRv8i16_shift
    3U,	// SRSHRv8i8_shift
    130U,	// SRSRAd
    131U,	// SRSRAv16i8_shift
    131U,	// SRSRAv2i32_shift
    130U,	// SRSRAv2i64_shift
    131U,	// SRSRAv4i16_shift
    130U,	// SRSRAv4i32_shift
    130U,	// SRSRAv8i16_shift
    131U,	// SRSRAv8i8_shift
    3U,	// SSHLLv16i8_shift
    3U,	// SSHLLv2i32_shift
    3U,	// SSHLLv4i16_shift
    2U,	// SSHLLv4i32_shift
    2U,	// SSHLLv8i16_shift
    3U,	// SSHLLv8i8_shift
    2067U,	// SSHLv16i8
    2U,	// SSHLv1i64
    2579U,	// SSHLv2i32
    530U,	// SSHLv2i64
    3091U,	// SSHLv4i16
    1042U,	// SSHLv4i32
    1554U,	// SSHLv8i16
    3603U,	// SSHLv8i8
    2U,	// SSHRd
    3U,	// SSHRv16i8_shift
    3U,	// SSHRv2i32_shift
    2U,	// SSHRv2i64_shift
    3U,	// SSHRv4i16_shift
    2U,	// SSHRv4i32_shift
    2U,	// SSHRv8i16_shift
    3U,	// SSHRv8i8_shift
    130U,	// SSRAd
    131U,	// SSRAv16i8_shift
    131U,	// SSRAv2i32_shift
    130U,	// SSRAv2i64_shift
    131U,	// SSRAv4i16_shift
    130U,	// SSRAv4i32_shift
    130U,	// SSRAv8i16_shift
    131U,	// SSRAv8i8_shift
    2067U,	// SSUBLv16i8_v8i16
    2579U,	// SSUBLv2i32_v2i64
    3091U,	// SSUBLv4i16_v4i32
    1042U,	// SSUBLv4i32_v2i64
    1554U,	// SSUBLv8i16_v4i32
    3603U,	// SSUBLv8i8_v8i16
    2066U,	// SSUBWv16i8_v8i16
    2578U,	// SSUBWv2i32_v2i64
    3090U,	// SSUBWv4i16_v4i32
    1042U,	// SSUBWv4i32_v2i64
    1554U,	// SSUBWv8i16_v4i32
    3602U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    9U,	// STLLRB
    9U,	// STLLRH
    9U,	// STLLRW
    9U,	// STLLRX
    9U,	// STLRB
    9U,	// STLRH
    9U,	// STLRW
    9U,	// STLRX
    12290U,	// STLXPW
    12290U,	// STLXPX
    5124U,	// STLXRB
    5124U,	// STLXRH
    5124U,	// STLXRW
    5124U,	// STLXRX
    53764U,	// STNPDi
    4612U,	// STNPQi
    20996U,	// STNPSi
    20996U,	// STNPWi
    53764U,	// STNPXi
    53764U,	// STPDi
    43652U,	// STPDpost
    37508U,	// STPDpre
    4612U,	// STPQi
    60036U,	// STPQpost
    53892U,	// STPQpre
    20996U,	// STPSi
    10884U,	// STPSpost
    4740U,	// STPSpre
    20996U,	// STPWi
    10884U,	// STPWpost
    4740U,	// STPWpre
    53764U,	// STPXi
    43652U,	// STPXpost
    37508U,	// STPXpre
    9U,	// STRBBpost
    11394U,	// STRBBpre
    20994U,	// STRBBroW
    37378U,	// STRBBroX
    210U,	// STRBBui
    9U,	// STRBpost
    11394U,	// STRBpre
    20994U,	// STRBroW
    37378U,	// STRBroX
    210U,	// STRBui
    9U,	// STRDpost
    11394U,	// STRDpre
    53762U,	// STRDroW
    4610U,	// STRDroX
    226U,	// STRDui
    9U,	// STRHHpost
    11394U,	// STRHHpre
    20994U,	// STRHHroW
    37378U,	// STRHHroX
    242U,	// STRHHui
    9U,	// STRHpost
    11394U,	// STRHpre
    20994U,	// STRHroW
    37378U,	// STRHroX
    242U,	// STRHui
    9U,	// STRQpost
    11394U,	// STRQpre
    53762U,	// STRQroW
    4610U,	// STRQroX
    258U,	// STRQui
    9U,	// STRSpost
    11394U,	// STRSpre
    20994U,	// STRSroW
    37378U,	// STRSroX
    274U,	// STRSui
    9U,	// STRWpost
    11394U,	// STRWpre
    20994U,	// STRWroW
    37378U,	// STRWroX
    274U,	// STRWui
    9U,	// STRXpost
    11394U,	// STRXpre
    53762U,	// STRXroW
    4610U,	// STRXroX
    226U,	// STRXui
    5122U,	// STTRBi
    5122U,	// STTRHi
    5122U,	// STTRWi
    5122U,	// STTRXi
    5122U,	// STURBBi
    5122U,	// STURBi
    5122U,	// STURDi
    5122U,	// STURHHi
    5122U,	// STURHi
    5122U,	// STURQi
    5122U,	// STURSi
    5122U,	// STURWi
    5122U,	// STURXi
    12290U,	// STXPW
    12290U,	// STXPX
    5124U,	// STXRB
    5124U,	// STXRH
    5124U,	// STXRW
    5124U,	// STXRX
    530U,	// SUBHNv2i64_v2i32
    546U,	// SUBHNv2i64_v4i32
    1042U,	// SUBHNv4i32_v4i16
    1058U,	// SUBHNv4i32_v8i16
    1570U,	// SUBHNv8i16_v16i8
    1554U,	// SUBHNv8i16_v8i8
    50U,	// SUBSWri
    0U,	// SUBSWrr
    66U,	// SUBSWrs
    82U,	// SUBSWrx
    50U,	// SUBSXri
    0U,	// SUBSXrr
    66U,	// SUBSXrs
    82U,	// SUBSXrx
    4098U,	// SUBSXrx64
    50U,	// SUBWri
    0U,	// SUBWrr
    66U,	// SUBWrs
    82U,	// SUBWrx
    50U,	// SUBXri
    0U,	// SUBXrr
    66U,	// SUBXrs
    82U,	// SUBXrx
    4098U,	// SUBXrx64
    0U,	// SUB_ZZZ_B
    0U,	// SUB_ZZZ_D
    0U,	// SUB_ZZZ_H
    0U,	// SUB_ZZZ_S
    2067U,	// SUBv16i8
    2U,	// SUBv1i64
    2579U,	// SUBv2i32
    530U,	// SUBv2i64
    3091U,	// SUBv4i16
    1042U,	// SUBv4i32
    1554U,	// SUBv8i16
    3603U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    1U,	// SUQADDv4i16
    1U,	// SUQADDv4i32
    1U,	// SUQADDv8i16
    1U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    290U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    1U,	// TBLv8i8Four
    1U,	// TBLv8i8One
    1U,	// TBLv8i8Three
    1U,	// TBLv8i8Two
    306U,	// TBNZW
    306U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    1U,	// TBXv8i8Four
    1U,	// TBXv8i8One
    1U,	// TBXv8i8Three
    1U,	// TBXv8i8Two
    306U,	// TBZW
    306U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    2067U,	// TRN1v16i8
    2579U,	// TRN1v2i32
    530U,	// TRN1v2i64
    3091U,	// TRN1v4i16
    1042U,	// TRN1v4i32
    1554U,	// TRN1v8i16
    3603U,	// TRN1v8i8
    2067U,	// TRN2v16i8
    2579U,	// TRN2v2i32
    530U,	// TRN2v2i64
    3091U,	// TRN2v4i16
    1042U,	// TRN2v4i32
    1554U,	// TRN2v8i16
    3603U,	// TRN2v8i8
    2083U,	// UABALv16i8_v8i16
    2595U,	// UABALv2i32_v2i64
    3107U,	// UABALv4i16_v4i32
    1058U,	// UABALv4i32_v2i64
    1570U,	// UABALv8i16_v4i32
    3619U,	// UABALv8i8_v8i16
    2083U,	// UABAv16i8
    2595U,	// UABAv2i32
    3107U,	// UABAv4i16
    1058U,	// UABAv4i32
    1570U,	// UABAv8i16
    3619U,	// UABAv8i8
    2067U,	// UABDLv16i8_v8i16
    2579U,	// UABDLv2i32_v2i64
    3091U,	// UABDLv4i16_v4i32
    1042U,	// UABDLv4i32_v2i64
    1554U,	// UABDLv8i16_v4i32
    3603U,	// UABDLv8i8_v8i16
    2067U,	// UABDv16i8
    2579U,	// UABDv2i32
    3091U,	// UABDv4i16
    1042U,	// UABDv4i32
    1554U,	// UABDv8i16
    3603U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    1U,	// UADALPv4i16_v2i32
    1U,	// UADALPv4i32_v2i64
    1U,	// UADALPv8i16_v4i32
    1U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    1U,	// UADDLPv4i16_v2i32
    1U,	// UADDLPv4i32_v2i64
    1U,	// UADDLPv8i16_v4i32
    1U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    1U,	// UADDLVv4i16v
    1U,	// UADDLVv4i32v
    1U,	// UADDLVv8i16v
    1U,	// UADDLVv8i8v
    2067U,	// UADDLv16i8_v8i16
    2579U,	// UADDLv2i32_v2i64
    3091U,	// UADDLv4i16_v4i32
    1042U,	// UADDLv4i32_v2i64
    1554U,	// UADDLv8i16_v4i32
    3603U,	// UADDLv8i8_v8i16
    2066U,	// UADDWv16i8_v8i16
    2578U,	// UADDWv2i32_v2i64
    3090U,	// UADDWv4i16_v4i32
    1042U,	// UADDWv4i32_v2i64
    1554U,	// UADDWv8i16_v4i32
    3602U,	// UADDWv8i8_v8i16
    37378U,	// UBFMWri
    37378U,	// UBFMXri
    2U,	// UCVTFSWDri
    2U,	// UCVTFSWHri
    2U,	// UCVTFSWSri
    2U,	// UCVTFSXDri
    2U,	// UCVTFSXHri
    2U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    2U,	// UCVTFd
    2U,	// UCVTFh
    2U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    3U,	// UCVTFv2i32_shift
    2U,	// UCVTFv2i64_shift
    1U,	// UCVTFv4f16
    1U,	// UCVTFv4f32
    3U,	// UCVTFv4i16_shift
    2U,	// UCVTFv4i32_shift
    1U,	// UCVTFv8f16
    2U,	// UCVTFv8i16_shift
    2U,	// UDIVWr
    2U,	// UDIVXr
    3603U,	// UDOT2S
    2067U,	// UDOT4S
    11811U,	// UDOTIDX2S
    11811U,	// UDOTIDX4S
    2067U,	// UHADDv16i8
    2579U,	// UHADDv2i32
    3091U,	// UHADDv4i16
    1042U,	// UHADDv4i32
    1554U,	// UHADDv8i16
    3603U,	// UHADDv8i8
    2067U,	// UHSUBv16i8
    2579U,	// UHSUBv2i32
    3091U,	// UHSUBv4i16
    1042U,	// UHSUBv4i32
    1554U,	// UHSUBv8i16
    3603U,	// UHSUBv8i8
    37378U,	// UMADDLrrr
    2067U,	// UMAXPv16i8
    2579U,	// UMAXPv2i32
    3091U,	// UMAXPv4i16
    1042U,	// UMAXPv4i32
    1554U,	// UMAXPv8i16
    3603U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    1U,	// UMAXVv4i16v
    1U,	// UMAXVv4i32v
    1U,	// UMAXVv8i16v
    1U,	// UMAXVv8i8v
    2067U,	// UMAXv16i8
    2579U,	// UMAXv2i32
    3091U,	// UMAXv4i16
    1042U,	// UMAXv4i32
    1554U,	// UMAXv8i16
    3603U,	// UMAXv8i8
    2067U,	// UMINPv16i8
    2579U,	// UMINPv2i32
    3091U,	// UMINPv4i16
    1042U,	// UMINPv4i32
    1554U,	// UMINPv8i16
    3603U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    1U,	// UMINVv4i16v
    1U,	// UMINVv4i32v
    1U,	// UMINVv8i16v
    1U,	// UMINVv8i8v
    2067U,	// UMINv16i8
    2579U,	// UMINv2i32
    3091U,	// UMINv4i16
    1042U,	// UMINv4i32
    1554U,	// UMINv8i16
    3603U,	// UMINv8i8
    2083U,	// UMLALv16i8_v8i16
    26147U,	// UMLALv2i32_indexed
    2595U,	// UMLALv2i32_v2i64
    25635U,	// UMLALv4i16_indexed
    3107U,	// UMLALv4i16_v4i32
    26146U,	// UMLALv4i32_indexed
    1058U,	// UMLALv4i32_v2i64
    25634U,	// UMLALv8i16_indexed
    1570U,	// UMLALv8i16_v4i32
    3619U,	// UMLALv8i8_v8i16
    2083U,	// UMLSLv16i8_v8i16
    26147U,	// UMLSLv2i32_indexed
    2595U,	// UMLSLv2i32_v2i64
    25635U,	// UMLSLv4i16_indexed
    3107U,	// UMLSLv4i16_v4i32
    26146U,	// UMLSLv4i32_indexed
    1058U,	// UMLSLv4i32_v2i64
    25634U,	// UMLSLv8i16_indexed
    1570U,	// UMLSLv8i16_v4i32
    3619U,	// UMLSLv8i8_v8i16
    150U,	// UMOVvi16
    150U,	// UMOVvi32
    150U,	// UMOVvi64
    151U,	// UMOVvi8
    37378U,	// UMSUBLrrr
    2U,	// UMULHrr
    2067U,	// UMULLv16i8_v8i16
    42515U,	// UMULLv2i32_indexed
    2579U,	// UMULLv2i32_v2i64
    42003U,	// UMULLv4i16_indexed
    3091U,	// UMULLv4i16_v4i32
    42514U,	// UMULLv4i32_indexed
    1042U,	// UMULLv4i32_v2i64
    42002U,	// UMULLv8i16_indexed
    1554U,	// UMULLv8i16_v4i32
    3603U,	// UMULLv8i8_v8i16
    2067U,	// UQADDv16i8
    2U,	// UQADDv1i16
    2U,	// UQADDv1i32
    2U,	// UQADDv1i64
    2U,	// UQADDv1i8
    2579U,	// UQADDv2i32
    530U,	// UQADDv2i64
    3091U,	// UQADDv4i16
    1042U,	// UQADDv4i32
    1554U,	// UQADDv8i16
    3603U,	// UQADDv8i8
    2067U,	// UQRSHLv16i8
    2U,	// UQRSHLv1i16
    2U,	// UQRSHLv1i32
    2U,	// UQRSHLv1i64
    2U,	// UQRSHLv1i8
    2579U,	// UQRSHLv2i32
    530U,	// UQRSHLv2i64
    3091U,	// UQRSHLv4i16
    1042U,	// UQRSHLv4i32
    1554U,	// UQRSHLv8i16
    3603U,	// UQRSHLv8i8
    2U,	// UQRSHRNb
    2U,	// UQRSHRNh
    2U,	// UQRSHRNs
    130U,	// UQRSHRNv16i8_shift
    2U,	// UQRSHRNv2i32_shift
    2U,	// UQRSHRNv4i16_shift
    130U,	// UQRSHRNv4i32_shift
    130U,	// UQRSHRNv8i16_shift
    2U,	// UQRSHRNv8i8_shift
    2U,	// UQSHLb
    2U,	// UQSHLd
    2U,	// UQSHLh
    2U,	// UQSHLs
    2067U,	// UQSHLv16i8
    3U,	// UQSHLv16i8_shift
    2U,	// UQSHLv1i16
    2U,	// UQSHLv1i32
    2U,	// UQSHLv1i64
    2U,	// UQSHLv1i8
    2579U,	// UQSHLv2i32
    3U,	// UQSHLv2i32_shift
    530U,	// UQSHLv2i64
    2U,	// UQSHLv2i64_shift
    3091U,	// UQSHLv4i16
    3U,	// UQSHLv4i16_shift
    1042U,	// UQSHLv4i32
    2U,	// UQSHLv4i32_shift
    1554U,	// UQSHLv8i16
    2U,	// UQSHLv8i16_shift
    3603U,	// UQSHLv8i8
    3U,	// UQSHLv8i8_shift
    2U,	// UQSHRNb
    2U,	// UQSHRNh
    2U,	// UQSHRNs
    130U,	// UQSHRNv16i8_shift
    2U,	// UQSHRNv2i32_shift
    2U,	// UQSHRNv4i16_shift
    130U,	// UQSHRNv4i32_shift
    130U,	// UQSHRNv8i16_shift
    2U,	// UQSHRNv8i8_shift
    2067U,	// UQSUBv16i8
    2U,	// UQSUBv1i16
    2U,	// UQSUBv1i32
    2U,	// UQSUBv1i64
    2U,	// UQSUBv1i8
    2579U,	// UQSUBv2i32
    530U,	// UQSUBv2i64
    3091U,	// UQSUBv4i16
    1042U,	// UQSUBv4i32
    1554U,	// UQSUBv8i16
    3603U,	// UQSUBv8i8
    1U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    1U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    1U,	// UQXTNv8i16
    1U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    1U,	// URECPEv4i32
    2067U,	// URHADDv16i8
    2579U,	// URHADDv2i32
    3091U,	// URHADDv4i16
    1042U,	// URHADDv4i32
    1554U,	// URHADDv8i16
    3603U,	// URHADDv8i8
    2067U,	// URSHLv16i8
    2U,	// URSHLv1i64
    2579U,	// URSHLv2i32
    530U,	// URSHLv2i64
    3091U,	// URSHLv4i16
    1042U,	// URSHLv4i32
    1554U,	// URSHLv8i16
    3603U,	// URSHLv8i8
    2U,	// URSHRd
    3U,	// URSHRv16i8_shift
    3U,	// URSHRv2i32_shift
    2U,	// URSHRv2i64_shift
    3U,	// URSHRv4i16_shift
    2U,	// URSHRv4i32_shift
    2U,	// URSHRv8i16_shift
    3U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    1U,	// URSQRTEv4i32
    130U,	// URSRAd
    131U,	// URSRAv16i8_shift
    131U,	// URSRAv2i32_shift
    130U,	// URSRAv2i64_shift
    131U,	// URSRAv4i16_shift
    130U,	// URSRAv4i32_shift
    130U,	// URSRAv8i16_shift
    131U,	// URSRAv8i8_shift
    3U,	// USHLLv16i8_shift
    3U,	// USHLLv2i32_shift
    3U,	// USHLLv4i16_shift
    2U,	// USHLLv4i32_shift
    2U,	// USHLLv8i16_shift
    3U,	// USHLLv8i8_shift
    2067U,	// USHLv16i8
    2U,	// USHLv1i64
    2579U,	// USHLv2i32
    530U,	// USHLv2i64
    3091U,	// USHLv4i16
    1042U,	// USHLv4i32
    1554U,	// USHLv8i16
    3603U,	// USHLv8i8
    2U,	// USHRd
    3U,	// USHRv16i8_shift
    3U,	// USHRv2i32_shift
    2U,	// USHRv2i64_shift
    3U,	// USHRv4i16_shift
    2U,	// USHRv4i32_shift
    2U,	// USHRv8i16_shift
    3U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    1U,	// USQADDv4i16
    1U,	// USQADDv4i32
    1U,	// USQADDv8i16
    1U,	// USQADDv8i8
    130U,	// USRAd
    131U,	// USRAv16i8_shift
    131U,	// USRAv2i32_shift
    130U,	// USRAv2i64_shift
    131U,	// USRAv4i16_shift
    130U,	// USRAv4i32_shift
    130U,	// USRAv8i16_shift
    131U,	// USRAv8i8_shift
    2067U,	// USUBLv16i8_v8i16
    2579U,	// USUBLv2i32_v2i64
    3091U,	// USUBLv4i16_v4i32
    1042U,	// USUBLv4i32_v2i64
    1554U,	// USUBLv8i16_v4i32
    3603U,	// USUBLv8i8_v8i16
    2066U,	// USUBWv16i8_v8i16
    2578U,	// USUBWv2i32_v2i64
    3090U,	// USUBWv4i16_v4i32
    1042U,	// USUBWv4i32_v2i64
    1554U,	// USUBWv8i16_v4i32
    3602U,	// USUBWv8i8_v8i16
    2067U,	// UZP1v16i8
    2579U,	// UZP1v2i32
    530U,	// UZP1v2i64
    3091U,	// UZP1v4i16
    1042U,	// UZP1v4i32
    1554U,	// UZP1v8i16
    3603U,	// UZP1v8i8
    2067U,	// UZP2v16i8
    2579U,	// UZP2v2i32
    530U,	// UZP2v2i64
    3091U,	// UZP2v4i16
    1042U,	// UZP2v4i32
    1554U,	// UZP2v8i16
    3603U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    1U,	// XTNv16i8
    0U,	// XTNv2i32
    1U,	// XTNv4i16
    0U,	// XTNv4i32
    1U,	// XTNv8i16
    1U,	// XTNv8i8
    0U,	// ZIP1_PPP_B
    0U,	// ZIP1_PPP_D
    0U,	// ZIP1_PPP_H
    0U,	// ZIP1_PPP_S
    0U,	// ZIP1_ZZZ_B
    0U,	// ZIP1_ZZZ_D
    0U,	// ZIP1_ZZZ_H
    0U,	// ZIP1_ZZZ_S
    2067U,	// ZIP1v16i8
    2579U,	// ZIP1v2i32
    530U,	// ZIP1v2i64
    3091U,	// ZIP1v4i16
    1042U,	// ZIP1v4i32
    1554U,	// ZIP1v8i16
    3603U,	// ZIP1v8i8
    0U,	// ZIP2_PPP_B
    0U,	// ZIP2_PPP_D
    0U,	// ZIP2_PPP_H
    0U,	// ZIP2_PPP_S
    0U,	// ZIP2_ZZZ_B
    0U,	// ZIP2_ZZZ_D
    0U,	// ZIP2_ZZZ_H
    0U,	// ZIP2_ZZZ_S
    2067U,	// ZIP2v16i8
    2579U,	// ZIP2v2i32
    530U,	// ZIP2v2i64
    3091U,	// ZIP2v4i16
    1042U,	// ZIP2v4i32
    1554U,	// ZIP2v8i16
    3603U,	// ZIP2v8i8
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    0U,	// ADDHNv2i64_v2i32
    0U,	// ADDHNv2i64_v4i32
    0U,	// ADDHNv4i32_v4i16
    0U,	// ADDHNv4i32_v8i16
    0U,	// ADDHNv8i16_v16i8
    0U,	// ADDHNv8i16_v8i8
    0U,	// ADDPv16i8
    0U,	// ADDPv2i32
    0U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    0U,	// ADDPv4i16
    0U,	// ADDPv4i32
    0U,	// ADDPv8i16
    0U,	// ADDPv8i8
    0U,	// ADDSWri
    0U,	// ADDSWrr
    0U,	// ADDSWrs
    0U,	// ADDSWrx
    0U,	// ADDSXri
    0U,	// ADDSXrr
    0U,	// ADDSXrs
    0U,	// ADDSXrx
    0U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    0U,	// ADDWri
    0U,	// ADDWrr
    0U,	// ADDWrs
    0U,	// ADDWrx
    0U,	// ADDXri
    0U,	// ADDXrr
    0U,	// ADDXrs
    0U,	// ADDXrx
    0U,	// ADDXrx64
    0U,	// ADD_ZZZ_B
    0U,	// ADD_ZZZ_D
    0U,	// ADD_ZZZ_H
    0U,	// ADD_ZZZ_S
    0U,	// ADDv16i8
    0U,	// ADDv1i64
    0U,	// ADDv2i32
    0U,	// ADDv2i64
    0U,	// ADDv4i16
    0U,	// ADDv4i32
    0U,	// ADDv8i16
    0U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    0U,	// ANDSWri
    0U,	// ANDSWrr
    0U,	// ANDSWrs
    0U,	// ANDSXri
    0U,	// ANDSXrr
    0U,	// ANDSXrs
    0U,	// ANDWri
    0U,	// ANDWrr
    0U,	// ANDWrs
    0U,	// ANDXri
    0U,	// ANDXrr
    0U,	// ANDXrs
    0U,	// ANDv16i8
    0U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// AUTDA
    0U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    0U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    0U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    0U,	// BFMWri
    0U,	// BFMXri
    0U,	// BICSWrr
    0U,	// BICSWrs
    0U,	// BICSXrr
    0U,	// BICSXrs
    0U,	// BICWrr
    0U,	// BICWrs
    0U,	// BICXrr
    0U,	// BICXrs
    0U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    0U,	// BICv8i8
    0U,	// BIFv16i8
    0U,	// BIFv8i8
    0U,	// BITv16i8
    0U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BLRAA
    0U,	// BLRAAZ
    0U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    0U,	// BRAA
    0U,	// BRAAZ
    0U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    0U,	// BSLv16i8
    0U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CASAB
    0U,	// CASAH
    0U,	// CASALB
    0U,	// CASALH
    0U,	// CASALW
    0U,	// CASALX
    0U,	// CASAW
    0U,	// CASAX
    0U,	// CASB
    0U,	// CASH
    0U,	// CASLB
    0U,	// CASLH
    0U,	// CASLW
    0U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    0U,	// CASW
    0U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    0U,	// CCMNWi
    0U,	// CCMNWr
    0U,	// CCMNXi
    0U,	// CCMNXr
    0U,	// CCMPWi
    0U,	// CCMPWr
    0U,	// CCMPXi
    0U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    0U,	// CMEQv16i8
    0U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    0U,	// CMEQv1i64rz
    0U,	// CMEQv2i32
    0U,	// CMEQv2i32rz
    0U,	// CMEQv2i64
    0U,	// CMEQv2i64rz
    0U,	// CMEQv4i16
    0U,	// CMEQv4i16rz
    0U,	// CMEQv4i32
    0U,	// CMEQv4i32rz
    0U,	// CMEQv8i16
    0U,	// CMEQv8i16rz
    0U,	// CMEQv8i8
    0U,	// CMEQv8i8rz
    0U,	// CMGEv16i8
    0U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    0U,	// CMGEv1i64rz
    0U,	// CMGEv2i32
    0U,	// CMGEv2i32rz
    0U,	// CMGEv2i64
    0U,	// CMGEv2i64rz
    0U,	// CMGEv4i16
    0U,	// CMGEv4i16rz
    0U,	// CMGEv4i32
    0U,	// CMGEv4i32rz
    0U,	// CMGEv8i16
    0U,	// CMGEv8i16rz
    0U,	// CMGEv8i8
    0U,	// CMGEv8i8rz
    0U,	// CMGTv16i8
    0U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    0U,	// CMGTv1i64rz
    0U,	// CMGTv2i32
    0U,	// CMGTv2i32rz
    0U,	// CMGTv2i64
    0U,	// CMGTv2i64rz
    0U,	// CMGTv4i16
    0U,	// CMGTv4i16rz
    0U,	// CMGTv4i32
    0U,	// CMGTv4i32rz
    0U,	// CMGTv8i16
    0U,	// CMGTv8i16rz
    0U,	// CMGTv8i8
    0U,	// CMGTv8i8rz
    0U,	// CMHIv16i8
    0U,	// CMHIv1i64
    0U,	// CMHIv2i32
    0U,	// CMHIv2i64
    0U,	// CMHIv4i16
    0U,	// CMHIv4i32
    0U,	// CMHIv8i16
    0U,	// CMHIv8i8
    0U,	// CMHSv16i8
    0U,	// CMHSv1i64
    0U,	// CMHSv2i32
    0U,	// CMHSv2i64
    0U,	// CMHSv4i16
    0U,	// CMHSv4i32
    0U,	// CMHSv8i16
    0U,	// CMHSv8i8
    0U,	// CMLEv16i8rz
    0U,	// CMLEv1i64rz
    0U,	// CMLEv2i32rz
    0U,	// CMLEv2i64rz
    0U,	// CMLEv4i16rz
    0U,	// CMLEv4i32rz
    0U,	// CMLEv8i16rz
    0U,	// CMLEv8i8rz
    0U,	// CMLTv16i8rz
    0U,	// CMLTv1i64rz
    0U,	// CMLTv2i32rz
    0U,	// CMLTv2i64rz
    0U,	// CMLTv4i16rz
    0U,	// CMLTv4i32rz
    0U,	// CMLTv8i16rz
    0U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    0U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    0U,	// CMTSTv2i32
    0U,	// CMTSTv2i64
    0U,	// CMTSTv4i16
    0U,	// CMTSTv4i32
    0U,	// CMTSTv8i16
    0U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    0U,	// CPYi16
    0U,	// CPYi32
    0U,	// CPYi64
    0U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    0U,	// CSELWr
    0U,	// CSELXr
    0U,	// CSINCWr
    0U,	// CSINCXr
    0U,	// CSINVWr
    0U,	// CSINVXr
    0U,	// CSNEGWr
    0U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    0U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    0U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    0U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    0U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    0U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    0U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    0U,	// DUPv8i8lane
    0U,	// EONWrr
    0U,	// EONWrs
    0U,	// EONXrr
    0U,	// EONXrs
    0U,	// EORWri
    0U,	// EORWrr
    0U,	// EORWrs
    0U,	// EORXri
    0U,	// EORXrr
    0U,	// EORXrs
    0U,	// EORv16i8
    0U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    0U,	// EXTRWrri
    0U,	// EXTRXrri
    0U,	// EXTv16i8
    0U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    0U,	// FABDv2f32
    0U,	// FABDv2f64
    0U,	// FABDv4f16
    0U,	// FABDv4f32
    0U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    0U,	// FACGEv2f32
    0U,	// FACGEv2f64
    0U,	// FACGEv4f16
    0U,	// FACGEv4f32
    0U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    0U,	// FACGTv2f32
    0U,	// FACGTv2f64
    0U,	// FACGTv4f16
    0U,	// FACGTv4f32
    0U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    0U,	// FADDPv2f32
    0U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    0U,	// FADDPv4f16
    0U,	// FADDPv4f32
    0U,	// FADDPv8f16
    0U,	// FADDSrr
    0U,	// FADDv2f32
    0U,	// FADDv2f64
    0U,	// FADDv4f16
    0U,	// FADDv4f32
    0U,	// FADDv8f16
    0U,	// FCADDv2f32
    0U,	// FCADDv2f64
    0U,	// FCADDv4f16
    0U,	// FCADDv4f32
    0U,	// FCADDv8f16
    0U,	// FCCMPDrr
    0U,	// FCCMPEDrr
    0U,	// FCCMPEHrr
    0U,	// FCCMPESrr
    0U,	// FCCMPHrr
    0U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    0U,	// FCMEQv1i16rz
    0U,	// FCMEQv1i32rz
    0U,	// FCMEQv1i64rz
    0U,	// FCMEQv2f32
    0U,	// FCMEQv2f64
    0U,	// FCMEQv2i32rz
    0U,	// FCMEQv2i64rz
    0U,	// FCMEQv4f16
    0U,	// FCMEQv4f32
    0U,	// FCMEQv4i16rz
    0U,	// FCMEQv4i32rz
    0U,	// FCMEQv8f16
    0U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    0U,	// FCMGEv1i16rz
    0U,	// FCMGEv1i32rz
    0U,	// FCMGEv1i64rz
    0U,	// FCMGEv2f32
    0U,	// FCMGEv2f64
    0U,	// FCMGEv2i32rz
    0U,	// FCMGEv2i64rz
    0U,	// FCMGEv4f16
    0U,	// FCMGEv4f32
    0U,	// FCMGEv4i16rz
    0U,	// FCMGEv4i32rz
    0U,	// FCMGEv8f16
    0U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    0U,	// FCMGTv1i16rz
    0U,	// FCMGTv1i32rz
    0U,	// FCMGTv1i64rz
    0U,	// FCMGTv2f32
    0U,	// FCMGTv2f64
    0U,	// FCMGTv2i32rz
    0U,	// FCMGTv2i64rz
    0U,	// FCMGTv4f16
    0U,	// FCMGTv4f32
    0U,	// FCMGTv4i16rz
    0U,	// FCMGTv4i32rz
    0U,	// FCMGTv8f16
    0U,	// FCMGTv8i16rz
    1U,	// FCMLAv2f32
    1U,	// FCMLAv2f64
    1U,	// FCMLAv4f16
    1U,	// FCMLAv4f16_indexed
    1U,	// FCMLAv4f32
    1U,	// FCMLAv4f32_indexed
    1U,	// FCMLAv8f16
    1U,	// FCMLAv8f16_indexed
    0U,	// FCMLEv1i16rz
    0U,	// FCMLEv1i32rz
    0U,	// FCMLEv1i64rz
    0U,	// FCMLEv2i32rz
    0U,	// FCMLEv2i64rz
    0U,	// FCMLEv4i16rz
    0U,	// FCMLEv4i32rz
    0U,	// FCMLEv8i16rz
    0U,	// FCMLTv1i16rz
    0U,	// FCMLTv1i32rz
    0U,	// FCMLTv1i64rz
    0U,	// FCMLTv2i32rz
    0U,	// FCMLTv2i64rz
    0U,	// FCMLTv4i16rz
    0U,	// FCMLTv4i32rz
    0U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    0U,	// FCSELDrrr
    0U,	// FCSELHrrr
    0U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    0U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    0U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    0U,	// FDIVv2f32
    0U,	// FDIVv2f64
    0U,	// FDIVv4f16
    0U,	// FDIVv4f32
    0U,	// FDIVv8f16
    0U,	// FJCVTZS
    0U,	// FMADDDrrr
    0U,	// FMADDHrrr
    0U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    0U,	// FMAXNMPv2f32
    0U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    0U,	// FMAXNMPv4f16
    0U,	// FMAXNMPv4f32
    0U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    0U,	// FMAXNMv2f32
    0U,	// FMAXNMv2f64
    0U,	// FMAXNMv4f16
    0U,	// FMAXNMv4f32
    0U,	// FMAXNMv8f16
    0U,	// FMAXPv2f32
    0U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    0U,	// FMAXPv4f16
    0U,	// FMAXPv4f32
    0U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    0U,	// FMAXv2f32
    0U,	// FMAXv2f64
    0U,	// FMAXv4f16
    0U,	// FMAXv4f32
    0U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    0U,	// FMINNMPv2f32
    0U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    0U,	// FMINNMPv4f16
    0U,	// FMINNMPv4f32
    0U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    0U,	// FMINNMv2f32
    0U,	// FMINNMv2f64
    0U,	// FMINNMv4f16
    0U,	// FMINNMv4f32
    0U,	// FMINNMv8f16
    0U,	// FMINPv2f32
    0U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    0U,	// FMINPv4f16
    0U,	// FMINPv4f32
    0U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    0U,	// FMINv2f32
    0U,	// FMINv2f64
    0U,	// FMINv4f16
    0U,	// FMINv4f32
    0U,	// FMINv8f16
    9U,	// FMLAv1i16_indexed
    9U,	// FMLAv1i32_indexed
    9U,	// FMLAv1i64_indexed
    0U,	// FMLAv2f32
    0U,	// FMLAv2f64
    9U,	// FMLAv2i32_indexed
    9U,	// FMLAv2i64_indexed
    0U,	// FMLAv4f16
    0U,	// FMLAv4f32
    9U,	// FMLAv4i16_indexed
    9U,	// FMLAv4i32_indexed
    0U,	// FMLAv8f16
    9U,	// FMLAv8i16_indexed
    9U,	// FMLSv1i16_indexed
    9U,	// FMLSv1i32_indexed
    9U,	// FMLSv1i64_indexed
    0U,	// FMLSv2f32
    0U,	// FMLSv2f64
    9U,	// FMLSv2i32_indexed
    9U,	// FMLSv2i64_indexed
    0U,	// FMLSv4f16
    0U,	// FMLSv4f32
    9U,	// FMLSv4i16_indexed
    9U,	// FMLSv4i32_indexed
    0U,	// FMLSv8f16
    9U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    0U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVH0
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    0U,	// FMSUBDrrr
    0U,	// FMSUBHrrr
    0U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    1U,	// FMULXv1i16_indexed
    1U,	// FMULXv1i32_indexed
    1U,	// FMULXv1i64_indexed
    0U,	// FMULXv2f32
    0U,	// FMULXv2f64
    1U,	// FMULXv2i32_indexed
    1U,	// FMULXv2i64_indexed
    0U,	// FMULXv4f16
    0U,	// FMULXv4f32
    1U,	// FMULXv4i16_indexed
    1U,	// FMULXv4i32_indexed
    0U,	// FMULXv8f16
    1U,	// FMULXv8i16_indexed
    1U,	// FMULv1i16_indexed
    1U,	// FMULv1i32_indexed
    1U,	// FMULv1i64_indexed
    0U,	// FMULv2f32
    0U,	// FMULv2f64
    1U,	// FMULv2i32_indexed
    1U,	// FMULv2i64_indexed
    0U,	// FMULv4f16
    0U,	// FMULv4f32
    1U,	// FMULv4i16_indexed
    1U,	// FMULv4i32_indexed
    0U,	// FMULv8f16
    1U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    0U,	// FNMADDDrrr
    0U,	// FNMADDHrrr
    0U,	// FNMADDSrrr
    0U,	// FNMSUBDrrr
    0U,	// FNMSUBHrrr
    0U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    0U,	// FRECPSv2f32
    0U,	// FRECPSv2f64
    0U,	// FRECPSv4f16
    0U,	// FRECPSv4f32
    0U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    0U,	// FRSQRTSv2f32
    0U,	// FRSQRTSv2f64
    0U,	// FRSQRTSv4f16
    0U,	// FRSQRTSv4f32
    0U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    0U,	// FSUBv2f32
    0U,	// FSUBv2f64
    0U,	// FSUBv4f16
    0U,	// FSUBv4f32
    0U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    0U,	// LDAPRB
    0U,	// LDAPRH
    0U,	// LDAPRW
    0U,	// LDAPRX
    0U,	// LDARB
    0U,	// LDARH
    0U,	// LDARW
    0U,	// LDARX
    0U,	// LDAXPW
    0U,	// LDAXPX
    0U,	// LDAXRB
    0U,	// LDAXRH
    0U,	// LDAXRW
    0U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    0U,	// LDLARB
    0U,	// LDLARH
    0U,	// LDLARW
    0U,	// LDLARX
    1U,	// LDNPDi
    2U,	// LDNPQi
    2U,	// LDNPSi
    2U,	// LDNPWi
    1U,	// LDNPXi
    1U,	// LDPDi
    10U,	// LDPDpost
    18U,	// LDPDpre
    2U,	// LDPQi
    10U,	// LDPQpost
    18U,	// LDPQpre
    2U,	// LDPSWi
    11U,	// LDPSWpost
    19U,	// LDPSWpre
    2U,	// LDPSi
    11U,	// LDPSpost
    19U,	// LDPSpre
    2U,	// LDPWi
    11U,	// LDPWpost
    19U,	// LDPWpre
    1U,	// LDPXi
    10U,	// LDPXpost
    18U,	// LDPXpre
    0U,	// LDRAAindexed
    0U,	// LDRAAwriteback
    0U,	// LDRABindexed
    0U,	// LDRABwriteback
    0U,	// LDRBBpost
    0U,	// LDRBBpre
    3U,	// LDRBBroW
    3U,	// LDRBBroX
    0U,	// LDRBBui
    0U,	// LDRBpost
    0U,	// LDRBpre
    3U,	// LDRBroW
    3U,	// LDRBroX
    0U,	// LDRBui
    0U,	// LDRDl
    0U,	// LDRDpost
    0U,	// LDRDpre
    3U,	// LDRDroW
    4U,	// LDRDroX
    0U,	// LDRDui
    0U,	// LDRHHpost
    0U,	// LDRHHpre
    4U,	// LDRHHroW
    4U,	// LDRHHroX
    0U,	// LDRHHui
    0U,	// LDRHpost
    0U,	// LDRHpre
    4U,	// LDRHroW
    4U,	// LDRHroX
    0U,	// LDRHui
    0U,	// LDRQl
    0U,	// LDRQpost
    0U,	// LDRQpre
    4U,	// LDRQroW
    5U,	// LDRQroX
    0U,	// LDRQui
    0U,	// LDRSBWpost
    0U,	// LDRSBWpre
    3U,	// LDRSBWroW
    3U,	// LDRSBWroX
    0U,	// LDRSBWui
    0U,	// LDRSBXpost
    0U,	// LDRSBXpre
    3U,	// LDRSBXroW
    3U,	// LDRSBXroX
    0U,	// LDRSBXui
    0U,	// LDRSHWpost
    0U,	// LDRSHWpre
    4U,	// LDRSHWroW
    4U,	// LDRSHWroX
    0U,	// LDRSHWui
    0U,	// LDRSHXpost
    0U,	// LDRSHXpre
    4U,	// LDRSHXroW
    4U,	// LDRSHXroX
    0U,	// LDRSHXui
    0U,	// LDRSWl
    0U,	// LDRSWpost
    0U,	// LDRSWpre
    5U,	// LDRSWroW
    5U,	// LDRSWroX
    0U,	// LDRSWui
    0U,	// LDRSl
    0U,	// LDRSpost
    0U,	// LDRSpre
    5U,	// LDRSroW
    5U,	// LDRSroX
    0U,	// LDRSui
    0U,	// LDRWl
    0U,	// LDRWpost
    0U,	// LDRWpre
    5U,	// LDRWroW
    5U,	// LDRWroX
    0U,	// LDRWui
    0U,	// LDRXl
    0U,	// LDRXpost
    0U,	// LDRXpre
    3U,	// LDRXroW
    4U,	// LDRXroX
    0U,	// LDRXui
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    0U,	// LDTRBi
    0U,	// LDTRHi
    0U,	// LDTRSBWi
    0U,	// LDTRSBXi
    0U,	// LDTRSHWi
    0U,	// LDTRSHXi
    0U,	// LDTRSWi
    0U,	// LDTRWi
    0U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    0U,	// LDURBBi
    0U,	// LDURBi
    0U,	// LDURDi
    0U,	// LDURHHi
    0U,	// LDURHi
    0U,	// LDURQi
    0U,	// LDURSBWi
    0U,	// LDURSBXi
    0U,	// LDURSHWi
    0U,	// LDURSHXi
    0U,	// LDURSWi
    0U,	// LDURSi
    0U,	// LDURWi
    0U,	// LDURXi
    0U,	// LDXPW
    0U,	// LDXPX
    0U,	// LDXRB
    0U,	// LDXRH
    0U,	// LDXRW
    0U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    0U,	// MADDWrrr
    0U,	// MADDXrrr
    0U,	// MLAv16i8
    0U,	// MLAv2i32
    9U,	// MLAv2i32_indexed
    0U,	// MLAv4i16
    9U,	// MLAv4i16_indexed
    0U,	// MLAv4i32
    9U,	// MLAv4i32_indexed
    0U,	// MLAv8i16
    9U,	// MLAv8i16_indexed
    0U,	// MLAv8i8
    0U,	// MLSv16i8
    0U,	// MLSv2i32
    9U,	// MLSv2i32_indexed
    0U,	// MLSv4i16
    9U,	// MLSv4i16_indexed
    0U,	// MLSv4i32
    9U,	// MLSv4i32_indexed
    0U,	// MLSv8i16
    9U,	// MLSv8i16_indexed
    0U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    0U,	// MOVIv2i32
    0U,	// MOVIv2s_msl
    0U,	// MOVIv4i16
    0U,	// MOVIv4i32
    0U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    0U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    0U,	// MOVNWi
    0U,	// MOVNXi
    0U,	// MOVZWi
    0U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    0U,	// MSUBWrrr
    0U,	// MSUBXrrr
    0U,	// MULv16i8
    0U,	// MULv2i32
    1U,	// MULv2i32_indexed
    0U,	// MULv4i16
    1U,	// MULv4i16_indexed
    0U,	// MULv4i32
    1U,	// MULv4i32_indexed
    0U,	// MULv8i16
    1U,	// MULv8i16_indexed
    0U,	// MULv8i8
    0U,	// MVNIv2i32
    0U,	// MVNIv2s_msl
    0U,	// MVNIv4i16
    0U,	// MVNIv4i32
    0U,	// MVNIv4s_msl
    0U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    0U,	// ORNWrs
    0U,	// ORNXrr
    0U,	// ORNXrs
    0U,	// ORNv16i8
    0U,	// ORNv8i8
    0U,	// ORRWri
    0U,	// ORRWrr
    0U,	// ORRWrs
    0U,	// ORRXri
    0U,	// ORRXrr
    0U,	// ORRXrs
    0U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    0U,	// ORRv8i8
    0U,	// PACDA
    0U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    0U,	// PACGA
    0U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    0U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    0U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    0U,	// PMULLv8i8
    0U,	// PMULv16i8
    0U,	// PMULv8i8
    0U,	// PRFMl
    3U,	// PRFMroW
    4U,	// PRFMroX
    0U,	// PRFMui
    0U,	// PRFUMi
    0U,	// RADDHNv2i64_v2i32
    0U,	// RADDHNv2i64_v4i32
    0U,	// RADDHNv4i32_v4i16
    0U,	// RADDHNv4i32_v8i16
    0U,	// RADDHNv8i16_v16i8
    0U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    0U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    0U,	// RSHRNv4i32_shift
    0U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    0U,	// RSUBHNv2i64_v2i32
    0U,	// RSUBHNv2i64_v4i32
    0U,	// RSUBHNv4i32_v4i16
    0U,	// RSUBHNv4i32_v8i16
    0U,	// RSUBHNv8i16_v16i8
    0U,	// RSUBHNv8i16_v8i8
    0U,	// SABALv16i8_v8i16
    0U,	// SABALv2i32_v2i64
    0U,	// SABALv4i16_v4i32
    0U,	// SABALv4i32_v2i64
    0U,	// SABALv8i16_v4i32
    0U,	// SABALv8i8_v8i16
    0U,	// SABAv16i8
    0U,	// SABAv2i32
    0U,	// SABAv4i16
    0U,	// SABAv4i32
    0U,	// SABAv8i16
    0U,	// SABAv8i8
    0U,	// SABDLv16i8_v8i16
    0U,	// SABDLv2i32_v2i64
    0U,	// SABDLv4i16_v4i32
    0U,	// SABDLv4i32_v2i64
    0U,	// SABDLv8i16_v4i32
    0U,	// SABDLv8i8_v8i16
    0U,	// SABDv16i8
    0U,	// SABDv2i32
    0U,	// SABDv4i16
    0U,	// SABDv4i32
    0U,	// SABDv8i16
    0U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    0U,	// SADDLv16i8_v8i16
    0U,	// SADDLv2i32_v2i64
    0U,	// SADDLv4i16_v4i32
    0U,	// SADDLv4i32_v2i64
    0U,	// SADDLv8i16_v4i32
    0U,	// SADDLv8i8_v8i16
    0U,	// SADDWv16i8_v8i16
    0U,	// SADDWv2i32_v2i64
    0U,	// SADDWv4i16_v4i32
    0U,	// SADDWv4i32_v2i64
    0U,	// SADDWv8i16_v4i32
    0U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    0U,	// SBFMWri
    0U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDOT2S
    0U,	// SDOT4S
    0U,	// SDOTIDX2S
    0U,	// SDOTIDX4S
    0U,	// SHA1Crrr
    0U,	// SHA1Hrr
    0U,	// SHA1Mrrr
    0U,	// SHA1Prrr
    0U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    0U,	// SHA256H2rrr
    0U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    0U,	// SHA256SU1rrr
    0U,	// SHADDv16i8
    0U,	// SHADDv2i32
    0U,	// SHADDv4i16
    0U,	// SHADDv4i32
    0U,	// SHADDv8i16
    0U,	// SHADDv8i8
    0U,	// SHLLv16i8
    0U,	// SHLLv2i32
    0U,	// SHLLv4i16
    0U,	// SHLLv4i32
    0U,	// SHLLv8i16
    0U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    0U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    0U,	// SHRNv4i32_shift
    0U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    0U,	// SHSUBv16i8
    0U,	// SHSUBv2i32
    0U,	// SHSUBv4i16
    0U,	// SHSUBv4i32
    0U,	// SHSUBv8i16
    0U,	// SHSUBv8i8
    0U,	// SLId
    0U,	// SLIv16i8_shift
    0U,	// SLIv2i32_shift
    0U,	// SLIv2i64_shift
    0U,	// SLIv4i16_shift
    0U,	// SLIv4i32_shift
    0U,	// SLIv8i16_shift
    0U,	// SLIv8i8_shift
    0U,	// SMADDLrrr
    0U,	// SMAXPv16i8
    0U,	// SMAXPv2i32
    0U,	// SMAXPv4i16
    0U,	// SMAXPv4i32
    0U,	// SMAXPv8i16
    0U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    0U,	// SMAXv16i8
    0U,	// SMAXv2i32
    0U,	// SMAXv4i16
    0U,	// SMAXv4i32
    0U,	// SMAXv8i16
    0U,	// SMAXv8i8
    0U,	// SMC
    0U,	// SMINPv16i8
    0U,	// SMINPv2i32
    0U,	// SMINPv4i16
    0U,	// SMINPv4i32
    0U,	// SMINPv8i16
    0U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    0U,	// SMINv16i8
    0U,	// SMINv2i32
    0U,	// SMINv4i16
    0U,	// SMINv4i32
    0U,	// SMINv8i16
    0U,	// SMINv8i8
    0U,	// SMLALv16i8_v8i16
    9U,	// SMLALv2i32_indexed
    0U,	// SMLALv2i32_v2i64
    9U,	// SMLALv4i16_indexed
    0U,	// SMLALv4i16_v4i32
    9U,	// SMLALv4i32_indexed
    0U,	// SMLALv4i32_v2i64
    9U,	// SMLALv8i16_indexed
    0U,	// SMLALv8i16_v4i32
    0U,	// SMLALv8i8_v8i16
    0U,	// SMLSLv16i8_v8i16
    9U,	// SMLSLv2i32_indexed
    0U,	// SMLSLv2i32_v2i64
    9U,	// SMLSLv4i16_indexed
    0U,	// SMLSLv4i16_v4i32
    9U,	// SMLSLv4i32_indexed
    0U,	// SMLSLv4i32_v2i64
    9U,	// SMLSLv8i16_indexed
    0U,	// SMLSLv8i16_v4i32
    0U,	// SMLSLv8i8_v8i16
    0U,	// SMOVvi16to32
    0U,	// SMOVvi16to64
    0U,	// SMOVvi32to64
    0U,	// SMOVvi8to32
    0U,	// SMOVvi8to64
    0U,	// SMSUBLrrr
    0U,	// SMULHrr
    0U,	// SMULLv16i8_v8i16
    1U,	// SMULLv2i32_indexed
    0U,	// SMULLv2i32_v2i64
    1U,	// SMULLv4i16_indexed
    0U,	// SMULLv4i16_v4i32
    1U,	// SMULLv4i32_indexed
    0U,	// SMULLv4i32_v2i64
    1U,	// SMULLv8i16_indexed
    0U,	// SMULLv8i16_v4i32
    0U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    0U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    0U,	// SQADDv2i32
    0U,	// SQADDv2i64
    0U,	// SQADDv4i16
    0U,	// SQADDv4i32
    0U,	// SQADDv8i16
    0U,	// SQADDv8i8
    0U,	// SQDMLALi16
    0U,	// SQDMLALi32
    9U,	// SQDMLALv1i32_indexed
    9U,	// SQDMLALv1i64_indexed
    9U,	// SQDMLALv2i32_indexed
    0U,	// SQDMLALv2i32_v2i64
    9U,	// SQDMLALv4i16_indexed
    0U,	// SQDMLALv4i16_v4i32
    9U,	// SQDMLALv4i32_indexed
    0U,	// SQDMLALv4i32_v2i64
    9U,	// SQDMLALv8i16_indexed
    0U,	// SQDMLALv8i16_v4i32
    0U,	// SQDMLSLi16
    0U,	// SQDMLSLi32
    9U,	// SQDMLSLv1i32_indexed
    9U,	// SQDMLSLv1i64_indexed
    9U,	// SQDMLSLv2i32_indexed
    0U,	// SQDMLSLv2i32_v2i64
    9U,	// SQDMLSLv4i16_indexed
    0U,	// SQDMLSLv4i16_v4i32
    9U,	// SQDMLSLv4i32_indexed
    0U,	// SQDMLSLv4i32_v2i64
    9U,	// SQDMLSLv8i16_indexed
    0U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    1U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    1U,	// SQDMULHv1i32_indexed
    0U,	// SQDMULHv2i32
    1U,	// SQDMULHv2i32_indexed
    0U,	// SQDMULHv4i16
    1U,	// SQDMULHv4i16_indexed
    0U,	// SQDMULHv4i32
    1U,	// SQDMULHv4i32_indexed
    0U,	// SQDMULHv8i16
    1U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    1U,	// SQDMULLv1i32_indexed
    1U,	// SQDMULLv1i64_indexed
    1U,	// SQDMULLv2i32_indexed
    0U,	// SQDMULLv2i32_v2i64
    1U,	// SQDMULLv4i16_indexed
    0U,	// SQDMULLv4i16_v4i32
    1U,	// SQDMULLv4i32_indexed
    0U,	// SQDMULLv4i32_v2i64
    1U,	// SQDMULLv8i16_indexed
    0U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    9U,	// SQRDMLAHi16_indexed
    9U,	// SQRDMLAHi32_indexed
    0U,	// SQRDMLAHv1i16
    0U,	// SQRDMLAHv1i32
    0U,	// SQRDMLAHv2i32
    9U,	// SQRDMLAHv2i32_indexed
    0U,	// SQRDMLAHv4i16
    9U,	// SQRDMLAHv4i16_indexed
    0U,	// SQRDMLAHv4i32
    9U,	// SQRDMLAHv4i32_indexed
    0U,	// SQRDMLAHv8i16
    9U,	// SQRDMLAHv8i16_indexed
    9U,	// SQRDMLSHi16_indexed
    9U,	// SQRDMLSHi32_indexed
    0U,	// SQRDMLSHv1i16
    0U,	// SQRDMLSHv1i32
    0U,	// SQRDMLSHv2i32
    9U,	// SQRDMLSHv2i32_indexed
    0U,	// SQRDMLSHv4i16
    9U,	// SQRDMLSHv4i16_indexed
    0U,	// SQRDMLSHv4i32
    9U,	// SQRDMLSHv4i32_indexed
    0U,	// SQRDMLSHv8i16
    9U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    1U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    1U,	// SQRDMULHv1i32_indexed
    0U,	// SQRDMULHv2i32
    1U,	// SQRDMULHv2i32_indexed
    0U,	// SQRDMULHv4i16
    1U,	// SQRDMULHv4i16_indexed
    0U,	// SQRDMULHv4i32
    1U,	// SQRDMULHv4i32_indexed
    0U,	// SQRDMULHv8i16
    1U,	// SQRDMULHv8i16_indexed
    0U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    0U,	// SQRSHLv2i32
    0U,	// SQRSHLv2i64
    0U,	// SQRSHLv4i16
    0U,	// SQRSHLv4i32
    0U,	// SQRSHLv8i16
    0U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    0U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    0U,	// SQRSHRNv4i32_shift
    0U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    0U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    0U,	// SQRSHRUNv4i32_shift
    0U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    0U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    0U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    0U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    0U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    0U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    0U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    0U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    0U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    0U,	// SQSHRNv4i32_shift
    0U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    0U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    0U,	// SQSHRUNv4i32_shift
    0U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    0U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    0U,	// SQSUBv2i32
    0U,	// SQSUBv2i64
    0U,	// SQSUBv4i16
    0U,	// SQSUBv4i32
    0U,	// SQSUBv8i16
    0U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    0U,	// SRHADDv16i8
    0U,	// SRHADDv2i32
    0U,	// SRHADDv4i16
    0U,	// SRHADDv4i32
    0U,	// SRHADDv8i16
    0U,	// SRHADDv8i8
    0U,	// SRId
    0U,	// SRIv16i8_shift
    0U,	// SRIv2i32_shift
    0U,	// SRIv2i64_shift
    0U,	// SRIv4i16_shift
    0U,	// SRIv4i32_shift
    0U,	// SRIv8i16_shift
    0U,	// SRIv8i8_shift
    0U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    0U,	// SRSHLv2i32
    0U,	// SRSHLv2i64
    0U,	// SRSHLv4i16
    0U,	// SRSHLv4i32
    0U,	// SRSHLv8i16
    0U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    0U,	// SRSRAd
    0U,	// SRSRAv16i8_shift
    0U,	// SRSRAv2i32_shift
    0U,	// SRSRAv2i64_shift
    0U,	// SRSRAv4i16_shift
    0U,	// SRSRAv4i32_shift
    0U,	// SRSRAv8i16_shift
    0U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    0U,	// SSHLv16i8
    0U,	// SSHLv1i64
    0U,	// SSHLv2i32
    0U,	// SSHLv2i64
    0U,	// SSHLv4i16
    0U,	// SSHLv4i32
    0U,	// SSHLv8i16
    0U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    0U,	// SSRAd
    0U,	// SSRAv16i8_shift
    0U,	// SSRAv2i32_shift
    0U,	// SSRAv2i64_shift
    0U,	// SSRAv4i16_shift
    0U,	// SSRAv4i32_shift
    0U,	// SSRAv8i16_shift
    0U,	// SSRAv8i8_shift
    0U,	// SSUBLv16i8_v8i16
    0U,	// SSUBLv2i32_v2i64
    0U,	// SSUBLv4i16_v4i32
    0U,	// SSUBLv4i32_v2i64
    0U,	// SSUBLv8i16_v4i32
    0U,	// SSUBLv8i8_v8i16
    0U,	// SSUBWv16i8_v8i16
    0U,	// SSUBWv2i32_v2i64
    0U,	// SSUBWv4i16_v4i32
    0U,	// SSUBWv4i32_v2i64
    0U,	// SSUBWv8i16_v4i32
    0U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    0U,	// STLLRB
    0U,	// STLLRH
    0U,	// STLLRW
    0U,	// STLLRX
    0U,	// STLRB
    0U,	// STLRH
    0U,	// STLRW
    0U,	// STLRX
    0U,	// STLXPW
    0U,	// STLXPX
    0U,	// STLXRB
    0U,	// STLXRH
    0U,	// STLXRW
    0U,	// STLXRX
    1U,	// STNPDi
    2U,	// STNPQi
    2U,	// STNPSi
    2U,	// STNPWi
    1U,	// STNPXi
    1U,	// STPDi
    10U,	// STPDpost
    18U,	// STPDpre
    2U,	// STPQi
    10U,	// STPQpost
    18U,	// STPQpre
    2U,	// STPSi
    11U,	// STPSpost
    19U,	// STPSpre
    2U,	// STPWi
    11U,	// STPWpost
    19U,	// STPWpre
    1U,	// STPXi
    10U,	// STPXpost
    18U,	// STPXpre
    0U,	// STRBBpost
    0U,	// STRBBpre
    3U,	// STRBBroW
    3U,	// STRBBroX
    0U,	// STRBBui
    0U,	// STRBpost
    0U,	// STRBpre
    3U,	// STRBroW
    3U,	// STRBroX
    0U,	// STRBui
    0U,	// STRDpost
    0U,	// STRDpre
    3U,	// STRDroW
    4U,	// STRDroX
    0U,	// STRDui
    0U,	// STRHHpost
    0U,	// STRHHpre
    4U,	// STRHHroW
    4U,	// STRHHroX
    0U,	// STRHHui
    0U,	// STRHpost
    0U,	// STRHpre
    4U,	// STRHroW
    4U,	// STRHroX
    0U,	// STRHui
    0U,	// STRQpost
    0U,	// STRQpre
    4U,	// STRQroW
    5U,	// STRQroX
    0U,	// STRQui
    0U,	// STRSpost
    0U,	// STRSpre
    5U,	// STRSroW
    5U,	// STRSroX
    0U,	// STRSui
    0U,	// STRWpost
    0U,	// STRWpre
    5U,	// STRWroW
    5U,	// STRWroX
    0U,	// STRWui
    0U,	// STRXpost
    0U,	// STRXpre
    3U,	// STRXroW
    4U,	// STRXroX
    0U,	// STRXui
    0U,	// STTRBi
    0U,	// STTRHi
    0U,	// STTRWi
    0U,	// STTRXi
    0U,	// STURBBi
    0U,	// STURBi
    0U,	// STURDi
    0U,	// STURHHi
    0U,	// STURHi
    0U,	// STURQi
    0U,	// STURSi
    0U,	// STURWi
    0U,	// STURXi
    0U,	// STXPW
    0U,	// STXPX
    0U,	// STXRB
    0U,	// STXRH
    0U,	// STXRW
    0U,	// STXRX
    0U,	// SUBHNv2i64_v2i32
    0U,	// SUBHNv2i64_v4i32
    0U,	// SUBHNv4i32_v4i16
    0U,	// SUBHNv4i32_v8i16
    0U,	// SUBHNv8i16_v16i8
    0U,	// SUBHNv8i16_v8i8
    0U,	// SUBSWri
    0U,	// SUBSWrr
    0U,	// SUBSWrs
    0U,	// SUBSWrx
    0U,	// SUBSXri
    0U,	// SUBSXrr
    0U,	// SUBSXrs
    0U,	// SUBSXrx
    0U,	// SUBSXrx64
    0U,	// SUBWri
    0U,	// SUBWrr
    0U,	// SUBWrs
    0U,	// SUBWrx
    0U,	// SUBXri
    0U,	// SUBXrr
    0U,	// SUBXrs
    0U,	// SUBXrx
    0U,	// SUBXrx64
    0U,	// SUB_ZZZ_B
    0U,	// SUB_ZZZ_D
    0U,	// SUB_ZZZ_H
    0U,	// SUB_ZZZ_S
    0U,	// SUBv16i8
    0U,	// SUBv1i64
    0U,	// SUBv2i32
    0U,	// SUBv2i64
    0U,	// SUBv4i16
    0U,	// SUBv4i32
    0U,	// SUBv8i16
    0U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    0U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    0U,	// TBLv8i8Four
    0U,	// TBLv8i8One
    0U,	// TBLv8i8Three
    0U,	// TBLv8i8Two
    0U,	// TBNZW
    0U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    0U,	// TBXv8i8Four
    0U,	// TBXv8i8One
    0U,	// TBXv8i8Three
    0U,	// TBXv8i8Two
    0U,	// TBZW
    0U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    0U,	// TRN1v16i8
    0U,	// TRN1v2i32
    0U,	// TRN1v2i64
    0U,	// TRN1v4i16
    0U,	// TRN1v4i32
    0U,	// TRN1v8i16
    0U,	// TRN1v8i8
    0U,	// TRN2v16i8
    0U,	// TRN2v2i32
    0U,	// TRN2v2i64
    0U,	// TRN2v4i16
    0U,	// TRN2v4i32
    0U,	// TRN2v8i16
    0U,	// TRN2v8i8
    0U,	// UABALv16i8_v8i16
    0U,	// UABALv2i32_v2i64
    0U,	// UABALv4i16_v4i32
    0U,	// UABALv4i32_v2i64
    0U,	// UABALv8i16_v4i32
    0U,	// UABALv8i8_v8i16
    0U,	// UABAv16i8
    0U,	// UABAv2i32
    0U,	// UABAv4i16
    0U,	// UABAv4i32
    0U,	// UABAv8i16
    0U,	// UABAv8i8
    0U,	// UABDLv16i8_v8i16
    0U,	// UABDLv2i32_v2i64
    0U,	// UABDLv4i16_v4i32
    0U,	// UABDLv4i32_v2i64
    0U,	// UABDLv8i16_v4i32
    0U,	// UABDLv8i8_v8i16
    0U,	// UABDv16i8
    0U,	// UABDv2i32
    0U,	// UABDv4i16
    0U,	// UABDv4i32
    0U,	// UABDv8i16
    0U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    0U,	// UADDLv16i8_v8i16
    0U,	// UADDLv2i32_v2i64
    0U,	// UADDLv4i16_v4i32
    0U,	// UADDLv4i32_v2i64
    0U,	// UADDLv8i16_v4i32
    0U,	// UADDLv8i8_v8i16
    0U,	// UADDWv16i8_v8i16
    0U,	// UADDWv2i32_v2i64
    0U,	// UADDWv4i16_v4i32
    0U,	// UADDWv4i32_v2i64
    0U,	// UADDWv8i16_v4i32
    0U,	// UADDWv8i8_v8i16
    0U,	// UBFMWri
    0U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDOT2S
    0U,	// UDOT4S
    0U,	// UDOTIDX2S
    0U,	// UDOTIDX4S
    0U,	// UHADDv16i8
    0U,	// UHADDv2i32
    0U,	// UHADDv4i16
    0U,	// UHADDv4i32
    0U,	// UHADDv8i16
    0U,	// UHADDv8i8
    0U,	// UHSUBv16i8
    0U,	// UHSUBv2i32
    0U,	// UHSUBv4i16
    0U,	// UHSUBv4i32
    0U,	// UHSUBv8i16
    0U,	// UHSUBv8i8
    0U,	// UMADDLrrr
    0U,	// UMAXPv16i8
    0U,	// UMAXPv2i32
    0U,	// UMAXPv4i16
    0U,	// UMAXPv4i32
    0U,	// UMAXPv8i16
    0U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    0U,	// UMAXv16i8
    0U,	// UMAXv2i32
    0U,	// UMAXv4i16
    0U,	// UMAXv4i32
    0U,	// UMAXv8i16
    0U,	// UMAXv8i8
    0U,	// UMINPv16i8
    0U,	// UMINPv2i32
    0U,	// UMINPv4i16
    0U,	// UMINPv4i32
    0U,	// UMINPv8i16
    0U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    0U,	// UMINv16i8
    0U,	// UMINv2i32
    0U,	// UMINv4i16
    0U,	// UMINv4i32
    0U,	// UMINv8i16
    0U,	// UMINv8i8
    0U,	// UMLALv16i8_v8i16
    9U,	// UMLALv2i32_indexed
    0U,	// UMLALv2i32_v2i64
    9U,	// UMLALv4i16_indexed
    0U,	// UMLALv4i16_v4i32
    9U,	// UMLALv4i32_indexed
    0U,	// UMLALv4i32_v2i64
    9U,	// UMLALv8i16_indexed
    0U,	// UMLALv8i16_v4i32
    0U,	// UMLALv8i8_v8i16
    0U,	// UMLSLv16i8_v8i16
    9U,	// UMLSLv2i32_indexed
    0U,	// UMLSLv2i32_v2i64
    9U,	// UMLSLv4i16_indexed
    0U,	// UMLSLv4i16_v4i32
    9U,	// UMLSLv4i32_indexed
    0U,	// UMLSLv4i32_v2i64
    9U,	// UMLSLv8i16_indexed
    0U,	// UMLSLv8i16_v4i32
    0U,	// UMLSLv8i8_v8i16
    0U,	// UMOVvi16
    0U,	// UMOVvi32
    0U,	// UMOVvi64
    0U,	// UMOVvi8
    0U,	// UMSUBLrrr
    0U,	// UMULHrr
    0U,	// UMULLv16i8_v8i16
    1U,	// UMULLv2i32_indexed
    0U,	// UMULLv2i32_v2i64
    1U,	// UMULLv4i16_indexed
    0U,	// UMULLv4i16_v4i32
    1U,	// UMULLv4i32_indexed
    0U,	// UMULLv4i32_v2i64
    1U,	// UMULLv8i16_indexed
    0U,	// UMULLv8i16_v4i32
    0U,	// UMULLv8i8_v8i16
    0U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    0U,	// UQADDv2i32
    0U,	// UQADDv2i64
    0U,	// UQADDv4i16
    0U,	// UQADDv4i32
    0U,	// UQADDv8i16
    0U,	// UQADDv8i8
    0U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    0U,	// UQRSHLv2i32
    0U,	// UQRSHLv2i64
    0U,	// UQRSHLv4i16
    0U,	// UQRSHLv4i32
    0U,	// UQRSHLv8i16
    0U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    0U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    0U,	// UQRSHRNv4i32_shift
    0U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    0U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    0U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    0U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    0U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    0U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    0U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    0U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    0U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    0U,	// UQSHRNv4i32_shift
    0U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    0U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    0U,	// UQSUBv2i32
    0U,	// UQSUBv2i64
    0U,	// UQSUBv4i16
    0U,	// UQSUBv4i32
    0U,	// UQSUBv8i16
    0U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    0U,	// URHADDv16i8
    0U,	// URHADDv2i32
    0U,	// URHADDv4i16
    0U,	// URHADDv4i32
    0U,	// URHADDv8i16
    0U,	// URHADDv8i8
    0U,	// URSHLv16i8
    0U,	// URSHLv1i64
    0U,	// URSHLv2i32
    0U,	// URSHLv2i64
    0U,	// URSHLv4i16
    0U,	// URSHLv4i32
    0U,	// URSHLv8i16
    0U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    0U,	// URSRAd
    0U,	// URSRAv16i8_shift
    0U,	// URSRAv2i32_shift
    0U,	// URSRAv2i64_shift
    0U,	// URSRAv4i16_shift
    0U,	// URSRAv4i32_shift
    0U,	// URSRAv8i16_shift
    0U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    0U,	// USHLv16i8
    0U,	// USHLv1i64
    0U,	// USHLv2i32
    0U,	// USHLv2i64
    0U,	// USHLv4i16
    0U,	// USHLv4i32
    0U,	// USHLv8i16
    0U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    0U,	// USRAd
    0U,	// USRAv16i8_shift
    0U,	// USRAv2i32_shift
    0U,	// USRAv2i64_shift
    0U,	// USRAv4i16_shift
    0U,	// USRAv4i32_shift
    0U,	// USRAv8i16_shift
    0U,	// USRAv8i8_shift
    0U,	// USUBLv16i8_v8i16
    0U,	// USUBLv2i32_v2i64
    0U,	// USUBLv4i16_v4i32
    0U,	// USUBLv4i32_v2i64
    0U,	// USUBLv8i16_v4i32
    0U,	// USUBLv8i8_v8i16
    0U,	// USUBWv16i8_v8i16
    0U,	// USUBWv2i32_v2i64
    0U,	// USUBWv4i16_v4i32
    0U,	// USUBWv4i32_v2i64
    0U,	// USUBWv8i16_v4i32
    0U,	// USUBWv8i8_v8i16
    0U,	// UZP1v16i8
    0U,	// UZP1v2i32
    0U,	// UZP1v2i64
    0U,	// UZP1v4i16
    0U,	// UZP1v4i32
    0U,	// UZP1v8i16
    0U,	// UZP1v8i8
    0U,	// UZP2v16i8
    0U,	// UZP2v2i32
    0U,	// UZP2v2i64
    0U,	// UZP2v4i16
    0U,	// UZP2v4i32
    0U,	// UZP2v8i16
    0U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    0U,	// ZIP1_PPP_B
    0U,	// ZIP1_PPP_D
    0U,	// ZIP1_PPP_H
    0U,	// ZIP1_PPP_S
    0U,	// ZIP1_ZZZ_B
    0U,	// ZIP1_ZZZ_D
    0U,	// ZIP1_ZZZ_H
    0U,	// ZIP1_ZZZ_S
    0U,	// ZIP1v16i8
    0U,	// ZIP1v2i32
    0U,	// ZIP1v2i64
    0U,	// ZIP1v4i16
    0U,	// ZIP1v4i32
    0U,	// ZIP1v8i16
    0U,	// ZIP1v8i8
    0U,	// ZIP2_PPP_B
    0U,	// ZIP2_PPP_D
    0U,	// ZIP2_PPP_H
    0U,	// ZIP2_PPP_S
    0U,	// ZIP2_ZZZ_B
    0U,	// ZIP2_ZZZ_D
    0U,	// ZIP2_ZZZ_H
    0U,	// ZIP2_ZZZ_S
    0U,	// ZIP2v16i8
    0U,	// ZIP2v2i32
    0U,	// ZIP2v2i64
    0U,	// ZIP2v4i16
    0U,	// ZIP2v4i32
    0U,	// ZIP2v8i16
    0U,	// ZIP2v8i8
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 6 bits for 47 unique commands.
  switch ((Bits >> 13) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O);
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, STI, O);
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // ADD_ZZZ_B, SUB_ZZZ_B, ZIP1_PPP_B, ZIP1_ZZZ_B, ZIP2_PPP_B, ZIP2_ZZZ_B
    printSVERegOp<'b'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'b'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'b'>(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADD_ZZZ_D, SUB_ZZZ_D, ZIP1_PPP_D, ZIP1_ZZZ_D, ZIP2_PPP_D, ZIP2_ZZZ_D
    printSVERegOp<'d'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'d'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'d'>(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ADD_ZZZ_H, SUB_ZZZ_H, ZIP1_PPP_H, ZIP1_ZZZ_H, ZIP2_PPP_H, ZIP2_ZZZ_H
    printSVERegOp<'h'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'h'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'h'>(MI, 2, STI, O);
    return;
    break;
  case 7:
    // ADD_ZZZ_S, SUB_ZZZ_S, ZIP1_PPP_S, ZIP1_ZZZ_S, ZIP2_PPP_S, ZIP2_ZZZ_S
    printSVERegOp<'s'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'s'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'s'>(MI, 2, STI, O);
    return;
    break;
  case 8:
    // B, BL
    printAlignedLabel(MI, 0, STI, O);
    return;
    break;
  case 9:
    // BRK, DCPS1, DCPS2, DCPS3, HLT, HVC, SMC, SVC
    printImmHex(MI, 0, STI, O);
    return;
    break;
  case 10:
    // Bcc
    printCondCode(MI, 0, STI, O);
    O << "\t";
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 11:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    printOperand(MI, 1, STI, O);
    break;
  case 12:
    // CASPALW, CASPAW, CASPLW, CASPW
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // CASPALX, CASPAX, CASPLX, CASPX
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O);
    return;
    break;
  case 15:
    // HINT
    printImm(MI, 0, STI, O);
    return;
    break;
  case 16:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 18:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 20:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 22:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 24:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 25:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 26:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 27:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 28:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 29:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 30:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 31:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 32:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 33:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 34:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 35:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 36:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 37:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 38:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 39:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 40:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 41:
    // MSRpstateImm1, MSRpstateImm4
    printSystemPStateField(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 42:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O);
    break;
  case 43:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 44:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 45:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 46:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 41 unique commands.
  switch ((Bits >> 19) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ADDHNv8i16_v16i8, ADDPv16i8, ADDv16i8, AESDrr, AESErr, AESIM...
    O << ".16b, ";
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    O << ", ";
    break;
  case 2:
    // ABSv2i32, ADDHNv2i64_v2i32, ADDPv2i32, ADDv2i32, BICv2i32, CLSv2i32, C...
    O << ".2s, ";
    break;
  case 3:
    // ABSv2i64, ADDPv2i64, ADDv2i64, CMEQv2i64, CMEQv2i64rz, CMGEv2i64, CMGE...
    O << ".2d, ";
    break;
  case 4:
    // ABSv4i16, ADDHNv4i32_v4i16, ADDPv4i16, ADDv4i16, BICv4i16, CLSv4i16, C...
    O << ".4h, ";
    break;
  case 5:
    // ABSv4i32, ADDHNv2i64_v4i32, ADDPv4i32, ADDv4i32, BICv4i32, CLSv4i32, C...
    O << ".4s, ";
    break;
  case 6:
    // ABSv8i16, ADDHNv4i32_v8i16, ADDPv8i16, ADDv8i16, BICv8i16, CLSv8i16, C...
    O << ".8h, ";
    break;
  case 7:
    // ABSv8i8, ADDHNv8i16_v8i8, ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8...
    O << ".8b, ";
    break;
  case 8:
    // AUTDZA, AUTDZB, AUTIZA, AUTIZB, BLR, BLRAAZ, BLRABZ, BR, BRAAZ, BRABZ,...
    return;
    break;
  case 9:
    // FCMPDri, FCMPEDri, FCMPEHri, FCMPESri, FCMPHri, FCMPSri
    O << ", #0.0";
    return;
    break;
  case 10:
    // FMOVXDHighr, INSvi64gpr, INSvi64lane
    O << ".d";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 11:
    // INSvi16gpr, INSvi16lane
    O << ".h";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 12:
    // INSvi32gpr, INSvi32lane
    O << ".s";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 13:
    // INSvi8gpr, INSvi8lane
    O << ".b";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 14:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O);
    return;
    break;
  case 15:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O);
    return;
    break;
  case 16:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O);
    return;
    break;
  case 17:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O);
    return;
    break;
  case 18:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O);
    return;
    break;
  case 19:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O);
    return;
    break;
  case 20:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O);
    return;
    break;
  case 21:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O);
    return;
    break;
  case 22:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O);
    return;
    break;
  case 23:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']';
    return;
    break;
  case 24:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O);
    return;
    break;
  case 25:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O);
    return;
    break;
  case 26:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O);
    return;
    break;
  case 27:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O);
    return;
    break;
  case 28:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O);
    return;
    break;
  case 29:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O);
    return;
    break;
  case 30:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O);
    return;
    break;
  case 31:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O);
    return;
    break;
  case 32:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O);
    return;
    break;
  case 33:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O);
    return;
    break;
  case 34:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O);
    return;
    break;
  case 35:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O);
    return;
    break;
  case 36:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O);
    return;
    break;
  case 37:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ", [";
    break;
  case 38:
    // PMULLv1i64, PMULLv2i64
    O << ".1q, ";
    printVRegOperand(MI, 1, STI, O);
    break;
  case 39:
    // SADALPv2i32_v1i64, SADDLPv2i32_v1i64, UADALPv2i32_v1i64, UADDLPv2i32_v...
    O << ".1d, ";
    break;
  case 40:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], ";
    break;
  }


  // Fragment 2 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 25) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, STI, O);
    return;
    break;
  case 4:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 2, STI, O);
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printImm(MI, 2, STI, O);
    printShifter(MI, 3, STI, O);
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // FMOVDi, FMOVHi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f16_ns, FMOV...
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 8:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 9:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O);
    break;
  case 10:
    // LDADDAB, LDADDAH, LDADDALB, LDADDALH, LDADDALW, LDADDALX, LDADDAW, LDA...
    printOperand(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 11:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O);
    return;
    break;
  case 12:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printImm(MI, 1, STI, O);
    break;
  case 13:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O);
    return;
    break;
  case 14:
    // PMULLv1i64
    O << ".1d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".1d";
    return;
    break;
  case 15:
    // PMULLv2i64
    O << ".2d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".2d";
    return;
    break;
  case 16:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O);
    return;
    break;
  case 17:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O);
    return;
    break;
  case 18:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O);
    return;
    break;
  case 19:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O);
    return;
    break;
  case 20:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O);
    return;
    break;
  case 21:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O);
    return;
    break;
  case 22:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O);
    return;
    break;
  case 23:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O);
    return;
    break;
  case 24:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O);
    return;
    break;
  case 25:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O);
    return;
    break;
  case 26:
    // SYSxt
    printSysCROperand(MI, 1, STI, O);
    O << ", ";
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 27:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", ";
    printVRegOperand(MI, 2, STI, O);
    break;
  case 28:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O);
    O << ", ";
    printVRegOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 6 bits for 45 unique commands.
  switch ((Bits >> 30) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ADDVv16i8v, AESDrr, AESErr, AESIMCrr, AESMCrr, CLSv16i8, CLZ...
    O << ".16b";
    return;
    break;
  case 1:
    // ABSv1i64, ADR, AUTDA, AUTDB, AUTIA, AUTIB, BLRAA, BLRAB, BRAA, BRAB, C...
    return;
    break;
  case 2:
    // ABSv2i32, CLSv2i32, CLZv2i32, FABSv2f32, FADDPv2i32p, FCVTASv2f32, FCV...
    O << ".2s";
    return;
    break;
  case 3:
    // ABSv2i64, ADDPv2i64p, FABSv2f64, FADDPv2i64p, FCVTASv2f64, FCVTAUv2f64...
    O << ".2d";
    return;
    break;
  case 4:
    // ABSv4i16, ADDVv4i16v, CLSv4i16, CLZv4i16, FABSv4f16, FCVTASv4f16, FCVT...
    O << ".4h";
    return;
    break;
  case 5:
    // ABSv4i32, ADDVv4i32v, CLSv4i32, CLZv4i32, FABSv4f32, FCVTASv4f32, FCVT...
    O << ".4s";
    return;
    break;
  case 6:
    // ABSv8i16, ADDVv8i16v, CLSv8i16, CLZv8i16, FABSv8f16, FCVTASv8f16, FCVT...
    O << ".8h";
    return;
    break;
  case 7:
    // ABSv8i8, ADDVv8i8v, CLSv8i8, CLZv8i8, CNTv8i8, NEGv8i8, NOTv8i8, RBITv...
    O << ".8b";
    return;
    break;
  case 8:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADDSXri, ADDS...
    O << ", ";
    break;
  case 9:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d, ";
    break;
  case 10:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s, ";
    break;
  case 11:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h, ";
    break;
  case 12:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BICv16i8, BIFv16i8, BITv16i8, BSLv16i8,...
    O << ".16b, ";
    break;
  case 13:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s, ";
    break;
  case 14:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h, ";
    break;
  case 15:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b, ";
    break;
  case 16:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ", [";
    break;
  case 17:
    // CMEQv16i8rz, CMGEv16i8rz, CMGTv16i8rz, CMLEv16i8rz, CMLTv16i8rz
    O << ".16b, #0";
    return;
    break;
  case 18:
    // CMEQv1i64rz, CMGEv1i64rz, CMGTv1i64rz, CMLEv1i64rz, CMLTv1i64rz
    O << ", #0";
    return;
    break;
  case 19:
    // CMEQv2i32rz, CMGEv2i32rz, CMGTv2i32rz, CMLEv2i32rz, CMLTv2i32rz
    O << ".2s, #0";
    return;
    break;
  case 20:
    // CMEQv2i64rz, CMGEv2i64rz, CMGTv2i64rz, CMLEv2i64rz, CMLTv2i64rz
    O << ".2d, #0";
    return;
    break;
  case 21:
    // CMEQv4i16rz, CMGEv4i16rz, CMGTv4i16rz, CMLEv4i16rz, CMLTv4i16rz
    O << ".4h, #0";
    return;
    break;
  case 22:
    // CMEQv4i32rz, CMGEv4i32rz, CMGTv4i32rz, CMLEv4i32rz, CMLTv4i32rz
    O << ".4s, #0";
    return;
    break;
  case 23:
    // CMEQv8i16rz, CMGEv8i16rz, CMGTv8i16rz, CMLEv8i16rz, CMLTv8i16rz
    O << ".8h, #0";
    return;
    break;
  case 24:
    // CMEQv8i8rz, CMGEv8i8rz, CMGTv8i8rz, CMLEv8i8rz, CMLTv8i8rz
    O << ".8b, #0";
    return;
    break;
  case 25:
    // CPYi16, DUPv4i16lane, DUPv8i16lane, INSvi16lane, SMOVvi16to32, SMOVvi1...
    O << ".h";
    break;
  case 26:
    // CPYi32, DUPv2i32lane, DUPv4i32lane, INSvi32lane, SMOVvi32to64, UMOVvi3...
    O << ".s";
    break;
  case 27:
    // CPYi64, DUPv2i64lane, FMOVDXHighr, INSvi64lane, UMOVvi64
    O << ".d";
    break;
  case 28:
    // CPYi8, DUPv16i8lane, DUPv8i8lane, INSvi8lane, SMOVvi8to32, SMOVvi8to64...
    O << ".b";
    break;
  case 29:
    // FADDPv2i16p, FMAXNMPv2i16p, FMAXPv2i16p, FMINNMPv2i16p, FMINPv2i16p
    O << ".2h";
    return;
    break;
  case 30:
    // FCMEQv1i16rz, FCMEQv1i32rz, FCMEQv1i64rz, FCMGEv1i16rz, FCMGEv1i32rz, ...
    O << ", #0.0";
    return;
    break;
  case 31:
    // FCMEQv2i32rz, FCMGEv2i32rz, FCMGTv2i32rz, FCMLEv2i32rz, FCMLTv2i32rz
    O << ".2s, #0.0";
    return;
    break;
  case 32:
    // FCMEQv2i64rz, FCMGEv2i64rz, FCMGTv2i64rz, FCMLEv2i64rz, FCMLTv2i64rz
    O << ".2d, #0.0";
    return;
    break;
  case 33:
    // FCMEQv4i16rz, FCMGEv4i16rz, FCMGTv4i16rz, FCMLEv4i16rz, FCMLTv4i16rz
    O << ".4h, #0.0";
    return;
    break;
  case 34:
    // FCMEQv4i32rz, FCMGEv4i32rz, FCMGTv4i32rz, FCMLEv4i32rz, FCMLTv4i32rz
    O << ".4s, #0.0";
    return;
    break;
  case 35:
    // FCMEQv8i16rz, FCMGEv8i16rz, FCMGTv8i16rz, FCMLEv8i16rz, FCMLTv8i16rz
    O << ".8h, #0.0";
    return;
    break;
  case 36:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ']';
    return;
    break;
  case 37:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 38:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O);
    return;
    break;
  case 39:
    // SHLLv16i8
    O << ".16b, #8";
    return;
    break;
  case 40:
    // SHLLv2i32
    O << ".2s, #32";
    return;
    break;
  case 41:
    // SHLLv4i16
    O << ".4h, #16";
    return;
    break;
  case 42:
    // SHLLv4i32
    O << ".4s, #32";
    return;
    break;
  case 43:
    // SHLLv8i16
    O << ".8h, #16";
    return;
    break;
  case 44:
    // SHLLv8i8
    O << ".8b, #8";
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 36) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O);
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O);
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, STI, O);
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, STI, O);
    return;
    break;
  case 8:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 3, STI, O);
    break;
  case 9:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 10:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 11:
    // LDRAAindexed, LDRABindexed
    printImmScale<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRAAwriteback, LDRABwriteback
    printImmScale<8>(MI, 3, STI, O);
    O << "]!";
    return;
    break;
  case 13:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printSysCROperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 19:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 5 bits for 25 unique commands.
  switch ((Bits >> 41) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDv1i64, ASRVWr, ASRVXr, CMEQv1i64, CMG...
    return;
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d";
    return;
    break;
  case 2:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s";
    return;
    break;
  case 3:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h";
    return;
    break;
  case 4:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BICv16i8, BIFv16i8, BITv16i8, BSLv16i8,...
    O << ".16b";
    return;
    break;
  case 5:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s";
    return;
    break;
  case 6:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h";
    return;
    break;
  case 7:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b";
    return;
    break;
  case 8:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O);
    return;
    break;
  case 9:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", ";
    break;
  case 10:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ']';
    return;
    break;
  case 11:
    // EXTv16i8
    O << ".16b, ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 12:
    // EXTv8i8
    O << ".8b, ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 13:
    // FCADDv2f32, FCMLAv2f32
    O << ".2s, ";
    break;
  case 14:
    // FCADDv2f64, FCMLAv2f64
    O << ".2d, ";
    break;
  case 15:
    // FCADDv4f16, FCMLAv4f16
    O << ".4h, ";
    break;
  case 16:
    // FCADDv4f32, FCMLAv4f32
    O << ".4s, ";
    break;
  case 17:
    // FCADDv8f16, FCMLAv8f16
    O << ".8h, ";
    break;
  case 18:
    // FCMLAv4f16_indexed, FCMLAv8f16_indexed, FMLAv1i16_indexed, FMLAv4i16_i...
    O << ".h";
    break;
  case 19:
    // FCMLAv4f32_indexed, FMLAv1i32_indexed, FMLAv2i32_indexed, FMLAv4i32_in...
    O << ".s";
    break;
  case 20:
    // FMLAv1i64_indexed, FMLAv2i64_indexed, FMLSv1i64_indexed, FMLSv2i64_ind...
    O << ".d";
    break;
  case 21:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], ";
    break;
  case 22:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!";
    return;
    break;
  case 23:
    // SDOTIDX2S, SDOTIDX4S, UDOTIDX2S, UDOTIDX4S
    O << ".4b";
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 24:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 46) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O);
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, FMADDDrrr, FMADDHrrr, FMADDSrrr, FMSUBDrrr, FMSUBH...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 3:
    // FCADDv2f32, FCADDv2f64, FCADDv4f16, FCADDv4f32, FCADDv8f16
    printComplexRotationOp<180, 90>(MI, 3, STI, O);
    return;
    break;
  case 4:
    // FCMLAv2f32, FCMLAv2f64, FCMLAv4f16, FCMLAv4f32, FCMLAv8f16
    printComplexRotationOp<90, 0>(MI, 4, STI, O);
    return;
    break;
  case 5:
    // FCMLAv4f16_indexed, FCMLAv4f32_indexed, FCMLAv8f16_indexed, FMLAv1i16_...
    printVectorIndex(MI, 4, STI, O);
    break;
  case 6:
    // FMULXv1i16_indexed, FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 7:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 8:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 9:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O);
    break;
  case 11:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O);
    break;
  case 12:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O);
    break;
  case 13:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 20:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 51) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // FCMLAv4f16_indexed, FCMLAv4f32_indexed, FCMLAv8f16_indexed
    O << ", ";
    printComplexRotationOp<90, 0>(MI, 5, STI, O);
    return;
    break;
  case 1:
    // FMLAv1i16_indexed, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_ind...
    return;
    break;
  case 2:
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!";
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64InstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 564 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'W', '9', '_', 'W', '1', '0', 0,
  /* 33 */ 'X', '9', '_', 'X', '1', '0', 0,
  /* 40 */ 'b', '1', '0', 0,
  /* 44 */ 'd', '1', '0', 0,
  /* 48 */ 'h', '1', '0', 0,
  /* 52 */ 'p', '1', '0', 0,
  /* 56 */ 'q', '1', '0', 0,
  /* 60 */ 's', '1', '0', 0,
  /* 64 */ 'w', '1', '0', 0,
  /* 68 */ 'x', '1', '0', 0,
  /* 72 */ 'z', '1', '0', 0,
  /* 76 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 92 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 108 */ 'W', '1', '9', '_', 'W', '2', '0', 0,
  /* 116 */ 'X', '1', '9', '_', 'X', '2', '0', 0,
  /* 124 */ 'b', '2', '0', 0,
  /* 128 */ 'd', '2', '0', 0,
  /* 132 */ 'h', '2', '0', 0,
  /* 136 */ 'q', '2', '0', 0,
  /* 140 */ 's', '2', '0', 0,
  /* 144 */ 'w', '2', '0', 0,
  /* 148 */ 'x', '2', '0', 0,
  /* 152 */ 'z', '2', '0', 0,
  /* 156 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 172 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 188 */ 'W', '2', '9', '_', 'W', '3', '0', 0,
  /* 196 */ 'b', '3', '0', 0,
  /* 200 */ 'd', '3', '0', 0,
  /* 204 */ 'h', '3', '0', 0,
  /* 208 */ 'q', '3', '0', 0,
  /* 212 */ 's', '3', '0', 0,
  /* 216 */ 'w', '3', '0', 0,
  /* 220 */ 'x', '3', '0', 0,
  /* 224 */ 'z', '3', '0', 0,
  /* 228 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 243 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 258 */ 'W', 'Z', 'R', '_', 'W', '0', 0,
  /* 265 */ 'X', 'Z', 'R', '_', 'X', '0', 0,
  /* 272 */ 'b', '0', 0,
  /* 275 */ 'd', '0', 0,
  /* 278 */ 'h', '0', 0,
  /* 281 */ 'p', '0', 0,
  /* 284 */ 'q', '0', 0,
  /* 287 */ 's', '0', 0,
  /* 290 */ 'w', '0', 0,
  /* 293 */ 'x', '0', 0,
  /* 296 */ 'z', '0', 0,
  /* 299 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 313 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 327 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 335 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 343 */ 'b', '1', '1', 0,
  /* 347 */ 'd', '1', '1', 0,
  /* 351 */ 'h', '1', '1', 0,
  /* 355 */ 'p', '1', '1', 0,
  /* 359 */ 'q', '1', '1', 0,
  /* 363 */ 's', '1', '1', 0,
  /* 367 */ 'w', '1', '1', 0,
  /* 371 */ 'x', '1', '1', 0,
  /* 375 */ 'z', '1', '1', 0,
  /* 379 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 395 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 411 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 419 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 427 */ 'b', '2', '1', 0,
  /* 431 */ 'd', '2', '1', 0,
  /* 435 */ 'h', '2', '1', 0,
  /* 439 */ 'q', '2', '1', 0,
  /* 443 */ 's', '2', '1', 0,
  /* 447 */ 'w', '2', '1', 0,
  /* 451 */ 'x', '2', '1', 0,
  /* 455 */ 'z', '2', '1', 0,
  /* 459 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 475 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 491 */ 'b', '3', '1', 0,
  /* 495 */ 'd', '3', '1', 0,
  /* 499 */ 'h', '3', '1', 0,
  /* 503 */ 'q', '3', '1', 0,
  /* 507 */ 's', '3', '1', 0,
  /* 511 */ 'z', '3', '1', 0,
  /* 515 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 529 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 543 */ 'W', '0', '_', 'W', '1', 0,
  /* 549 */ 'X', '0', '_', 'X', '1', 0,
  /* 555 */ 'b', '1', 0,
  /* 558 */ 'd', '1', 0,
  /* 561 */ 'h', '1', 0,
  /* 564 */ 'p', '1', 0,
  /* 567 */ 'q', '1', 0,
  /* 570 */ 's', '1', 0,
  /* 573 */ 'w', '1', 0,
  /* 576 */ 'x', '1', 0,
  /* 579 */ 'z', '1', 0,
  /* 582 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 597 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 612 */ 'W', '1', '1', '_', 'W', '1', '2', 0,
  /* 620 */ 'X', '1', '1', '_', 'X', '1', '2', 0,
  /* 628 */ 'b', '1', '2', 0,
  /* 632 */ 'd', '1', '2', 0,
  /* 636 */ 'h', '1', '2', 0,
  /* 640 */ 'p', '1', '2', 0,
  /* 644 */ 'q', '1', '2', 0,
  /* 648 */ 's', '1', '2', 0,
  /* 652 */ 'w', '1', '2', 0,
  /* 656 */ 'x', '1', '2', 0,
  /* 660 */ 'z', '1', '2', 0,
  /* 664 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 680 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 696 */ 'W', '2', '1', '_', 'W', '2', '2', 0,
  /* 704 */ 'X', '2', '1', '_', 'X', '2', '2', 0,
  /* 712 */ 'b', '2', '2', 0,
  /* 716 */ 'd', '2', '2', 0,
  /* 720 */ 'h', '2', '2', 0,
  /* 724 */ 'q', '2', '2', 0,
  /* 728 */ 's', '2', '2', 0,
  /* 732 */ 'w', '2', '2', 0,
  /* 736 */ 'x', '2', '2', 0,
  /* 740 */ 'z', '2', '2', 0,
  /* 744 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 757 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 770 */ 'W', '1', '_', 'W', '2', 0,
  /* 776 */ 'X', '1', '_', 'X', '2', 0,
  /* 782 */ 'b', '2', 0,
  /* 785 */ 'd', '2', 0,
  /* 788 */ 'h', '2', 0,
  /* 791 */ 'p', '2', 0,
  /* 794 */ 'q', '2', 0,
  /* 797 */ 's', '2', 0,
  /* 800 */ 'w', '2', 0,
  /* 803 */ 'x', '2', 0,
  /* 806 */ 'z', '2', 0,
  /* 809 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 825 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 841 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 849 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 857 */ 'b', '1', '3', 0,
  /* 861 */ 'd', '1', '3', 0,
  /* 865 */ 'h', '1', '3', 0,
  /* 869 */ 'p', '1', '3', 0,
  /* 873 */ 'q', '1', '3', 0,
  /* 877 */ 's', '1', '3', 0,
  /* 881 */ 'w', '1', '3', 0,
  /* 885 */ 'x', '1', '3', 0,
  /* 889 */ 'z', '1', '3', 0,
  /* 893 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 909 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 925 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 933 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 941 */ 'b', '2', '3', 0,
  /* 945 */ 'd', '2', '3', 0,
  /* 949 */ 'h', '2', '3', 0,
  /* 953 */ 'q', '2', '3', 0,
  /* 957 */ 's', '2', '3', 0,
  /* 961 */ 'w', '2', '3', 0,
  /* 965 */ 'x', '2', '3', 0,
  /* 969 */ 'z', '2', '3', 0,
  /* 973 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 985 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 997 */ 'W', '2', '_', 'W', '3', 0,
  /* 1003 */ 'X', '2', '_', 'X', '3', 0,
  /* 1009 */ 'b', '3', 0,
  /* 1012 */ 'd', '3', 0,
  /* 1015 */ 'h', '3', 0,
  /* 1018 */ 'p', '3', 0,
  /* 1021 */ 'q', '3', 0,
  /* 1024 */ 's', '3', 0,
  /* 1027 */ 'w', '3', 0,
  /* 1030 */ 'x', '3', 0,
  /* 1033 */ 'z', '3', 0,
  /* 1036 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 1052 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 1068 */ 'W', '1', '3', '_', 'W', '1', '4', 0,
  /* 1076 */ 'X', '1', '3', '_', 'X', '1', '4', 0,
  /* 1084 */ 'b', '1', '4', 0,
  /* 1088 */ 'd', '1', '4', 0,
  /* 1092 */ 'h', '1', '4', 0,
  /* 1096 */ 'p', '1', '4', 0,
  /* 1100 */ 'q', '1', '4', 0,
  /* 1104 */ 's', '1', '4', 0,
  /* 1108 */ 'w', '1', '4', 0,
  /* 1112 */ 'x', '1', '4', 0,
  /* 1116 */ 'z', '1', '4', 0,
  /* 1120 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1136 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1152 */ 'W', '2', '3', '_', 'W', '2', '4', 0,
  /* 1160 */ 'X', '2', '3', '_', 'X', '2', '4', 0,
  /* 1168 */ 'b', '2', '4', 0,
  /* 1172 */ 'd', '2', '4', 0,
  /* 1176 */ 'h', '2', '4', 0,
  /* 1180 */ 'q', '2', '4', 0,
  /* 1184 */ 's', '2', '4', 0,
  /* 1188 */ 'w', '2', '4', 0,
  /* 1192 */ 'x', '2', '4', 0,
  /* 1196 */ 'z', '2', '4', 0,
  /* 1200 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1212 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1224 */ 'W', '3', '_', 'W', '4', 0,
  /* 1230 */ 'X', '3', '_', 'X', '4', 0,
  /* 1236 */ 'b', '4', 0,
  /* 1239 */ 'd', '4', 0,
  /* 1242 */ 'h', '4', 0,
  /* 1245 */ 'p', '4', 0,
  /* 1248 */ 'q', '4', 0,
  /* 1251 */ 's', '4', 0,
  /* 1254 */ 'w', '4', 0,
  /* 1257 */ 'x', '4', 0,
  /* 1260 */ 'z', '4', 0,
  /* 1263 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1279 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1295 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1303 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1311 */ 'b', '1', '5', 0,
  /* 1315 */ 'd', '1', '5', 0,
  /* 1319 */ 'h', '1', '5', 0,
  /* 1323 */ 'p', '1', '5', 0,
  /* 1327 */ 'q', '1', '5', 0,
  /* 1331 */ 's', '1', '5', 0,
  /* 1335 */ 'w', '1', '5', 0,
  /* 1339 */ 'x', '1', '5', 0,
  /* 1343 */ 'z', '1', '5', 0,
  /* 1347 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1363 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1379 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1387 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1395 */ 'b', '2', '5', 0,
  /* 1399 */ 'd', '2', '5', 0,
  /* 1403 */ 'h', '2', '5', 0,
  /* 1407 */ 'q', '2', '5', 0,
  /* 1411 */ 's', '2', '5', 0,
  /* 1415 */ 'w', '2', '5', 0,
  /* 1419 */ 'x', '2', '5', 0,
  /* 1423 */ 'z', '2', '5', 0,
  /* 1427 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1439 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1451 */ 'W', '4', '_', 'W', '5', 0,
  /* 1457 */ 'X', '4', '_', 'X', '5', 0,
  /* 1463 */ 'b', '5', 0,
  /* 1466 */ 'd', '5', 0,
  /* 1469 */ 'h', '5', 0,
  /* 1472 */ 'p', '5', 0,
  /* 1475 */ 'q', '5', 0,
  /* 1478 */ 's', '5', 0,
  /* 1481 */ 'w', '5', 0,
  /* 1484 */ 'x', '5', 0,
  /* 1487 */ 'z', '5', 0,
  /* 1490 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1506 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1522 */ 'W', '1', '5', '_', 'W', '1', '6', 0,
  /* 1530 */ 'X', '1', '5', '_', 'X', '1', '6', 0,
  /* 1538 */ 'b', '1', '6', 0,
  /* 1542 */ 'd', '1', '6', 0,
  /* 1546 */ 'h', '1', '6', 0,
  /* 1550 */ 'q', '1', '6', 0,
  /* 1554 */ 's', '1', '6', 0,
  /* 1558 */ 'w', '1', '6', 0,
  /* 1562 */ 'x', '1', '6', 0,
  /* 1566 */ 'z', '1', '6', 0,
  /* 1570 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1586 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1602 */ 'W', '2', '5', '_', 'W', '2', '6', 0,
  /* 1610 */ 'X', '2', '5', '_', 'X', '2', '6', 0,
  /* 1618 */ 'b', '2', '6', 0,
  /* 1622 */ 'd', '2', '6', 0,
  /* 1626 */ 'h', '2', '6', 0,
  /* 1630 */ 'q', '2', '6', 0,
  /* 1634 */ 's', '2', '6', 0,
  /* 1638 */ 'w', '2', '6', 0,
  /* 1642 */ 'x', '2', '6', 0,
  /* 1646 */ 'z', '2', '6', 0,
  /* 1650 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1662 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1674 */ 'W', '5', '_', 'W', '6', 0,
  /* 1680 */ 'X', '5', '_', 'X', '6', 0,
  /* 1686 */ 'b', '6', 0,
  /* 1689 */ 'd', '6', 0,
  /* 1692 */ 'h', '6', 0,
  /* 1695 */ 'p', '6', 0,
  /* 1698 */ 'q', '6', 0,
  /* 1701 */ 's', '6', 0,
  /* 1704 */ 'w', '6', 0,
  /* 1707 */ 'x', '6', 0,
  /* 1710 */ 'z', '6', 0,
  /* 1713 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1729 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1745 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 1753 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 1761 */ 'b', '1', '7', 0,
  /* 1765 */ 'd', '1', '7', 0,
  /* 1769 */ 'h', '1', '7', 0,
  /* 1773 */ 'q', '1', '7', 0,
  /* 1777 */ 's', '1', '7', 0,
  /* 1781 */ 'w', '1', '7', 0,
  /* 1785 */ 'x', '1', '7', 0,
  /* 1789 */ 'z', '1', '7', 0,
  /* 1793 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1809 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1825 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 1833 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 1841 */ 'b', '2', '7', 0,
  /* 1845 */ 'd', '2', '7', 0,
  /* 1849 */ 'h', '2', '7', 0,
  /* 1853 */ 'q', '2', '7', 0,
  /* 1857 */ 's', '2', '7', 0,
  /* 1861 */ 'w', '2', '7', 0,
  /* 1865 */ 'x', '2', '7', 0,
  /* 1869 */ 'z', '2', '7', 0,
  /* 1873 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1885 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1897 */ 'W', '6', '_', 'W', '7', 0,
  /* 1903 */ 'X', '6', '_', 'X', '7', 0,
  /* 1909 */ 'b', '7', 0,
  /* 1912 */ 'd', '7', 0,
  /* 1915 */ 'h', '7', 0,
  /* 1918 */ 'p', '7', 0,
  /* 1921 */ 'q', '7', 0,
  /* 1924 */ 's', '7', 0,
  /* 1927 */ 'w', '7', 0,
  /* 1930 */ 'x', '7', 0,
  /* 1933 */ 'z', '7', 0,
  /* 1936 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1952 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1968 */ 'W', '1', '7', '_', 'W', '1', '8', 0,
  /* 1976 */ 'X', '1', '7', '_', 'X', '1', '8', 0,
  /* 1984 */ 'b', '1', '8', 0,
  /* 1988 */ 'd', '1', '8', 0,
  /* 1992 */ 'h', '1', '8', 0,
  /* 1996 */ 'q', '1', '8', 0,
  /* 2000 */ 's', '1', '8', 0,
  /* 2004 */ 'w', '1', '8', 0,
  /* 2008 */ 'x', '1', '8', 0,
  /* 2012 */ 'z', '1', '8', 0,
  /* 2016 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 2032 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 2048 */ 'W', '2', '7', '_', 'W', '2', '8', 0,
  /* 2056 */ 'X', '2', '7', '_', 'X', '2', '8', 0,
  /* 2064 */ 'b', '2', '8', 0,
  /* 2068 */ 'd', '2', '8', 0,
  /* 2072 */ 'h', '2', '8', 0,
  /* 2076 */ 'q', '2', '8', 0,
  /* 2080 */ 's', '2', '8', 0,
  /* 2084 */ 'w', '2', '8', 0,
  /* 2088 */ 'x', '2', '8', 0,
  /* 2092 */ 'z', '2', '8', 0,
  /* 2096 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 2108 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 2120 */ 'W', '7', '_', 'W', '8', 0,
  /* 2126 */ 'X', '7', '_', 'X', '8', 0,
  /* 2132 */ 'b', '8', 0,
  /* 2135 */ 'd', '8', 0,
  /* 2138 */ 'h', '8', 0,
  /* 2141 */ 'p', '8', 0,
  /* 2144 */ 'q', '8', 0,
  /* 2147 */ 's', '8', 0,
  /* 2150 */ 'w', '8', 0,
  /* 2153 */ 'x', '8', 0,
  /* 2156 */ 'z', '8', 0,
  /* 2159 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2175 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2191 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2199 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2207 */ 'b', '1', '9', 0,
  /* 2211 */ 'd', '1', '9', 0,
  /* 2215 */ 'h', '1', '9', 0,
  /* 2219 */ 'q', '1', '9', 0,
  /* 2223 */ 's', '1', '9', 0,
  /* 2227 */ 'w', '1', '9', 0,
  /* 2231 */ 'x', '1', '9', 0,
  /* 2235 */ 'z', '1', '9', 0,
  /* 2239 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2255 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2271 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2279 */ 'b', '2', '9', 0,
  /* 2283 */ 'd', '2', '9', 0,
  /* 2287 */ 'h', '2', '9', 0,
  /* 2291 */ 'q', '2', '9', 0,
  /* 2295 */ 's', '2', '9', 0,
  /* 2299 */ 'w', '2', '9', 0,
  /* 2303 */ 'x', '2', '9', 0,
  /* 2307 */ 'z', '2', '9', 0,
  /* 2311 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2323 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2335 */ 'W', '8', '_', 'W', '9', 0,
  /* 2341 */ 'X', '8', '_', 'X', '9', 0,
  /* 2347 */ 'b', '9', 0,
  /* 2350 */ 'd', '9', 0,
  /* 2353 */ 'h', '9', 0,
  /* 2356 */ 'p', '9', 0,
  /* 2359 */ 'q', '9', 0,
  /* 2362 */ 's', '9', 0,
  /* 2365 */ 'w', '9', 0,
  /* 2368 */ 'x', '9', 0,
  /* 2371 */ 'z', '9', 0,
  /* 2374 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2381 */ 'F', 'P', '_', 'L', 'R', 0,
  /* 2387 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2395 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2402 */ 'z', '1', '0', '_', 'h', 'i', 0,
  /* 2409 */ 'z', '2', '0', '_', 'h', 'i', 0,
  /* 2416 */ 'z', '3', '0', '_', 'h', 'i', 0,
  /* 2423 */ 'z', '0', '_', 'h', 'i', 0,
  /* 2429 */ 'z', '1', '1', '_', 'h', 'i', 0,
  /* 2436 */ 'z', '2', '1', '_', 'h', 'i', 0,
  /* 2443 */ 'z', '3', '1', '_', 'h', 'i', 0,
  /* 2450 */ 'z', '1', '_', 'h', 'i', 0,
  /* 2456 */ 'z', '1', '2', '_', 'h', 'i', 0,
  /* 2463 */ 'z', '2', '2', '_', 'h', 'i', 0,
  /* 2470 */ 'z', '2', '_', 'h', 'i', 0,
  /* 2476 */ 'z', '1', '3', '_', 'h', 'i', 0,
  /* 2483 */ 'z', '2', '3', '_', 'h', 'i', 0,
  /* 2490 */ 'z', '3', '_', 'h', 'i', 0,
  /* 2496 */ 'z', '1', '4', '_', 'h', 'i', 0,
  /* 2503 */ 'z', '2', '4', '_', 'h', 'i', 0,
  /* 2510 */ 'z', '4', '_', 'h', 'i', 0,
  /* 2516 */ 'z', '1', '5', '_', 'h', 'i', 0,
  /* 2523 */ 'z', '2', '5', '_', 'h', 'i', 0,
  /* 2530 */ 'z', '5', '_', 'h', 'i', 0,
  /* 2536 */ 'z', '1', '6', '_', 'h', 'i', 0,
  /* 2543 */ 'z', '2', '6', '_', 'h', 'i', 0,
  /* 2550 */ 'z', '6', '_', 'h', 'i', 0,
  /* 2556 */ 'z', '1', '7', '_', 'h', 'i', 0,
  /* 2563 */ 'z', '2', '7', '_', 'h', 'i', 0,
  /* 2570 */ 'z', '7', '_', 'h', 'i', 0,
  /* 2576 */ 'z', '1', '8', '_', 'h', 'i', 0,
  /* 2583 */ 'z', '2', '8', '_', 'h', 'i', 0,
  /* 2590 */ 'z', '8', '_', 'h', 'i', 0,
  /* 2596 */ 'z', '1', '9', '_', 'h', 'i', 0,
  /* 2603 */ 'z', '2', '9', '_', 'h', 'i', 0,
  /* 2610 */ 'z', '9', '_', 'h', 'i', 0,
  /* 2616 */ 'w', 's', 'p', 0,
  /* 2620 */ 'w', 'z', 'r', 0,
  /* 2624 */ 'x', 'z', 'r', 0,
  /* 2628 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    2303, 220, 2628, 2617, 2616, 2620, 2624, 272, 555, 782, 1009, 1236, 1463, 1686, 
    1909, 2132, 2347, 40, 343, 628, 857, 1084, 1311, 1538, 1761, 1984, 2207, 124, 
    427, 712, 941, 1168, 1395, 1618, 1841, 2064, 2279, 196, 491, 275, 558, 785, 
    1012, 1239, 1466, 1689, 1912, 2135, 2350, 44, 347, 632, 861, 1088, 1315, 1542, 
    1765, 1988, 2211, 128, 431, 716, 945, 1172, 1399, 1622, 1845, 2068, 2283, 200, 
    495, 278, 561, 788, 1015, 1242, 1469, 1692, 1915, 2138, 2353, 48, 351, 636, 
    865, 1092, 1319, 1546, 1769, 1992, 2215, 132, 435, 720, 949, 1176, 1403, 1626, 
    1849, 2072, 2287, 204, 499, 281, 564, 791, 1018, 1245, 1472, 1695, 1918, 2141, 
    2356, 52, 355, 640, 869, 1096, 1323, 284, 567, 794, 1021, 1248, 1475, 1698, 
    1921, 2144, 2359, 56, 359, 644, 873, 1100, 1327, 1550, 1773, 1996, 2219, 136, 
    439, 724, 953, 1180, 1407, 1630, 1853, 2076, 2291, 208, 503, 287, 570, 797, 
    1024, 1251, 1478, 1701, 1924, 2147, 2362, 60, 363, 648, 877, 1104, 1331, 1554, 
    1777, 2000, 2223, 140, 443, 728, 957, 1184, 1411, 1634, 1857, 2080, 2295, 212, 
    507, 290, 573, 800, 1027, 1254, 1481, 1704, 1927, 2150, 2365, 64, 367, 652, 
    881, 1108, 1335, 1558, 1781, 2004, 2227, 144, 447, 732, 961, 1188, 1415, 1638, 
    1861, 2084, 2299, 216, 293, 576, 803, 1030, 1257, 1484, 1707, 1930, 2153, 2368, 
    68, 371, 656, 885, 1112, 1339, 1562, 1785, 2008, 2231, 148, 451, 736, 965, 
    1192, 1419, 1642, 1865, 2088, 296, 579, 806, 1033, 1260, 1487, 1710, 1933, 2156, 
    2371, 72, 375, 660, 889, 1116, 1343, 1566, 1789, 2012, 2235, 152, 455, 740, 
    969, 1196, 1423, 1646, 1869, 2092, 2307, 224, 511, 2423, 2450, 2470, 2490, 2510, 
    2530, 2550, 2570, 2590, 2610, 2402, 2429, 2456, 2476, 2496, 2516, 2536, 2556, 2576, 
    2596, 2409, 2436, 2463, 2483, 2503, 2523, 2543, 2563, 2583, 2603, 2416, 2443, 523, 
    751, 979, 1206, 1433, 1656, 1879, 2102, 2317, 6, 305, 589, 817, 1044, 1271, 
    1498, 1721, 1944, 2167, 84, 387, 672, 901, 1128, 1355, 1578, 1801, 2024, 2247, 
    164, 467, 236, 973, 1200, 1427, 1650, 1873, 2096, 2311, 0, 299, 582, 809, 
    1036, 1263, 1490, 1713, 1936, 2159, 76, 379, 664, 893, 1120, 1347, 1570, 1793, 
    2016, 2239, 156, 459, 228, 515, 744, 748, 976, 1203, 1430, 1653, 1876, 2099, 
    2314, 3, 302, 585, 813, 1040, 1267, 1494, 1717, 1940, 2163, 80, 383, 668, 
    897, 1124, 1351, 1574, 1797, 2020, 2243, 160, 463, 232, 519, 537, 764, 991, 
    1218, 1445, 1668, 1891, 2114, 2329, 19, 319, 604, 833, 1060, 1287, 1514, 1737, 
    1960, 2183, 100, 403, 688, 917, 1144, 1371, 1594, 1817, 2040, 2263, 180, 483, 
    251, 985, 1212, 1439, 1662, 1885, 2108, 2323, 13, 313, 597, 825, 1052, 1279, 
    1506, 1729, 1952, 2175, 92, 395, 680, 909, 1136, 1363, 1586, 1809, 2032, 2255, 
    172, 475, 243, 529, 757, 761, 988, 1215, 1442, 1665, 1888, 2111, 2326, 16, 
    316, 600, 829, 1056, 1283, 1510, 1733, 1956, 2179, 96, 399, 684, 913, 1140, 
    1367, 1590, 1813, 2036, 2259, 176, 479, 247, 533, 258, 2387, 543, 770, 997, 
    1224, 1451, 1674, 1897, 2120, 2335, 26, 327, 612, 841, 1068, 1295, 1522, 1745, 
    1968, 2191, 108, 411, 696, 925, 1152, 1379, 1602, 1825, 2048, 2271, 188, 2381, 
    2395, 265, 2374, 549, 776, 1003, 1230, 1457, 1680, 1903, 2126, 2341, 33, 335, 
    620, 849, 1076, 1303, 1530, 1753, 1976, 2199, 116, 419, 704, 933, 1160, 1387, 
    1610, 1833, 2056, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 
    27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 
    63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 
    111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool AArch64InstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        STI.getFeatureBits()[AArch64::FeatureRAS]) {
      // (HINT { 1, 0, 0, 0, 0 })
      AsmString = "esb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(0), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSPE]) {
      // (HINT psbhint_op:$op)
      AsmString = "psb $\xFF\x01\x09";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x06.h$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov	$\xFF\x01\x06.h$\xFF\x03\x0A, $\xFF\x04\x06.h$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x06.s$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov	$\xFF\x01\x06.s$\xFF\x03\x0A, $\xFF\x04\x06.s$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov	$\xFF\x01\x06.d$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov	$\xFF\x01\x06.d$\xFF\x03\x0A, $\xFF\x04\x06.d$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x06.b$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov	$\xFF\x01\x06.b$\xFF\x03\x0A, $\xFF\x04\x06.b$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x12, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x12, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x12, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x12, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRAAindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRAAindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldraa	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRABindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRABindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrab	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn $\xFF\x01\x06.16b, $\xFF\x02\x06.16b";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn $\xFF\x01\x06.8b, $\xFF\x02\x06.8b";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov	$\xFF\x01\x06.16b, $\xFF\x02\x06.16b";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov	$\xFF\x01\x06.8b, $\xFF\x02\x06.8b";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum	$\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x19, $\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x06.s$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x06.d$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64InstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, STI, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 6:
    printImm(MI, OpIdx, STI, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 8:
    printPSBHintOp(MI, OpIdx, STI, OS);
    break;
  case 9:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 10:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 12:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 22:
    printImmHex(MI, OpIdx, STI, OS);
    break;
  case 23:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 24:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  case 2: {

    // Check, if operand is valid, to fix exhaustive aliasing in disassembly.
    // "psb" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64PSBHint::lookupPSBByEncoding(MCOp.getImm()) != nullptr;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
