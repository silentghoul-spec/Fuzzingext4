/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64AppleInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'l', 'd', '1', 9, 0,
  /* 5 */ 'z', 'i', 'p', '1', 9, 0,
  /* 11 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 18 */ 's', 't', '1', 9, 0,
  /* 23 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 30 */ 'l', 'd', '2', 9, 0,
  /* 35 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 43 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 51 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 60 */ 'z', 'i', 'p', '2', 9, 0,
  /* 66 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 73 */ 's', 't', '2', 9, 0,
  /* 78 */ 'l', 'd', '3', 9, 0,
  /* 83 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 90 */ 's', 't', '3', 9, 0,
  /* 95 */ 'l', 'd', '4', 9, 0,
  /* 100 */ 's', 't', '4', 9, 0,
  /* 105 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 112 */ 'b', 'r', 'a', 'a', 9, 0,
  /* 118 */ 'l', 'd', 'r', 'a', 'a', 9, 0,
  /* 125 */ 'b', 'l', 'r', 'a', 'a', 9, 0,
  /* 132 */ 'p', 'a', 'c', 'd', 'a', 9, 0,
  /* 139 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 147 */ 'a', 'u', 't', 'd', 'a', 9, 0,
  /* 154 */ 'p', 'a', 'c', 'g', 'a', 9, 0,
  /* 161 */ 'p', 'a', 'c', 'i', 'a', 9, 0,
  /* 168 */ 'a', 'u', 't', 'i', 'a', 9, 0,
  /* 175 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 184 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 193 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 200 */ 's', 'w', 'p', 'a', 9, 0,
  /* 206 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 214 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 222 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 229 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 236 */ 's', 's', 'r', 'a', 9, 0,
  /* 242 */ 'u', 's', 'r', 'a', 9, 0,
  /* 248 */ 'c', 'a', 's', 'a', 9, 0,
  /* 254 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 262 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 270 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 279 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 288 */ 'p', 'a', 'c', 'd', 'z', 'a', 9, 0,
  /* 296 */ 'a', 'u', 't', 'd', 'z', 'a', 9, 0,
  /* 304 */ 'p', 'a', 'c', 'i', 'z', 'a', 9, 0,
  /* 312 */ 'a', 'u', 't', 'i', 'z', 'a', 9, 0,
  /* 320 */ 'i', 'n', 's', '.', 'b', 9, 0,
  /* 327 */ 's', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 335 */ 'u', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 343 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 351 */ 't', 'r', 'n', '1', '.', '1', '6', 'b', 9, 0,
  /* 361 */ 'z', 'i', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 371 */ 'u', 'z', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 381 */ 'r', 'e', 'v', '3', '2', '.', '1', '6', 'b', 9, 0,
  /* 392 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 405 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 418 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 431 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 444 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 458 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 472 */ 't', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 482 */ 's', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 494 */ 'u', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 506 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 520 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 535 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 548 */ 'z', 'i', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 558 */ 'u', 'z', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 568 */ 'r', 'e', 'v', '6', '4', '.', '1', '6', 'b', 9, 0,
  /* 579 */ 'r', 'e', 'v', '1', '6', '.', '1', '6', 'b', 9, 0,
  /* 590 */ 's', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 600 */ 'u', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 610 */ 'm', 'l', 'a', '.', '1', '6', 'b', 9, 0,
  /* 619 */ 's', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 630 */ 'u', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 641 */ 's', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 651 */ 'u', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 661 */ 's', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 672 */ 'u', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 683 */ 's', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 694 */ 'u', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 705 */ 'b', 'i', 'c', '.', '1', '6', 'b', 9, 0,
  /* 714 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 726 */ 'a', 'e', 's', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 737 */ 's', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 747 */ 'u', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 757 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 769 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 781 */ 's', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 792 */ 'u', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 803 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 815 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 827 */ 'a', 'n', 'd', '.', '1', '6', 'b', 9, 0,
  /* 836 */ 'a', 'e', 's', 'd', '.', '1', '6', 'b', 9, 0,
  /* 846 */ 'c', 'm', 'g', 'e', '.', '1', '6', 'b', 9, 0,
  /* 856 */ 'c', 'm', 'l', 'e', '.', '1', '6', 'b', 9, 0,
  /* 866 */ 'a', 'e', 's', 'e', '.', '1', '6', 'b', 9, 0,
  /* 876 */ 'b', 'i', 'f', '.', '1', '6', 'b', 9, 0,
  /* 885 */ 's', 'q', 'n', 'e', 'g', '.', '1', '6', 'b', 9, 0,
  /* 896 */ 'c', 'm', 'h', 'i', '.', '1', '6', 'b', 9, 0,
  /* 906 */ 's', 'l', 'i', '.', '1', '6', 'b', 9, 0,
  /* 915 */ 's', 'r', 'i', '.', '1', '6', 'b', 9, 0,
  /* 924 */ 'm', 'o', 'v', 'i', '.', '1', '6', 'b', 9, 0,
  /* 934 */ 's', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 945 */ 'u', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 956 */ 's', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 968 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 980 */ 's', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 991 */ 'u', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1002 */ 's', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1012 */ 'u', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1022 */ 'b', 's', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1031 */ 'p', 'm', 'u', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1041 */ 's', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 1051 */ 'u', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 1061 */ 'o', 'r', 'n', '.', '1', '6', 'b', 9, 0,
  /* 1070 */ 'a', 'd', 'd', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1080 */ 's', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1091 */ 'u', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1102 */ 'd', 'u', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1111 */ 's', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1122 */ 'u', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1133 */ 'c', 'm', 'e', 'q', '.', '1', '6', 'b', 9, 0,
  /* 1143 */ 's', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1154 */ 'u', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1165 */ 's', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1175 */ 'u', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1185 */ 'e', 'o', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1194 */ 'o', 'r', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1203 */ 's', 'q', 'a', 'b', 's', '.', '1', '6', 'b', 9, 0,
  /* 1214 */ 'c', 'm', 'h', 's', '.', '1', '6', 'b', 9, 0,
  /* 1224 */ 'c', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1233 */ 'm', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1242 */ 'c', 'm', 'g', 't', '.', '1', '6', 'b', 9, 0,
  /* 1252 */ 'r', 'b', 'i', 't', '.', '1', '6', 'b', 9, 0,
  /* 1262 */ 'c', 'm', 'l', 't', '.', '1', '6', 'b', 9, 0,
  /* 1272 */ 'c', 'n', 't', '.', '1', '6', 'b', 9, 0,
  /* 1281 */ 'n', 'o', 't', '.', '1', '6', 'b', 9, 0,
  /* 1290 */ 'c', 'm', 't', 's', 't', '.', '1', '6', 'b', 9, 0,
  /* 1301 */ 'e', 'x', 't', '.', '1', '6', 'b', 9, 0,
  /* 1310 */ 's', 'q', 's', 'h', 'l', 'u', '.', '1', '6', 'b', 9, 0,
  /* 1322 */ 'a', 'd', 'd', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1332 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1344 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1356 */ 's', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1367 */ 'u', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1378 */ 's', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1389 */ 'u', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1400 */ 's', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1410 */ 'u', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1420 */ 'c', 'l', 'z', '.', '1', '6', 'b', 9, 0,
  /* 1429 */ 't', 'r', 'n', '1', '.', '8', 'b', 9, 0,
  /* 1438 */ 'z', 'i', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1447 */ 'u', 'z', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1456 */ 'r', 'e', 'v', '3', '2', '.', '8', 'b', 9, 0,
  /* 1466 */ 't', 'r', 'n', '2', '.', '8', 'b', 9, 0,
  /* 1475 */ 'z', 'i', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1484 */ 'u', 'z', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1493 */ 'r', 'e', 'v', '6', '4', '.', '8', 'b', 9, 0,
  /* 1503 */ 'r', 'e', 'v', '1', '6', '.', '8', 'b', 9, 0,
  /* 1513 */ 's', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1522 */ 'u', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1531 */ 'm', 'l', 'a', '.', '8', 'b', 9, 0,
  /* 1539 */ 's', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1549 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1559 */ 's', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1568 */ 'u', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1577 */ 's', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1587 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1597 */ 's', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1607 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1617 */ 'b', 'i', 'c', '.', '8', 'b', 9, 0,
  /* 1625 */ 's', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1634 */ 'u', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1643 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1654 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1665 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1675 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1685 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1696 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1707 */ 'a', 'n', 'd', '.', '8', 'b', 9, 0,
  /* 1715 */ 'c', 'm', 'g', 'e', '.', '8', 'b', 9, 0,
  /* 1724 */ 'c', 'm', 'l', 'e', '.', '8', 'b', 9, 0,
  /* 1733 */ 'b', 'i', 'f', '.', '8', 'b', 9, 0,
  /* 1741 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'b', 9, 0,
  /* 1751 */ 'c', 'm', 'h', 'i', '.', '8', 'b', 9, 0,
  /* 1760 */ 's', 'l', 'i', '.', '8', 'b', 9, 0,
  /* 1768 */ 's', 'r', 'i', '.', '8', 'b', 9, 0,
  /* 1776 */ 'm', 'o', 'v', 'i', '.', '8', 'b', 9, 0,
  /* 1785 */ 's', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1795 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1805 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1816 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1827 */ 's', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1837 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1847 */ 's', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1856 */ 'u', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1865 */ 'b', 's', 'l', '.', '8', 'b', 9, 0,
  /* 1873 */ 'p', 'm', 'u', 'l', '.', '8', 'b', 9, 0,
  /* 1882 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1893 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1904 */ 's', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1913 */ 'u', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1922 */ 's', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1933 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1944 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1956 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1968 */ 'o', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1976 */ 's', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1986 */ 'u', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1996 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 2008 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 2021 */ 's', 'q', 'x', 't', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 2032 */ 'a', 'd', 'd', 'p', '.', '8', 'b', 9, 0,
  /* 2041 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 2051 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 2061 */ 'd', 'u', 'p', '.', '8', 'b', 9, 0,
  /* 2069 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 2079 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 2089 */ 'c', 'm', 'e', 'q', '.', '8', 'b', 9, 0,
  /* 2098 */ 's', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2108 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2118 */ 's', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2127 */ 'u', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2136 */ 'e', 'o', 'r', '.', '8', 'b', 9, 0,
  /* 2144 */ 'o', 'r', 'r', '.', '8', 'b', 9, 0,
  /* 2152 */ 's', 'q', 'a', 'b', 's', '.', '8', 'b', 9, 0,
  /* 2162 */ 'c', 'm', 'h', 's', '.', '8', 'b', 9, 0,
  /* 2171 */ 'c', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2179 */ 'm', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2187 */ 'c', 'm', 'g', 't', '.', '8', 'b', 9, 0,
  /* 2196 */ 'r', 'b', 'i', 't', '.', '8', 'b', 9, 0,
  /* 2205 */ 'c', 'm', 'l', 't', '.', '8', 'b', 9, 0,
  /* 2214 */ 'c', 'n', 't', '.', '8', 'b', 9, 0,
  /* 2222 */ 'n', 'o', 't', '.', '8', 'b', 9, 0,
  /* 2230 */ 'c', 'm', 't', 's', 't', '.', '8', 'b', 9, 0,
  /* 2240 */ 'e', 'x', 't', '.', '8', 'b', 9, 0,
  /* 2248 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'b', 9, 0,
  /* 2259 */ 'a', 'd', 'd', 'v', '.', '8', 'b', 9, 0,
  /* 2268 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2279 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2290 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2300 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2310 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2320 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2330 */ 's', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2339 */ 'u', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2348 */ 'c', 'l', 'z', '.', '8', 'b', 9, 0,
  /* 2356 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 2365 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2375 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2385 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 2392 */ 'b', 'r', 'a', 'b', 9, 0,
  /* 2398 */ 'l', 'd', 'r', 'a', 'b', 9, 0,
  /* 2405 */ 'b', 'l', 'r', 'a', 'b', 9, 0,
  /* 2412 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 2421 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 2430 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 2437 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 2446 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2456 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2466 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 2475 */ 'p', 'a', 'c', 'd', 'b', 9, 0,
  /* 2482 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 2490 */ 'a', 'u', 't', 'd', 'b', 9, 0,
  /* 2497 */ 'p', 'a', 'c', 'i', 'b', 9, 0,
  /* 2504 */ 'a', 'u', 't', 'i', 'b', 9, 0,
  /* 2511 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 2521 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2532 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2543 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 2551 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 2561 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 2571 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 2579 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 2589 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2600 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2611 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 2620 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2630 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2640 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 2647 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 2656 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 2665 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 2672 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 2681 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2691 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2701 */ 'd', 'm', 'b', 9, 0,
  /* 2706 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 2715 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 2724 */ 's', 'w', 'p', 'b', 9, 0,
  /* 2730 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 2737 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 2745 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 2751 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 2759 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 2767 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 2774 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 2782 */ 'l', 'd', 'a', 'p', 'r', 'b', 9, 0,
  /* 2790 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 2797 */ 's', 't', 'r', 'b', 9, 0,
  /* 2803 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 2810 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 2817 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 2824 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 2832 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 2839 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 2847 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 2854 */ 'c', 'a', 's', 'b', 9, 0,
  /* 2860 */ 'd', 's', 'b', 9, 0,
  /* 2865 */ 'i', 's', 'b', 9, 0,
  /* 2870 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 2877 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 2885 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 2893 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 2901 */ 'f', 's', 'u', 'b', 9, 0,
  /* 2907 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 2914 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 2922 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 2929 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 2936 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 2945 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 2954 */ 'p', 'a', 'c', 'd', 'z', 'b', 9, 0,
  /* 2962 */ 'a', 'u', 't', 'd', 'z', 'b', 9, 0,
  /* 2970 */ 'p', 'a', 'c', 'i', 'z', 'b', 9, 0,
  /* 2978 */ 'a', 'u', 't', 'i', 'z', 'b', 9, 0,
  /* 2986 */ 's', 'b', 'c', 9, 0,
  /* 2991 */ 'a', 'd', 'c', 9, 0,
  /* 2996 */ 'b', 'i', 'c', 9, 0,
  /* 3001 */ 's', 'm', 'c', 9, 0,
  /* 3006 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 3013 */ 'h', 'v', 'c', 9, 0,
  /* 3018 */ 's', 'v', 'c', 9, 0,
  /* 3023 */ 'f', 'm', 'l', 'a', '.', 'd', 9, 0,
  /* 3031 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 3039 */ 'f', 'm', 'l', 's', '.', 'd', 9, 0,
  /* 3047 */ 'i', 'n', 's', '.', 'd', 9, 0,
  /* 3054 */ 'f', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3062 */ 'u', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3070 */ 'f', 'm', 'u', 'l', 'x', '.', 'd', 9, 0,
  /* 3079 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3090 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3101 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3112 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3123 */ 't', 'r', 'n', '1', '.', '2', 'd', 9, 0,
  /* 3132 */ 'z', 'i', 'p', '1', '.', '2', 'd', 9, 0,
  /* 3141 */ 'u', 'z', 'p', '1', '.', '2', 'd', 9, 0,
  /* 3150 */ 's', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3161 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3172 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3185 */ 's', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3196 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3207 */ 's', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3218 */ 'u', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3229 */ 's', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3240 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3251 */ 's', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3262 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3273 */ 's', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3284 */ 'u', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3295 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3308 */ 's', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3319 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3330 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3343 */ 's', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3354 */ 'u', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3365 */ 't', 'r', 'n', '2', '.', '2', 'd', 9, 0,
  /* 3374 */ 'z', 'i', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3383 */ 'u', 'z', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3392 */ 's', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3403 */ 'u', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3414 */ 's', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3425 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3436 */ 'f', 'c', 'm', 'l', 'a', '.', '2', 'd', 9, 0,
  /* 3446 */ 'f', 'm', 'l', 'a', '.', '2', 'd', 9, 0,
  /* 3455 */ 's', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3465 */ 'u', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3475 */ 's', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3484 */ 'u', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3493 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 'd', 9, 0,
  /* 3504 */ 'f', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3513 */ 's', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3523 */ 'u', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3533 */ 'f', 'a', 'b', 'd', '.', '2', 'd', 9, 0,
  /* 3542 */ 'f', 'c', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3552 */ 'f', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3561 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3572 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3583 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3593 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3603 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 'd', 9, 0,
  /* 3613 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 'd', 9, 0,
  /* 3624 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 'd', 9, 0,
  /* 3636 */ 's', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3646 */ 'u', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3656 */ 'f', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3665 */ 's', 'q', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3675 */ 'c', 'm', 'h', 'i', '.', '2', 'd', 9, 0,
  /* 3684 */ 's', 'l', 'i', '.', '2', 'd', 9, 0,
  /* 3692 */ 's', 'r', 'i', '.', '2', 'd', 9, 0,
  /* 3700 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 'd', 9, 0,
  /* 3711 */ 'm', 'o', 'v', 'i', '.', '2', 'd', 9, 0,
  /* 3720 */ 's', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3730 */ 'u', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3740 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3752 */ 's', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3762 */ 'u', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3772 */ 's', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3782 */ 'u', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3792 */ 's', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3802 */ 'u', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3812 */ 's', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3822 */ 'u', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3832 */ 's', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3842 */ 'u', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3852 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3863 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3874 */ 's', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3884 */ 'u', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3894 */ 's', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3903 */ 'u', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3912 */ 's', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3922 */ 'u', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3932 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3944 */ 's', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3954 */ 'u', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3964 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3976 */ 's', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3986 */ 'u', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3996 */ 'f', 'm', 'u', 'l', '.', '2', 'd', 9, 0,
  /* 4005 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 4016 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 4027 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 'd', 9, 0,
  /* 4038 */ 'f', 'm', 'i', 'n', '.', '2', 'd', 9, 0,
  /* 4047 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 'd', 9, 0,
  /* 4058 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'd', 9, 0,
  /* 4068 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4079 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4090 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4101 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4112 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 4124 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 4136 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'd', 9, 0,
  /* 4146 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 'd', 9, 0,
  /* 4157 */ 'd', 'u', 'p', '.', '2', 'd', 9, 0,
  /* 4165 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'd', 9, 0,
  /* 4175 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 'd', 9, 0,
  /* 4185 */ 's', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4195 */ 'u', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4205 */ 's', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4214 */ 'u', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4223 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 'd', 9, 0,
  /* 4234 */ 'f', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4243 */ 's', 'q', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4253 */ 'c', 'm', 'h', 's', '.', '2', 'd', 9, 0,
  /* 4262 */ 'f', 'm', 'l', 's', '.', '2', 'd', 9, 0,
  /* 4271 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 'd', 9, 0,
  /* 4282 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 'd', 9, 0,
  /* 4293 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4304 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4315 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 'd', 9, 0,
  /* 4327 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 'd', 9, 0,
  /* 4338 */ 'f', 'a', 'c', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4348 */ 'f', 'c', 'm', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4358 */ 'f', 'c', 'm', 'l', 't', '.', '2', 'd', 9, 0,
  /* 4368 */ 'f', 's', 'q', 'r', 't', '.', '2', 'd', 9, 0,
  /* 4378 */ 'c', 'm', 't', 's', 't', '.', '2', 'd', 9, 0,
  /* 4388 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 'd', 9, 0,
  /* 4399 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 'd', 9, 0,
  /* 4410 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 'd', 9, 0,
  /* 4421 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 'd', 9, 0,
  /* 4432 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 'd', 9, 0,
  /* 4443 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 'd', 9, 0,
  /* 4454 */ 'f', 'd', 'i', 'v', '.', '2', 'd', 9, 0,
  /* 4463 */ 'f', 'm', 'o', 'v', '.', '2', 'd', 9, 0,
  /* 4472 */ 's', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4482 */ 'u', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4492 */ 's', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4502 */ 'u', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4512 */ 'f', 'm', 'a', 'x', '.', '2', 'd', 9, 0,
  /* 4521 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 'd', 9, 0,
  /* 4531 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 'd', 9, 0,
  /* 4542 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 'd', 9, 0,
  /* 4553 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 4559 */ 'x', 'p', 'a', 'c', 'd', 9, 0,
  /* 4566 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 4573 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 4579 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 4586 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 4594 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 4602 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 4610 */ 'a', 'n', 'd', 9, 0,
  /* 4615 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 4622 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 4629 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 4636 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 4644 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 4652 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 4659 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 4668 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 4675 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 4682 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 4688 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 4695 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 4702 */ 'f', 'm', 'l', 'a', '.', 'h', 9, 0,
  /* 4710 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 'h', 9, 0,
  /* 4722 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4733 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4745 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 'h', 9, 0,
  /* 4757 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 'h', 9, 0,
  /* 4768 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 'h', 9, 0,
  /* 4779 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 'h', 9, 0,
  /* 4790 */ 'f', 'm', 'u', 'l', '.', 'h', 9, 0,
  /* 4798 */ 'f', 'm', 'l', 's', '.', 'h', 9, 0,
  /* 4806 */ 'i', 'n', 's', '.', 'h', 9, 0,
  /* 4813 */ 's', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4821 */ 'u', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4829 */ 'f', 'm', 'u', 'l', 'x', '.', 'h', 9, 0,
  /* 4838 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 4845 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'h', 9, 0,
  /* 4855 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'h', 9, 0,
  /* 4867 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'h', 9, 0,
  /* 4879 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'h', 9, 0,
  /* 4889 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'h', 9, 0,
  /* 4899 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 4907 */ 't', 'r', 'n', '1', '.', '4', 'h', 9, 0,
  /* 4916 */ 'z', 'i', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4925 */ 'u', 'z', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4934 */ 'r', 'e', 'v', '3', '2', '.', '4', 'h', 9, 0,
  /* 4944 */ 't', 'r', 'n', '2', '.', '4', 'h', 9, 0,
  /* 4953 */ 'z', 'i', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4962 */ 'u', 'z', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4971 */ 'r', 'e', 'v', '6', '4', '.', '4', 'h', 9, 0,
  /* 4981 */ 's', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4990 */ 'u', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4999 */ 'f', 'c', 'm', 'l', 'a', '.', '4', 'h', 9, 0,
  /* 5009 */ 'f', 'm', 'l', 'a', '.', '4', 'h', 9, 0,
  /* 5018 */ 's', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 5028 */ 'u', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 5038 */ 's', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 5047 */ 'u', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 5056 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 'h', 9, 0,
  /* 5067 */ 'f', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5076 */ 's', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5086 */ 'u', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5096 */ 's', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5106 */ 'u', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5116 */ 'b', 'i', 'c', '.', '4', 'h', 9, 0,
  /* 5124 */ 'f', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 5133 */ 's', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 5142 */ 'u', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 5151 */ 'f', 'c', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5161 */ 'f', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5170 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5181 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5192 */ 's', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5202 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5212 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5223 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5234 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 5244 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 5254 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 'h', 9, 0,
  /* 5264 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 'h', 9, 0,
  /* 5275 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 'h', 9, 0,
  /* 5287 */ 's', 'c', 'v', 't', 'f', '.', '4', 'h', 9, 0,
  /* 5297 */ 'u', 'c', 'v', 't', 'f', '.', '4', 'h', 9, 0,
  /* 5307 */ 'f', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 5316 */ 's', 'q', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 5326 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 'h', 9, 0,
  /* 5339 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 5351 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 5364 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 'h', 9, 0,
  /* 5377 */ 'c', 'm', 'h', 'i', '.', '4', 'h', 9, 0,
  /* 5386 */ 's', 'l', 'i', '.', '4', 'h', 9, 0,
  /* 5394 */ 'm', 'v', 'n', 'i', '.', '4', 'h', 9, 0,
  /* 5403 */ 's', 'r', 'i', '.', '4', 'h', 9, 0,
  /* 5411 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 'h', 9, 0,
  /* 5422 */ 'm', 'o', 'v', 'i', '.', '4', 'h', 9, 0,
  /* 5431 */ 's', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5441 */ 'u', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5451 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5462 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5473 */ 's', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5483 */ 'u', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5493 */ 's', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5502 */ 'u', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5511 */ 'f', 'm', 'u', 'l', '.', '4', 'h', 9, 0,
  /* 5520 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 'h', 9, 0,
  /* 5531 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 'h', 9, 0,
  /* 5542 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 'h', 9, 0,
  /* 5553 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5564 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5575 */ 'f', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5584 */ 's', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5593 */ 'u', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5602 */ 's', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5613 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5624 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5636 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5648 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5659 */ 's', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5669 */ 'u', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5679 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5691 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5704 */ 's', 'q', 'x', 't', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5715 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 'h', 9, 0,
  /* 5725 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5736 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5747 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5758 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5769 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 'h', 9, 0,
  /* 5781 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 'h', 9, 0,
  /* 5793 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5803 */ 's', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5813 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5823 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 'h', 9, 0,
  /* 5834 */ 'd', 'u', 'p', '.', '4', 'h', 9, 0,
  /* 5842 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5852 */ 's', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5862 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5872 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 'h', 9, 0,
  /* 5882 */ 's', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5892 */ 'u', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5902 */ 's', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5911 */ 'u', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5920 */ 'o', 'r', 'r', '.', '4', 'h', 9, 0,
  /* 5928 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 'h', 9, 0,
  /* 5939 */ 'f', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 5948 */ 's', 'q', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 5958 */ 'c', 'm', 'h', 's', '.', '4', 'h', 9, 0,
  /* 5967 */ 'c', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5975 */ 'f', 'm', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5984 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 'h', 9, 0,
  /* 5995 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 'h', 9, 0,
  /* 6006 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 'h', 9, 0,
  /* 6017 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 'h', 9, 0,
  /* 6028 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 'h', 9, 0,
  /* 6040 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 'h', 9, 0,
  /* 6051 */ 'f', 'a', 'c', 'g', 't', '.', '4', 'h', 9, 0,
  /* 6061 */ 'f', 'c', 'm', 'g', 't', '.', '4', 'h', 9, 0,
  /* 6071 */ 'f', 'c', 'm', 'l', 't', '.', '4', 'h', 9, 0,
  /* 6081 */ 'f', 's', 'q', 'r', 't', '.', '4', 'h', 9, 0,
  /* 6091 */ 'c', 'm', 't', 's', 't', '.', '4', 'h', 9, 0,
  /* 6101 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 'h', 9, 0,
  /* 6112 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 'h', 9, 0,
  /* 6123 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 'h', 9, 0,
  /* 6134 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 'h', 9, 0,
  /* 6145 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 'h', 9, 0,
  /* 6156 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 'h', 9, 0,
  /* 6167 */ 'a', 'd', 'd', 'v', '.', '4', 'h', 9, 0,
  /* 6176 */ 'f', 'd', 'i', 'v', '.', '4', 'h', 9, 0,
  /* 6185 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 6196 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 6207 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 'h', 9, 0,
  /* 6219 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 'h', 9, 0,
  /* 6231 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6241 */ 's', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6251 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6261 */ 'f', 'm', 'o', 'v', '.', '4', 'h', 9, 0,
  /* 6270 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6280 */ 's', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6290 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6300 */ 'f', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6309 */ 's', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6318 */ 'u', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6327 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 'h', 9, 0,
  /* 6337 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 'h', 9, 0,
  /* 6348 */ 'c', 'l', 'z', '.', '4', 'h', 9, 0,
  /* 6356 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 'h', 9, 0,
  /* 6367 */ 't', 'r', 'n', '1', '.', '8', 'h', 9, 0,
  /* 6376 */ 'z', 'i', 'p', '1', '.', '8', 'h', 9, 0,
  /* 6385 */ 'u', 'z', 'p', '1', '.', '8', 'h', 9, 0,
  /* 6394 */ 'r', 'e', 'v', '3', '2', '.', '8', 'h', 9, 0,
  /* 6404 */ 's', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6415 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6426 */ 's', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6437 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6448 */ 's', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6459 */ 'u', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6470 */ 's', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6481 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6492 */ 's', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6503 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6514 */ 's', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6525 */ 'u', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6536 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6547 */ 's', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6558 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6569 */ 's', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6580 */ 'u', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6591 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6603 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6615 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6627 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6639 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6652 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6665 */ 't', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6674 */ 's', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6685 */ 'u', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6696 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6709 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6723 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6735 */ 'z', 'i', 'p', '2', '.', '8', 'h', 9, 0,
  /* 6744 */ 'u', 'z', 'p', '2', '.', '8', 'h', 9, 0,
  /* 6753 */ 's', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6764 */ 'u', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6775 */ 's', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6786 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6797 */ 'r', 'e', 'v', '6', '4', '.', '8', 'h', 9, 0,
  /* 6807 */ 's', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6816 */ 'u', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6825 */ 'f', 'c', 'm', 'l', 'a', '.', '8', 'h', 9, 0,
  /* 6835 */ 'f', 'm', 'l', 'a', '.', '8', 'h', 9, 0,
  /* 6844 */ 's', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6854 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6864 */ 's', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6873 */ 'u', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6882 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '8', 'h', 9, 0,
  /* 6893 */ 'f', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6902 */ 's', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6912 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6922 */ 's', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6932 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6942 */ 'b', 'i', 'c', '.', '8', 'h', 9, 0,
  /* 6950 */ 'f', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6959 */ 's', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6968 */ 'u', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6977 */ 'f', 'c', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6987 */ 'f', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6996 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 7007 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 7018 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 7028 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 7038 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 7049 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 7060 */ 'f', 'a', 'c', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 7070 */ 'f', 'c', 'm', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 7080 */ 'f', 'c', 'm', 'l', 'e', '.', '8', 'h', 9, 0,
  /* 7090 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '8', 'h', 9, 0,
  /* 7101 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '8', 'h', 9, 0,
  /* 7113 */ 's', 'c', 'v', 't', 'f', '.', '8', 'h', 9, 0,
  /* 7123 */ 'u', 'c', 'v', 't', 'f', '.', '8', 'h', 9, 0,
  /* 7133 */ 'f', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 7142 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 7152 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '8', 'h', 9, 0,
  /* 7165 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 7177 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 7190 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '8', 'h', 9, 0,
  /* 7203 */ 'c', 'm', 'h', 'i', '.', '8', 'h', 9, 0,
  /* 7212 */ 's', 'l', 'i', '.', '8', 'h', 9, 0,
  /* 7220 */ 'm', 'v', 'n', 'i', '.', '8', 'h', 9, 0,
  /* 7229 */ 's', 'r', 'i', '.', '8', 'h', 9, 0,
  /* 7237 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '8', 'h', 9, 0,
  /* 7248 */ 'm', 'o', 'v', 'i', '.', '8', 'h', 9, 0,
  /* 7257 */ 's', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7267 */ 'u', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7277 */ 's', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7287 */ 'u', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7297 */ 's', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 7307 */ 'u', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 7317 */ 's', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7327 */ 'u', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7337 */ 's', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7347 */ 'u', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7357 */ 's', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7367 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7377 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7388 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7399 */ 's', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7409 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7419 */ 's', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7428 */ 'u', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7437 */ 's', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7447 */ 'u', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7457 */ 'p', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7467 */ 's', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7477 */ 'u', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7487 */ 's', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 7497 */ 'u', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 7507 */ 'f', 'm', 'u', 'l', '.', '8', 'h', 9, 0,
  /* 7516 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '8', 'h', 9, 0,
  /* 7527 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '8', 'h', 9, 0,
  /* 7538 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '8', 'h', 9, 0,
  /* 7549 */ 'f', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7558 */ 's', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7567 */ 'u', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7576 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '8', 'h', 9, 0,
  /* 7587 */ 'f', 'a', 'd', 'd', 'p', '.', '8', 'h', 9, 0,
  /* 7597 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7608 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7619 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7630 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7641 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '8', 'h', 9, 0,
  /* 7653 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '8', 'h', 9, 0,
  /* 7665 */ 'f', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7675 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7685 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7695 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '8', 'h', 9, 0,
  /* 7706 */ 'd', 'u', 'p', '.', '8', 'h', 9, 0,
  /* 7714 */ 'f', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7724 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7734 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7744 */ 'f', 'c', 'm', 'e', 'q', '.', '8', 'h', 9, 0,
  /* 7754 */ 's', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7764 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7774 */ 's', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7783 */ 'u', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7792 */ 'o', 'r', 'r', '.', '8', 'h', 9, 0,
  /* 7800 */ 'f', 'c', 'v', 't', 'a', 's', '.', '8', 'h', 9, 0,
  /* 7811 */ 'f', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 7820 */ 's', 'q', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 7830 */ 'c', 'm', 'h', 's', '.', '8', 'h', 9, 0,
  /* 7839 */ 'c', 'l', 's', '.', '8', 'h', 9, 0,
  /* 7847 */ 'f', 'm', 'l', 's', '.', '8', 'h', 9, 0,
  /* 7856 */ 'f', 'c', 'v', 't', 'm', 's', '.', '8', 'h', 9, 0,
  /* 7867 */ 'f', 'c', 'v', 't', 'n', 's', '.', '8', 'h', 9, 0,
  /* 7878 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '8', 'h', 9, 0,
  /* 7889 */ 'f', 'c', 'v', 't', 'p', 's', '.', '8', 'h', 9, 0,
  /* 7900 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '8', 'h', 9, 0,
  /* 7912 */ 'f', 'c', 'v', 't', 'z', 's', '.', '8', 'h', 9, 0,
  /* 7923 */ 'f', 'a', 'c', 'g', 't', '.', '8', 'h', 9, 0,
  /* 7933 */ 'f', 'c', 'm', 'g', 't', '.', '8', 'h', 9, 0,
  /* 7943 */ 'f', 'c', 'm', 'l', 't', '.', '8', 'h', 9, 0,
  /* 7953 */ 'f', 's', 'q', 'r', 't', '.', '8', 'h', 9, 0,
  /* 7963 */ 'c', 'm', 't', 's', 't', '.', '8', 'h', 9, 0,
  /* 7973 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '8', 'h', 9, 0,
  /* 7984 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'h', 9, 0,
  /* 7995 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '8', 'h', 9, 0,
  /* 8006 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '8', 'h', 9, 0,
  /* 8017 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '8', 'h', 9, 0,
  /* 8028 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '8', 'h', 9, 0,
  /* 8039 */ 'a', 'd', 'd', 'v', '.', '8', 'h', 9, 0,
  /* 8048 */ 'f', 'd', 'i', 'v', '.', '8', 'h', 9, 0,
  /* 8057 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 8068 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 8079 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '8', 'h', 9, 0,
  /* 8091 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '8', 'h', 9, 0,
  /* 8103 */ 'f', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 8113 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 8123 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 8133 */ 'f', 'm', 'o', 'v', '.', '8', 'h', 9, 0,
  /* 8142 */ 'f', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 8152 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 8162 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 8172 */ 's', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 8182 */ 'u', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 8192 */ 's', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 8202 */ 'u', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 8212 */ 'f', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 8221 */ 's', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 8230 */ 'u', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 8239 */ 'f', 'm', 'u', 'l', 'x', '.', '8', 'h', 9, 0,
  /* 8249 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '8', 'h', 9, 0,
  /* 8260 */ 'c', 'l', 'z', '.', '8', 'h', 9, 0,
  /* 8268 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '8', 'h', 9, 0,
  /* 8279 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 8288 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 8298 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 8308 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 8318 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 8325 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 8334 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 8343 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 8350 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 8359 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 8369 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 8379 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 8388 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 8396 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 8406 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 8417 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 8428 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 8436 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 8446 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 8456 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 8464 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 8474 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 8485 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 8496 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 8505 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 8515 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 8525 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 8532 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 8541 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 8550 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 8557 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 8566 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 8575 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 8585 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 8592 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 8599 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 8609 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 8619 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 8628 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 8637 */ 's', 'w', 'p', 'h', 9, 0,
  /* 8643 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 8650 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 8658 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 8664 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 8672 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 8680 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 8687 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 8695 */ 'l', 'd', 'a', 'p', 'r', 'h', 9, 0,
  /* 8703 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 8710 */ 's', 't', 'r', 'h', 9, 0,
  /* 8716 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 8723 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 8730 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 8737 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 8745 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 8752 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 8760 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 8767 */ 'c', 'a', 's', 'h', 9, 0,
  /* 8773 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 8783 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 8790 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 8798 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 8806 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 8814 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 8823 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 8832 */ 'x', 'p', 'a', 'c', 'i', 9, 0,
  /* 8839 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 8845 */ 's', 'l', 'i', 9, 0,
  /* 8850 */ 's', 'r', 'i', 9, 0,
  /* 8855 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 8863 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 8869 */ 'b', 'r', 'k', 9, 0,
  /* 8874 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 8880 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 8889 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 8898 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 8908 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 8918 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 8926 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 8933 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 8942 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 8951 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 8958 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 8967 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 8977 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 8987 */ 't', 'b', 'l', 9, 0,
  /* 8992 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 9000 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 9008 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 9016 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 9024 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 9032 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 9039 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 9046 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 9053 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 9061 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 9069 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 9076 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 9083 */ 's', 's', 'h', 'l', 9, 0,
  /* 9089 */ 'u', 's', 'h', 'l', 9, 0,
  /* 9095 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 9104 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 9113 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 9122 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 9129 */ 's', 'w', 'p', 'l', 9, 0,
  /* 9135 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 9143 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 9151 */ 'c', 'a', 's', 'l', 9, 0,
  /* 9157 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 9166 */ 's', 'y', 's', 'l', 9, 0,
  /* 9172 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 9180 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 9187 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 9193 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 9200 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 9209 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 9218 */ 's', 'b', 'f', 'm', 9, 0,
  /* 9224 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 9230 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 9236 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 9244 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 9252 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 9260 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 9267 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 9273 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 9281 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 9289 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 9295 */ 'e', 'o', 'n', 9, 0,
  /* 9300 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 9308 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 9316 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 9325 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 9334 */ 'o', 'r', 'n', 9, 0,
  /* 9339 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 9347 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 9354 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 9361 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 9368 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 9377 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 9387 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 9395 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 9401 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 9409 */ 'l', 'd', 'p', 9, 0,
  /* 9414 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 9421 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 9427 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 9433 */ 's', 't', 'n', 'p', 9, 0,
  /* 9439 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 9445 */ 'c', 'a', 's', 'p', 9, 0,
  /* 9451 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 9459 */ 's', 't', 'p', 9, 0,
  /* 9464 */ 's', 'w', 'p', 9, 0,
  /* 9469 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 9476 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 9482 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 9489 */ 's', 't', 'x', 'p', 9, 0,
  /* 9495 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '1', 'q', 9, 0,
  /* 9506 */ 'p', 'm', 'u', 'l', 'l', '.', '1', 'q', 9, 0,
  /* 9516 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 9523 */ 'l', 'd', '1', 'r', 9, 0,
  /* 9529 */ 'l', 'd', '2', 'r', 9, 0,
  /* 9535 */ 'l', 'd', '3', 'r', 9, 0,
  /* 9541 */ 'l', 'd', '4', 'r', 9, 0,
  /* 9547 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 9553 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 9560 */ 'b', 'r', 9, 0,
  /* 9564 */ 'a', 'd', 'r', 9, 0,
  /* 9569 */ 'l', 'd', 'r', 9, 0,
  /* 9574 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 9581 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 9588 */ 's', 's', 'h', 'r', 9, 0,
  /* 9594 */ 'u', 's', 'h', 'r', 9, 0,
  /* 9600 */ 'b', 'l', 'r', 9, 0,
  /* 9605 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 9612 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 9619 */ 's', 't', 'l', 'r', 9, 0,
  /* 9625 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 9632 */ 'r', 'o', 'r', 9, 0,
  /* 9637 */ 'l', 'd', 'a', 'p', 'r', 9, 0,
  /* 9644 */ 'o', 'r', 'r', 9, 0,
  /* 9649 */ 'a', 's', 'r', 9, 0,
  /* 9654 */ 'l', 's', 'r', 9, 0,
  /* 9659 */ 'm', 's', 'r', 9, 0,
  /* 9664 */ 'l', 'd', 't', 'r', 9, 0,
  /* 9670 */ 's', 't', 'r', 9, 0,
  /* 9675 */ 's', 't', 't', 'r', 9, 0,
  /* 9681 */ 'e', 'x', 't', 'r', 9, 0,
  /* 9687 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 9693 */ 's', 't', 'u', 'r', 9, 0,
  /* 9699 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 9706 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 9712 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 9719 */ 's', 't', 'x', 'r', 9, 0,
  /* 9725 */ 'f', 'm', 'l', 'a', '.', 's', 9, 0,
  /* 9733 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 's', 9, 0,
  /* 9745 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 9756 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 9768 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 's', 9, 0,
  /* 9780 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 's', 9, 0,
  /* 9791 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 's', 9, 0,
  /* 9802 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 's', 9, 0,
  /* 9813 */ 'f', 'm', 'u', 'l', '.', 's', 9, 0,
  /* 9821 */ 'f', 'm', 'l', 's', '.', 's', 9, 0,
  /* 9829 */ 'i', 'n', 's', '.', 's', 9, 0,
  /* 9836 */ 's', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 9844 */ 'u', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 9852 */ 'f', 'm', 'u', 'l', 'x', '.', 's', 9, 0,
  /* 9861 */ 't', 'r', 'n', '1', '.', '2', 's', 9, 0,
  /* 9870 */ 'z', 'i', 'p', '1', '.', '2', 's', 9, 0,
  /* 9879 */ 'u', 'z', 'p', '1', '.', '2', 's', 9, 0,
  /* 9888 */ 't', 'r', 'n', '2', '.', '2', 's', 9, 0,
  /* 9897 */ 'z', 'i', 'p', '2', '.', '2', 's', 9, 0,
  /* 9906 */ 'u', 'z', 'p', '2', '.', '2', 's', 9, 0,
  /* 9915 */ 'r', 'e', 'v', '6', '4', '.', '2', 's', 9, 0,
  /* 9925 */ 's', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 9934 */ 'u', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 9943 */ 'f', 'c', 'm', 'l', 'a', '.', '2', 's', 9, 0,
  /* 9953 */ 'f', 'm', 'l', 'a', '.', '2', 's', 9, 0,
  /* 9962 */ 's', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9972 */ 'u', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9982 */ 's', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9991 */ 'u', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 10000 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 's', 9, 0,
  /* 10011 */ 'f', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 10020 */ 's', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 10030 */ 'u', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 10040 */ 's', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 10050 */ 'u', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 10060 */ 'b', 'i', 'c', '.', '2', 's', 9, 0,
  /* 10068 */ 'f', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 10077 */ 's', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 10086 */ 'u', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 10095 */ 'f', 'c', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10105 */ 'f', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10114 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10125 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10136 */ 's', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10146 */ 'u', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10156 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10167 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10178 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 's', 9, 0,
  /* 10188 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 's', 9, 0,
  /* 10198 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 's', 9, 0,
  /* 10208 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 10219 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 10230 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 10242 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 10254 */ 's', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 10264 */ 'u', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 10274 */ 'f', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 10283 */ 's', 'q', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 10293 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '2', 's', 9, 0,
  /* 10306 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 10318 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 10331 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '2', 's', 9, 0,
  /* 10344 */ 'c', 'm', 'h', 'i', '.', '2', 's', 9, 0,
  /* 10353 */ 's', 'l', 'i', '.', '2', 's', 9, 0,
  /* 10361 */ 'm', 'v', 'n', 'i', '.', '2', 's', 9, 0,
  /* 10370 */ 's', 'r', 'i', '.', '2', 's', 9, 0,
  /* 10378 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 's', 9, 0,
  /* 10389 */ 'm', 'o', 'v', 'i', '.', '2', 's', 9, 0,
  /* 10398 */ 's', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10408 */ 'u', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10418 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10429 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10440 */ 's', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10450 */ 'u', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10460 */ 's', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10469 */ 'u', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10478 */ 'f', 'm', 'u', 'l', '.', '2', 's', 9, 0,
  /* 10487 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 's', 9, 0,
  /* 10498 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 's', 9, 0,
  /* 10509 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 's', 9, 0,
  /* 10520 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '2', 's', 9, 0,
  /* 10531 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '2', 's', 9, 0,
  /* 10542 */ 'f', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10551 */ 's', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10560 */ 'u', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10569 */ 's', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10580 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10591 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10603 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10615 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 's', 9, 0,
  /* 10626 */ 's', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 10636 */ 'u', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 10646 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10658 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10671 */ 's', 'q', 'x', 't', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10682 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 's', 9, 0,
  /* 10692 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10703 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10714 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10725 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10736 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 10748 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 10760 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10770 */ 's', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10780 */ 'u', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10790 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 's', 9, 0,
  /* 10801 */ 'd', 'u', 'p', '.', '2', 's', 9, 0,
  /* 10809 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10819 */ 's', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10829 */ 'u', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10839 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 's', 9, 0,
  /* 10849 */ 's', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10859 */ 'u', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10869 */ 's', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10878 */ 'u', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10887 */ 'o', 'r', 'r', '.', '2', 's', 9, 0,
  /* 10895 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 's', 9, 0,
  /* 10906 */ 'f', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 10915 */ 's', 'q', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 10925 */ 'c', 'm', 'h', 's', '.', '2', 's', 9, 0,
  /* 10934 */ 'c', 'l', 's', '.', '2', 's', 9, 0,
  /* 10942 */ 'f', 'm', 'l', 's', '.', '2', 's', 9, 0,
  /* 10951 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 's', 9, 0,
  /* 10962 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 's', 9, 0,
  /* 10973 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 's', 9, 0,
  /* 10984 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 's', 9, 0,
  /* 10995 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 's', 9, 0,
  /* 11007 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 's', 9, 0,
  /* 11018 */ 'f', 'a', 'c', 'g', 't', '.', '2', 's', 9, 0,
  /* 11028 */ 'f', 'c', 'm', 'g', 't', '.', '2', 's', 9, 0,
  /* 11038 */ 'f', 'c', 'm', 'l', 't', '.', '2', 's', 9, 0,
  /* 11048 */ 'f', 's', 'q', 'r', 't', '.', '2', 's', 9, 0,
  /* 11058 */ 'c', 'm', 't', 's', 't', '.', '2', 's', 9, 0,
  /* 11068 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 's', 9, 0,
  /* 11079 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 's', 9, 0,
  /* 11090 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 's', 9, 0,
  /* 11101 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 's', 9, 0,
  /* 11112 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 's', 9, 0,
  /* 11123 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 's', 9, 0,
  /* 11134 */ 'f', 'd', 'i', 'v', '.', '2', 's', 9, 0,
  /* 11143 */ 'f', 'm', 'o', 'v', '.', '2', 's', 9, 0,
  /* 11152 */ 'f', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 11161 */ 's', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 11170 */ 'u', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 11179 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 's', 9, 0,
  /* 11189 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 's', 9, 0,
  /* 11200 */ 'c', 'l', 'z', '.', '2', 's', 9, 0,
  /* 11208 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 's', 9, 0,
  /* 11219 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 11231 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 11245 */ 't', 'r', 'n', '1', '.', '4', 's', 9, 0,
  /* 11254 */ 'z', 'i', 'p', '1', '.', '4', 's', 9, 0,
  /* 11263 */ 'u', 'z', 'p', '1', '.', '4', 's', 9, 0,
  /* 11272 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 11284 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 11298 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '4', 's', 9, 0,
  /* 11311 */ 's', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11322 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11333 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11346 */ 's', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11357 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11368 */ 's', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 11379 */ 'u', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 11390 */ 's', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11401 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11412 */ 's', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11423 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11434 */ 's', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11445 */ 'u', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11456 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11469 */ 's', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11480 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11491 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11504 */ 's', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11515 */ 'u', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11526 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 11538 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 11550 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11562 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11574 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11587 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11600 */ 't', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11609 */ 's', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 11620 */ 'u', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 11631 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11644 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11658 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11670 */ 'z', 'i', 'p', '2', '.', '4', 's', 9, 0,
  /* 11679 */ 'u', 'z', 'p', '2', '.', '4', 's', 9, 0,
  /* 11688 */ 's', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 11699 */ 'u', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 11710 */ 's', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 11721 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 11732 */ 'r', 'e', 'v', '6', '4', '.', '4', 's', 9, 0,
  /* 11742 */ 's', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 11751 */ 'u', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 11760 */ 'f', 'c', 'm', 'l', 'a', '.', '4', 's', 9, 0,
  /* 11770 */ 'f', 'm', 'l', 'a', '.', '4', 's', 9, 0,
  /* 11779 */ 's', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11789 */ 'u', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11799 */ 's', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11808 */ 'u', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11817 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 's', 9, 0,
  /* 11828 */ 'f', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11837 */ 's', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11847 */ 'u', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11857 */ 's', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11867 */ 'u', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11877 */ 's', 'h', 'a', '1', 'c', '.', '4', 's', 9, 0,
  /* 11887 */ 'b', 'i', 'c', '.', '4', 's', 9, 0,
  /* 11895 */ 'f', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11904 */ 's', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11913 */ 'u', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11922 */ 'f', 'c', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11932 */ 'f', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11941 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11952 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11963 */ 's', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11973 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11983 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11994 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 12005 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 's', 9, 0,
  /* 12015 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 's', 9, 0,
  /* 12025 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 's', 9, 0,
  /* 12035 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 12046 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 12057 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 12069 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 12081 */ 's', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 12091 */ 'u', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 12101 */ 'f', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 12110 */ 's', 'q', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 12120 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '4', 's', 9, 0,
  /* 12132 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 's', 9, 0,
  /* 12145 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 12157 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 12170 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 's', 9, 0,
  /* 12183 */ 'c', 'm', 'h', 'i', '.', '4', 's', 9, 0,
  /* 12192 */ 's', 'l', 'i', '.', '4', 's', 9, 0,
  /* 12200 */ 'm', 'v', 'n', 'i', '.', '4', 's', 9, 0,
  /* 12209 */ 's', 'r', 'i', '.', '4', 's', 9, 0,
  /* 12217 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 's', 9, 0,
  /* 12228 */ 'm', 'o', 'v', 'i', '.', '4', 's', 9, 0,
  /* 12237 */ 's', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12247 */ 'u', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12257 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12269 */ 's', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12279 */ 'u', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12289 */ 's', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 12299 */ 'u', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 12309 */ 's', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12319 */ 'u', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12329 */ 's', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12339 */ 'u', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12349 */ 's', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12359 */ 'u', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12369 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12380 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12391 */ 's', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12401 */ 'u', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12411 */ 's', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12420 */ 'u', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12429 */ 's', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12439 */ 'u', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12449 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12461 */ 's', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12471 */ 'u', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12481 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12493 */ 's', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12503 */ 'u', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12513 */ 'f', 'm', 'u', 'l', '.', '4', 's', 9, 0,
  /* 12522 */ 's', 'h', 'a', '1', 'm', '.', '4', 's', 9, 0,
  /* 12532 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 's', 9, 0,
  /* 12543 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 's', 9, 0,
  /* 12554 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 's', 9, 0,
  /* 12565 */ 'f', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12574 */ 's', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12583 */ 'u', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12592 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 's', 9, 0,
  /* 12603 */ 's', 'h', 'a', '1', 'p', '.', '4', 's', 9, 0,
  /* 12613 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 's', 9, 0,
  /* 12623 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12634 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12645 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12656 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12667 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 12679 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 12691 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12701 */ 's', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12711 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12721 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 's', 9, 0,
  /* 12732 */ 'd', 'u', 'p', '.', '4', 's', 9, 0,
  /* 12740 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12750 */ 's', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12760 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12770 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 's', 9, 0,
  /* 12780 */ 's', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12790 */ 'u', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12800 */ 's', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12809 */ 'u', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12818 */ 'o', 'r', 'r', '.', '4', 's', 9, 0,
  /* 12826 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 's', 9, 0,
  /* 12837 */ 'f', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 12846 */ 's', 'q', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 12856 */ 'c', 'm', 'h', 's', '.', '4', 's', 9, 0,
  /* 12865 */ 'c', 'l', 's', '.', '4', 's', 9, 0,
  /* 12873 */ 'f', 'm', 'l', 's', '.', '4', 's', 9, 0,
  /* 12882 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 's', 9, 0,
  /* 12893 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 's', 9, 0,
  /* 12904 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 's', 9, 0,
  /* 12915 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 's', 9, 0,
  /* 12926 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 's', 9, 0,
  /* 12938 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 's', 9, 0,
  /* 12949 */ 'f', 'a', 'c', 'g', 't', '.', '4', 's', 9, 0,
  /* 12959 */ 'f', 'c', 'm', 'g', 't', '.', '4', 's', 9, 0,
  /* 12969 */ 'f', 'c', 'm', 'l', 't', '.', '4', 's', 9, 0,
  /* 12979 */ 'f', 's', 'q', 'r', 't', '.', '4', 's', 9, 0,
  /* 12989 */ 'c', 'm', 't', 's', 't', '.', '4', 's', 9, 0,
  /* 12999 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 's', 9, 0,
  /* 13010 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 's', 9, 0,
  /* 13021 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 's', 9, 0,
  /* 13032 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 's', 9, 0,
  /* 13043 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 's', 9, 0,
  /* 13054 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 's', 9, 0,
  /* 13065 */ 'a', 'd', 'd', 'v', '.', '4', 's', 9, 0,
  /* 13074 */ 'f', 'd', 'i', 'v', '.', '4', 's', 9, 0,
  /* 13083 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 13094 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 13105 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 13117 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 13129 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 13139 */ 's', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 13149 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 13159 */ 'f', 'm', 'o', 'v', '.', '4', 's', 9, 0,
  /* 13168 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 13178 */ 's', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 13188 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 13198 */ 's', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 13208 */ 'u', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 13218 */ 's', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 13228 */ 'u', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 13238 */ 'f', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 13247 */ 's', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 13256 */ 'u', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 13265 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 's', 9, 0,
  /* 13275 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 's', 9, 0,
  /* 13286 */ 'c', 'l', 'z', '.', '4', 's', 9, 0,
  /* 13294 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 's', 9, 0,
  /* 13305 */ 'c', 'a', 's', 9, 0,
  /* 13310 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 13318 */ 'f', 'a', 'b', 's', 9, 0,
  /* 13324 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 13331 */ 's', 'u', 'b', 's', 9, 0,
  /* 13337 */ 's', 'b', 'c', 's', 9, 0,
  /* 13343 */ 'a', 'd', 'c', 's', 9, 0,
  /* 13349 */ 'b', 'i', 'c', 's', 9, 0,
  /* 13355 */ 'a', 'd', 'd', 's', 9, 0,
  /* 13361 */ 'a', 'n', 'd', 's', 9, 0,
  /* 13367 */ 'c', 'm', 'h', 's', 9, 0,
  /* 13373 */ 'c', 'l', 's', 9, 0,
  /* 13378 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 13386 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 13394 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 13402 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 13410 */ 'm', 'r', 's', 9, 0,
  /* 13415 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 13424 */ 's', 'y', 's', 9, 0,
  /* 13429 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 13437 */ 'f', 'j', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 13446 */ 'r', 'e', 't', 9, 0,
  /* 13451 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 13458 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 13465 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 13472 */ 'r', 'b', 'i', 't', 9, 0,
  /* 13478 */ 'h', 'l', 't', 9, 0,
  /* 13483 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 13490 */ 'h', 'i', 'n', 't', 9, 0,
  /* 13496 */ 's', 'd', 'o', 't', 9, 0,
  /* 13502 */ 'u', 'd', 'o', 't', 9, 0,
  /* 13508 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 13515 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 13522 */ 'f', 'c', 'v', 't', 9, 0,
  /* 13528 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 13536 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 13544 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 13552 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 13560 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 13568 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 13576 */ 'r', 'e', 'v', 9, 0,
  /* 13581 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 13587 */ 's', 'd', 'i', 'v', 9, 0,
  /* 13593 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 13599 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 13606 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 13612 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 13620 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 13629 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 13636 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 13643 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 13651 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 13659 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 13667 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 13673 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 13681 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 13689 */ 't', 'b', 'x', 9, 0,
  /* 13694 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 13703 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 13710 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 13717 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 13725 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 13733 */ 'b', 'r', 'a', 'a', 'z', 9, 0,
  /* 13740 */ 'b', 'l', 'r', 'a', 'a', 'z', 9, 0,
  /* 13748 */ 'b', 'r', 'a', 'b', 'z', 9, 0,
  /* 13755 */ 'b', 'l', 'r', 'a', 'b', 'z', 9, 0,
  /* 13763 */ 'c', 'b', 'z', 9, 0,
  /* 13768 */ 't', 'b', 'z', 9, 0,
  /* 13773 */ 'c', 'l', 'z', 9, 0,
  /* 13778 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 13784 */ 't', 'b', 'n', 'z', 9, 0,
  /* 13790 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 13798 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 13804 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 13818 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 13849 */ 'b', '.', 0,
  /* 13852 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 13877 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 13900 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13923 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13945 */ 'p', 'a', 'c', 'i', 'a', '1', '7', '1', '6', 0,
  /* 13955 */ 'a', 'u', 't', 'i', 'a', '1', '7', '1', '6', 0,
  /* 13965 */ 'p', 'a', 'c', 'i', 'b', '1', '7', '1', '6', 0,
  /* 13975 */ 'a', 'u', 't', 'i', 'b', '1', '7', '1', '6', 0,
  /* 13985 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 13998 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 14005 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 14015 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 14030 */ 'e', 'r', 'e', 't', 'a', 'a', 0,
  /* 14037 */ 'e', 'r', 'e', 't', 'a', 'b', 0,
  /* 14044 */ 'x', 'p', 'a', 'c', 'l', 'r', 'i', 0,
  /* 14052 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 14066 */ 'p', 'a', 'c', 'i', 'a', 's', 'p', 0,
  /* 14074 */ 'a', 'u', 't', 'i', 'a', 's', 'p', 0,
  /* 14082 */ 'p', 'a', 'c', 'i', 'b', 's', 'p', 0,
  /* 14090 */ 'a', 'u', 't', 'i', 'b', 's', 'p', 0,
  /* 14098 */ 'd', 'r', 'p', 's', 0,
  /* 14103 */ 'e', 'r', 'e', 't', 0,
  /* 14108 */ 's', 'd', 'o', 't', 0,
  /* 14113 */ 'u', 'd', 'o', 't', 0,
  /* 14118 */ 'p', 'a', 'c', 'i', 'a', 'z', 0,
  /* 14125 */ 'a', 'u', 't', 'i', 'a', 'z', 0,
  /* 14132 */ 'p', 'a', 'c', 'i', 'b', 'z', 0,
  /* 14139 */ 'a', 'u', 't', 'i', 'b', 'z', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    14006U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    13999U,	// BUNDLE
    14016U,	// LIFETIME_START
    13986U,	// LIFETIME_END
    0U,	// STACKMAP
    14053U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    13878U,	// PATCHABLE_FUNCTION_ENTER
    13819U,	// PATCHABLE_RET
    13924U,	// PATCHABLE_FUNCTION_EXIT
    13901U,	// PATCHABLE_TAIL_CALL
    13853U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    17590U,	// ABSv16i8
    67154952U,	// ABSv1i64
    27292U,	// ABSv2i32
    20620U,	// ABSv2i64
    22325U,	// ABSv4i16
    29223U,	// ABSv4i32
    24197U,	// ABSv8i16
    18539U,	// ABSv8i8
    2214638624U,	// ADCSWr
    2214638624U,	// ADCSXr
    2214628272U,	// ADCWr
    2214628272U,	// ADCXr
    2147510565U,	// ADDHNv2i64_v2i32
    2281762068U,	// ADDHNv2i64_v4i32
    2147505598U,	// ADDHNv4i32_v4i16
    2281757133U,	// ADDHNv4i32_v8i16
    2281750935U,	// ADDHNv8i16_v16i8
    2147501927U,	// ADDHNv8i16_v8i8
    2147501103U,	// ADDPv16i8
    2147510716U,	// ADDPv2i32
    2147504092U,	// ADDPv2i64
    36828U,	// ADDPv2i64p
    2147505749U,	// ADDPv4i16
    2147512647U,	// ADDPv4i32
    2147507621U,	// ADDPv8i16
    2147502065U,	// ADDPv8i8
    2214638636U,	// ADDSWri
    0U,	// ADDSWrr
    2214638636U,	// ADDSWrs
    2214638636U,	// ADDSWrx
    2214638636U,	// ADDSXri
    0U,	// ADDSXrr
    2214638636U,	// ADDSXrs
    2214638636U,	// ADDSXrx
    2214638636U,	// ADDSXrx64
    34091U,	// ADDVv16i8v
    38936U,	// ADDVv4i16v
    45834U,	// ADDVv4i32v
    40808U,	// ADDVv8i16v
    35028U,	// ADDVv8i8v
    2214629849U,	// ADDWri
    0U,	// ADDWrr
    2214629849U,	// ADDWrs
    2214629849U,	// ADDWrx
    2214629849U,	// ADDXri
    0U,	// ADDXrr
    2214629849U,	// ADDXrs
    2214629849U,	// ADDXrx
    2214629849U,	// ADDXrx64
    70105U,	// ADD_ZZZ_B
    86489U,	// ADD_ZZZ_D
    102873U,	// ADD_ZZZ_H
    119257U,	// ADD_ZZZ_S
    2147500793U,	// ADDv16i8
    2214629849U,	// ADDv1i64
    2147510130U,	// ADDv2i32
    2147503577U,	// ADDv2i64
    2147505186U,	// ADDv4i16
    2147511957U,	// ADDv4i32
    2147507012U,	// ADDv8i16
    2147501679U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    67151197U,	// ADR
    201368800U,	// ADRP
    134267717U,	// AESDrr
    134267747U,	// AESErr
    17099U,	// AESIMCrr
    0U,	// AESIMCrrTied
    17111U,	// AESMCrr
    0U,	// AESMCrrTied
    2214638642U,	// ANDSWri
    0U,	// ANDSWrr
    2214638642U,	// ANDSWrs
    2214638642U,	// ANDSXri
    0U,	// ANDSXrr
    2214638642U,	// ANDSXrs
    2214629891U,	// ANDWri
    0U,	// ANDWrr
    2214629891U,	// ANDWrs
    2214629891U,	// ANDXri
    0U,	// ANDXrr
    2214629891U,	// ANDXrs
    2147500860U,	// ANDv16i8
    2147501740U,	// ANDv8i8
    2214634930U,	// ASRVWr
    2214634930U,	// ASRVXr
    67141780U,	// AUTDA
    67144123U,	// AUTDB
    1081641U,	// AUTDZA
    1084307U,	// AUTDZB
    67141801U,	// AUTIA
    13956U,	// AUTIA1716
    14075U,	// AUTIASP
    14126U,	// AUTIAZ
    67144137U,	// AUTIB
    13976U,	// AUTIB1716
    14091U,	// AUTIBSP
    14140U,	// AUTIBZ
    1081657U,	// AUTIZA
    1084323U,	// AUTIZB
    131397U,	// B
    2415961092U,	// BFMWri
    2415961092U,	// BFMXri
    0U,	// BICSWrr
    2214638630U,	// BICSWrs
    0U,	// BICSXrr
    2214638630U,	// BICSXrs
    0U,	// BICWrr
    2214628277U,	// BICWrs
    0U,	// BICXrr
    2214628277U,	// BICXrs
    2147500738U,	// BICv16i8
    335603533U,	// BICv2i32
    335598589U,	// BICv4i16
    335605360U,	// BICv4i32
    335600415U,	// BICv8i16
    2147501650U,	// BICv8i8
    2147500909U,	// BIFv16i8
    2147501766U,	// BIFv8i8
    2281751782U,	// BITv16i8
    2281752726U,	// BITv8i8
    140061U,	// BL
    1090945U,	// BLR
    67141758U,	// BLRAA
    1095085U,	// BLRAAZ
    67144038U,	// BLRAB
    1095100U,	// BLRABZ
    1090905U,	// BR
    67141745U,	// BRAA
    1095078U,	// BRAAZ
    67144025U,	// BRAB
    1095093U,	// BRABZ
    156326U,	// BRK
    2281751551U,	// BSLv16i8
    2281752394U,	// BSLv8i8
    177690U,	// Bcc
    268618111U,	// CASAB
    268624024U,	// CASAH
    268618252U,	// CASALB
    268624137U,	// CASALH
    268624632U,	// CASALW
    268624632U,	// CASALX
    268615929U,	// CASAW
    268615929U,	// CASAX
    268618535U,	// CASB
    268624448U,	// CASH
    268618346U,	// CASLB
    268624231U,	// CASLH
    268624832U,	// CASLW
    268624832U,	// CASLX
    205527U,	// CASPALW
    221911U,	// CASPALX
    196802U,	// CASPAW
    213186U,	// CASPAX
    205731U,	// CASPLW
    222115U,	// CASPLX
    206054U,	// CASPW
    222438U,	// CASPX
    268628986U,	// CASW
    268628986U,	// CASX
    402699731U,	// CBNZW
    402699731U,	// CBNZX
    402699716U,	// CBZW
    402699716U,	// CBZX
    2214634570U,	// CCMNWi
    2214634570U,	// CCMNWr
    2214634570U,	// CCMNXi
    2214634570U,	// CCMNXr
    2214634696U,	// CCMPWi
    2214634696U,	// CCMPWr
    2214634696U,	// CCMPXi
    2214634696U,	// CCMPXr
    1095048U,	// CLREX
    67155006U,	// CLSWr
    67155006U,	// CLSXr
    17609U,	// CLSv16i8
    27319U,	// CLSv2i32
    22352U,	// CLSv4i16
    29250U,	// CLSv4i32
    24224U,	// CLSv8i16
    18556U,	// CLSv8i8
    67155406U,	// CLZWr
    67155406U,	// CLZXr
    17805U,	// CLZv16i8
    27585U,	// CLZv2i32
    22733U,	// CLZv4i16
    29671U,	// CLZv4i32
    24645U,	// CLZv8i16
    18733U,	// CLZv8i8
    2147501166U,	// CMEQv16i8
    2147501166U,	// CMEQv16i8rz
    2214634798U,	// CMEQv1i64
    2214634798U,	// CMEQv1i64rz
    2147510873U,	// CMEQv2i32
    2147510873U,	// CMEQv2i32rz
    2147504209U,	// CMEQv2i64
    2147504209U,	// CMEQv2i64rz
    2147505906U,	// CMEQv4i16
    2147505906U,	// CMEQv4i16rz
    2147512804U,	// CMEQv4i32
    2147512804U,	// CMEQv4i32rz
    2147507778U,	// CMEQv8i16
    2147507778U,	// CMEQv8i16rz
    2147502122U,	// CMEQv8i8
    2147502122U,	// CMEQv8i8rz
    2147500879U,	// CMGEv16i8
    2147500879U,	// CMGEv16i8rz
    2214629904U,	// CMGEv1i64
    2214629904U,	// CMGEv1i64rz
    2147510222U,	// CMGEv2i32
    2147510222U,	// CMGEv2i32rz
    2147503627U,	// CMGEv2i64
    2147503627U,	// CMGEv2i64rz
    2147505278U,	// CMGEv4i16
    2147505278U,	// CMGEv4i16rz
    2147512049U,	// CMGEv4i32
    2147512049U,	// CMGEv4i32rz
    2147507104U,	// CMGEv8i16
    2147507104U,	// CMGEv8i16rz
    2147501748U,	// CMGEv8i8
    2147501748U,	// CMGEv8i8rz
    2147501275U,	// CMGTv16i8
    2147501275U,	// CMGTv16i8rz
    2214638747U,	// CMGTv1i64
    2214638747U,	// CMGTv1i64rz
    2147511062U,	// CMGTv2i32
    2147511062U,	// CMGTv2i32rz
    2147504382U,	// CMGTv2i64
    2147504382U,	// CMGTv2i64rz
    2147506095U,	// CMGTv4i16
    2147506095U,	// CMGTv4i16rz
    2147512993U,	// CMGTv4i32
    2147512993U,	// CMGTv4i32rz
    2147507967U,	// CMGTv8i16
    2147507967U,	// CMGTv8i16rz
    2147502220U,	// CMGTv8i8
    2147502220U,	// CMGTv8i8rz
    2147500929U,	// CMHIv16i8
    2214634120U,	// CMHIv1i64
    2147510377U,	// CMHIv2i32
    2147503708U,	// CMHIv2i64
    2147505410U,	// CMHIv4i16
    2147512216U,	// CMHIv4i32
    2147507236U,	// CMHIv8i16
    2147501784U,	// CMHIv8i8
    2147501247U,	// CMHSv16i8
    2214638648U,	// CMHSv1i64
    2147510958U,	// CMHSv2i32
    2147504286U,	// CMHSv2i64
    2147505991U,	// CMHSv4i16
    2147512889U,	// CMHSv4i32
    2147507863U,	// CMHSv8i16
    2147502195U,	// CMHSv8i8
    2147500889U,	// CMLEv16i8rz
    2214629911U,	// CMLEv1i64rz
    2147510232U,	// CMLEv2i32rz
    2147503637U,	// CMLEv2i64rz
    2147505288U,	// CMLEv4i16rz
    2147512059U,	// CMLEv4i32rz
    2147507114U,	// CMLEv8i16rz
    2147501757U,	// CMLEv8i8rz
    2147501295U,	// CMLTv16i8rz
    2214638765U,	// CMLTv1i64rz
    2147511072U,	// CMLTv2i32rz
    2147504392U,	// CMLTv2i64rz
    2147506105U,	// CMLTv4i16rz
    2147513003U,	// CMLTv4i32rz
    2147507977U,	// CMLTv8i16rz
    2147502238U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    2147501323U,	// CMTSTv16i8
    2214638796U,	// CMTSTv1i64
    2147511091U,	// CMTSTv2i32
    2147504411U,	// CMTSTv2i64
    2147506124U,	// CMTSTv4i16
    2147513022U,	// CMTSTv4i32
    2147507996U,	// CMTSTv8i16
    2147502263U,	// CMTSTv8i8
    17657U,	// CNTv16i8
    18599U,	// CNTv8i8
    46376U,	// CPYi16
    46376U,	// CPYi32
    46376U,	// CPYi64
    46376U,	// CPYi8
    2214625624U,	// CRC32Brr
    2214627747U,	// CRC32CBrr
    2214633660U,	// CRC32CHrr
    2214638901U,	// CRC32CWrr
    2214638975U,	// CRC32CXrr
    2214630180U,	// CRC32Hrr
    2214638893U,	// CRC32Wrr
    2214638940U,	// CRC32Xrr
    2214634314U,	// CSELWr
    2214634314U,	// CSELXr
    2214628287U,	// CSINCWr
    2214628287U,	// CSINCXr
    2214638880U,	// CSINVWr
    2214638880U,	// CSINVXr
    2214629976U,	// CSNEGWr
    2214629976U,	// CSNEGXr
    0U,	// CompilerBarrier
    147468U,	// DCPS1
    147523U,	// DCPS2
    147540U,	// DCPS3
    232078U,	// DMB
    14099U,	// DRPS
    232237U,	// DSB
    67126351U,	// DUPv16i8gpr
    17487U,	// DUPv16i8lane
    67136050U,	// DUPv2i32gpr
    27186U,	// DUPv2i32lane
    67129406U,	// DUPv2i64gpr
    20542U,	// DUPv2i64lane
    67131083U,	// DUPv4i16gpr
    22219U,	// DUPv4i16lane
    67137981U,	// DUPv4i32gpr
    29117U,	// DUPv4i32lane
    67132955U,	// DUPv8i16gpr
    24091U,	// DUPv8i16lane
    67127310U,	// DUPv8i8gpr
    18446U,	// DUPv8i8lane
    0U,	// EONWrr
    2214634576U,	// EONWrs
    0U,	// EONXrr
    2214634576U,	// EONXrs
    2214634908U,	// EORWri
    0U,	// EORWrr
    2214634908U,	// EORWrs
    2214634908U,	// EORXri
    0U,	// EORXrr
    2214634908U,	// EORXrs
    2147501218U,	// EORv16i8
    2147502169U,	// EORv8i8
    14104U,	// ERET
    14031U,	// ERETAA
    14038U,	// ERETAB
    2214634962U,	// EXTRWrri
    2214634962U,	// EXTRXrri
    2147501334U,	// EXTv16i8
    2147502273U,	// EXTv8i8
    0U,	// F128CSEL
    2214629834U,	// FABD16
    2214629834U,	// FABD32
    2214629834U,	// FABD64
    2147510101U,	// FABDv2f32
    2147503566U,	// FABDv2f64
    2147505157U,	// FABDv4f16
    2147511928U,	// FABDv4f32
    2147506983U,	// FABDv8f16
    67154951U,	// FABSDr
    67154951U,	// FABSHr
    67154951U,	// FABSSr
    27291U,	// FABSv2f32
    20619U,	// FABSv2f64
    22324U,	// FABSv4f16
    29222U,	// FABSv4f32
    24196U,	// FABSv8f16
    2214629896U,	// FACGE16
    2214629896U,	// FACGE32
    2214629896U,	// FACGE64
    2147510211U,	// FACGEv2f32
    2147503616U,	// FACGEv2f64
    2147505267U,	// FACGEv4f16
    2147512038U,	// FACGEv4f32
    2147507093U,	// FACGEv8f16
    2214638739U,	// FACGT16
    2214638739U,	// FACGT32
    2214638739U,	// FACGT64
    2147511051U,	// FACGTv2f32
    2147504371U,	// FACGTv2f64
    2147506084U,	// FACGTv4f16
    2147512982U,	// FACGTv4f32
    2147507956U,	// FACGTv8f16
    2214629854U,	// FADDDrr
    2214629854U,	// FADDHrr
    2147510715U,	// FADDPv2f32
    2147504091U,	// FADDPv2f64
    37614U,	// FADDPv2i16p
    43451U,	// FADDPv2i32p
    36827U,	// FADDPv2i64p
    2147505748U,	// FADDPv4f16
    2147512646U,	// FADDPv4f32
    2147507620U,	// FADDPv8f16
    2214629854U,	// FADDSrr
    2147510138U,	// FADDv2f32
    2147503585U,	// FADDv2f64
    2147505194U,	// FADDv4f16
    2147511965U,	// FADDv4f32
    2147507020U,	// FADDv8f16
    2147510128U,	// FCADDv2f32
    2147503575U,	// FCADDv2f64
    2147505184U,	// FCADDv4f16
    2147511955U,	// FCADDv4f32
    2147507010U,	// FCADDv8f16
    2214634695U,	// FCCMPDrr
    2214629925U,	// FCCMPEDrr
    2214629925U,	// FCCMPEHrr
    2214629925U,	// FCCMPESrr
    2214634695U,	// FCCMPHrr
    2214634695U,	// FCCMPSrr
    2214634797U,	// FCMEQ16
    2214634797U,	// FCMEQ32
    2214634797U,	// FCMEQ64
    2214634797U,	// FCMEQv1i16rz
    2214634797U,	// FCMEQv1i32rz
    2214634797U,	// FCMEQv1i64rz
    2147510872U,	// FCMEQv2f32
    2147504208U,	// FCMEQv2f64
    2147510872U,	// FCMEQv2i32rz
    2147504208U,	// FCMEQv2i64rz
    2147505905U,	// FCMEQv4f16
    2147512803U,	// FCMEQv4f32
    2147505905U,	// FCMEQv4i16rz
    2147512803U,	// FCMEQv4i32rz
    2147507777U,	// FCMEQv8f16
    2147507777U,	// FCMEQv8i16rz
    2214629903U,	// FCMGE16
    2214629903U,	// FCMGE32
    2214629903U,	// FCMGE64
    2214629903U,	// FCMGEv1i16rz
    2214629903U,	// FCMGEv1i32rz
    2214629903U,	// FCMGEv1i64rz
    2147510221U,	// FCMGEv2f32
    2147503626U,	// FCMGEv2f64
    2147510221U,	// FCMGEv2i32rz
    2147503626U,	// FCMGEv2i64rz
    2147505277U,	// FCMGEv4f16
    2147512048U,	// FCMGEv4f32
    2147505277U,	// FCMGEv4i16rz
    2147512048U,	// FCMGEv4i32rz
    2147507103U,	// FCMGEv8f16
    2147507103U,	// FCMGEv8i16rz
    2214638746U,	// FCMGT16
    2214638746U,	// FCMGT32
    2214638746U,	// FCMGT64
    2214638746U,	// FCMGTv1i16rz
    2214638746U,	// FCMGTv1i32rz
    2214638746U,	// FCMGTv1i64rz
    2147511061U,	// FCMGTv2f32
    2147504381U,	// FCMGTv2f64
    2147511061U,	// FCMGTv2i32rz
    2147504381U,	// FCMGTv2i64rz
    2147506094U,	// FCMGTv4f16
    2147512992U,	// FCMGTv4f32
    2147506094U,	// FCMGTv4i16rz
    2147512992U,	// FCMGTv4i32rz
    2147507966U,	// FCMGTv8f16
    2147507966U,	// FCMGTv8i16rz
    2281760472U,	// FCMLAv2f32
    2281753965U,	// FCMLAv2f64
    2281755528U,	// FCMLAv4f16
    2281755528U,	// FCMLAv4f16_indexed
    2281762289U,	// FCMLAv4f32
    2281762289U,	// FCMLAv4f32_indexed
    2281757354U,	// FCMLAv8f16
    2281757354U,	// FCMLAv8f16_indexed
    2214629910U,	// FCMLEv1i16rz
    2214629910U,	// FCMLEv1i32rz
    2214629910U,	// FCMLEv1i64rz
    2147510231U,	// FCMLEv2i32rz
    2147503636U,	// FCMLEv2i64rz
    2147505287U,	// FCMLEv4i16rz
    2147512058U,	// FCMLEv4i32rz
    2147507113U,	// FCMLEv8i16rz
    2214638764U,	// FCMLTv1i16rz
    2214638764U,	// FCMLTv1i32rz
    2214638764U,	// FCMLTv1i64rz
    2147511071U,	// FCMLTv2i32rz
    2147504391U,	// FCMLTv2i64rz
    2147506104U,	// FCMLTv4i16rz
    2147513002U,	// FCMLTv4i32rz
    2147507976U,	// FCMLTv8i16rz
    2139342U,	// FCMPDri
    67151054U,	// FCMPDrr
    2134573U,	// FCMPEDri
    67146285U,	// FCMPEDrr
    2134573U,	// FCMPEHri
    67146285U,	// FCMPEHrr
    2134573U,	// FCMPESri
    67146285U,	// FCMPESrr
    2139342U,	// FCMPHri
    67151054U,	// FCMPHrr
    2139342U,	// FCMPSri
    67151054U,	// FCMPSrr
    2214634313U,	// FCSELDrrr
    2214634313U,	// FCSELHrrr
    2214634313U,	// FCSELSrrr
    67154943U,	// FCVTASUWDr
    67154943U,	// FCVTASUWHr
    67154943U,	// FCVTASUWSr
    67154943U,	// FCVTASUXDr
    67154943U,	// FCVTASUXHr
    67154943U,	// FCVTASUXSr
    67154943U,	// FCVTASv1f16
    67154943U,	// FCVTASv1i32
    67154943U,	// FCVTASv1i64
    27280U,	// FCVTASv2f32
    20608U,	// FCVTASv2f64
    22313U,	// FCVTASv4f16
    29211U,	// FCVTASv4f32
    24185U,	// FCVTASv8f16
    67155161U,	// FCVTAUUWDr
    67155161U,	// FCVTAUUWHr
    67155161U,	// FCVTAUUWSr
    67155161U,	// FCVTAUUXDr
    67155161U,	// FCVTAUUXHr
    67155161U,	// FCVTAUUXSr
    67155161U,	// FCVTAUv1f16
    67155161U,	// FCVTAUv1i32
    67155161U,	// FCVTAUv1i64
    27453U,	// FCVTAUv2f32
    20773U,	// FCVTAUv2f64
    22486U,	// FCVTAUv4f16
    29384U,	// FCVTAUv4f32
    24358U,	// FCVTAUv8f16
    67155155U,	// FCVTDHr
    67155155U,	// FCVTDSr
    67155155U,	// FCVTHDr
    67155155U,	// FCVTHSr
    472933341U,	// FCVTLv2i32
    4219869U,	// FCVTLv4i16
    540033060U,	// FCVTLv4i32
    2151694372U,	// FCVTLv8i16
    67155011U,	// FCVTMSUWDr
    67155011U,	// FCVTMSUWHr
    67155011U,	// FCVTMSUWSr
    67155011U,	// FCVTMSUXDr
    67155011U,	// FCVTMSUXHr
    67155011U,	// FCVTMSUXSr
    67155011U,	// FCVTMSv1f16
    67155011U,	// FCVTMSv1i32
    67155011U,	// FCVTMSv1i64
    27336U,	// FCVTMSv2f32
    20656U,	// FCVTMSv2f64
    22369U,	// FCVTMSv4f16
    29267U,	// FCVTMSv4f32
    24241U,	// FCVTMSv8f16
    67155177U,	// FCVTMUUWDr
    67155177U,	// FCVTMUUWHr
    67155177U,	// FCVTMUUWSr
    67155177U,	// FCVTMUUXDr
    67155177U,	// FCVTMUUXHr
    67155177U,	// FCVTMUUXSr
    67155177U,	// FCVTMUv1f16
    67155177U,	// FCVTMUv1i32
    67155177U,	// FCVTMUv1i64
    27475U,	// FCVTMUv2f32
    20795U,	// FCVTMUv2f64
    22508U,	// FCVTMUv4f16
    29406U,	// FCVTMUv4f32
    24380U,	// FCVTMUv8f16
    67155019U,	// FCVTNSUWDr
    67155019U,	// FCVTNSUWHr
    67155019U,	// FCVTNSUWSr
    67155019U,	// FCVTNSUXDr
    67155019U,	// FCVTNSUXHr
    67155019U,	// FCVTNSUXSr
    67155019U,	// FCVTNSv1f16
    67155019U,	// FCVTNSv1i32
    67155019U,	// FCVTNSv1i64
    27347U,	// FCVTNSv2f32
    20667U,	// FCVTNSv2f64
    22380U,	// FCVTNSv4f16
    29278U,	// FCVTNSv4f32
    24252U,	// FCVTNSv8f16
    67155185U,	// FCVTNUUWDr
    67155185U,	// FCVTNUUWHr
    67155185U,	// FCVTNUUWSr
    67155185U,	// FCVTNUUXDr
    67155185U,	// FCVTNUUXHr
    67155185U,	// FCVTNUUXSr
    67155185U,	// FCVTNUv1f16
    67155185U,	// FCVTNUv1i32
    67155185U,	// FCVTNUv1i64
    27486U,	// FCVTNUv2f32
    20806U,	// FCVTNUv2f64
    22519U,	// FCVTNUv4f16
    29417U,	// FCVTNUv4f32
    24391U,	// FCVTNUv8f16
    5268612U,	// FCVTNv2i32
    6317188U,	// FCVTNv4i16
    138461228U,	// FCVTNv4i32
    7389228U,	// FCVTNv8i16
    67155035U,	// FCVTPSUWDr
    67155035U,	// FCVTPSUWHr
    67155035U,	// FCVTPSUWSr
    67155035U,	// FCVTPSUXDr
    67155035U,	// FCVTPSUXHr
    67155035U,	// FCVTPSUXSr
    67155035U,	// FCVTPSv1f16
    67155035U,	// FCVTPSv1i32
    67155035U,	// FCVTPSv1i64
    27369U,	// FCVTPSv2f32
    20689U,	// FCVTPSv2f64
    22402U,	// FCVTPSv4f16
    29300U,	// FCVTPSv4f32
    24274U,	// FCVTPSv8f16
    67155193U,	// FCVTPUUWDr
    67155193U,	// FCVTPUUWHr
    67155193U,	// FCVTPUUWSr
    67155193U,	// FCVTPUUXDr
    67155193U,	// FCVTPUUXHr
    67155193U,	// FCVTPUUXSr
    67155193U,	// FCVTPUv1f16
    67155193U,	// FCVTPUv1i32
    67155193U,	// FCVTPUv1i64
    27497U,	// FCVTPUv2f32
    20817U,	// FCVTPUv2f64
    22530U,	// FCVTPUv4f16
    29428U,	// FCVTPUv4f32
    24402U,	// FCVTPUv8f16
    67155155U,	// FCVTSDr
    67155155U,	// FCVTSHr
    67151034U,	// FCVTXNv1i64
    5268666U,	// FCVTXNv2f32
    138461236U,	// FCVTXNv4f32
    2214638710U,	// FCVTZSSWDri
    2214638710U,	// FCVTZSSWHri
    2214638710U,	// FCVTZSSWSri
    2214638710U,	// FCVTZSSXDri
    2214638710U,	// FCVTZSSXHri
    2214638710U,	// FCVTZSSXSri
    67155062U,	// FCVTZSUWDr
    67155062U,	// FCVTZSUWHr
    67155062U,	// FCVTZSUWSr
    67155062U,	// FCVTZSUXDr
    67155062U,	// FCVTZSUXHr
    67155062U,	// FCVTZSUXSr
    2214638710U,	// FCVTZSd
    2214638710U,	// FCVTZSh
    2214638710U,	// FCVTZSs
    67155062U,	// FCVTZSv1f16
    67155062U,	// FCVTZSv1i32
    67155062U,	// FCVTZSv1i64
    27392U,	// FCVTZSv2f32
    20712U,	// FCVTZSv2f64
    2147511040U,	// FCVTZSv2i32_shift
    2147504360U,	// FCVTZSv2i64_shift
    22425U,	// FCVTZSv4f16
    29323U,	// FCVTZSv4f32
    2147506073U,	// FCVTZSv4i16_shift
    2147512971U,	// FCVTZSv4i32_shift
    24297U,	// FCVTZSv8f16
    2147507945U,	// FCVTZSv8i16_shift
    2214638849U,	// FCVTZUSWDri
    2214638849U,	// FCVTZUSWHri
    2214638849U,	// FCVTZUSWSri
    2214638849U,	// FCVTZUSXDri
    2214638849U,	// FCVTZUSXHri
    2214638849U,	// FCVTZUSXSri
    67155201U,	// FCVTZUUWDr
    67155201U,	// FCVTZUUWHr
    67155201U,	// FCVTZUUWSr
    67155201U,	// FCVTZUUXDr
    67155201U,	// FCVTZUUXHr
    67155201U,	// FCVTZUUXSr
    2214638849U,	// FCVTZUd
    2214638849U,	// FCVTZUh
    2214638849U,	// FCVTZUs
    67155201U,	// FCVTZUv1f16
    67155201U,	// FCVTZUv1i32
    67155201U,	// FCVTZUv1i64
    27508U,	// FCVTZUv2f32
    20828U,	// FCVTZUv2f64
    2147511156U,	// FCVTZUv2i32_shift
    2147504476U,	// FCVTZUv2i64_shift
    22541U,	// FCVTZUv4f16
    29439U,	// FCVTZUv4f32
    2147506189U,	// FCVTZUv4i16_shift
    2147513087U,	// FCVTZUv4i32_shift
    24413U,	// FCVTZUv8f16
    2147508061U,	// FCVTZUv8i16_shift
    2214638862U,	// FDIVDrr
    2214638862U,	// FDIVHrr
    2214638862U,	// FDIVSrr
    2147511167U,	// FDIVv2f32
    2147504487U,	// FDIVv2f64
    2147506209U,	// FDIVv4f16
    2147513107U,	// FDIVv4f32
    2147508081U,	// FDIVv8f16
    67155070U,	// FJCVTZS
    2214629860U,	// FMADDDrrr
    2214629860U,	// FMADDHrrr
    2214629860U,	// FMADDSrrr
    2214638948U,	// FMAXDrr
    2214638948U,	// FMAXHrr
    2214634525U,	// FMAXNMDrr
    2214634525U,	// FMAXNMHrr
    2147510781U,	// FMAXNMPv2f32
    2147504157U,	// FMAXNMPv2f64
    37636U,	// FMAXNMPv2i16p
    43517U,	// FMAXNMPv2i32p
    36893U,	// FMAXNMPv2i64p
    2147505814U,	// FMAXNMPv4f16
    2147512712U,	// FMAXNMPv4f32
    2147507686U,	// FMAXNMPv8f16
    2214634525U,	// FMAXNMSrr
    38988U,	// FMAXNMVv4i16v
    45886U,	// FMAXNMVv4i32v
    40860U,	// FMAXNMVv8i16v
    2147510531U,	// FMAXNMv2f32
    2147504049U,	// FMAXNMv2f64
    2147505564U,	// FMAXNMv4f16
    2147512576U,	// FMAXNMv4f32
    2147507560U,	// FMAXNMv8f16
    2147510842U,	// FMAXPv2f32
    2147504198U,	// FMAXPv2f64
    37658U,	// FMAXPv2i16p
    43578U,	// FMAXPv2i32p
    36934U,	// FMAXPv2i64p
    2147505875U,	// FMAXPv4f16
    2147512773U,	// FMAXPv4f32
    2147507747U,	// FMAXPv8f16
    2214638948U,	// FMAXSrr
    39039U,	// FMAXVv4i16v
    45937U,	// FMAXVv4i32v
    40911U,	// FMAXVv8i16v
    2147511185U,	// FMAXv2f32
    2147504545U,	// FMAXv2f64
    2147506333U,	// FMAXv4f16
    2147513271U,	// FMAXv4f32
    2147508245U,	// FMAXv8f16
    2214634548U,	// FMINDrr
    2214634548U,	// FMINHrr
    2214634517U,	// FMINNMDrr
    2214634517U,	// FMINNMHrr
    2147510769U,	// FMINNMPv2f32
    2147504145U,	// FMINNMPv2f64
    37624U,	// FMINNMPv2i16p
    43505U,	// FMINNMPv2i32p
    36881U,	// FMINNMPv2i64p
    2147505802U,	// FMINNMPv4f16
    2147512700U,	// FMINNMPv4f32
    2147507674U,	// FMINNMPv8f16
    2214634517U,	// FMINNMSrr
    38976U,	// FMINNMVv4i16v
    45874U,	// FMINNMVv4i32v
    40848U,	// FMINNMVv8i16v
    2147510520U,	// FMINNMv2f32
    2147504038U,	// FMINNMv2f64
    2147505553U,	// FMINNMv4f16
    2147512565U,	// FMINNMv4f32
    2147507549U,	// FMINNMv8f16
    2147510793U,	// FMINPv2f32
    2147504169U,	// FMINPv2f64
    37648U,	// FMINPv2i16p
    43529U,	// FMINPv2i32p
    36905U,	// FMINPv2i64p
    2147505826U,	// FMINPv4f16
    2147512724U,	// FMINPv4f32
    2147507698U,	// FMINPv8f16
    2214634548U,	// FMINSrr
    39000U,	// FMINVv4i16v
    45898U,	// FMINVv4i32v
    40872U,	// FMINVv8i16v
    2147510575U,	// FMINv2f32
    2147504071U,	// FMINv2f64
    2147505608U,	// FMINv4f16
    2147512598U,	// FMINv4f32
    2147507582U,	// FMINv8f16
    2416104031U,	// FMLAv1i16_indexed
    2416109054U,	// FMLAv1i32_indexed
    2416102352U,	// FMLAv1i64_indexed
    2281760482U,	// FMLAv2f32
    2281753975U,	// FMLAv2f64
    2281760482U,	// FMLAv2i32_indexed
    2281753975U,	// FMLAv2i64_indexed
    2281755538U,	// FMLAv4f16
    2281762299U,	// FMLAv4f32
    2281755538U,	// FMLAv4i16_indexed
    2281762299U,	// FMLAv4i32_indexed
    2281757364U,	// FMLAv8f16
    2281757364U,	// FMLAv8i16_indexed
    2416104127U,	// FMLSv1i16_indexed
    2416109150U,	// FMLSv1i32_indexed
    2416102368U,	// FMLSv1i64_indexed
    2281761471U,	// FMLSv2f32
    2281754791U,	// FMLSv2f64
    2281761471U,	// FMLSv2i32_indexed
    2281754791U,	// FMLSv2i64_indexed
    2281756504U,	// FMLSv4f16
    2281763402U,	// FMLSv4f32
    2281756504U,	// FMLSv4i16_indexed
    2281763402U,	// FMLSv4i32_indexed
    2281758376U,	// FMLSv8f16
    2281758376U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    35823U,	// FMOVDXHighr
    67155239U,	// FMOVDXr
    604026151U,	// FMOVDi
    67155239U,	// FMOVDr
    0U,	// FMOVH0
    67155239U,	// FMOVHWr
    67155239U,	// FMOVHXr
    604026151U,	// FMOVHi
    67155239U,	// FMOVHr
    0U,	// FMOVS0
    67155239U,	// FMOVSWr
    604026151U,	// FMOVSi
    67155239U,	// FMOVSr
    67155239U,	// FMOVWHr
    67155239U,	// FMOVWSr
    75516911U,	// FMOVXDHighr
    67155239U,	// FMOVXDr
    67155239U,	// FMOVXHr
    604007304U,	// FMOVv2f32_ns
    604000624U,	// FMOVv2f64_ns
    604002422U,	// FMOVv4f16_ns
    604009320U,	// FMOVv4f32_ns
    604004294U,	// FMOVv8f16_ns
    2214628188U,	// FMSUBDrrr
    2214628188U,	// FMSUBHrrr
    2214628188U,	// FMSUBSrrr
    2214634468U,	// FMULDrr
    2214634468U,	// FMULHrr
    2214634468U,	// FMULSrr
    2214638991U,	// FMULX16
    2214638991U,	// FMULX32
    2214638991U,	// FMULX64
    2214630110U,	// FMULXv1i16_indexed
    2214635133U,	// FMULXv1i32_indexed
    2214628351U,	// FMULXv1i64_indexed
    2147511212U,	// FMULXv2f32
    2147504554U,	// FMULXv2f64
    2147511212U,	// FMULXv2i32_indexed
    2147504554U,	// FMULXv2i64_indexed
    2147506360U,	// FMULXv4f16
    2147513298U,	// FMULXv4f32
    2147506360U,	// FMULXv4i16_indexed
    2147513298U,	// FMULXv4i32_indexed
    2147508272U,	// FMULXv8f16
    2147508272U,	// FMULXv8i16_indexed
    2214630071U,	// FMULv1i16_indexed
    2214635094U,	// FMULv1i32_indexed
    2214628312U,	// FMULv1i64_indexed
    2147510511U,	// FMULv2f32
    2147504029U,	// FMULv2f64
    2147510511U,	// FMULv2i32_indexed
    2147504029U,	// FMULv2i64_indexed
    2147505544U,	// FMULv4f16
    2147512546U,	// FMULv4f32
    2147505544U,	// FMULv4i16_indexed
    2147512546U,	// FMULv4i32_indexed
    2147507540U,	// FMULv8f16
    2147507540U,	// FMULv8i16_indexed
    67146315U,	// FNEGDr
    67146315U,	// FNEGHr
    67146315U,	// FNEGSr
    26659U,	// FNEGv2f32
    20041U,	// FNEGv2f64
    21692U,	// FNEGv4f16
    28486U,	// FNEGv4f32
    23518U,	// FNEGv8f16
    2214629867U,	// FNMADDDrrr
    2214629867U,	// FNMADDHrrr
    2214629867U,	// FNMADDSrrr
    2214628195U,	// FNMSUBDrrr
    2214628195U,	// FNMSUBHrrr
    2214628195U,	// FNMSUBSrrr
    2214634474U,	// FNMULDrr
    2214634474U,	// FNMULHrr
    2214634474U,	// FNMULSrr
    67146269U,	// FRECPEv1f16
    67146269U,	// FRECPEv1i32
    67146269U,	// FRECPEv1i64
    26593U,	// FRECPEv2f32
    19998U,	// FRECPEv2f64
    21649U,	// FRECPEv4f16
    28420U,	// FRECPEv4f32
    23475U,	// FRECPEv8f16
    2214638675U,	// FRECPS16
    2214638675U,	// FRECPS32
    2214638675U,	// FRECPS64
    2147511006U,	// FRECPSv2f32
    2147504326U,	// FRECPSv2f64
    2147506039U,	// FRECPSv4f16
    2147512937U,	// FRECPSv4f32
    2147507911U,	// FRECPSv8f16
    67155350U,	// FRECPXv1f16
    67155350U,	// FRECPXv1i32
    67155350U,	// FRECPXv1i64
    67141895U,	// FRINTADr
    67141895U,	// FRINTAHr
    67141895U,	// FRINTASr
    26385U,	// FRINTAv2f32
    19878U,	// FRINTAv2f64
    21441U,	// FRINTAv4f16
    28202U,	// FRINTAv4f32
    23267U,	// FRINTAv8f16
    67150488U,	// FRINTIDr
    67150488U,	// FRINTIHr
    67150488U,	// FRINTISr
    26763U,	// FRINTIv2f32
    20085U,	// FRINTIv2f64
    21796U,	// FRINTIv4f16
    28602U,	// FRINTIv4f32
    23622U,	// FRINTIv8f16
    67150885U,	// FRINTMDr
    67150885U,	// FRINTMHr
    67150885U,	// FRINTMSr
    26894U,	// FRINTMv2f32
    20412U,	// FRINTMv2f64
    21927U,	// FRINTMv4f16
    28939U,	// FRINTMv4f32
    23923U,	// FRINTMv8f16
    67150972U,	// FRINTNDr
    67150972U,	// FRINTNHr
    67150972U,	// FRINTNSr
    27000U,	// FRINTNv2f32
    20432U,	// FRINTNv2f64
    22033U,	// FRINTNv4f16
    28977U,	// FRINTNv4f32
    23961U,	// FRINTNv8f16
    67151084U,	// FRINTPDr
    67151084U,	// FRINTPHr
    67151084U,	// FRINTPSr
    27175U,	// FRINTPv2f32
    20531U,	// FRINTPv2f64
    22208U,	// FRINTPv4f16
    29106U,	// FRINTPv4f32
    24080U,	// FRINTPv8f16
    67155358U,	// FRINTXDr
    67155358U,	// FRINTXHr
    67155358U,	// FRINTXSr
    27574U,	// FRINTXv2f32
    20916U,	// FRINTXv2f64
    22722U,	// FRINTXv4f16
    29660U,	// FRINTXv4f32
    24634U,	// FRINTXv8f16
    67155423U,	// FRINTZDr
    67155423U,	// FRINTZHr
    67155423U,	// FRINTZSr
    27593U,	// FRINTZv2f32
    20927U,	// FRINTZv2f64
    22741U,	// FRINTZv4f16
    29679U,	// FRINTZv4f32
    24653U,	// FRINTZv8f16
    67146292U,	// FRSQRTEv1f16
    67146292U,	// FRSQRTEv1i32
    67146292U,	// FRSQRTEv1i64
    26615U,	// FRSQRTEv2f32
    20009U,	// FRSQRTEv2f64
    21660U,	// FRSQRTEv4f16
    28442U,	// FRSQRTEv4f32
    23486U,	// FRSQRTEv8f16
    2214638696U,	// FRSQRTS16
    2214638696U,	// FRSQRTS32
    2214638696U,	// FRSQRTS64
    2147511028U,	// FRSQRTSv2f32
    2147504348U,	// FRSQRTSv2f64
    2147506061U,	// FRSQRTSv4f16
    2147512959U,	// FRSQRTSv4f32
    2147507933U,	// FRSQRTSv8f16
    67155141U,	// FSQRTDr
    67155141U,	// FSQRTHr
    67155141U,	// FSQRTSr
    27433U,	// FSQRTv2f32
    20753U,	// FSQRTv2f64
    22466U,	// FSQRTv4f16
    29364U,	// FSQRTv4f32
    24338U,	// FSQRTv8f16
    2214628182U,	// FSUBDrr
    2214628182U,	// FSUBHrr
    2214628182U,	// FSUBSrr
    2147510044U,	// FSUBv2f32
    2147503537U,	// FSUBv2f64
    2147505100U,	// FSUBv4f16
    2147511861U,	// FSUBv4f32
    2147506926U,	// FSUBv8f16
    259251U,	// HINT
    160935U,	// HLT
    150470U,	// HVC
    679531207U,	// INSvi16gpr
    746640071U,	// INSvi16lane
    679536230U,	// INSvi32gpr
    746645094U,	// INSvi32lane
    679529448U,	// INSvi64gpr
    746638312U,	// INSvi64lane
    679526721U,	// INSvi8gpr
    746635585U,	// INSvi8lane
    232242U,	// ISB
    262145U,	// LD1Fourv16b
    9715713U,	// LD1Fourv16b_POST
    294913U,	// LD1Fourv1d
    10797057U,	// LD1Fourv1d_POST
    327681U,	// LD1Fourv2d
    9781249U,	// LD1Fourv2d_POST
    360449U,	// LD1Fourv2s
    10862593U,	// LD1Fourv2s_POST
    393217U,	// LD1Fourv4h
    10895361U,	// LD1Fourv4h_POST
    425985U,	// LD1Fourv4s
    9879553U,	// LD1Fourv4s_POST
    458753U,	// LD1Fourv8b
    10960897U,	// LD1Fourv8b_POST
    491521U,	// LD1Fourv8h
    9945089U,	// LD1Fourv8h_POST
    262145U,	// LD1Onev16b
    11812865U,	// LD1Onev16b_POST
    294913U,	// LD1Onev1d
    12894209U,	// LD1Onev1d_POST
    327681U,	// LD1Onev2d
    11878401U,	// LD1Onev2d_POST
    360449U,	// LD1Onev2s
    12959745U,	// LD1Onev2s_POST
    393217U,	// LD1Onev4h
    12992513U,	// LD1Onev4h_POST
    425985U,	// LD1Onev4s
    11976705U,	// LD1Onev4s_POST
    458753U,	// LD1Onev8b
    13058049U,	// LD1Onev8b_POST
    491521U,	// LD1Onev8h
    12042241U,	// LD1Onev8h_POST
    271668U,	// LD1Rv16b
    13919540U,	// LD1Rv16b_POST
    304436U,	// LD1Rv1d
    12903732U,	// LD1Rv1d_POST
    337204U,	// LD1Rv2d
    12936500U,	// LD1Rv2d_POST
    369972U,	// LD1Rv2s
    15066420U,	// LD1Rv2s_POST
    402740U,	// LD1Rv4h
    16147764U,	// LD1Rv4h_POST
    435508U,	// LD1Rv4s
    15131956U,	// LD1Rv4s_POST
    468276U,	// LD1Rv8b
    14116148U,	// LD1Rv8b_POST
    501044U,	// LD1Rv8h
    16246068U,	// LD1Rv8h_POST
    262145U,	// LD1Threev16b
    17055745U,	// LD1Threev16b_POST
    294913U,	// LD1Threev1d
    18137089U,	// LD1Threev1d_POST
    327681U,	// LD1Threev2d
    17121281U,	// LD1Threev2d_POST
    360449U,	// LD1Threev2s
    18202625U,	// LD1Threev2s_POST
    393217U,	// LD1Threev4h
    18235393U,	// LD1Threev4h_POST
    425985U,	// LD1Threev4s
    17219585U,	// LD1Threev4s_POST
    458753U,	// LD1Threev8b
    18300929U,	// LD1Threev8b_POST
    491521U,	// LD1Threev8h
    17285121U,	// LD1Threev8h_POST
    262145U,	// LD1Twov16b
    10764289U,	// LD1Twov16b_POST
    294913U,	// LD1Twov1d
    11845633U,	// LD1Twov1d_POST
    327681U,	// LD1Twov2d
    10829825U,	// LD1Twov2d_POST
    360449U,	// LD1Twov2s
    11911169U,	// LD1Twov2s_POST
    393217U,	// LD1Twov4h
    11943937U,	// LD1Twov4h_POST
    425985U,	// LD1Twov4s
    10928129U,	// LD1Twov4s_POST
    458753U,	// LD1Twov8b
    12009473U,	// LD1Twov8b_POST
    491521U,	// LD1Twov8h
    10993665U,	// LD1Twov8h_POST
    19398657U,	// LD1i16
    20463617U,	// LD1i16_POST
    19431425U,	// LD1i32
    21544961U,	// LD1i32_POST
    19464193U,	// LD1i64
    22626305U,	// LD1i64_POST
    19496961U,	// LD1i8
    23707649U,	// LD1i8_POST
    271674U,	// LD2Rv16b
    16016698U,	// LD2Rv16b_POST
    304442U,	// LD2Rv1d
    11855162U,	// LD2Rv1d_POST
    337210U,	// LD2Rv2d
    11887930U,	// LD2Rv2d_POST
    369978U,	// LD2Rv2s
    12969274U,	// LD2Rv2s_POST
    402746U,	// LD2Rv4h
    15099194U,	// LD2Rv4h_POST
    435514U,	// LD2Rv4s
    13034810U,	// LD2Rv4s_POST
    468282U,	// LD2Rv8b
    16213306U,	// LD2Rv8b_POST
    501050U,	// LD2Rv8h
    15197498U,	// LD2Rv8h_POST
    262175U,	// LD2Twov16b
    10764319U,	// LD2Twov16b_POST
    327711U,	// LD2Twov2d
    10829855U,	// LD2Twov2d_POST
    360479U,	// LD2Twov2s
    11911199U,	// LD2Twov2s_POST
    393247U,	// LD2Twov4h
    11943967U,	// LD2Twov4h_POST
    426015U,	// LD2Twov4s
    10928159U,	// LD2Twov4s_POST
    458783U,	// LD2Twov8b
    12009503U,	// LD2Twov8b_POST
    491551U,	// LD2Twov8h
    10993695U,	// LD2Twov8h_POST
    19398687U,	// LD2i16
    21512223U,	// LD2i16_POST
    19431455U,	// LD2i32
    22593567U,	// LD2i32_POST
    19464223U,	// LD2i64
    24723487U,	// LD2i64_POST
    19496991U,	// LD2i8
    20561951U,	// LD2i8_POST
    271680U,	// LD3Rv16b
    25453888U,	// LD3Rv16b_POST
    304448U,	// LD3Rv1d
    18146624U,	// LD3Rv1d_POST
    337216U,	// LD3Rv2d
    18179392U,	// LD3Rv2d_POST
    369984U,	// LD3Rv2s
    26600768U,	// LD3Rv2s_POST
    402752U,	// LD3Rv4h
    27682112U,	// LD3Rv4h_POST
    435520U,	// LD3Rv4s
    26666304U,	// LD3Rv4s_POST
    468288U,	// LD3Rv8b
    25650496U,	// LD3Rv8b_POST
    501056U,	// LD3Rv8h
    27780416U,	// LD3Rv8h_POST
    262223U,	// LD3Threev16b
    17055823U,	// LD3Threev16b_POST
    327759U,	// LD3Threev2d
    17121359U,	// LD3Threev2d_POST
    360527U,	// LD3Threev2s
    18202703U,	// LD3Threev2s_POST
    393295U,	// LD3Threev4h
    18235471U,	// LD3Threev4h_POST
    426063U,	// LD3Threev4s
    17219663U,	// LD3Threev4s_POST
    458831U,	// LD3Threev8b
    18301007U,	// LD3Threev8b_POST
    491599U,	// LD3Threev8h
    17285199U,	// LD3Threev8h_POST
    19398735U,	// LD3i16
    28852303U,	// LD3i16_POST
    19431503U,	// LD3i32
    29933647U,	// LD3i32_POST
    19464271U,	// LD3i64
    31014991U,	// LD3i64_POST
    19497039U,	// LD3i8
    32096335U,	// LD3i8_POST
    262240U,	// LD4Fourv16b
    9715808U,	// LD4Fourv16b_POST
    327776U,	// LD4Fourv2d
    9781344U,	// LD4Fourv2d_POST
    360544U,	// LD4Fourv2s
    10862688U,	// LD4Fourv2s_POST
    393312U,	// LD4Fourv4h
    10895456U,	// LD4Fourv4h_POST
    426080U,	// LD4Fourv4s
    9879648U,	// LD4Fourv4s_POST
    458848U,	// LD4Fourv8b
    10960992U,	// LD4Fourv8b_POST
    491616U,	// LD4Fourv8h
    9945184U,	// LD4Fourv8h_POST
    271686U,	// LD4Rv16b
    14968134U,	// LD4Rv16b_POST
    304454U,	// LD4Rv1d
    10806598U,	// LD4Rv1d_POST
    337222U,	// LD4Rv2d
    10839366U,	// LD4Rv2d_POST
    369990U,	// LD4Rv2s
    11920710U,	// LD4Rv2s_POST
    402758U,	// LD4Rv4h
    13002054U,	// LD4Rv4h_POST
    435526U,	// LD4Rv4s
    11986246U,	// LD4Rv4s_POST
    468294U,	// LD4Rv8b
    15164742U,	// LD4Rv8b_POST
    501062U,	// LD4Rv8h
    13100358U,	// LD4Rv8h_POST
    19398752U,	// LD4i16
    22560864U,	// LD4i16_POST
    19431520U,	// LD4i32
    24690784U,	// LD4i32_POST
    19464288U,	// LD4i64
    33112160U,	// LD4i64_POST
    19497056U,	// LD4i8
    21610592U,	// LD4i8_POST
    805488949U,	// LDADDAB
    805494872U,	// LDADDAH
    805489104U,	// LDADDALB
    805494989U,	// LDADDALH
    805495473U,	// LDADDALW
    805495473U,	// LDADDALX
    805486732U,	// LDADDAW
    805486732U,	// LDADDAX
    805489075U,	// LDADDB
    805494981U,	// LDADDH
    805489204U,	// LDADDLB
    805495089U,	// LDADDLH
    805495601U,	// LDADDLW
    805495601U,	// LDADDLX
    805491159U,	// LDADDW
    805491159U,	// LDADDX
    2248182495U,	// LDAPRB
    2248188408U,	// LDAPRH
    2248189350U,	// LDAPRW
    2248189350U,	// LDAPRX
    2248182443U,	// LDARB
    2248188356U,	// LDARH
    2248189260U,	// LDARW
    2248189260U,	// LDARX
    67151102U,	// LDAXPW
    67151102U,	// LDAXPX
    2248182537U,	// LDAXRB
    2248188450U,	// LDAXRH
    2248189412U,	// LDAXRW
    2248189412U,	// LDAXRX
    805489005U,	// LDCLRAB
    805494918U,	// LDCLRAH
    805489144U,	// LDCLRALB
    805495029U,	// LDCLRALH
    805495526U,	// LDCLRALW
    805495526U,	// LDCLRALX
    805486799U,	// LDCLRAW
    805486799U,	// LDCLRAX
    805489344U,	// LDCLRB
    805495257U,	// LDCLRH
    805489240U,	// LDCLRLB
    805495125U,	// LDCLRLH
    805495728U,	// LDCLRLW
    805495728U,	// LDCLRLX
    805496198U,	// LDCLRW
    805496198U,	// LDCLRX
    805489014U,	// LDEORAB
    805494927U,	// LDEORAH
    805489154U,	// LDEORALB
    805495039U,	// LDEORALH
    805495535U,	// LDEORALW
    805495535U,	// LDEORALX
    805486807U,	// LDEORAW
    805486807U,	// LDEORAX
    805489367U,	// LDEORB
    805495280U,	// LDEORH
    805489249U,	// LDEORLB
    805495134U,	// LDEORLH
    805495736U,	// LDEORLW
    805495736U,	// LDEORLX
    805496218U,	// LDEORW
    805496218U,	// LDEORX
    2248182450U,	// LDLARB
    2248188363U,	// LDLARH
    2248189266U,	// LDLARW
    2248189266U,	// LDLARX
    67151060U,	// LDNPDi
    67151060U,	// LDNPQi
    67151060U,	// LDNPSi
    67151060U,	// LDNPWi
    67151060U,	// LDNPXi
    67151042U,	// LDPDi
    268625090U,	// LDPDpost
    268625090U,	// LDPDpre
    67151042U,	// LDPQi
    268625090U,	// LDPQpost
    268625090U,	// LDPQpre
    67155262U,	// LDPSWi
    268629310U,	// LDPSWpost
    268629310U,	// LDPSWpre
    67151042U,	// LDPSi
    268625090U,	// LDPSpost
    268625090U,	// LDPSpre
    67151042U,	// LDPWi
    268625090U,	// LDPWpost
    268625090U,	// LDPWpre
    67151042U,	// LDPXi
    268625090U,	// LDPXpost
    268625090U,	// LDPXpre
    2248179831U,	// LDRAAindexed
    2449653879U,	// LDRAAwriteback
    2248182111U,	// LDRABindexed
    2449656159U,	// LDRABwriteback
    302172858U,	// LDRBBpost
    2449656506U,	// LDRBBpre
    2248182458U,	// LDRBBroW
    2248182458U,	// LDRBBroX
    2248182458U,	// LDRBBui
    302179682U,	// LDRBpost
    2449663330U,	// LDRBpre
    2248189282U,	// LDRBroW
    2248189282U,	// LDRBroX
    2248189282U,	// LDRBui
    402695522U,	// LDRDl
    302179682U,	// LDRDpost
    2449663330U,	// LDRDpre
    2248189282U,	// LDRDroW
    2248189282U,	// LDRDroX
    2248189282U,	// LDRDui
    302178771U,	// LDRHHpost
    2449662419U,	// LDRHHpre
    2248188371U,	// LDRHHroW
    2248188371U,	// LDRHHroX
    2248188371U,	// LDRHHui
    302179682U,	// LDRHpost
    2449663330U,	// LDRHpre
    2248189282U,	// LDRHroW
    2248189282U,	// LDRHroX
    2248189282U,	// LDRHui
    402695522U,	// LDRQl
    302179682U,	// LDRQpost
    2449663330U,	// LDRQpre
    2248189282U,	// LDRQroW
    2248189282U,	// LDRQroX
    2248189282U,	// LDRQui
    302172983U,	// LDRSBWpost
    2449656631U,	// LDRSBWpre
    2248182583U,	// LDRSBWroW
    2248182583U,	// LDRSBWroX
    2248182583U,	// LDRSBWui
    302172983U,	// LDRSBXpost
    2449656631U,	// LDRSBXpre
    2248182583U,	// LDRSBXroW
    2248182583U,	// LDRSBXroX
    2248182583U,	// LDRSBXui
    302178896U,	// LDRSHWpost
    2449662544U,	// LDRSHWpre
    2248188496U,	// LDRSHWroW
    2248188496U,	// LDRSHWroX
    2248188496U,	// LDRSHWui
    302178896U,	// LDRSHXpost
    2449662544U,	// LDRSHXpre
    2248188496U,	// LDRSHXroW
    2248188496U,	// LDRSHXroX
    2248188496U,	// LDRSHXui
    402699589U,	// LDRSWl
    302183749U,	// LDRSWpost
    2449667397U,	// LDRSWpre
    2248193349U,	// LDRSWroW
    2248193349U,	// LDRSWroX
    2248193349U,	// LDRSWui
    402695522U,	// LDRSl
    302179682U,	// LDRSpost
    2449663330U,	// LDRSpre
    2248189282U,	// LDRSroW
    2248189282U,	// LDRSroX
    2248189282U,	// LDRSui
    402695522U,	// LDRWl
    302179682U,	// LDRWpost
    2449663330U,	// LDRWpre
    2248189282U,	// LDRWroW
    2248189282U,	// LDRWroX
    2248189282U,	// LDRWui
    402695522U,	// LDRXl
    302179682U,	// LDRXpost
    2449663330U,	// LDRXpre
    2248189282U,	// LDRXroW
    2248189282U,	// LDRXroX
    2248189282U,	// LDRXui
    805489030U,	// LDSETAB
    805494943U,	// LDSETAH
    805489172U,	// LDSETALB
    805495057U,	// LDSETALH
    805495551U,	// LDSETALW
    805495551U,	// LDSETALX
    805486847U,	// LDSETAW
    805486847U,	// LDSETAX
    805489486U,	// LDSETB
    805495399U,	// LDSETH
    805489265U,	// LDSETLB
    805495150U,	// LDSETLH
    805495765U,	// LDSETLW
    805495765U,	// LDSETLX
    805500044U,	// LDSETW
    805500044U,	// LDSETX
    805489039U,	// LDSMAXAB
    805494952U,	// LDSMAXAH
    805489182U,	// LDSMAXALB
    805495067U,	// LDSMAXALH
    805495560U,	// LDSMAXALW
    805495560U,	// LDSMAXALX
    805486863U,	// LDSMAXAW
    805486863U,	// LDSMAXAX
    805489529U,	// LDSMAXB
    805495407U,	// LDSMAXH
    805489274U,	// LDSMAXLB
    805495192U,	// LDSMAXLH
    805495793U,	// LDSMAXLW
    805495793U,	// LDSMAXLX
    805500266U,	// LDSMAXW
    805500266U,	// LDSMAXX
    805488958U,	// LDSMINAB
    805494891U,	// LDSMINAH
    805489114U,	// LDSMINALB
    805494999U,	// LDSMINALH
    805495491U,	// LDSMINALW
    805495491U,	// LDSMINALX
    805486768U,	// LDSMINAW
    805486768U,	// LDSMINAX
    805489299U,	// LDSMINB
    805495212U,	// LDSMINH
    805489213U,	// LDSMINLB
    805495098U,	// LDSMINLH
    805495697U,	// LDSMINLW
    805495697U,	// LDSMINLX
    805495866U,	// LDSMINW
    805495866U,	// LDSMINX
    2248182503U,	// LDTRBi
    2248188416U,	// LDTRHi
    2248182590U,	// LDTRSBWi
    2248182590U,	// LDTRSBXi
    2248188503U,	// LDTRSHWi
    2248188503U,	// LDTRSHXi
    2248193356U,	// LDTRSWi
    2248189377U,	// LDTRWi
    2248189377U,	// LDTRXi
    805489049U,	// LDUMAXAB
    805494962U,	// LDUMAXAH
    805489193U,	// LDUMAXALB
    805495078U,	// LDUMAXALH
    805495570U,	// LDUMAXALW
    805495570U,	// LDUMAXALX
    805486872U,	// LDUMAXAW
    805486872U,	// LDUMAXAX
    805489538U,	// LDUMAXB
    805495416U,	// LDUMAXH
    805489284U,	// LDUMAXLB
    805495202U,	// LDUMAXLH
    805495802U,	// LDUMAXLW
    805495802U,	// LDUMAXLX
    805500274U,	// LDUMAXW
    805500274U,	// LDUMAXX
    805488968U,	// LDUMINAB
    805494901U,	// LDUMINAH
    805489125U,	// LDUMINALB
    805495010U,	// LDUMINALH
    805495501U,	// LDUMINALW
    805495501U,	// LDUMINALX
    805486777U,	// LDUMINAW
    805486777U,	// LDUMINAX
    805489308U,	// LDUMINB
    805495221U,	// LDUMINH
    805489223U,	// LDUMINLB
    805495108U,	// LDUMINLH
    805495706U,	// LDUMINLW
    805495706U,	// LDUMINLX
    805495874U,	// LDUMINW
    805495874U,	// LDUMINX
    2248182523U,	// LDURBBi
    2248189400U,	// LDURBi
    2248189400U,	// LDURDi
    2248188436U,	// LDURHHi
    2248189400U,	// LDURHi
    2248189400U,	// LDURQi
    2248182598U,	// LDURSBWi
    2248182598U,	// LDURSBXi
    2248188511U,	// LDURSHWi
    2248188511U,	// LDURSHXi
    2248193364U,	// LDURSWi
    2248189400U,	// LDURSi
    2248189400U,	// LDURWi
    2248189400U,	// LDURXi
    67151109U,	// LDXPW
    67151109U,	// LDXPX
    2248182545U,	// LDXRB
    2248188458U,	// LDXRH
    2248189419U,	// LDXRW
    2248189419U,	// LDXRX
    0U,	// LOADgot
    2214634442U,	// LSLVWr
    2214634442U,	// LSLVXr
    2214634935U,	// LSRVWr
    2214634935U,	// LSRVXr
    2214629861U,	// MADDWrrr
    2214629861U,	// MADDXrrr
    2281751139U,	// MLAv16i8
    2281760474U,	// MLAv2i32
    2281760474U,	// MLAv2i32_indexed
    2281755530U,	// MLAv4i16
    2281755530U,	// MLAv4i16_indexed
    2281762291U,	// MLAv4i32
    2281762291U,	// MLAv4i32_indexed
    2281757356U,	// MLAv8i16
    2281757356U,	// MLAv8i16_indexed
    2281752060U,	// MLAv8i8
    2281751762U,	// MLSv16i8
    2281761472U,	// MLSv2i32
    2281761472U,	// MLSv2i32_indexed
    2281756505U,	// MLSv4i16
    2281756505U,	// MLSv4i16_indexed
    2281763403U,	// MLSv4i32
    2281763403U,	// MLSv4i32_indexed
    2281758377U,	// MLSv8i16
    2281758377U,	// MLSv8i16_indexed
    2281752708U,	// MLSv8i8
    872456864U,	// MOVID
    939541405U,	// MOVIv16b_ns
    872435328U,	// MOVIv2d_ns
    3087034518U,	// MOVIv2i32
    3087034518U,	// MOVIv2s_msl
    3087029551U,	// MOVIv4i16
    3087036357U,	// MOVIv4i32
    3087036357U,	// MOVIv4s_msl
    939542257U,	// MOVIv8b_ns
    3087031377U,	// MOVIv8i16
    335585963U,	// MOVKWi
    335585963U,	// MOVKXi
    3087049908U,	// MOVNWi
    3087049908U,	// MOVNXi
    3087054311U,	// MOVZWi
    3087054311U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    1006679139U,	// MRS
    665020U,	// MSR
    681404U,	// MSRpstateImm1
    681404U,	// MSRpstateImm4
    2214628189U,	// MSUBWrrr
    2214628189U,	// MSUBXrrr
    2147501065U,	// MULv16i8
    2147510512U,	// MULv2i32
    2147510512U,	// MULv2i32_indexed
    2147505545U,	// MULv4i16
    2147505545U,	// MULv4i16_indexed
    2147512547U,	// MULv4i32
    2147512547U,	// MULv4i32_indexed
    2147507541U,	// MULv8i16
    2147507541U,	// MULv8i16_indexed
    2147501907U,	// MULv8i8
    3087034490U,	// MVNIv2i32
    3087034490U,	// MVNIv2s_msl
    3087029523U,	// MVNIv4i16
    3087036329U,	// MVNIv4i32
    3087036329U,	// MVNIv4s_msl
    3087031349U,	// MVNIv8i16
    17272U,	// NEGv16i8
    67146316U,	// NEGv1i64
    26660U,	// NEGv2i32
    20042U,	// NEGv2i64
    21693U,	// NEGv4i16
    28487U,	// NEGv4i32
    23519U,	// NEGv8i16
    18128U,	// NEGv8i8
    17666U,	// NOTv16i8
    18607U,	// NOTv8i8
    0U,	// ORNWrr
    2214634615U,	// ORNWrs
    0U,	// ORNXrr
    2214634615U,	// ORNXrs
    2147501094U,	// ORNv16i8
    2147502001U,	// ORNv8i8
    2214634925U,	// ORRWri
    0U,	// ORRWrr
    2214634925U,	// ORRWrs
    2214634925U,	// ORRXri
    0U,	// ORRXrr
    2214634925U,	// ORRXrs
    2147501227U,	// ORRv16i8
    335604360U,	// ORRv2i32
    335599393U,	// ORRv4i16
    335606291U,	// ORRv4i32
    335601265U,	// ORRv8i16
    2147502177U,	// ORRv8i8
    67141765U,	// PACDA
    67144108U,	// PACDB
    1081633U,	// PACDZA
    1084299U,	// PACDZB
    2214625435U,	// PACGA
    67141794U,	// PACIA
    13946U,	// PACIA1716
    14067U,	// PACIASP
    14119U,	// PACIAZ
    67144130U,	// PACIB
    13966U,	// PACIB1716
    14083U,	// PACIBSP
    14133U,	// PACIBZ
    1081649U,	// PACIZA
    1084315U,	// PACIZB
    2147506569U,	// PMULLv16i8
    2147509539U,	// PMULLv1i64
    2147509528U,	// PMULLv2i64
    2147507490U,	// PMULLv8i8
    2147501064U,	// PMULv16i8
    2147501906U,	// PMULv8i8
    403350543U,	// PRFMl
    2248844303U,	// PRFMroW
    2248844303U,	// PRFMroX
    2248844303U,	// PRFMui
    2248844333U,	// PRFUMi
    2147510564U,	// RADDHNv2i64_v2i32
    2281762067U,	// RADDHNv2i64_v4i32
    2147505597U,	// RADDHNv4i32_v4i16
    2281757132U,	// RADDHNv4i32_v8i16
    2281750934U,	// RADDHNv8i16_v16i8
    2147501926U,	// RADDHNv8i16_v8i8
    67155105U,	// RBITWr
    67155105U,	// RBITXr
    17637U,	// RBITv16i8
    18581U,	// RBITv8i8
    1094791U,	// RET
    14032U,	// RETAA
    14039U,	// RETAB
    0U,	// RET_ReallyLR
    67141738U,	// REV16Wr
    67141738U,	// REV16Xr
    16964U,	// REV16v16i8
    17888U,	// REV16v8i8
    67141656U,	// REV32Xr
    16766U,	// REV32v16i8
    21319U,	// REV32v4i16
    22779U,	// REV32v8i16
    17841U,	// REV32v8i8
    16953U,	// REV64v16i8
    26300U,	// REV64v2i32
    21356U,	// REV64v4i16
    28117U,	// REV64v4i32
    23182U,	// REV64v8i16
    17878U,	// REV64v8i8
    67155209U,	// REVWr
    67155209U,	// REVXr
    2214634913U,	// RORVWr
    2214634913U,	// RORVXr
    2281750975U,	// RSHRNv16i8_shift
    2147510626U,	// RSHRNv2i32_shift
    2147505659U,	// RSHRNv4i16_shift
    2281762105U,	// RSHRNv4i32_shift
    2281757170U,	// RSHRNv8i16_shift
    2147501979U,	// RSHRNv8i8_shift
    2147510553U,	// RSUBHNv2i64_v2i32
    2281762055U,	// RSUBHNv2i64_v4i32
    2147505586U,	// RSUBHNv4i32_v4i16
    2281757120U,	// RSUBHNv4i32_v8i16
    2281750921U,	// RSUBHNv8i16_v16i8
    2147501915U,	// RSUBHNv8i16_v8i8
    2281756933U,	// SABALv16i8_v8i16
    2281754249U,	// SABALv2i32_v2i64
    2281762766U,	// SABALv4i16_v4i32
    2281753679U,	// SABALv4i32_v2i64
    2281761840U,	// SABALv8i16_v4i32
    2281757786U,	// SABALv8i8_v8i16
    2281751119U,	// SABAv16i8
    2281760454U,	// SABAv2i32
    2281755510U,	// SABAv4i16
    2281762271U,	// SABAv4i32
    2281757336U,	// SABAv8i16
    2281752042U,	// SABAv8i8
    2147506503U,	// SABDLv16i8_v8i16
    2147503825U,	// SABDLv2i32_v2i64
    2147512342U,	// SABDLv4i16_v4i32
    2147503262U,	// SABDLv4i32_v2i64
    2147511423U,	// SABDLv8i16_v4i32
    2147507350U,	// SABDLv8i8_v8i16
    2147500770U,	// SABDv16i8
    2147510110U,	// SABDv2i32
    2147505166U,	// SABDv4i16
    2147511937U,	// SABDv4i32
    2147506992U,	// SABDv8i16
    2147501658U,	// SABDv8i8
    134274478U,	// SADALPv16i8_v8i16
    134269960U,	// SADALPv2i32_v1i64
    134277573U,	// SADALPv4i16_v2i32
    134270949U,	// SADALPv4i32_v2i64
    134279504U,	// SADALPv8i16_v4i32
    134272606U,	// SADALPv8i8_v4i16
    24004U,	// SADDLPv16i8_v8i16
    19486U,	// SADDLPv2i32_v1i64
    27099U,	// SADDLPv4i16_v2i32
    20475U,	// SADDLPv4i32_v2i64
    29030U,	// SADDLPv8i16_v4i32
    22132U,	// SADDLPv8i8_v4i16
    34101U,	// SADDLVv16i8v
    38954U,	// SADDLVv4i16v
    45852U,	// SADDLVv4i32v
    40826U,	// SADDLVv8i16v
    35037U,	// SADDLVv8i8v
    2147506525U,	// SADDLv16i8_v8i16
    2147503845U,	// SADDLv2i32_v2i64
    2147512362U,	// SADDLv4i16_v4i32
    2147503284U,	// SADDLv4i32_v2i64
    2147511445U,	// SADDLv8i16_v4i32
    2147507370U,	// SADDLv8i8_v8i16
    2147506808U,	// SADDWv16i8_v8i16
    2147504525U,	// SADDWv2i32_v2i64
    2147513251U,	// SADDWv4i16_v4i32
    2147503447U,	// SADDWv4i32_v2i64
    2147511743U,	// SADDWv8i16_v4i32
    2147508225U,	// SADDWv8i8_v8i16
    2214638618U,	// SBCSWr
    2214638618U,	// SBCSXr
    2214628267U,	// SBCWr
    2214628267U,	// SBCXr
    2214634499U,	// SBFMWri
    2214634499U,	// SBFMXri
    2214629949U,	// SCVTFSWDri
    2214629949U,	// SCVTFSWHri
    2214629949U,	// SCVTFSWSri
    2214629949U,	// SCVTFSXDri
    2214629949U,	// SCVTFSXHri
    2214629949U,	// SCVTFSXSri
    67146301U,	// SCVTFUWDri
    67146301U,	// SCVTFUWHri
    67146301U,	// SCVTFUWSri
    67146301U,	// SCVTFUXDri
    67146301U,	// SCVTFUXHri
    67146301U,	// SCVTFUXSri
    2214629949U,	// SCVTFd
    2214629949U,	// SCVTFh
    2214629949U,	// SCVTFs
    67146301U,	// SCVTFv1i16
    67146301U,	// SCVTFv1i32
    67146301U,	// SCVTFv1i64
    26639U,	// SCVTFv2f32
    20021U,	// SCVTFv2f64
    2147510287U,	// SCVTFv2i32_shift
    2147503669U,	// SCVTFv2i64_shift
    21672U,	// SCVTFv4f16
    28466U,	// SCVTFv4f32
    2147505320U,	// SCVTFv4i16_shift
    2147512114U,	// SCVTFv4i32_shift
    23498U,	// SCVTFv8f16
    2147507146U,	// SCVTFv8i16_shift
    2214638868U,	// SDIVWr
    2214638868U,	// SDIVXr
    14109U,	// SDOT2S
    14109U,	// SDOT4S
    2281764025U,	// SDOTIDX2S
    2281764025U,	// SDOTIDX4S
    2416111206U,	// SHA1Crrr
    67146471U,	// SHA1Hrr
    2416111851U,	// SHA1Mrrr
    2416111932U,	// SHA1Prrr
    2281761748U,	// SHA1SU0rrr
    134278153U,	// SHA1SU1rr
    2416110627U,	// SHA256H2rrr
    2416111449U,	// SHA256Hrrr
    134278112U,	// SHA256SU0rr
    2281761813U,	// SHA256SU1rrr
    2147500814U,	// SHADDv16i8
    2147510169U,	// SHADDv2i32
    2147505225U,	// SHADDv4i16
    2147511996U,	// SHADDv4i32
    2147507051U,	// SHADDv8i16
    2147501698U,	// SHADDv8i8
    22900U,	// SHLLv16i8
    2147503946U,	// SHLLv2i32
    28815U,	// SHLLv4i16
    2147503307U,	// SHLLv4i32
    27820U,	// SHLLv8i16
    23823U,	// SHLLv8i8
    2214634322U,	// SHLd
    2147500969U,	// SHLv16i8_shift
    2147510433U,	// SHLv2i32_shift
    2147503867U,	// SHLv2i64_shift
    2147505466U,	// SHLv4i16_shift
    2147512384U,	// SHLv4i32_shift
    2147507392U,	// SHLv8i16_shift
    2147501820U,	// SHLv8i8_shift
    2281750949U,	// SHRNv16i8_shift
    2147510604U,	// SHRNv2i32_shift
    2147505637U,	// SHRNv4i16_shift
    2281762081U,	// SHRNv4i32_shift
    2281757146U,	// SHRNv8i16_shift
    2147501957U,	// SHRNv8i8_shift
    2147500694U,	// SHSUBv16i8
    2147510053U,	// SHSUBv2i32
    2147505109U,	// SHSUBv4i16
    2147511870U,	// SHSUBv4i32
    2147506935U,	// SHSUBv8i16
    2147501610U,	// SHSUBv8i8
    2416108174U,	// SLId
    2281751435U,	// SLIv16i8_shift
    2281760882U,	// SLIv2i32_shift
    2281754213U,	// SLIv2i64_shift
    2281755915U,	// SLIv4i16_shift
    2281762721U,	// SLIv4i32_shift
    2281757741U,	// SLIv8i16_shift
    2281752289U,	// SLIv8i8_shift
    2214634297U,	// SMADDLrrr
    2147501144U,	// SMAXPv16i8
    2147510852U,	// SMAXPv2i32
    2147505885U,	// SMAXPv4i16
    2147512783U,	// SMAXPv4i32
    2147507757U,	// SMAXPv8i16
    2147502102U,	// SMAXPv8i8
    34147U,	// SMAXVv16i8v
    39049U,	// SMAXVv4i16v
    45947U,	// SMAXVv4i32v
    40921U,	// SMAXVv8i16v
    35079U,	// SMAXVv8i8v
    2147501433U,	// SMAXv16i8
    2147511194U,	// SMAXv2i32
    2147506342U,	// SMAXv4i16
    2147513280U,	// SMAXv4i32
    2147508254U,	// SMAXv8i16
    2147502363U,	// SMAXv8i8
    150458U,	// SMC
    2147501113U,	// SMINPv16i8
    2147510803U,	// SMINPv2i32
    2147505836U,	// SMINPv4i16
    2147512734U,	// SMINPv4i32
    2147507708U,	// SMINPv8i16
    2147502074U,	// SMINPv8i8
    34125U,	// SMINVv16i8v
    39010U,	// SMINVv4i16v
    45908U,	// SMINVv4i32v
    40882U,	// SMINVv8i16v
    35059U,	// SMINVv8i8v
    2147501074U,	// SMINv16i8
    2147510584U,	// SMINv2i32
    2147505617U,	// SMINv4i16
    2147512607U,	// SMINv4i32
    2147507591U,	// SMINv8i16
    2147501937U,	// SMINv8i8
    2281756955U,	// SMLALv16i8_v8i16
    2281754281U,	// SMLALv2i32_indexed
    2281754281U,	// SMLALv2i32_v2i64
    2281762798U,	// SMLALv4i16_indexed
    2281762798U,	// SMLALv4i16_v4i32
    2281753714U,	// SMLALv4i32_indexed
    2281753714U,	// SMLALv4i32_v2i64
    2281761875U,	// SMLALv8i16_indexed
    2281761875U,	// SMLALv8i16_v4i32
    2281757806U,	// SMLALv8i8_v8i16
    2281757098U,	// SMLSLv16i8_v8i16
    2281754505U,	// SMLSLv2i32_indexed
    2281754505U,	// SMLSLv2i32_v2i64
    2281763022U,	// SMLSLv4i16_indexed
    2281763022U,	// SMLSLv4i16_v4i32
    2281753872U,	// SMLSLv4i32_indexed
    2281753872U,	// SMLSLv4i32_v2i64
    2281762033U,	// SMLSLv8i16_indexed
    2281762033U,	// SMLSLv8i16_v4i32
    2281758016U,	// SMLSLv8i8_v8i16
    37582U,	// SMOVvi16to32
    37582U,	// SMOVvi16to64
    42605U,	// SMOVvi32to64
    33096U,	// SMOVvi8to32
    33096U,	// SMOVvi8to64
    2214634273U,	// SMSUBLrrr
    2214633866U,	// SMULHrr
    2147506580U,	// SMULLv16i8_v8i16
    2147503977U,	// SMULLv2i32_indexed
    2147503977U,	// SMULLv2i32_v2i64
    2147512494U,	// SMULLv4i16_indexed
    2147512494U,	// SMULLv4i16_v4i32
    2147503341U,	// SMULLv4i32_indexed
    2147503341U,	// SMULLv4i32_v2i64
    2147511502U,	// SMULLv8i16_indexed
    2147511502U,	// SMULLv8i16_v4i32
    2147507500U,	// SMULLv8i8_v8i16
    17588U,	// SQABSv16i8
    67154957U,	// SQABSv1i16
    67154957U,	// SQABSv1i32
    67154957U,	// SQABSv1i64
    67154957U,	// SQABSv1i8
    27300U,	// SQABSv2i32
    20628U,	// SQABSv2i64
    22333U,	// SQABSv4i16
    29231U,	// SQABSv4i32
    24205U,	// SQABSv8i16
    18537U,	// SQABSv8i8
    2147500837U,	// SQADDv16i8
    2214629876U,	// SQADDv1i16
    2214629876U,	// SQADDv1i32
    2214629876U,	// SQADDv1i64
    2214629876U,	// SQADDv1i8
    2147510190U,	// SQADDv2i32
    2147503595U,	// SQADDv2i64
    2147505246U,	// SQADDv4i16
    2147512017U,	// SQADDv4i32
    2147507072U,	// SQADDv8i16
    2147501719U,	// SQADDv8i8
    2416108218U,	// SQDMLALi16
    2416108218U,	// SQDMLALi32
    2416104086U,	// SQDMLALv1i32_indexed
    2416109109U,	// SQDMLALv1i64_indexed
    2281754269U,	// SQDMLALv2i32_indexed
    2281754269U,	// SQDMLALv2i32_v2i64
    2281762786U,	// SQDMLALv4i16_indexed
    2281762786U,	// SQDMLALv4i16_v4i32
    2281753701U,	// SQDMLALv4i32_indexed
    2281753701U,	// SQDMLALv4i32_v2i64
    2281761862U,	// SQDMLALv8i16_indexed
    2281761862U,	// SQDMLALv8i16_v4i32
    2416108486U,	// SQDMLSLi16
    2416108486U,	// SQDMLSLi32
    2416104108U,	// SQDMLSLv1i32_indexed
    2416109131U,	// SQDMLSLv1i64_indexed
    2281754493U,	// SQDMLSLv2i32_indexed
    2281754493U,	// SQDMLSLv2i32_v2i64
    2281763010U,	// SQDMLSLv4i16_indexed
    2281763010U,	// SQDMLSLv4i16_v4i32
    2281753859U,	// SQDMLSLv4i32_indexed
    2281753859U,	// SQDMLSLv4i32_v2i64
    2281762020U,	// SQDMLSLv8i16_indexed
    2281762020U,	// SQDMLSLv8i16_v4i32
    2214633847U,	// SQDMULHv1i16
    2214630003U,	// SQDMULHv1i16_indexed
    2214633847U,	// SQDMULHv1i32
    2214635026U,	// SQDMULHv1i32_indexed
    2147510339U,	// SQDMULHv2i32
    2147510339U,	// SQDMULHv2i32_indexed
    2147505372U,	// SQDMULHv4i16
    2147505372U,	// SQDMULHv4i16_indexed
    2147512178U,	// SQDMULHv4i32
    2147512178U,	// SQDMULHv4i32_indexed
    2147507198U,	// SQDMULHv8i16
    2147507198U,	// SQDMULHv8i16_indexed
    2214634376U,	// SQDMULLi16
    2214634376U,	// SQDMULLi32
    2214630049U,	// SQDMULLv1i32_indexed
    2214635072U,	// SQDMULLv1i64_indexed
    2147503965U,	// SQDMULLv2i32_indexed
    2147503965U,	// SQDMULLv2i32_v2i64
    2147512482U,	// SQDMULLv4i16_indexed
    2147512482U,	// SQDMULLv4i16_v4i32
    2147503328U,	// SQDMULLv4i32_indexed
    2147503328U,	// SQDMULLv4i32_v2i64
    2147511489U,	// SQDMULLv8i16_indexed
    2147511489U,	// SQDMULLv8i16_v4i32
    17270U,	// SQNEGv16i8
    67146321U,	// SQNEGv1i16
    67146321U,	// SQNEGv1i32
    67146321U,	// SQNEGv1i64
    67146321U,	// SQNEGv1i8
    26668U,	// SQNEGv2i32
    20050U,	// SQNEGv2i64
    21701U,	// SQNEGv4i16
    28495U,	// SQNEGv4i32
    23527U,	// SQNEGv8i16
    18126U,	// SQNEGv8i8
    2416104039U,	// SQRDMLAHi16_indexed
    2416109062U,	// SQRDMLAHi32_indexed
    2416107617U,	// SQRDMLAHv1i16
    2416107617U,	// SQRDMLAHv1i32
    2281760822U,	// SQRDMLAHv2i32
    2281760822U,	// SQRDMLAHv2i32_indexed
    2281755855U,	// SQRDMLAHv4i16
    2281755855U,	// SQRDMLAHv4i16_indexed
    2281762661U,	// SQRDMLAHv4i32
    2281762661U,	// SQRDMLAHv4i32_indexed
    2281757681U,	// SQRDMLAHv8i16
    2281757681U,	// SQRDMLAHv8i16_indexed
    2416104074U,	// SQRDMLSHi16_indexed
    2416109097U,	// SQRDMLSHi32_indexed
    2416108102U,	// SQRDMLSHv1i16
    2416108102U,	// SQRDMLSHv1i32
    2281760860U,	// SQRDMLSHv2i32
    2281760860U,	// SQRDMLSHv2i32_indexed
    2281755893U,	// SQRDMLSHv4i16
    2281755893U,	// SQRDMLSHv4i16_indexed
    2281762699U,	// SQRDMLSHv4i32
    2281762699U,	// SQRDMLSHv4i32_indexed
    2281757719U,	// SQRDMLSHv8i16
    2281757719U,	// SQRDMLSHv8i16_indexed
    2214633856U,	// SQRDMULHv1i16
    2214630014U,	// SQRDMULHv1i16_indexed
    2214633856U,	// SQRDMULHv1i32
    2214635037U,	// SQRDMULHv1i32_indexed
    2147510351U,	// SQRDMULHv2i32
    2147510351U,	// SQRDMULHv2i32_indexed
    2147505384U,	// SQRDMULHv4i16
    2147505384U,	// SQRDMULHv4i16_indexed
    2147512190U,	// SQRDMULHv4i32
    2147512190U,	// SQRDMULHv4i32_indexed
    2147507210U,	// SQRDMULHv8i16
    2147507210U,	// SQRDMULHv8i16_indexed
    2147500989U,	// SQRSHLv16i8
    2214634334U,	// SQRSHLv1i16
    2214634334U,	// SQRSHLv1i32
    2214634334U,	// SQRSHLv1i64
    2214634334U,	// SQRSHLv1i8
    2147510451U,	// SQRSHLv2i32
    2147503885U,	// SQRSHLv2i64
    2147505484U,	// SQRSHLv4i16
    2147512402U,	// SQRSHLv4i32
    2147507410U,	// SQRSHLv8i16
    2147501838U,	// SQRSHLv8i8
    2214634597U,	// SQRSHRNb
    2214634597U,	// SQRSHRNh
    2214634597U,	// SQRSHRNs
    2281750973U,	// SQRSHRNv16i8_shift
    2147510624U,	// SQRSHRNv2i32_shift
    2147505657U,	// SQRSHRNv4i16_shift
    2281762103U,	// SQRSHRNv4i32_shift
    2281757168U,	// SQRSHRNv8i16_shift
    2147501977U,	// SQRSHRNv8i8_shift
    2214634658U,	// SQRSHRUNb
    2214634658U,	// SQRSHRUNh
    2214634658U,	// SQRSHRUNs
    2281751049U,	// SQRSHRUNv16i8_shift
    2147510691U,	// SQRSHRUNv2i32_shift
    2147505724U,	// SQRSHRUNv4i16_shift
    2281762173U,	// SQRSHRUNv4i32_shift
    2281757238U,	// SQRSHRUNv8i16_shift
    2147502041U,	// SQRSHRUNv8i8_shift
    2214638817U,	// SQSHLUb
    2214638817U,	// SQSHLUd
    2214638817U,	// SQSHLUh
    2214638817U,	// SQSHLUs
    2147501343U,	// SQSHLUv16i8_shift
    2147511112U,	// SQSHLUv2i32_shift
    2147504432U,	// SQSHLUv2i64_shift
    2147506145U,	// SQSHLUv4i16_shift
    2147513043U,	// SQSHLUv4i32_shift
    2147508017U,	// SQSHLUv8i16_shift
    2147502281U,	// SQSHLUv8i8_shift
    2214634320U,	// SQSHLb
    2214634320U,	// SQSHLd
    2214634320U,	// SQSHLh
    2214634320U,	// SQSHLs
    2147500967U,	// SQSHLv16i8
    2147500967U,	// SQSHLv16i8_shift
    2214634320U,	// SQSHLv1i16
    2214634320U,	// SQSHLv1i32
    2214634320U,	// SQSHLv1i64
    2214634320U,	// SQSHLv1i8
    2147510431U,	// SQSHLv2i32
    2147510431U,	// SQSHLv2i32_shift
    2147503865U,	// SQSHLv2i64
    2147503865U,	// SQSHLv2i64_shift
    2147505464U,	// SQSHLv4i16
    2147505464U,	// SQSHLv4i16_shift
    2147512382U,	// SQSHLv4i32
    2147512382U,	// SQSHLv4i32_shift
    2147507390U,	// SQSHLv8i16
    2147507390U,	// SQSHLv8i16_shift
    2147501818U,	// SQSHLv8i8
    2147501818U,	// SQSHLv8i8_shift
    2214634581U,	// SQSHRNb
    2214634581U,	// SQSHRNh
    2214634581U,	// SQSHRNs
    2281750947U,	// SQSHRNv16i8_shift
    2147510602U,	// SQSHRNv2i32_shift
    2147505635U,	// SQSHRNv4i16_shift
    2281762079U,	// SQSHRNv4i32_shift
    2281757144U,	// SQSHRNv8i16_shift
    2147501955U,	// SQSHRNv8i8_shift
    2214634649U,	// SQSHRUNb
    2214634649U,	// SQSHRUNh
    2214634649U,	// SQSHRUNs
    2281751035U,	// SQSHRUNv16i8_shift
    2147510679U,	// SQSHRUNv2i32_shift
    2147505712U,	// SQSHRUNv4i16_shift
    2281762160U,	// SQSHRUNv4i32_shift
    2281757225U,	// SQSHRUNv8i16_shift
    2147502029U,	// SQSHRUNv8i8_shift
    2147500716U,	// SQSUBv16i8
    2214628203U,	// SQSUBv1i16
    2214628203U,	// SQSUBv1i32
    2214628203U,	// SQSUBv1i64
    2214628203U,	// SQSUBv1i8
    2147510073U,	// SQSUBv2i32
    2147503546U,	// SQSUBv2i64
    2147505129U,	// SQSUBv4i16
    2147511890U,	// SQSUBv4i32
    2147506955U,	// SQSUBv8i16
    2147501630U,	// SQSUBv8i8
    134267363U,	// SQXTNv16i8
    67150987U,	// SQXTNv1i16
    67150987U,	// SQXTNv1i32
    67150987U,	// SQXTNv1i8
    27011U,	// SQXTNv2i32
    22044U,	// SQXTNv4i16
    134278490U,	// SQXTNv4i32
    134273555U,	// SQXTNv8i16
    18361U,	// SQXTNv8i8
    134267416U,	// SQXTUNv16i8
    67151020U,	// SQXTUNv1i16
    67151020U,	// SQXTUNv1i32
    67151020U,	// SQXTUNv1i8
    27056U,	// SQXTUNv2i32
    22089U,	// SQXTUNv4i16
    134278539U,	// SQXTUNv4i32
    134273604U,	// SQXTUNv8i16
    18406U,	// SQXTUNv8i8
    2147500790U,	// SRHADDv16i8
    2147510147U,	// SRHADDv2i32
    2147505203U,	// SRHADDv4i16
    2147511974U,	// SRHADDv4i32
    2147507029U,	// SRHADDv8i16
    2147501676U,	// SRHADDv8i8
    2416108179U,	// SRId
    2281751444U,	// SRIv16i8_shift
    2281760899U,	// SRIv2i32_shift
    2281754221U,	// SRIv2i64_shift
    2281755932U,	// SRIv4i16_shift
    2281762738U,	// SRIv4i32_shift
    2281757758U,	// SRIv8i16_shift
    2281752297U,	// SRIv8i8_shift
    2147501013U,	// SRSHLv16i8
    2214634350U,	// SRSHLv1i64
    2147510473U,	// SRSHLv2i32
    2147503907U,	// SRSHLv2i64
    2147505506U,	// SRSHLv4i16
    2147512424U,	// SRSHLv4i32
    2147507432U,	// SRSHLv8i16
    2147501860U,	// SRSHLv8i8
    2214634855U,	// SRSHRd
    2147501176U,	// SRSHRv16i8_shift
    2147510882U,	// SRSHRv2i32_shift
    2147504218U,	// SRSHRv2i64_shift
    2147505915U,	// SRSHRv4i16_shift
    2147512813U,	// SRSHRv4i32_shift
    2147507787U,	// SRSHRv8i16_shift
    2147502131U,	// SRSHRv8i8_shift
    2416099551U,	// SRSRAd
    2281751148U,	// SRSRAv16i8_shift
    2281760491U,	// SRSRAv2i32_shift
    2281753984U,	// SRSRAv2i64_shift
    2281755547U,	// SRSRAv4i16_shift
    2281762308U,	// SRSRAv4i32_shift
    2281757373U,	// SRSRAv8i16_shift
    2281752068U,	// SRSRAv8i8_shift
    2147506547U,	// SSHLLv16i8_shift
    2147503945U,	// SSHLLv2i32_shift
    2147512462U,	// SSHLLv4i16_shift
    2147503306U,	// SSHLLv4i32_shift
    2147511467U,	// SSHLLv8i16_shift
    2147507470U,	// SSHLLv8i8_shift
    2147501035U,	// SSHLv16i8
    2214634364U,	// SSHLv1i64
    2147510493U,	// SSHLv2i32
    2147503927U,	// SSHLv2i64
    2147505526U,	// SSHLv4i16
    2147512444U,	// SSHLv4i32
    2147507452U,	// SSHLv8i16
    2147501880U,	// SSHLv8i8
    2214634869U,	// SSHRd
    2147501198U,	// SSHRv16i8_shift
    2147510902U,	// SSHRv2i32_shift
    2147504238U,	// SSHRv2i64_shift
    2147505935U,	// SSHRv4i16_shift
    2147512833U,	// SSHRv4i32_shift
    2147507807U,	// SSHRv8i16_shift
    2147502151U,	// SSHRv8i8_shift
    2416099565U,	// SSRAd
    2281751170U,	// SSRAv16i8_shift
    2281760511U,	// SSRAv2i32_shift
    2281754004U,	// SSRAv2i64_shift
    2281755567U,	// SSRAv4i16_shift
    2281762328U,	// SSRAv4i32_shift
    2281757393U,	// SSRAv8i16_shift
    2281752088U,	// SSRAv8i8_shift
    2147506481U,	// SSUBLv16i8_v8i16
    2147503805U,	// SSUBLv2i32_v2i64
    2147512322U,	// SSUBLv4i16_v4i32
    2147503240U,	// SSUBLv4i32_v2i64
    2147511401U,	// SSUBLv8i16_v4i32
    2147507330U,	// SSUBLv8i8_v8i16
    2147506786U,	// SSUBWv16i8_v8i16
    2147504505U,	// SSUBWv2i32_v2i64
    2147513231U,	// SSUBWv4i16_v4i32
    2147503425U,	// SSUBWv4i32_v2i64
    2147511721U,	// SSUBWv8i16_v4i32
    2147508205U,	// SSUBWv8i8_v8i16
    262163U,	// ST1Fourv16b
    9715731U,	// ST1Fourv16b_POST
    294931U,	// ST1Fourv1d
    10797075U,	// ST1Fourv1d_POST
    327699U,	// ST1Fourv2d
    9781267U,	// ST1Fourv2d_POST
    360467U,	// ST1Fourv2s
    10862611U,	// ST1Fourv2s_POST
    393235U,	// ST1Fourv4h
    10895379U,	// ST1Fourv4h_POST
    426003U,	// ST1Fourv4s
    9879571U,	// ST1Fourv4s_POST
    458771U,	// ST1Fourv8b
    10960915U,	// ST1Fourv8b_POST
    491539U,	// ST1Fourv8h
    9945107U,	// ST1Fourv8h_POST
    262163U,	// ST1Onev16b
    11812883U,	// ST1Onev16b_POST
    294931U,	// ST1Onev1d
    12894227U,	// ST1Onev1d_POST
    327699U,	// ST1Onev2d
    11878419U,	// ST1Onev2d_POST
    360467U,	// ST1Onev2s
    12959763U,	// ST1Onev2s_POST
    393235U,	// ST1Onev4h
    12992531U,	// ST1Onev4h_POST
    426003U,	// ST1Onev4s
    11976723U,	// ST1Onev4s_POST
    458771U,	// ST1Onev8b
    13058067U,	// ST1Onev8b_POST
    491539U,	// ST1Onev8h
    12042259U,	// ST1Onev8h_POST
    262163U,	// ST1Threev16b
    17055763U,	// ST1Threev16b_POST
    294931U,	// ST1Threev1d
    18137107U,	// ST1Threev1d_POST
    327699U,	// ST1Threev2d
    17121299U,	// ST1Threev2d_POST
    360467U,	// ST1Threev2s
    18202643U,	// ST1Threev2s_POST
    393235U,	// ST1Threev4h
    18235411U,	// ST1Threev4h_POST
    426003U,	// ST1Threev4s
    17219603U,	// ST1Threev4s_POST
    458771U,	// ST1Threev8b
    18300947U,	// ST1Threev8b_POST
    491539U,	// ST1Threev8h
    17285139U,	// ST1Threev8h_POST
    262163U,	// ST1Twov16b
    10764307U,	// ST1Twov16b_POST
    294931U,	// ST1Twov1d
    11845651U,	// ST1Twov1d_POST
    327699U,	// ST1Twov2d
    10829843U,	// ST1Twov2d_POST
    360467U,	// ST1Twov2s
    11911187U,	// ST1Twov2s_POST
    393235U,	// ST1Twov4h
    11943955U,	// ST1Twov4h_POST
    426003U,	// ST1Twov4s
    10928147U,	// ST1Twov4s_POST
    458771U,	// ST1Twov8b
    12009491U,	// ST1Twov8b_POST
    491539U,	// ST1Twov8h
    10993683U,	// ST1Twov8h_POST
    704531U,	// ST1i16
    1108869139U,	// ST1i16_POST
    720915U,	// ST1i32
    1176010771U,	// ST1i32_POST
    737299U,	// ST1i64
    1243152403U,	// ST1i64_POST
    753683U,	// ST1i8
    1310294035U,	// ST1i8_POST
    262218U,	// ST2Twov16b
    10764362U,	// ST2Twov16b_POST
    327754U,	// ST2Twov2d
    10829898U,	// ST2Twov2d_POST
    360522U,	// ST2Twov2s
    11911242U,	// ST2Twov2s_POST
    393290U,	// ST2Twov4h
    11944010U,	// ST2Twov4h_POST
    426058U,	// ST2Twov4s
    10928202U,	// ST2Twov4s_POST
    458826U,	// ST2Twov8b
    12009546U,	// ST2Twov8b_POST
    491594U,	// ST2Twov8h
    10993738U,	// ST2Twov8h_POST
    704586U,	// ST2i16
    1175978058U,	// ST2i16_POST
    720970U,	// ST2i32
    1243119690U,	// ST2i32_POST
    737354U,	// ST2i64
    1377370186U,	// ST2i64_POST
    753738U,	// ST2i8
    1108967498U,	// ST2i8_POST
    262235U,	// ST3Threev16b
    17055835U,	// ST3Threev16b_POST
    327771U,	// ST3Threev2d
    17121371U,	// ST3Threev2d_POST
    360539U,	// ST3Threev2s
    18202715U,	// ST3Threev2s_POST
    393307U,	// ST3Threev4h
    18235483U,	// ST3Threev4h_POST
    426075U,	// ST3Threev4s
    17219675U,	// ST3Threev4s_POST
    458843U,	// ST3Threev8b
    18301019U,	// ST3Threev8b_POST
    491611U,	// ST3Threev8h
    17285211U,	// ST3Threev8h_POST
    704603U,	// ST3i16
    1444413531U,	// ST3i16_POST
    720987U,	// ST3i32
    1511555163U,	// ST3i32_POST
    737371U,	// ST3i64
    1578696795U,	// ST3i64_POST
    753755U,	// ST3i8
    1645838427U,	// ST3i8_POST
    262245U,	// ST4Fourv16b
    9715813U,	// ST4Fourv16b_POST
    327781U,	// ST4Fourv2d
    9781349U,	// ST4Fourv2d_POST
    360549U,	// ST4Fourv2s
    10862693U,	// ST4Fourv2s_POST
    393317U,	// ST4Fourv4h
    10895461U,	// ST4Fourv4h_POST
    426085U,	// ST4Fourv4s
    9879653U,	// ST4Fourv4s_POST
    458853U,	// ST4Fourv8b
    10960997U,	// ST4Fourv8b_POST
    491621U,	// ST4Fourv8h
    9945189U,	// ST4Fourv8h_POST
    704613U,	// ST4i16
    1243086949U,	// ST4i16_POST
    720997U,	// ST4i32
    1377337445U,	// ST4i32_POST
    737381U,	// ST4i64
    1712914533U,	// ST4i64_POST
    753765U,	// ST4i8
    1176076389U,	// ST4i8_POST
    2248182472U,	// STLLRB
    2248188385U,	// STLLRH
    2248189325U,	// STLLRW
    2248189325U,	// STLLRX
    2248182480U,	// STLRB
    2248188393U,	// STLRH
    2248189332U,	// STLRW
    2248189332U,	// STLRX
    2214634763U,	// STLXPW
    2214634763U,	// STLXPX
    67144472U,	// STLXRB
    67150385U,	// STLXRH
    67151345U,	// STLXRW
    67151345U,	// STLXRX
    67151066U,	// STNPDi
    67151066U,	// STNPQi
    67151066U,	// STNPSi
    67151066U,	// STNPWi
    67151066U,	// STNPXi
    67151092U,	// STPDi
    268625140U,	// STPDpost
    268625140U,	// STPDpre
    67151092U,	// STPQi
    268625140U,	// STPQpost
    268625140U,	// STPQpre
    67151092U,	// STPSi
    268625140U,	// STPSpost
    268625140U,	// STPSpre
    67151092U,	// STPWi
    268625140U,	// STPWpost
    268625140U,	// STPWpre
    67151092U,	// STPXi
    268625140U,	// STPXpost
    268625140U,	// STPXpre
    302172910U,	// STRBBpost
    2449656558U,	// STRBBpre
    2248182510U,	// STRBBroW
    2248182510U,	// STRBBroX
    2248182510U,	// STRBBui
    302179783U,	// STRBpost
    2449663431U,	// STRBpre
    2248189383U,	// STRBroW
    2248189383U,	// STRBroX
    2248189383U,	// STRBui
    302179783U,	// STRDpost
    2449663431U,	// STRDpre
    2248189383U,	// STRDroW
    2248189383U,	// STRDroX
    2248189383U,	// STRDui
    302178823U,	// STRHHpost
    2449662471U,	// STRHHpre
    2248188423U,	// STRHHroW
    2248188423U,	// STRHHroX
    2248188423U,	// STRHHui
    302179783U,	// STRHpost
    2449663431U,	// STRHpre
    2248189383U,	// STRHroW
    2248189383U,	// STRHroX
    2248189383U,	// STRHui
    302179783U,	// STRQpost
    2449663431U,	// STRQpre
    2248189383U,	// STRQroW
    2248189383U,	// STRQroX
    2248189383U,	// STRQui
    302179783U,	// STRSpost
    2449663431U,	// STRSpre
    2248189383U,	// STRSroW
    2248189383U,	// STRSroX
    2248189383U,	// STRSui
    302179783U,	// STRWpost
    2449663431U,	// STRWpre
    2248189383U,	// STRWroW
    2248189383U,	// STRWroX
    2248189383U,	// STRWui
    302179783U,	// STRXpost
    2449663431U,	// STRXpre
    2248189383U,	// STRXroW
    2248189383U,	// STRXroX
    2248189383U,	// STRXui
    2248182516U,	// STTRBi
    2248188429U,	// STTRHi
    2248189388U,	// STTRWi
    2248189388U,	// STTRXi
    2248182530U,	// STURBBi
    2248189406U,	// STURBi
    2248189406U,	// STURDi
    2248188443U,	// STURHHi
    2248189406U,	// STURHi
    2248189406U,	// STURQi
    2248189406U,	// STURSi
    2248189406U,	// STURWi
    2248189406U,	// STURXi
    2214634770U,	// STXPW
    2214634770U,	// STXPX
    67144480U,	// STXRB
    67150393U,	// STXRH
    67151352U,	// STXRW
    67151352U,	// STXRX
    2147510554U,	// SUBHNv2i64_v2i32
    2281762056U,	// SUBHNv2i64_v4i32
    2147505587U,	// SUBHNv4i32_v4i16
    2281757121U,	// SUBHNv4i32_v8i16
    2281750922U,	// SUBHNv8i16_v16i8
    2147501916U,	// SUBHNv8i16_v8i8
    2214638612U,	// SUBSWri
    0U,	// SUBSWrr
    2214638612U,	// SUBSWrs
    2214638612U,	// SUBSWrx
    2214638612U,	// SUBSXri
    0U,	// SUBSXrr
    2214638612U,	// SUBSXrs
    2214638612U,	// SUBSXrx
    2214638612U,	// SUBSXrx64
    2214628183U,	// SUBWri
    0U,	// SUBWrr
    2214628183U,	// SUBWrs
    2214628183U,	// SUBWrx
    2214628183U,	// SUBXri
    0U,	// SUBXrr
    2214628183U,	// SUBXrs
    2214628183U,	// SUBXrx
    2214628183U,	// SUBXrx64
    68439U,	// SUB_ZZZ_B
    84823U,	// SUB_ZZZ_D
    101207U,	// SUB_ZZZ_H
    117591U,	// SUB_ZZZ_S
    2147500696U,	// SUBv16i8
    2214628183U,	// SUBv1i64
    2147510045U,	// SUBv2i32
    2147503538U,	// SUBv2i64
    2147505101U,	// SUBv4i16
    2147511862U,	// SUBv4i32
    2147506927U,	// SUBv8i16
    2147501612U,	// SUBv8i8
    134267696U,	// SUQADDv16i8
    268620283U,	// SUQADDv1i16
    268620283U,	// SUQADDv1i32
    268620283U,	// SUQADDv1i64
    268620283U,	// SUQADDv1i8
    134277048U,	// SUQADDv2i32
    134270453U,	// SUQADDv2i64
    134272104U,	// SUQADDv4i16
    134278875U,	// SUQADDv4i32
    134273930U,	// SUQADDv8i16
    134268577U,	// SUQADDv8i8
    150475U,	// SVC
    805488978U,	// SWPAB
    805494911U,	// SWPAH
    805489136U,	// SWPALB
    805495021U,	// SWPALH
    805495519U,	// SWPALW
    805495519U,	// SWPALX
    805486793U,	// SWPAW
    805486793U,	// SWPAX
    805489317U,	// SWPB
    805495230U,	// SWPH
    805489233U,	// SWPLB
    805495118U,	// SWPLH
    805495722U,	// SWPLW
    805495722U,	// SWPLX
    805496057U,	// SWPW
    805496057U,	// SWPX
    2214634447U,	// SYSLxt
    1744876657U,	// SYSxt
    3995099932U,	// TBLv16i8Four
    3995099932U,	// TBLv16i8One
    3995099932U,	// TBLv16i8Three
    3995099932U,	// TBLv16i8Two
    1848664860U,	// TBLv8i8Four
    1848664860U,	// TBLv8i8One
    1848664860U,	// TBLv8i8Three
    1848664860U,	// TBLv8i8Two
    2214639065U,	// TBNZW
    2214639065U,	// TBNZX
    4062246266U,	// TBXv16i8Four
    4062246266U,	// TBXv16i8One
    4062246266U,	// TBXv16i8Three
    4062246266U,	// TBXv16i8Two
    1915811194U,	// TBXv8i8Four
    1915811194U,	// TBXv8i8One
    1915811194U,	// TBXv8i8Three
    1915811194U,	// TBXv8i8Two
    2214639049U,	// TBZW
    2214639049U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1095149U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    2147500384U,	// TRN1v16i8
    2147509894U,	// TRN1v2i32
    2147503156U,	// TRN1v2i64
    2147504940U,	// TRN1v4i16
    2147511278U,	// TRN1v4i32
    2147506400U,	// TRN1v8i16
    2147501462U,	// TRN1v8i8
    2147500505U,	// TRN2v16i8
    2147509921U,	// TRN2v2i32
    2147503398U,	// TRN2v2i64
    2147504977U,	// TRN2v4i16
    2147511633U,	// TRN2v4i32
    2147506698U,	// TRN2v8i16
    2147501499U,	// TRN2v8i8
    2281756944U,	// UABALv16i8_v8i16
    2281754259U,	// UABALv2i32_v2i64
    2281762776U,	// UABALv4i16_v4i32
    2281753690U,	// UABALv4i32_v2i64
    2281761851U,	// UABALv8i16_v4i32
    2281757796U,	// UABALv8i8_v8i16
    2281751129U,	// UABAv16i8
    2281760463U,	// UABAv2i32
    2281755519U,	// UABAv4i16
    2281762280U,	// UABAv4i32
    2281757345U,	// UABAv8i16
    2281752051U,	// UABAv8i8
    2147506514U,	// UABDLv16i8_v8i16
    2147503835U,	// UABDLv2i32_v2i64
    2147512352U,	// UABDLv4i16_v4i32
    2147503273U,	// UABDLv4i32_v2i64
    2147511434U,	// UABDLv8i16_v4i32
    2147507360U,	// UABDLv8i8_v8i16
    2147500780U,	// UABDv16i8
    2147510119U,	// UABDv2i32
    2147505175U,	// UABDv4i16
    2147511946U,	// UABDv4i32
    2147507001U,	// UABDv8i16
    2147501667U,	// UABDv8i8
    134274489U,	// UADALPv16i8_v8i16
    134269971U,	// UADALPv2i32_v1i64
    134277584U,	// UADALPv4i16_v2i32
    134270960U,	// UADALPv4i32_v2i64
    134279515U,	// UADALPv8i16_v4i32
    134272617U,	// UADALPv8i8_v4i16
    24015U,	// UADDLPv16i8_v8i16
    19497U,	// UADDLPv2i32_v1i64
    27110U,	// UADDLPv4i16_v2i32
    20486U,	// UADDLPv4i32_v2i64
    29041U,	// UADDLPv8i16_v4i32
    22143U,	// UADDLPv8i8_v4i16
    34113U,	// UADDLVv16i8v
    38965U,	// UADDLVv4i16v
    45863U,	// UADDLVv4i32v
    40837U,	// UADDLVv8i16v
    35048U,	// UADDLVv8i8v
    2147506536U,	// UADDLv16i8_v8i16
    2147503855U,	// UADDLv2i32_v2i64
    2147512372U,	// UADDLv4i16_v4i32
    2147503295U,	// UADDLv4i32_v2i64
    2147511456U,	// UADDLv8i16_v4i32
    2147507380U,	// UADDLv8i8_v8i16
    2147506819U,	// UADDWv16i8_v8i16
    2147504535U,	// UADDWv2i32_v2i64
    2147513261U,	// UADDWv4i16_v4i32
    2147503458U,	// UADDWv4i32_v2i64
    2147511754U,	// UADDWv8i16_v4i32
    2147508235U,	// UADDWv8i8_v8i16
    2214634505U,	// UBFMWri
    2214634505U,	// UBFMXri
    2214629956U,	// UCVTFSWDri
    2214629956U,	// UCVTFSWHri
    2214629956U,	// UCVTFSWSri
    2214629956U,	// UCVTFSXDri
    2214629956U,	// UCVTFSXHri
    2214629956U,	// UCVTFSXSri
    67146308U,	// UCVTFUWDri
    67146308U,	// UCVTFUWHri
    67146308U,	// UCVTFUWSri
    67146308U,	// UCVTFUXDri
    67146308U,	// UCVTFUXHri
    67146308U,	// UCVTFUXSri
    2214629956U,	// UCVTFd
    2214629956U,	// UCVTFh
    2214629956U,	// UCVTFs
    67146308U,	// UCVTFv1i16
    67146308U,	// UCVTFv1i32
    67146308U,	// UCVTFv1i64
    26649U,	// UCVTFv2f32
    20031U,	// UCVTFv2f64
    2147510297U,	// UCVTFv2i32_shift
    2147503679U,	// UCVTFv2i64_shift
    21682U,	// UCVTFv4f16
    28476U,	// UCVTFv4f32
    2147505330U,	// UCVTFv4i16_shift
    2147512124U,	// UCVTFv4i32_shift
    23508U,	// UCVTFv8f16
    2147507156U,	// UCVTFv8i16_shift
    2214638874U,	// UDIVWr
    2214638874U,	// UDIVXr
    14114U,	// UDOT2S
    14114U,	// UDOT4S
    2281764031U,	// UDOTIDX2S
    2281764031U,	// UDOTIDX4S
    2147500825U,	// UHADDv16i8
    2147510179U,	// UHADDv2i32
    2147505235U,	// UHADDv4i16
    2147512006U,	// UHADDv4i32
    2147507061U,	// UHADDv8i16
    2147501708U,	// UHADDv8i8
    2147500705U,	// UHSUBv16i8
    2147510063U,	// UHSUBv2i32
    2147505119U,	// UHSUBv4i16
    2147511880U,	// UHSUBv4i32
    2147506945U,	// UHSUBv8i16
    2147501620U,	// UHSUBv8i8
    2214634305U,	// UMADDLrrr
    2147501155U,	// UMAXPv16i8
    2147510862U,	// UMAXPv2i32
    2147505895U,	// UMAXPv4i16
    2147512793U,	// UMAXPv4i32
    2147507767U,	// UMAXPv8i16
    2147502112U,	// UMAXPv8i8
    34158U,	// UMAXVv16i8v
    39059U,	// UMAXVv4i16v
    45957U,	// UMAXVv4i32v
    40931U,	// UMAXVv8i16v
    35089U,	// UMAXVv8i8v
    2147501443U,	// UMAXv16i8
    2147511203U,	// UMAXv2i32
    2147506351U,	// UMAXv4i16
    2147513289U,	// UMAXv4i32
    2147508263U,	// UMAXv8i16
    2147502372U,	// UMAXv8i8
    2147501124U,	// UMINPv16i8
    2147510813U,	// UMINPv2i32
    2147505846U,	// UMINPv4i16
    2147512744U,	// UMINPv4i32
    2147507718U,	// UMINPv8i16
    2147502084U,	// UMINPv8i8
    34136U,	// UMINVv16i8v
    39020U,	// UMINVv4i16v
    45918U,	// UMINVv4i32v
    40892U,	// UMINVv8i16v
    35069U,	// UMINVv8i8v
    2147501084U,	// UMINv16i8
    2147510593U,	// UMINv2i32
    2147505626U,	// UMINv4i16
    2147512616U,	// UMINv4i32
    2147507600U,	// UMINv8i16
    2147501946U,	// UMINv8i8
    2281756966U,	// UMLALv16i8_v8i16
    2281754291U,	// UMLALv2i32_indexed
    2281754291U,	// UMLALv2i32_v2i64
    2281762808U,	// UMLALv4i16_indexed
    2281762808U,	// UMLALv4i16_v4i32
    2281753725U,	// UMLALv4i32_indexed
    2281753725U,	// UMLALv4i32_v2i64
    2281761886U,	// UMLALv8i16_indexed
    2281761886U,	// UMLALv8i16_v4i32
    2281757816U,	// UMLALv8i8_v8i16
    2281757109U,	// UMLSLv16i8_v8i16
    2281754515U,	// UMLSLv2i32_indexed
    2281754515U,	// UMLSLv2i32_v2i64
    2281763032U,	// UMLSLv4i16_indexed
    2281763032U,	// UMLSLv4i16_v4i32
    2281753883U,	// UMLSLv4i32_indexed
    2281753883U,	// UMLSLv4i32_v2i64
    2281762044U,	// UMLSLv8i16_indexed
    2281762044U,	// UMLSLv8i16_v4i32
    2281758026U,	// UMLSLv8i8_v8i16
    37590U,	// UMOVvi16
    42613U,	// UMOVvi32
    35831U,	// UMOVvi64
    33104U,	// UMOVvi8
    2214634281U,	// UMSUBLrrr
    2214633873U,	// UMULHrr
    2147506591U,	// UMULLv16i8_v8i16
    2147503987U,	// UMULLv2i32_indexed
    2147503987U,	// UMULLv2i32_v2i64
    2147512504U,	// UMULLv4i16_indexed
    2147512504U,	// UMULLv4i16_v4i32
    2147503352U,	// UMULLv4i32_indexed
    2147503352U,	// UMULLv4i32_v2i64
    2147511513U,	// UMULLv8i16_indexed
    2147511513U,	// UMULLv8i16_v4i32
    2147507510U,	// UMULLv8i8_v8i16
    2147500849U,	// UQADDv16i8
    2214629884U,	// UQADDv1i16
    2214629884U,	// UQADDv1i32
    2214629884U,	// UQADDv1i64
    2214629884U,	// UQADDv1i8
    2147510201U,	// UQADDv2i32
    2147503606U,	// UQADDv2i64
    2147505257U,	// UQADDv4i16
    2147512028U,	// UQADDv4i32
    2147507083U,	// UQADDv8i16
    2147501730U,	// UQADDv8i8
    2147501001U,	// UQRSHLv16i8
    2214634342U,	// UQRSHLv1i16
    2214634342U,	// UQRSHLv1i32
    2214634342U,	// UQRSHLv1i64
    2214634342U,	// UQRSHLv1i8
    2147510462U,	// UQRSHLv2i32
    2147503896U,	// UQRSHLv2i64
    2147505495U,	// UQRSHLv4i16
    2147512413U,	// UQRSHLv4i32
    2147507421U,	// UQRSHLv8i16
    2147501849U,	// UQRSHLv8i8
    2214634606U,	// UQRSHRNb
    2214634606U,	// UQRSHRNh
    2214634606U,	// UQRSHRNs
    2281750987U,	// UQRSHRNv16i8_shift
    2147510636U,	// UQRSHRNv2i32_shift
    2147505669U,	// UQRSHRNv4i16_shift
    2281762116U,	// UQRSHRNv4i32_shift
    2281757181U,	// UQRSHRNv8i16_shift
    2147501989U,	// UQRSHRNv8i8_shift
    2214634327U,	// UQSHLb
    2214634327U,	// UQSHLd
    2214634327U,	// UQSHLh
    2214634327U,	// UQSHLs
    2147500978U,	// UQSHLv16i8
    2147500978U,	// UQSHLv16i8_shift
    2214634327U,	// UQSHLv1i16
    2214634327U,	// UQSHLv1i32
    2214634327U,	// UQSHLv1i64
    2214634327U,	// UQSHLv1i8
    2147510441U,	// UQSHLv2i32
    2147510441U,	// UQSHLv2i32_shift
    2147503875U,	// UQSHLv2i64
    2147503875U,	// UQSHLv2i64_shift
    2147505474U,	// UQSHLv4i16
    2147505474U,	// UQSHLv4i16_shift
    2147512392U,	// UQSHLv4i32
    2147512392U,	// UQSHLv4i32_shift
    2147507400U,	// UQSHLv8i16
    2147507400U,	// UQSHLv8i16_shift
    2147501828U,	// UQSHLv8i8
    2147501828U,	// UQSHLv8i8_shift
    2214634589U,	// UQSHRNb
    2214634589U,	// UQSHRNh
    2214634589U,	// UQSHRNs
    2281750960U,	// UQSHRNv16i8_shift
    2147510613U,	// UQSHRNv2i32_shift
    2147505646U,	// UQSHRNv4i16_shift
    2281762091U,	// UQSHRNv4i32_shift
    2281757156U,	// UQSHRNv8i16_shift
    2147501966U,	// UQSHRNv8i8_shift
    2147500727U,	// UQSUBv16i8
    2214628210U,	// UQSUBv1i16
    2214628210U,	// UQSUBv1i32
    2214628210U,	// UQSUBv1i64
    2214628210U,	// UQSUBv1i8
    2147510083U,	// UQSUBv2i32
    2147503556U,	// UQSUBv2i64
    2147505139U,	// UQSUBv4i16
    2147511900U,	// UQSUBv4i32
    2147506965U,	// UQSUBv8i16
    2147501640U,	// UQSUBv8i8
    134267375U,	// UQXTNv16i8
    67150994U,	// UQXTNv1i16
    67150994U,	// UQXTNv1i32
    67150994U,	// UQXTNv1i8
    27021U,	// UQXTNv2i32
    22054U,	// UQXTNv4i16
    134278501U,	// UQXTNv4i32
    134273566U,	// UQXTNv8i16
    18371U,	// UQXTNv8i8
    26604U,	// URECPEv2i32
    28431U,	// URECPEv4i32
    2147500802U,	// URHADDv16i8
    2147510158U,	// URHADDv2i32
    2147505214U,	// URHADDv4i16
    2147511985U,	// URHADDv4i32
    2147507040U,	// URHADDv8i16
    2147501687U,	// URHADDv8i8
    2147501024U,	// URSHLv16i8
    2214634357U,	// URSHLv1i64
    2147510483U,	// URSHLv2i32
    2147503917U,	// URSHLv2i64
    2147505516U,	// URSHLv4i16
    2147512434U,	// URSHLv4i32
    2147507442U,	// URSHLv8i16
    2147501870U,	// URSHLv8i8
    2214634862U,	// URSHRd
    2147501187U,	// URSHRv16i8_shift
    2147510892U,	// URSHRv2i32_shift
    2147504228U,	// URSHRv2i64_shift
    2147505925U,	// URSHRv4i16_shift
    2147512823U,	// URSHRv4i32_shift
    2147507797U,	// URSHRv8i16_shift
    2147502141U,	// URSHRv8i8_shift
    26627U,	// URSQRTEv2i32
    28454U,	// URSQRTEv4i32
    2416099558U,	// URSRAd
    2281751159U,	// URSRAv16i8_shift
    2281760501U,	// URSRAv2i32_shift
    2281753994U,	// URSRAv2i64_shift
    2281755557U,	// URSRAv4i16_shift
    2281762318U,	// URSRAv4i32_shift
    2281757383U,	// URSRAv8i16_shift
    2281752078U,	// URSRAv8i8_shift
    2147506558U,	// USHLLv16i8_shift
    2147503955U,	// USHLLv2i32_shift
    2147512472U,	// USHLLv4i16_shift
    2147503317U,	// USHLLv4i32_shift
    2147511478U,	// USHLLv8i16_shift
    2147507480U,	// USHLLv8i8_shift
    2147501045U,	// USHLv16i8
    2214634370U,	// USHLv1i64
    2147510502U,	// USHLv2i32
    2147503936U,	// USHLv2i64
    2147505535U,	// USHLv4i16
    2147512453U,	// USHLv4i32
    2147507461U,	// USHLv8i16
    2147501889U,	// USHLv8i8
    2214634875U,	// USHRd
    2147501208U,	// USHRv16i8_shift
    2147510911U,	// USHRv2i32_shift
    2147504247U,	// USHRv2i64_shift
    2147505944U,	// USHRv4i16_shift
    2147512842U,	// USHRv4i32_shift
    2147507816U,	// USHRv8i16_shift
    2147502160U,	// USHRv8i8_shift
    134267684U,	// USQADDv16i8
    268620275U,	// USQADDv1i16
    268620275U,	// USQADDv1i32
    268620275U,	// USQADDv1i64
    268620275U,	// USQADDv1i8
    134277037U,	// USQADDv2i32
    134270442U,	// USQADDv2i64
    134272093U,	// USQADDv4i16
    134278864U,	// USQADDv4i32
    134273919U,	// USQADDv8i16
    134268566U,	// USQADDv8i8
    2416099571U,	// USRAd
    2281751180U,	// USRAv16i8_shift
    2281760520U,	// USRAv2i32_shift
    2281754013U,	// USRAv2i64_shift
    2281755576U,	// USRAv4i16_shift
    2281762337U,	// USRAv4i32_shift
    2281757402U,	// USRAv8i16_shift
    2281752097U,	// USRAv8i8_shift
    2147506492U,	// USUBLv16i8_v8i16
    2147503815U,	// USUBLv2i32_v2i64
    2147512332U,	// USUBLv4i16_v4i32
    2147503251U,	// USUBLv4i32_v2i64
    2147511412U,	// USUBLv8i16_v4i32
    2147507340U,	// USUBLv8i8_v8i16
    2147506797U,	// USUBWv16i8_v8i16
    2147504515U,	// USUBWv2i32_v2i64
    2147513241U,	// USUBWv4i16_v4i32
    2147503436U,	// USUBWv4i32_v2i64
    2147511732U,	// USUBWv8i16_v4i32
    2147508215U,	// USUBWv8i8_v8i16
    2147500404U,	// UZP1v16i8
    2147509912U,	// UZP1v2i32
    2147503174U,	// UZP1v2i64
    2147504958U,	// UZP1v4i16
    2147511296U,	// UZP1v4i32
    2147506418U,	// UZP1v8i16
    2147501480U,	// UZP1v8i8
    2147500591U,	// UZP2v16i8
    2147509939U,	// UZP2v2i32
    2147503416U,	// UZP2v2i64
    2147504995U,	// UZP2v4i16
    2147511712U,	// UZP2v4i32
    2147506777U,	// UZP2v8i16
    2147501517U,	// UZP2v8i8
    1085904U,	// XPACD
    1090177U,	// XPACI
    14045U,	// XPACLRI
    134267365U,	// XTNv16i8
    27013U,	// XTNv2i32
    22046U,	// XTNv4i16
    134278492U,	// XTNv4i32
    134273557U,	// XTNv8i16
    18363U,	// XTNv8i8
    65542U,	// ZIP1_PPP_B
    81926U,	// ZIP1_PPP_D
    98310U,	// ZIP1_PPP_H
    114694U,	// ZIP1_PPP_S
    65542U,	// ZIP1_ZZZ_B
    81926U,	// ZIP1_ZZZ_D
    98310U,	// ZIP1_ZZZ_H
    114694U,	// ZIP1_ZZZ_S
    2147500394U,	// ZIP1v16i8
    2147509903U,	// ZIP1v2i32
    2147503165U,	// ZIP1v2i64
    2147504949U,	// ZIP1v4i16
    2147511287U,	// ZIP1v4i32
    2147506409U,	// ZIP1v8i16
    2147501471U,	// ZIP1v8i8
    65597U,	// ZIP2_PPP_B
    81981U,	// ZIP2_PPP_D
    98365U,	// ZIP2_PPP_H
    114749U,	// ZIP2_PPP_S
    65597U,	// ZIP2_ZZZ_B
    81981U,	// ZIP2_ZZZ_D
    98365U,	// ZIP2_ZZZ_H
    114749U,	// ZIP2_ZZZ_S
    2147500581U,	// ZIP2v16i8
    2147509930U,	// ZIP2v2i32
    2147503407U,	// ZIP2v2i64
    2147504986U,	// ZIP2v4i16
    2147511703U,	// ZIP2v4i32
    2147506768U,	// ZIP2v8i16
    2147501508U,	// ZIP2v8i8
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    16U,	// ADDHNv2i64_v2i32
    32U,	// ADDHNv2i64_v4i32
    16U,	// ADDHNv4i32_v4i16
    32U,	// ADDHNv4i32_v8i16
    32U,	// ADDHNv8i16_v16i8
    16U,	// ADDHNv8i16_v8i8
    16U,	// ADDPv16i8
    16U,	// ADDPv2i32
    16U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    16U,	// ADDPv4i16
    16U,	// ADDPv4i32
    16U,	// ADDPv8i16
    16U,	// ADDPv8i8
    48U,	// ADDSWri
    0U,	// ADDSWrr
    64U,	// ADDSWrs
    80U,	// ADDSWrx
    48U,	// ADDSXri
    0U,	// ADDSXrr
    64U,	// ADDSXrs
    80U,	// ADDSXrx
    512U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    48U,	// ADDWri
    0U,	// ADDWrr
    64U,	// ADDWrs
    80U,	// ADDWrx
    48U,	// ADDXri
    0U,	// ADDXrr
    64U,	// ADDXrs
    80U,	// ADDXrx
    512U,	// ADDXrx64
    0U,	// ADD_ZZZ_B
    0U,	// ADD_ZZZ_D
    0U,	// ADD_ZZZ_H
    0U,	// ADD_ZZZ_S
    16U,	// ADDv16i8
    0U,	// ADDv1i64
    16U,	// ADDv2i32
    16U,	// ADDv2i64
    16U,	// ADDv4i16
    16U,	// ADDv4i32
    16U,	// ADDv8i16
    16U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    96U,	// ANDSWri
    0U,	// ANDSWrr
    64U,	// ANDSWrs
    112U,	// ANDSXri
    0U,	// ANDSXrr
    64U,	// ANDSXrs
    96U,	// ANDWri
    0U,	// ANDWrr
    64U,	// ANDWrs
    112U,	// ANDXri
    0U,	// ANDXrr
    64U,	// ANDXrs
    16U,	// ANDv16i8
    16U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// AUTDA
    0U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    0U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    0U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    1152U,	// BFMWri
    1152U,	// BFMXri
    0U,	// BICSWrr
    64U,	// BICSWrs
    0U,	// BICSXrr
    64U,	// BICSXrs
    0U,	// BICWrr
    64U,	// BICWrs
    0U,	// BICXrr
    64U,	// BICXrs
    16U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    16U,	// BICv8i8
    16U,	// BIFv16i8
    16U,	// BIFv8i8
    32U,	// BITv16i8
    32U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BLRAA
    0U,	// BLRAAZ
    0U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    0U,	// BRAA
    0U,	// BRAAZ
    0U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    32U,	// BSLv16i8
    32U,	// BSLv8i8
    0U,	// Bcc
    1665U,	// CASAB
    1665U,	// CASAH
    1665U,	// CASALB
    1665U,	// CASALH
    1665U,	// CASALW
    1665U,	// CASALX
    1665U,	// CASAW
    1665U,	// CASAX
    1665U,	// CASB
    1665U,	// CASH
    1665U,	// CASLB
    1665U,	// CASLH
    1665U,	// CASLW
    1665U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    1665U,	// CASW
    1665U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    9216U,	// CCMNWi
    9216U,	// CCMNWr
    9216U,	// CCMNXi
    9216U,	// CCMNXr
    9216U,	// CCMPWi
    9216U,	// CCMPWr
    9216U,	// CCMPXi
    9216U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    16U,	// CMEQv16i8
    1U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    1U,	// CMEQv1i64rz
    16U,	// CMEQv2i32
    1U,	// CMEQv2i32rz
    16U,	// CMEQv2i64
    1U,	// CMEQv2i64rz
    16U,	// CMEQv4i16
    1U,	// CMEQv4i16rz
    16U,	// CMEQv4i32
    1U,	// CMEQv4i32rz
    16U,	// CMEQv8i16
    1U,	// CMEQv8i16rz
    16U,	// CMEQv8i8
    1U,	// CMEQv8i8rz
    16U,	// CMGEv16i8
    1U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    1U,	// CMGEv1i64rz
    16U,	// CMGEv2i32
    1U,	// CMGEv2i32rz
    16U,	// CMGEv2i64
    1U,	// CMGEv2i64rz
    16U,	// CMGEv4i16
    1U,	// CMGEv4i16rz
    16U,	// CMGEv4i32
    1U,	// CMGEv4i32rz
    16U,	// CMGEv8i16
    1U,	// CMGEv8i16rz
    16U,	// CMGEv8i8
    1U,	// CMGEv8i8rz
    16U,	// CMGTv16i8
    1U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    1U,	// CMGTv1i64rz
    16U,	// CMGTv2i32
    1U,	// CMGTv2i32rz
    16U,	// CMGTv2i64
    1U,	// CMGTv2i64rz
    16U,	// CMGTv4i16
    1U,	// CMGTv4i16rz
    16U,	// CMGTv4i32
    1U,	// CMGTv4i32rz
    16U,	// CMGTv8i16
    1U,	// CMGTv8i16rz
    16U,	// CMGTv8i8
    1U,	// CMGTv8i8rz
    16U,	// CMHIv16i8
    0U,	// CMHIv1i64
    16U,	// CMHIv2i32
    16U,	// CMHIv2i64
    16U,	// CMHIv4i16
    16U,	// CMHIv4i32
    16U,	// CMHIv8i16
    16U,	// CMHIv8i8
    16U,	// CMHSv16i8
    0U,	// CMHSv1i64
    16U,	// CMHSv2i32
    16U,	// CMHSv2i64
    16U,	// CMHSv4i16
    16U,	// CMHSv4i32
    16U,	// CMHSv8i16
    16U,	// CMHSv8i8
    1U,	// CMLEv16i8rz
    1U,	// CMLEv1i64rz
    1U,	// CMLEv2i32rz
    1U,	// CMLEv2i64rz
    1U,	// CMLEv4i16rz
    1U,	// CMLEv4i32rz
    1U,	// CMLEv8i16rz
    1U,	// CMLEv8i8rz
    1U,	// CMLTv16i8rz
    1U,	// CMLTv1i64rz
    1U,	// CMLTv2i32rz
    1U,	// CMLTv2i64rz
    1U,	// CMLTv4i16rz
    1U,	// CMLTv4i32rz
    1U,	// CMLTv8i16rz
    1U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    16U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    16U,	// CMTSTv2i32
    16U,	// CMTSTv2i64
    16U,	// CMTSTv4i16
    16U,	// CMTSTv4i32
    16U,	// CMTSTv8i16
    16U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    2U,	// CPYi16
    2U,	// CPYi32
    2U,	// CPYi64
    2U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    9216U,	// CSELWr
    9216U,	// CSELXr
    9216U,	// CSINCWr
    9216U,	// CSINCXr
    9216U,	// CSINVWr
    9216U,	// CSINVXr
    9216U,	// CSNEGWr
    9216U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    2U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    2U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    2U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    2U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    2U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    2U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    2U,	// DUPv8i8lane
    0U,	// EONWrr
    64U,	// EONWrs
    0U,	// EONXrr
    64U,	// EONXrs
    96U,	// EORWri
    0U,	// EORWrr
    64U,	// EORWrs
    112U,	// EORXri
    0U,	// EORXrr
    64U,	// EORXrs
    16U,	// EORv16i8
    16U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    17408U,	// EXTRWrri
    17408U,	// EXTRXrri
    17424U,	// EXTv16i8
    17424U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    16U,	// FABDv2f32
    16U,	// FABDv2f64
    16U,	// FABDv4f16
    16U,	// FABDv4f32
    16U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    16U,	// FACGEv2f32
    16U,	// FACGEv2f64
    16U,	// FACGEv4f16
    16U,	// FACGEv4f32
    16U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    16U,	// FACGTv2f32
    16U,	// FACGTv2f64
    16U,	// FACGTv4f16
    16U,	// FACGTv4f32
    16U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    16U,	// FADDPv2f32
    16U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    16U,	// FADDPv4f16
    16U,	// FADDPv4f32
    16U,	// FADDPv8f16
    0U,	// FADDSrr
    16U,	// FADDv2f32
    16U,	// FADDv2f64
    16U,	// FADDv4f16
    16U,	// FADDv4f32
    16U,	// FADDv8f16
    25616U,	// FCADDv2f32
    25616U,	// FCADDv2f64
    25616U,	// FCADDv4f16
    25616U,	// FCADDv4f32
    25616U,	// FCADDv8f16
    9216U,	// FCCMPDrr
    9216U,	// FCCMPEDrr
    9216U,	// FCCMPEHrr
    9216U,	// FCCMPESrr
    9216U,	// FCCMPHrr
    9216U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    2U,	// FCMEQv1i16rz
    2U,	// FCMEQv1i32rz
    2U,	// FCMEQv1i64rz
    16U,	// FCMEQv2f32
    16U,	// FCMEQv2f64
    2U,	// FCMEQv2i32rz
    2U,	// FCMEQv2i64rz
    16U,	// FCMEQv4f16
    16U,	// FCMEQv4f32
    2U,	// FCMEQv4i16rz
    2U,	// FCMEQv4i32rz
    16U,	// FCMEQv8f16
    2U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    2U,	// FCMGEv1i16rz
    2U,	// FCMGEv1i32rz
    2U,	// FCMGEv1i64rz
    16U,	// FCMGEv2f32
    16U,	// FCMGEv2f64
    2U,	// FCMGEv2i32rz
    2U,	// FCMGEv2i64rz
    16U,	// FCMGEv4f16
    16U,	// FCMGEv4f32
    2U,	// FCMGEv4i16rz
    2U,	// FCMGEv4i32rz
    16U,	// FCMGEv8f16
    2U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    2U,	// FCMGTv1i16rz
    2U,	// FCMGTv1i32rz
    2U,	// FCMGTv1i64rz
    16U,	// FCMGTv2f32
    16U,	// FCMGTv2f64
    2U,	// FCMGTv2i32rz
    2U,	// FCMGTv2i64rz
    16U,	// FCMGTv4f16
    16U,	// FCMGTv4f32
    2U,	// FCMGTv4i16rz
    2U,	// FCMGTv4i32rz
    16U,	// FCMGTv8f16
    2U,	// FCMGTv8i16rz
    33824U,	// FCMLAv2f32
    33824U,	// FCMLAv2f64
    33824U,	// FCMLAv4f16
    43040U,	// FCMLAv4f16_indexed
    33824U,	// FCMLAv4f32
    43040U,	// FCMLAv4f32_indexed
    33824U,	// FCMLAv8f16
    43040U,	// FCMLAv8f16_indexed
    2U,	// FCMLEv1i16rz
    2U,	// FCMLEv1i32rz
    2U,	// FCMLEv1i64rz
    2U,	// FCMLEv2i32rz
    2U,	// FCMLEv2i64rz
    2U,	// FCMLEv4i16rz
    2U,	// FCMLEv4i32rz
    2U,	// FCMLEv8i16rz
    2U,	// FCMLTv1i16rz
    2U,	// FCMLTv1i32rz
    2U,	// FCMLTv1i64rz
    2U,	// FCMLTv2i32rz
    2U,	// FCMLTv2i64rz
    2U,	// FCMLTv4i16rz
    2U,	// FCMLTv4i32rz
    2U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    9216U,	// FCSELDrrr
    9216U,	// FCSELHrrr
    9216U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    3U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    3U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    4U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    4U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    16U,	// FDIVv2f32
    16U,	// FDIVv2f64
    16U,	// FDIVv4f16
    16U,	// FDIVv4f32
    16U,	// FDIVv8f16
    0U,	// FJCVTZS
    17408U,	// FMADDDrrr
    17408U,	// FMADDHrrr
    17408U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    16U,	// FMAXNMPv2f32
    16U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    16U,	// FMAXNMPv4f16
    16U,	// FMAXNMPv4f32
    16U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    16U,	// FMAXNMv2f32
    16U,	// FMAXNMv2f64
    16U,	// FMAXNMv4f16
    16U,	// FMAXNMv4f32
    16U,	// FMAXNMv8f16
    16U,	// FMAXPv2f32
    16U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    16U,	// FMAXPv4f16
    16U,	// FMAXPv4f32
    16U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    16U,	// FMAXv2f32
    16U,	// FMAXv2f64
    16U,	// FMAXv4f16
    16U,	// FMAXv4f32
    16U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    16U,	// FMINNMPv2f32
    16U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    16U,	// FMINNMPv4f16
    16U,	// FMINNMPv4f32
    16U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    16U,	// FMINNMv2f32
    16U,	// FMINNMv2f64
    16U,	// FMINNMv4f16
    16U,	// FMINNMv4f32
    16U,	// FMINNMv8f16
    16U,	// FMINPv2f32
    16U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    16U,	// FMINPv4f16
    16U,	// FMINPv4f32
    16U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    16U,	// FMINv2f32
    16U,	// FMINv2f64
    16U,	// FMINv4f16
    16U,	// FMINv4f32
    16U,	// FMINv8f16
    51232U,	// FMLAv1i16_indexed
    51232U,	// FMLAv1i32_indexed
    51232U,	// FMLAv1i64_indexed
    32U,	// FMLAv2f32
    32U,	// FMLAv2f64
    51232U,	// FMLAv2i32_indexed
    51232U,	// FMLAv2i64_indexed
    32U,	// FMLAv4f16
    32U,	// FMLAv4f32
    51232U,	// FMLAv4i16_indexed
    51232U,	// FMLAv4i32_indexed
    32U,	// FMLAv8f16
    51232U,	// FMLAv8i16_indexed
    51232U,	// FMLSv1i16_indexed
    51232U,	// FMLSv1i32_indexed
    51232U,	// FMLSv1i64_indexed
    32U,	// FMLSv2f32
    32U,	// FMLSv2f64
    51232U,	// FMLSv2i32_indexed
    51232U,	// FMLSv2i64_indexed
    32U,	// FMLSv4f16
    32U,	// FMLSv4f32
    51232U,	// FMLSv4i16_indexed
    51232U,	// FMLSv4i32_indexed
    32U,	// FMLSv8f16
    51232U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    2U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVH0
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    17408U,	// FMSUBDrrr
    17408U,	// FMSUBHrrr
    17408U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    2576U,	// FMULXv1i16_indexed
    2576U,	// FMULXv1i32_indexed
    2576U,	// FMULXv1i64_indexed
    16U,	// FMULXv2f32
    16U,	// FMULXv2f64
    2576U,	// FMULXv2i32_indexed
    2576U,	// FMULXv2i64_indexed
    16U,	// FMULXv4f16
    16U,	// FMULXv4f32
    2576U,	// FMULXv4i16_indexed
    2576U,	// FMULXv4i32_indexed
    16U,	// FMULXv8f16
    2576U,	// FMULXv8i16_indexed
    2576U,	// FMULv1i16_indexed
    2576U,	// FMULv1i32_indexed
    2576U,	// FMULv1i64_indexed
    16U,	// FMULv2f32
    16U,	// FMULv2f64
    2576U,	// FMULv2i32_indexed
    2576U,	// FMULv2i64_indexed
    16U,	// FMULv4f16
    16U,	// FMULv4f32
    2576U,	// FMULv4i16_indexed
    2576U,	// FMULv4i32_indexed
    16U,	// FMULv8f16
    2576U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    17408U,	// FNMADDDrrr
    17408U,	// FNMADDHrrr
    17408U,	// FNMADDSrrr
    17408U,	// FNMSUBDrrr
    17408U,	// FNMSUBHrrr
    17408U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    16U,	// FRECPSv2f32
    16U,	// FRECPSv2f64
    16U,	// FRECPSv4f16
    16U,	// FRECPSv4f32
    16U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    16U,	// FRSQRTSv2f32
    16U,	// FRSQRTSv2f64
    16U,	// FRSQRTSv4f16
    16U,	// FRSQRTSv4f32
    16U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    16U,	// FSUBv2f32
    16U,	// FSUBv2f64
    16U,	// FSUBv4f16
    16U,	// FSUBv4f32
    16U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    4U,	// LDAPRB
    4U,	// LDAPRH
    4U,	// LDAPRW
    4U,	// LDAPRX
    4U,	// LDARB
    4U,	// LDARH
    4U,	// LDARW
    4U,	// LDARX
    1537U,	// LDAXPW
    1537U,	// LDAXPX
    4U,	// LDAXRB
    4U,	// LDAXRH
    4U,	// LDAXRW
    4U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    4U,	// LDLARB
    4U,	// LDLARH
    4U,	// LDLARW
    4U,	// LDLARX
    58369U,	// LDNPDi
    1025U,	// LDNPQi
    9217U,	// LDNPSi
    9217U,	// LDNPWi
    58369U,	// LDNPXi
    58369U,	// LDPDi
    19585U,	// LDPDpost
    17537U,	// LDPDpre
    1025U,	// LDPQi
    27777U,	// LDPQpost
    25729U,	// LDPQpre
    9217U,	// LDPSWi
    35969U,	// LDPSWpost
    33921U,	// LDPSWpre
    9217U,	// LDPSi
    35969U,	// LDPSpost
    33921U,	// LDPSpre
    9217U,	// LDPWi
    35969U,	// LDPWpost
    33921U,	// LDPWpre
    58369U,	// LDPXi
    19585U,	// LDPXpost
    17537U,	// LDPXpre
    144U,	// LDRAAindexed
    160U,	// LDRAAwriteback
    144U,	// LDRABindexed
    160U,	// LDRABwriteback
    5U,	// LDRBBpost
    3712U,	// LDRBBpre
    41984U,	// LDRBBroW
    50176U,	// LDRBBroX
    176U,	// LDRBBui
    5U,	// LDRBpost
    3712U,	// LDRBpre
    41984U,	// LDRBroW
    50176U,	// LDRBroX
    176U,	// LDRBui
    0U,	// LDRDl
    5U,	// LDRDpost
    3712U,	// LDRDpre
    58368U,	// LDRDroW
    1024U,	// LDRDroX
    192U,	// LDRDui
    5U,	// LDRHHpost
    3712U,	// LDRHHpre
    9216U,	// LDRHHroW
    17408U,	// LDRHHroX
    208U,	// LDRHHui
    5U,	// LDRHpost
    3712U,	// LDRHpre
    9216U,	// LDRHroW
    17408U,	// LDRHroX
    208U,	// LDRHui
    0U,	// LDRQl
    5U,	// LDRQpost
    3712U,	// LDRQpre
    25600U,	// LDRQroW
    33792U,	// LDRQroX
    224U,	// LDRQui
    5U,	// LDRSBWpost
    3712U,	// LDRSBWpre
    41984U,	// LDRSBWroW
    50176U,	// LDRSBWroX
    176U,	// LDRSBWui
    5U,	// LDRSBXpost
    3712U,	// LDRSBXpre
    41984U,	// LDRSBXroW
    50176U,	// LDRSBXroX
    176U,	// LDRSBXui
    5U,	// LDRSHWpost
    3712U,	// LDRSHWpre
    9216U,	// LDRSHWroW
    17408U,	// LDRSHWroX
    208U,	// LDRSHWui
    5U,	// LDRSHXpost
    3712U,	// LDRSHXpre
    9216U,	// LDRSHXroW
    17408U,	// LDRSHXroX
    208U,	// LDRSHXui
    0U,	// LDRSWl
    5U,	// LDRSWpost
    3712U,	// LDRSWpre
    41984U,	// LDRSWroW
    50176U,	// LDRSWroX
    240U,	// LDRSWui
    0U,	// LDRSl
    5U,	// LDRSpost
    3712U,	// LDRSpre
    41984U,	// LDRSroW
    50176U,	// LDRSroX
    240U,	// LDRSui
    0U,	// LDRWl
    5U,	// LDRWpost
    3712U,	// LDRWpre
    41984U,	// LDRWroW
    50176U,	// LDRWroX
    240U,	// LDRWui
    0U,	// LDRXl
    5U,	// LDRXpost
    3712U,	// LDRXpre
    58368U,	// LDRXroW
    1024U,	// LDRXroX
    192U,	// LDRXui
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    1536U,	// LDTRBi
    1536U,	// LDTRHi
    1536U,	// LDTRSBWi
    1536U,	// LDTRSBXi
    1536U,	// LDTRSHWi
    1536U,	// LDTRSHXi
    1536U,	// LDTRSWi
    1536U,	// LDTRWi
    1536U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    1536U,	// LDURBBi
    1536U,	// LDURBi
    1536U,	// LDURDi
    1536U,	// LDURHHi
    1536U,	// LDURHi
    1536U,	// LDURQi
    1536U,	// LDURSBWi
    1536U,	// LDURSBXi
    1536U,	// LDURSHWi
    1536U,	// LDURSHXi
    1536U,	// LDURSWi
    1536U,	// LDURSi
    1536U,	// LDURWi
    1536U,	// LDURXi
    1537U,	// LDXPW
    1537U,	// LDXPX
    4U,	// LDXRB
    4U,	// LDXRH
    4U,	// LDXRW
    4U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    17408U,	// MADDWrrr
    17408U,	// MADDXrrr
    32U,	// MLAv16i8
    32U,	// MLAv2i32
    51232U,	// MLAv2i32_indexed
    32U,	// MLAv4i16
    51232U,	// MLAv4i16_indexed
    32U,	// MLAv4i32
    51232U,	// MLAv4i32_indexed
    32U,	// MLAv8i16
    51232U,	// MLAv8i16_indexed
    32U,	// MLAv8i8
    32U,	// MLSv16i8
    32U,	// MLSv2i32
    51232U,	// MLSv2i32_indexed
    32U,	// MLSv4i16
    51232U,	// MLSv4i16_indexed
    32U,	// MLSv4i32
    51232U,	// MLSv4i32_indexed
    32U,	// MLSv8i16
    51232U,	// MLSv8i16_indexed
    32U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    5U,	// MOVIv2i32
    5U,	// MOVIv2s_msl
    5U,	// MOVIv4i16
    5U,	// MOVIv4i32
    5U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    5U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    5U,	// MOVNWi
    5U,	// MOVNXi
    5U,	// MOVZWi
    5U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    17408U,	// MSUBWrrr
    17408U,	// MSUBXrrr
    16U,	// MULv16i8
    16U,	// MULv2i32
    2576U,	// MULv2i32_indexed
    16U,	// MULv4i16
    2576U,	// MULv4i16_indexed
    16U,	// MULv4i32
    2576U,	// MULv4i32_indexed
    16U,	// MULv8i16
    2576U,	// MULv8i16_indexed
    16U,	// MULv8i8
    5U,	// MVNIv2i32
    5U,	// MVNIv2s_msl
    5U,	// MVNIv4i16
    5U,	// MVNIv4i32
    5U,	// MVNIv4s_msl
    5U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    64U,	// ORNWrs
    0U,	// ORNXrr
    64U,	// ORNXrs
    16U,	// ORNv16i8
    16U,	// ORNv8i8
    96U,	// ORRWri
    0U,	// ORRWrr
    64U,	// ORRWrs
    112U,	// ORRXri
    0U,	// ORRXrr
    64U,	// ORRXrs
    16U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    16U,	// ORRv8i8
    0U,	// PACDA
    0U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    0U,	// PACGA
    0U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    0U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    16U,	// PMULLv16i8
    16U,	// PMULLv1i64
    16U,	// PMULLv2i64
    16U,	// PMULLv8i8
    16U,	// PMULv16i8
    16U,	// PMULv8i8
    0U,	// PRFMl
    58368U,	// PRFMroW
    1024U,	// PRFMroX
    192U,	// PRFMui
    1536U,	// PRFUMi
    16U,	// RADDHNv2i64_v2i32
    32U,	// RADDHNv2i64_v4i32
    16U,	// RADDHNv4i32_v4i16
    32U,	// RADDHNv4i32_v8i16
    32U,	// RADDHNv8i16_v16i8
    16U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    128U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    128U,	// RSHRNv4i32_shift
    128U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    16U,	// RSUBHNv2i64_v2i32
    32U,	// RSUBHNv2i64_v4i32
    16U,	// RSUBHNv4i32_v4i16
    32U,	// RSUBHNv4i32_v8i16
    32U,	// RSUBHNv8i16_v16i8
    16U,	// RSUBHNv8i16_v8i8
    32U,	// SABALv16i8_v8i16
    32U,	// SABALv2i32_v2i64
    32U,	// SABALv4i16_v4i32
    32U,	// SABALv4i32_v2i64
    32U,	// SABALv8i16_v4i32
    32U,	// SABALv8i8_v8i16
    32U,	// SABAv16i8
    32U,	// SABAv2i32
    32U,	// SABAv4i16
    32U,	// SABAv4i32
    32U,	// SABAv8i16
    32U,	// SABAv8i8
    16U,	// SABDLv16i8_v8i16
    16U,	// SABDLv2i32_v2i64
    16U,	// SABDLv4i16_v4i32
    16U,	// SABDLv4i32_v2i64
    16U,	// SABDLv8i16_v4i32
    16U,	// SABDLv8i8_v8i16
    16U,	// SABDv16i8
    16U,	// SABDv2i32
    16U,	// SABDv4i16
    16U,	// SABDv4i32
    16U,	// SABDv8i16
    16U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    16U,	// SADDLv16i8_v8i16
    16U,	// SADDLv2i32_v2i64
    16U,	// SADDLv4i16_v4i32
    16U,	// SADDLv4i32_v2i64
    16U,	// SADDLv8i16_v4i32
    16U,	// SADDLv8i8_v8i16
    16U,	// SADDWv16i8_v8i16
    16U,	// SADDWv2i32_v2i64
    16U,	// SADDWv4i16_v4i32
    16U,	// SADDWv4i32_v2i64
    16U,	// SADDWv8i16_v4i32
    16U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    17408U,	// SBFMWri
    17408U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDOT2S
    0U,	// SDOT4S
    51232U,	// SDOTIDX2S
    51232U,	// SDOTIDX4S
    32U,	// SHA1Crrr
    0U,	// SHA1Hrr
    32U,	// SHA1Mrrr
    32U,	// SHA1Prrr
    32U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    32U,	// SHA256H2rrr
    32U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    32U,	// SHA256SU1rrr
    16U,	// SHADDv16i8
    16U,	// SHADDv2i32
    16U,	// SHADDv4i16
    16U,	// SHADDv4i32
    16U,	// SHADDv8i16
    16U,	// SHADDv8i8
    6U,	// SHLLv16i8
    6U,	// SHLLv2i32
    7U,	// SHLLv4i16
    6U,	// SHLLv4i32
    7U,	// SHLLv8i16
    6U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    128U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    128U,	// SHRNv4i32_shift
    128U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    16U,	// SHSUBv16i8
    16U,	// SHSUBv2i32
    16U,	// SHSUBv4i16
    16U,	// SHSUBv4i32
    16U,	// SHSUBv8i16
    16U,	// SHSUBv8i8
    128U,	// SLId
    128U,	// SLIv16i8_shift
    128U,	// SLIv2i32_shift
    128U,	// SLIv2i64_shift
    128U,	// SLIv4i16_shift
    128U,	// SLIv4i32_shift
    128U,	// SLIv8i16_shift
    128U,	// SLIv8i8_shift
    17408U,	// SMADDLrrr
    16U,	// SMAXPv16i8
    16U,	// SMAXPv2i32
    16U,	// SMAXPv4i16
    16U,	// SMAXPv4i32
    16U,	// SMAXPv8i16
    16U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    16U,	// SMAXv16i8
    16U,	// SMAXv2i32
    16U,	// SMAXv4i16
    16U,	// SMAXv4i32
    16U,	// SMAXv8i16
    16U,	// SMAXv8i8
    0U,	// SMC
    16U,	// SMINPv16i8
    16U,	// SMINPv2i32
    16U,	// SMINPv4i16
    16U,	// SMINPv4i32
    16U,	// SMINPv8i16
    16U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    16U,	// SMINv16i8
    16U,	// SMINv2i32
    16U,	// SMINv4i16
    16U,	// SMINv4i32
    16U,	// SMINv8i16
    16U,	// SMINv8i8
    32U,	// SMLALv16i8_v8i16
    51232U,	// SMLALv2i32_indexed
    32U,	// SMLALv2i32_v2i64
    51232U,	// SMLALv4i16_indexed
    32U,	// SMLALv4i16_v4i32
    51232U,	// SMLALv4i32_indexed
    32U,	// SMLALv4i32_v2i64
    51232U,	// SMLALv8i16_indexed
    32U,	// SMLALv8i16_v4i32
    32U,	// SMLALv8i8_v8i16
    32U,	// SMLSLv16i8_v8i16
    51232U,	// SMLSLv2i32_indexed
    32U,	// SMLSLv2i32_v2i64
    51232U,	// SMLSLv4i16_indexed
    32U,	// SMLSLv4i16_v4i32
    51232U,	// SMLSLv4i32_indexed
    32U,	// SMLSLv4i32_v2i64
    51232U,	// SMLSLv8i16_indexed
    32U,	// SMLSLv8i16_v4i32
    32U,	// SMLSLv8i8_v8i16
    2U,	// SMOVvi16to32
    2U,	// SMOVvi16to64
    2U,	// SMOVvi32to64
    2U,	// SMOVvi8to32
    2U,	// SMOVvi8to64
    17408U,	// SMSUBLrrr
    0U,	// SMULHrr
    16U,	// SMULLv16i8_v8i16
    2576U,	// SMULLv2i32_indexed
    16U,	// SMULLv2i32_v2i64
    2576U,	// SMULLv4i16_indexed
    16U,	// SMULLv4i16_v4i32
    2576U,	// SMULLv4i32_indexed
    16U,	// SMULLv4i32_v2i64
    2576U,	// SMULLv8i16_indexed
    16U,	// SMULLv8i16_v4i32
    16U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    16U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    16U,	// SQADDv2i32
    16U,	// SQADDv2i64
    16U,	// SQADDv4i16
    16U,	// SQADDv4i32
    16U,	// SQADDv8i16
    16U,	// SQADDv8i8
    128U,	// SQDMLALi16
    128U,	// SQDMLALi32
    51232U,	// SQDMLALv1i32_indexed
    51232U,	// SQDMLALv1i64_indexed
    51232U,	// SQDMLALv2i32_indexed
    32U,	// SQDMLALv2i32_v2i64
    51232U,	// SQDMLALv4i16_indexed
    32U,	// SQDMLALv4i16_v4i32
    51232U,	// SQDMLALv4i32_indexed
    32U,	// SQDMLALv4i32_v2i64
    51232U,	// SQDMLALv8i16_indexed
    32U,	// SQDMLALv8i16_v4i32
    128U,	// SQDMLSLi16
    128U,	// SQDMLSLi32
    51232U,	// SQDMLSLv1i32_indexed
    51232U,	// SQDMLSLv1i64_indexed
    51232U,	// SQDMLSLv2i32_indexed
    32U,	// SQDMLSLv2i32_v2i64
    51232U,	// SQDMLSLv4i16_indexed
    32U,	// SQDMLSLv4i16_v4i32
    51232U,	// SQDMLSLv4i32_indexed
    32U,	// SQDMLSLv4i32_v2i64
    51232U,	// SQDMLSLv8i16_indexed
    32U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    2576U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    2576U,	// SQDMULHv1i32_indexed
    16U,	// SQDMULHv2i32
    2576U,	// SQDMULHv2i32_indexed
    16U,	// SQDMULHv4i16
    2576U,	// SQDMULHv4i16_indexed
    16U,	// SQDMULHv4i32
    2576U,	// SQDMULHv4i32_indexed
    16U,	// SQDMULHv8i16
    2576U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    2576U,	// SQDMULLv1i32_indexed
    2576U,	// SQDMULLv1i64_indexed
    2576U,	// SQDMULLv2i32_indexed
    16U,	// SQDMULLv2i32_v2i64
    2576U,	// SQDMULLv4i16_indexed
    16U,	// SQDMULLv4i16_v4i32
    2576U,	// SQDMULLv4i32_indexed
    16U,	// SQDMULLv4i32_v2i64
    2576U,	// SQDMULLv8i16_indexed
    16U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    51232U,	// SQRDMLAHi16_indexed
    51232U,	// SQRDMLAHi32_indexed
    128U,	// SQRDMLAHv1i16
    128U,	// SQRDMLAHv1i32
    32U,	// SQRDMLAHv2i32
    51232U,	// SQRDMLAHv2i32_indexed
    32U,	// SQRDMLAHv4i16
    51232U,	// SQRDMLAHv4i16_indexed
    32U,	// SQRDMLAHv4i32
    51232U,	// SQRDMLAHv4i32_indexed
    32U,	// SQRDMLAHv8i16
    51232U,	// SQRDMLAHv8i16_indexed
    51232U,	// SQRDMLSHi16_indexed
    51232U,	// SQRDMLSHi32_indexed
    128U,	// SQRDMLSHv1i16
    128U,	// SQRDMLSHv1i32
    32U,	// SQRDMLSHv2i32
    51232U,	// SQRDMLSHv2i32_indexed
    32U,	// SQRDMLSHv4i16
    51232U,	// SQRDMLSHv4i16_indexed
    32U,	// SQRDMLSHv4i32
    51232U,	// SQRDMLSHv4i32_indexed
    32U,	// SQRDMLSHv8i16
    51232U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    2576U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    2576U,	// SQRDMULHv1i32_indexed
    16U,	// SQRDMULHv2i32
    2576U,	// SQRDMULHv2i32_indexed
    16U,	// SQRDMULHv4i16
    2576U,	// SQRDMULHv4i16_indexed
    16U,	// SQRDMULHv4i32
    2576U,	// SQRDMULHv4i32_indexed
    16U,	// SQRDMULHv8i16
    2576U,	// SQRDMULHv8i16_indexed
    16U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    16U,	// SQRSHLv2i32
    16U,	// SQRSHLv2i64
    16U,	// SQRSHLv4i16
    16U,	// SQRSHLv4i32
    16U,	// SQRSHLv8i16
    16U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    128U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    128U,	// SQRSHRNv4i32_shift
    128U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    128U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    128U,	// SQRSHRUNv4i32_shift
    128U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    16U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    16U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    16U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    16U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    16U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    16U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    16U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    128U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    128U,	// SQSHRNv4i32_shift
    128U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    128U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    128U,	// SQSHRUNv4i32_shift
    128U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    16U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    16U,	// SQSUBv2i32
    16U,	// SQSUBv2i64
    16U,	// SQSUBv4i16
    16U,	// SQSUBv4i32
    16U,	// SQSUBv8i16
    16U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    16U,	// SRHADDv16i8
    16U,	// SRHADDv2i32
    16U,	// SRHADDv4i16
    16U,	// SRHADDv4i32
    16U,	// SRHADDv8i16
    16U,	// SRHADDv8i8
    128U,	// SRId
    128U,	// SRIv16i8_shift
    128U,	// SRIv2i32_shift
    128U,	// SRIv2i64_shift
    128U,	// SRIv4i16_shift
    128U,	// SRIv4i32_shift
    128U,	// SRIv8i16_shift
    128U,	// SRIv8i8_shift
    16U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    16U,	// SRSHLv2i32
    16U,	// SRSHLv2i64
    16U,	// SRSHLv4i16
    16U,	// SRSHLv4i32
    16U,	// SRSHLv8i16
    16U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    128U,	// SRSRAd
    128U,	// SRSRAv16i8_shift
    128U,	// SRSRAv2i32_shift
    128U,	// SRSRAv2i64_shift
    128U,	// SRSRAv4i16_shift
    128U,	// SRSRAv4i32_shift
    128U,	// SRSRAv8i16_shift
    128U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    16U,	// SSHLv16i8
    0U,	// SSHLv1i64
    16U,	// SSHLv2i32
    16U,	// SSHLv2i64
    16U,	// SSHLv4i16
    16U,	// SSHLv4i32
    16U,	// SSHLv8i16
    16U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    128U,	// SSRAd
    128U,	// SSRAv16i8_shift
    128U,	// SSRAv2i32_shift
    128U,	// SSRAv2i64_shift
    128U,	// SSRAv4i16_shift
    128U,	// SSRAv4i32_shift
    128U,	// SSRAv8i16_shift
    128U,	// SSRAv8i8_shift
    16U,	// SSUBLv16i8_v8i16
    16U,	// SSUBLv2i32_v2i64
    16U,	// SSUBLv4i16_v4i32
    16U,	// SSUBLv4i32_v2i64
    16U,	// SSUBLv8i16_v4i32
    16U,	// SSUBLv8i8_v8i16
    16U,	// SSUBWv16i8_v8i16
    16U,	// SSUBWv2i32_v2i64
    16U,	// SSUBWv4i16_v4i32
    16U,	// SSUBWv4i32_v2i64
    16U,	// SSUBWv8i16_v4i32
    16U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    4U,	// STLLRB
    4U,	// STLLRH
    4U,	// STLLRW
    4U,	// STLLRX
    4U,	// STLRB
    4U,	// STLRH
    4U,	// STLRW
    4U,	// STLRX
    4096U,	// STLXPW
    4096U,	// STLXPX
    1537U,	// STLXRB
    1537U,	// STLXRH
    1537U,	// STLXRW
    1537U,	// STLXRX
    58369U,	// STNPDi
    1025U,	// STNPQi
    9217U,	// STNPSi
    9217U,	// STNPWi
    58369U,	// STNPXi
    58369U,	// STPDi
    19585U,	// STPDpost
    17537U,	// STPDpre
    1025U,	// STPQi
    27777U,	// STPQpost
    25729U,	// STPQpre
    9217U,	// STPSi
    35969U,	// STPSpost
    33921U,	// STPSpre
    9217U,	// STPWi
    35969U,	// STPWpost
    33921U,	// STPWpre
    58369U,	// STPXi
    19585U,	// STPXpost
    17537U,	// STPXpre
    5U,	// STRBBpost
    3712U,	// STRBBpre
    41984U,	// STRBBroW
    50176U,	// STRBBroX
    176U,	// STRBBui
    5U,	// STRBpost
    3712U,	// STRBpre
    41984U,	// STRBroW
    50176U,	// STRBroX
    176U,	// STRBui
    5U,	// STRDpost
    3712U,	// STRDpre
    58368U,	// STRDroW
    1024U,	// STRDroX
    192U,	// STRDui
    5U,	// STRHHpost
    3712U,	// STRHHpre
    9216U,	// STRHHroW
    17408U,	// STRHHroX
    208U,	// STRHHui
    5U,	// STRHpost
    3712U,	// STRHpre
    9216U,	// STRHroW
    17408U,	// STRHroX
    208U,	// STRHui
    5U,	// STRQpost
    3712U,	// STRQpre
    25600U,	// STRQroW
    33792U,	// STRQroX
    224U,	// STRQui
    5U,	// STRSpost
    3712U,	// STRSpre
    41984U,	// STRSroW
    50176U,	// STRSroX
    240U,	// STRSui
    5U,	// STRWpost
    3712U,	// STRWpre
    41984U,	// STRWroW
    50176U,	// STRWroX
    240U,	// STRWui
    5U,	// STRXpost
    3712U,	// STRXpre
    58368U,	// STRXroW
    1024U,	// STRXroX
    192U,	// STRXui
    1536U,	// STTRBi
    1536U,	// STTRHi
    1536U,	// STTRWi
    1536U,	// STTRXi
    1536U,	// STURBBi
    1536U,	// STURBi
    1536U,	// STURDi
    1536U,	// STURHHi
    1536U,	// STURHi
    1536U,	// STURQi
    1536U,	// STURSi
    1536U,	// STURWi
    1536U,	// STURXi
    4096U,	// STXPW
    4096U,	// STXPX
    1537U,	// STXRB
    1537U,	// STXRH
    1537U,	// STXRW
    1537U,	// STXRX
    16U,	// SUBHNv2i64_v2i32
    32U,	// SUBHNv2i64_v4i32
    16U,	// SUBHNv4i32_v4i16
    32U,	// SUBHNv4i32_v8i16
    32U,	// SUBHNv8i16_v16i8
    16U,	// SUBHNv8i16_v8i8
    48U,	// SUBSWri
    0U,	// SUBSWrr
    64U,	// SUBSWrs
    80U,	// SUBSWrx
    48U,	// SUBSXri
    0U,	// SUBSXrr
    64U,	// SUBSXrs
    80U,	// SUBSXrx
    512U,	// SUBSXrx64
    48U,	// SUBWri
    0U,	// SUBWrr
    64U,	// SUBWrs
    80U,	// SUBWrx
    48U,	// SUBXri
    0U,	// SUBXrr
    64U,	// SUBXrs
    80U,	// SUBXrx
    512U,	// SUBXrx64
    0U,	// SUB_ZZZ_B
    0U,	// SUB_ZZZ_D
    0U,	// SUB_ZZZ_H
    0U,	// SUB_ZZZ_S
    16U,	// SUBv16i8
    0U,	// SUBv1i64
    16U,	// SUBv2i32
    16U,	// SUBv2i64
    16U,	// SUBv4i16
    16U,	// SUBv4i32
    16U,	// SUBv8i16
    16U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    256U,	// SYSLxt
    0U,	// SYSxt
    7U,	// TBLv16i8Four
    7U,	// TBLv16i8One
    7U,	// TBLv16i8Three
    7U,	// TBLv16i8Two
    8U,	// TBLv8i8Four
    8U,	// TBLv8i8One
    8U,	// TBLv8i8Three
    8U,	// TBLv8i8Two
    272U,	// TBNZW
    272U,	// TBNZX
    7U,	// TBXv16i8Four
    7U,	// TBXv16i8One
    7U,	// TBXv16i8Three
    7U,	// TBXv16i8Two
    8U,	// TBXv8i8Four
    8U,	// TBXv8i8One
    8U,	// TBXv8i8Three
    8U,	// TBXv8i8Two
    272U,	// TBZW
    272U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    16U,	// TRN1v16i8
    16U,	// TRN1v2i32
    16U,	// TRN1v2i64
    16U,	// TRN1v4i16
    16U,	// TRN1v4i32
    16U,	// TRN1v8i16
    16U,	// TRN1v8i8
    16U,	// TRN2v16i8
    16U,	// TRN2v2i32
    16U,	// TRN2v2i64
    16U,	// TRN2v4i16
    16U,	// TRN2v4i32
    16U,	// TRN2v8i16
    16U,	// TRN2v8i8
    32U,	// UABALv16i8_v8i16
    32U,	// UABALv2i32_v2i64
    32U,	// UABALv4i16_v4i32
    32U,	// UABALv4i32_v2i64
    32U,	// UABALv8i16_v4i32
    32U,	// UABALv8i8_v8i16
    32U,	// UABAv16i8
    32U,	// UABAv2i32
    32U,	// UABAv4i16
    32U,	// UABAv4i32
    32U,	// UABAv8i16
    32U,	// UABAv8i8
    16U,	// UABDLv16i8_v8i16
    16U,	// UABDLv2i32_v2i64
    16U,	// UABDLv4i16_v4i32
    16U,	// UABDLv4i32_v2i64
    16U,	// UABDLv8i16_v4i32
    16U,	// UABDLv8i8_v8i16
    16U,	// UABDv16i8
    16U,	// UABDv2i32
    16U,	// UABDv4i16
    16U,	// UABDv4i32
    16U,	// UABDv8i16
    16U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    16U,	// UADDLv16i8_v8i16
    16U,	// UADDLv2i32_v2i64
    16U,	// UADDLv4i16_v4i32
    16U,	// UADDLv4i32_v2i64
    16U,	// UADDLv8i16_v4i32
    16U,	// UADDLv8i8_v8i16
    16U,	// UADDWv16i8_v8i16
    16U,	// UADDWv2i32_v2i64
    16U,	// UADDWv4i16_v4i32
    16U,	// UADDWv4i32_v2i64
    16U,	// UADDWv8i16_v4i32
    16U,	// UADDWv8i8_v8i16
    17408U,	// UBFMWri
    17408U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDOT2S
    0U,	// UDOT4S
    51232U,	// UDOTIDX2S
    51232U,	// UDOTIDX4S
    16U,	// UHADDv16i8
    16U,	// UHADDv2i32
    16U,	// UHADDv4i16
    16U,	// UHADDv4i32
    16U,	// UHADDv8i16
    16U,	// UHADDv8i8
    16U,	// UHSUBv16i8
    16U,	// UHSUBv2i32
    16U,	// UHSUBv4i16
    16U,	// UHSUBv4i32
    16U,	// UHSUBv8i16
    16U,	// UHSUBv8i8
    17408U,	// UMADDLrrr
    16U,	// UMAXPv16i8
    16U,	// UMAXPv2i32
    16U,	// UMAXPv4i16
    16U,	// UMAXPv4i32
    16U,	// UMAXPv8i16
    16U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    16U,	// UMAXv16i8
    16U,	// UMAXv2i32
    16U,	// UMAXv4i16
    16U,	// UMAXv4i32
    16U,	// UMAXv8i16
    16U,	// UMAXv8i8
    16U,	// UMINPv16i8
    16U,	// UMINPv2i32
    16U,	// UMINPv4i16
    16U,	// UMINPv4i32
    16U,	// UMINPv8i16
    16U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    16U,	// UMINv16i8
    16U,	// UMINv2i32
    16U,	// UMINv4i16
    16U,	// UMINv4i32
    16U,	// UMINv8i16
    16U,	// UMINv8i8
    32U,	// UMLALv16i8_v8i16
    51232U,	// UMLALv2i32_indexed
    32U,	// UMLALv2i32_v2i64
    51232U,	// UMLALv4i16_indexed
    32U,	// UMLALv4i16_v4i32
    51232U,	// UMLALv4i32_indexed
    32U,	// UMLALv4i32_v2i64
    51232U,	// UMLALv8i16_indexed
    32U,	// UMLALv8i16_v4i32
    32U,	// UMLALv8i8_v8i16
    32U,	// UMLSLv16i8_v8i16
    51232U,	// UMLSLv2i32_indexed
    32U,	// UMLSLv2i32_v2i64
    51232U,	// UMLSLv4i16_indexed
    32U,	// UMLSLv4i16_v4i32
    51232U,	// UMLSLv4i32_indexed
    32U,	// UMLSLv4i32_v2i64
    51232U,	// UMLSLv8i16_indexed
    32U,	// UMLSLv8i16_v4i32
    32U,	// UMLSLv8i8_v8i16
    2U,	// UMOVvi16
    2U,	// UMOVvi32
    2U,	// UMOVvi64
    2U,	// UMOVvi8
    17408U,	// UMSUBLrrr
    0U,	// UMULHrr
    16U,	// UMULLv16i8_v8i16
    2576U,	// UMULLv2i32_indexed
    16U,	// UMULLv2i32_v2i64
    2576U,	// UMULLv4i16_indexed
    16U,	// UMULLv4i16_v4i32
    2576U,	// UMULLv4i32_indexed
    16U,	// UMULLv4i32_v2i64
    2576U,	// UMULLv8i16_indexed
    16U,	// UMULLv8i16_v4i32
    16U,	// UMULLv8i8_v8i16
    16U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    16U,	// UQADDv2i32
    16U,	// UQADDv2i64
    16U,	// UQADDv4i16
    16U,	// UQADDv4i32
    16U,	// UQADDv8i16
    16U,	// UQADDv8i8
    16U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    16U,	// UQRSHLv2i32
    16U,	// UQRSHLv2i64
    16U,	// UQRSHLv4i16
    16U,	// UQRSHLv4i32
    16U,	// UQRSHLv8i16
    16U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    128U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    128U,	// UQRSHRNv4i32_shift
    128U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    16U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    16U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    16U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    16U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    16U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    16U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    16U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    128U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    128U,	// UQSHRNv4i32_shift
    128U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    16U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    16U,	// UQSUBv2i32
    16U,	// UQSUBv2i64
    16U,	// UQSUBv4i16
    16U,	// UQSUBv4i32
    16U,	// UQSUBv8i16
    16U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    16U,	// URHADDv16i8
    16U,	// URHADDv2i32
    16U,	// URHADDv4i16
    16U,	// URHADDv4i32
    16U,	// URHADDv8i16
    16U,	// URHADDv8i8
    16U,	// URSHLv16i8
    0U,	// URSHLv1i64
    16U,	// URSHLv2i32
    16U,	// URSHLv2i64
    16U,	// URSHLv4i16
    16U,	// URSHLv4i32
    16U,	// URSHLv8i16
    16U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    128U,	// URSRAd
    128U,	// URSRAv16i8_shift
    128U,	// URSRAv2i32_shift
    128U,	// URSRAv2i64_shift
    128U,	// URSRAv4i16_shift
    128U,	// URSRAv4i32_shift
    128U,	// URSRAv8i16_shift
    128U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    16U,	// USHLv16i8
    0U,	// USHLv1i64
    16U,	// USHLv2i32
    16U,	// USHLv2i64
    16U,	// USHLv4i16
    16U,	// USHLv4i32
    16U,	// USHLv8i16
    16U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    128U,	// USRAd
    128U,	// USRAv16i8_shift
    128U,	// USRAv2i32_shift
    128U,	// USRAv2i64_shift
    128U,	// USRAv4i16_shift
    128U,	// USRAv4i32_shift
    128U,	// USRAv8i16_shift
    128U,	// USRAv8i8_shift
    16U,	// USUBLv16i8_v8i16
    16U,	// USUBLv2i32_v2i64
    16U,	// USUBLv4i16_v4i32
    16U,	// USUBLv4i32_v2i64
    16U,	// USUBLv8i16_v4i32
    16U,	// USUBLv8i8_v8i16
    16U,	// USUBWv16i8_v8i16
    16U,	// USUBWv2i32_v2i64
    16U,	// USUBWv4i16_v4i32
    16U,	// USUBWv4i32_v2i64
    16U,	// USUBWv8i16_v4i32
    16U,	// USUBWv8i8_v8i16
    16U,	// UZP1v16i8
    16U,	// UZP1v2i32
    16U,	// UZP1v2i64
    16U,	// UZP1v4i16
    16U,	// UZP1v4i32
    16U,	// UZP1v8i16
    16U,	// UZP1v8i8
    16U,	// UZP2v16i8
    16U,	// UZP2v2i32
    16U,	// UZP2v2i64
    16U,	// UZP2v4i16
    16U,	// UZP2v4i32
    16U,	// UZP2v8i16
    16U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    0U,	// ZIP1_PPP_B
    0U,	// ZIP1_PPP_D
    0U,	// ZIP1_PPP_H
    0U,	// ZIP1_PPP_S
    0U,	// ZIP1_ZZZ_B
    0U,	// ZIP1_ZZZ_D
    0U,	// ZIP1_ZZZ_H
    0U,	// ZIP1_ZZZ_S
    16U,	// ZIP1v16i8
    16U,	// ZIP1v2i32
    16U,	// ZIP1v2i64
    16U,	// ZIP1v4i16
    16U,	// ZIP1v4i32
    16U,	// ZIP1v8i16
    16U,	// ZIP1v8i8
    0U,	// ZIP2_PPP_B
    0U,	// ZIP2_PPP_D
    0U,	// ZIP2_PPP_H
    0U,	// ZIP2_PPP_S
    0U,	// ZIP2_ZZZ_B
    0U,	// ZIP2_ZZZ_D
    0U,	// ZIP2_ZZZ_H
    0U,	// ZIP2_ZZZ_S
    16U,	// ZIP2v16i8
    16U,	// ZIP2v2i32
    16U,	// ZIP2v2i64
    16U,	// ZIP2v4i16
    16U,	// ZIP2v4i32
    16U,	// ZIP2v8i16
    16U,	// ZIP2v8i8
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    0U,	// ADDHNv2i64_v2i32
    0U,	// ADDHNv2i64_v4i32
    0U,	// ADDHNv4i32_v4i16
    0U,	// ADDHNv4i32_v8i16
    0U,	// ADDHNv8i16_v16i8
    0U,	// ADDHNv8i16_v8i8
    0U,	// ADDPv16i8
    0U,	// ADDPv2i32
    0U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    0U,	// ADDPv4i16
    0U,	// ADDPv4i32
    0U,	// ADDPv8i16
    0U,	// ADDPv8i8
    0U,	// ADDSWri
    0U,	// ADDSWrr
    0U,	// ADDSWrs
    0U,	// ADDSWrx
    0U,	// ADDSXri
    0U,	// ADDSXrr
    0U,	// ADDSXrs
    0U,	// ADDSXrx
    0U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    0U,	// ADDWri
    0U,	// ADDWrr
    0U,	// ADDWrs
    0U,	// ADDWrx
    0U,	// ADDXri
    0U,	// ADDXrr
    0U,	// ADDXrs
    0U,	// ADDXrx
    0U,	// ADDXrx64
    0U,	// ADD_ZZZ_B
    0U,	// ADD_ZZZ_D
    0U,	// ADD_ZZZ_H
    0U,	// ADD_ZZZ_S
    0U,	// ADDv16i8
    0U,	// ADDv1i64
    0U,	// ADDv2i32
    0U,	// ADDv2i64
    0U,	// ADDv4i16
    0U,	// ADDv4i32
    0U,	// ADDv8i16
    0U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    0U,	// ANDSWri
    0U,	// ANDSWrr
    0U,	// ANDSWrs
    0U,	// ANDSXri
    0U,	// ANDSXrr
    0U,	// ANDSXrs
    0U,	// ANDWri
    0U,	// ANDWrr
    0U,	// ANDWrs
    0U,	// ANDXri
    0U,	// ANDXrr
    0U,	// ANDXrs
    0U,	// ANDv16i8
    0U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// AUTDA
    0U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    0U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    0U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    0U,	// BFMWri
    0U,	// BFMXri
    0U,	// BICSWrr
    0U,	// BICSWrs
    0U,	// BICSXrr
    0U,	// BICSXrs
    0U,	// BICWrr
    0U,	// BICWrs
    0U,	// BICXrr
    0U,	// BICXrs
    0U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    0U,	// BICv8i8
    0U,	// BIFv16i8
    0U,	// BIFv8i8
    0U,	// BITv16i8
    0U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BLRAA
    0U,	// BLRAAZ
    0U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    0U,	// BRAA
    0U,	// BRAAZ
    0U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    0U,	// BSLv16i8
    0U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CASAB
    0U,	// CASAH
    0U,	// CASALB
    0U,	// CASALH
    0U,	// CASALW
    0U,	// CASALX
    0U,	// CASAW
    0U,	// CASAX
    0U,	// CASB
    0U,	// CASH
    0U,	// CASLB
    0U,	// CASLH
    0U,	// CASLW
    0U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    0U,	// CASW
    0U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    0U,	// CCMNWi
    0U,	// CCMNWr
    0U,	// CCMNXi
    0U,	// CCMNXr
    0U,	// CCMPWi
    0U,	// CCMPWr
    0U,	// CCMPXi
    0U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    0U,	// CMEQv16i8
    0U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    0U,	// CMEQv1i64rz
    0U,	// CMEQv2i32
    0U,	// CMEQv2i32rz
    0U,	// CMEQv2i64
    0U,	// CMEQv2i64rz
    0U,	// CMEQv4i16
    0U,	// CMEQv4i16rz
    0U,	// CMEQv4i32
    0U,	// CMEQv4i32rz
    0U,	// CMEQv8i16
    0U,	// CMEQv8i16rz
    0U,	// CMEQv8i8
    0U,	// CMEQv8i8rz
    0U,	// CMGEv16i8
    0U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    0U,	// CMGEv1i64rz
    0U,	// CMGEv2i32
    0U,	// CMGEv2i32rz
    0U,	// CMGEv2i64
    0U,	// CMGEv2i64rz
    0U,	// CMGEv4i16
    0U,	// CMGEv4i16rz
    0U,	// CMGEv4i32
    0U,	// CMGEv4i32rz
    0U,	// CMGEv8i16
    0U,	// CMGEv8i16rz
    0U,	// CMGEv8i8
    0U,	// CMGEv8i8rz
    0U,	// CMGTv16i8
    0U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    0U,	// CMGTv1i64rz
    0U,	// CMGTv2i32
    0U,	// CMGTv2i32rz
    0U,	// CMGTv2i64
    0U,	// CMGTv2i64rz
    0U,	// CMGTv4i16
    0U,	// CMGTv4i16rz
    0U,	// CMGTv4i32
    0U,	// CMGTv4i32rz
    0U,	// CMGTv8i16
    0U,	// CMGTv8i16rz
    0U,	// CMGTv8i8
    0U,	// CMGTv8i8rz
    0U,	// CMHIv16i8
    0U,	// CMHIv1i64
    0U,	// CMHIv2i32
    0U,	// CMHIv2i64
    0U,	// CMHIv4i16
    0U,	// CMHIv4i32
    0U,	// CMHIv8i16
    0U,	// CMHIv8i8
    0U,	// CMHSv16i8
    0U,	// CMHSv1i64
    0U,	// CMHSv2i32
    0U,	// CMHSv2i64
    0U,	// CMHSv4i16
    0U,	// CMHSv4i32
    0U,	// CMHSv8i16
    0U,	// CMHSv8i8
    0U,	// CMLEv16i8rz
    0U,	// CMLEv1i64rz
    0U,	// CMLEv2i32rz
    0U,	// CMLEv2i64rz
    0U,	// CMLEv4i16rz
    0U,	// CMLEv4i32rz
    0U,	// CMLEv8i16rz
    0U,	// CMLEv8i8rz
    0U,	// CMLTv16i8rz
    0U,	// CMLTv1i64rz
    0U,	// CMLTv2i32rz
    0U,	// CMLTv2i64rz
    0U,	// CMLTv4i16rz
    0U,	// CMLTv4i32rz
    0U,	// CMLTv8i16rz
    0U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    0U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    0U,	// CMTSTv2i32
    0U,	// CMTSTv2i64
    0U,	// CMTSTv4i16
    0U,	// CMTSTv4i32
    0U,	// CMTSTv8i16
    0U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    0U,	// CPYi16
    0U,	// CPYi32
    0U,	// CPYi64
    0U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    0U,	// CSELWr
    0U,	// CSELXr
    0U,	// CSINCWr
    0U,	// CSINCXr
    0U,	// CSINVWr
    0U,	// CSINVXr
    0U,	// CSNEGWr
    0U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    0U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    0U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    0U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    0U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    0U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    0U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    0U,	// DUPv8i8lane
    0U,	// EONWrr
    0U,	// EONWrs
    0U,	// EONXrr
    0U,	// EONXrs
    0U,	// EORWri
    0U,	// EORWrr
    0U,	// EORWrs
    0U,	// EORXri
    0U,	// EORXrr
    0U,	// EORXrs
    0U,	// EORv16i8
    0U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    0U,	// EXTRWrri
    0U,	// EXTRXrri
    0U,	// EXTv16i8
    0U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    0U,	// FABDv2f32
    0U,	// FABDv2f64
    0U,	// FABDv4f16
    0U,	// FABDv4f32
    0U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    0U,	// FACGEv2f32
    0U,	// FACGEv2f64
    0U,	// FACGEv4f16
    0U,	// FACGEv4f32
    0U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    0U,	// FACGTv2f32
    0U,	// FACGTv2f64
    0U,	// FACGTv4f16
    0U,	// FACGTv4f32
    0U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    0U,	// FADDPv2f32
    0U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    0U,	// FADDPv4f16
    0U,	// FADDPv4f32
    0U,	// FADDPv8f16
    0U,	// FADDSrr
    0U,	// FADDv2f32
    0U,	// FADDv2f64
    0U,	// FADDv4f16
    0U,	// FADDv4f32
    0U,	// FADDv8f16
    0U,	// FCADDv2f32
    0U,	// FCADDv2f64
    0U,	// FCADDv4f16
    0U,	// FCADDv4f32
    0U,	// FCADDv8f16
    0U,	// FCCMPDrr
    0U,	// FCCMPEDrr
    0U,	// FCCMPEHrr
    0U,	// FCCMPESrr
    0U,	// FCCMPHrr
    0U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    0U,	// FCMEQv1i16rz
    0U,	// FCMEQv1i32rz
    0U,	// FCMEQv1i64rz
    0U,	// FCMEQv2f32
    0U,	// FCMEQv2f64
    0U,	// FCMEQv2i32rz
    0U,	// FCMEQv2i64rz
    0U,	// FCMEQv4f16
    0U,	// FCMEQv4f32
    0U,	// FCMEQv4i16rz
    0U,	// FCMEQv4i32rz
    0U,	// FCMEQv8f16
    0U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    0U,	// FCMGEv1i16rz
    0U,	// FCMGEv1i32rz
    0U,	// FCMGEv1i64rz
    0U,	// FCMGEv2f32
    0U,	// FCMGEv2f64
    0U,	// FCMGEv2i32rz
    0U,	// FCMGEv2i64rz
    0U,	// FCMGEv4f16
    0U,	// FCMGEv4f32
    0U,	// FCMGEv4i16rz
    0U,	// FCMGEv4i32rz
    0U,	// FCMGEv8f16
    0U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    0U,	// FCMGTv1i16rz
    0U,	// FCMGTv1i32rz
    0U,	// FCMGTv1i64rz
    0U,	// FCMGTv2f32
    0U,	// FCMGTv2f64
    0U,	// FCMGTv2i32rz
    0U,	// FCMGTv2i64rz
    0U,	// FCMGTv4f16
    0U,	// FCMGTv4f32
    0U,	// FCMGTv4i16rz
    0U,	// FCMGTv4i32rz
    0U,	// FCMGTv8f16
    0U,	// FCMGTv8i16rz
    0U,	// FCMLAv2f32
    0U,	// FCMLAv2f64
    0U,	// FCMLAv4f16
    0U,	// FCMLAv4f16_indexed
    0U,	// FCMLAv4f32
    0U,	// FCMLAv4f32_indexed
    0U,	// FCMLAv8f16
    0U,	// FCMLAv8f16_indexed
    0U,	// FCMLEv1i16rz
    0U,	// FCMLEv1i32rz
    0U,	// FCMLEv1i64rz
    0U,	// FCMLEv2i32rz
    0U,	// FCMLEv2i64rz
    0U,	// FCMLEv4i16rz
    0U,	// FCMLEv4i32rz
    0U,	// FCMLEv8i16rz
    0U,	// FCMLTv1i16rz
    0U,	// FCMLTv1i32rz
    0U,	// FCMLTv1i64rz
    0U,	// FCMLTv2i32rz
    0U,	// FCMLTv2i64rz
    0U,	// FCMLTv4i16rz
    0U,	// FCMLTv4i32rz
    0U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    0U,	// FCSELDrrr
    0U,	// FCSELHrrr
    0U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    0U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    0U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    0U,	// FDIVv2f32
    0U,	// FDIVv2f64
    0U,	// FDIVv4f16
    0U,	// FDIVv4f32
    0U,	// FDIVv8f16
    0U,	// FJCVTZS
    0U,	// FMADDDrrr
    0U,	// FMADDHrrr
    0U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    0U,	// FMAXNMPv2f32
    0U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    0U,	// FMAXNMPv4f16
    0U,	// FMAXNMPv4f32
    0U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    0U,	// FMAXNMv2f32
    0U,	// FMAXNMv2f64
    0U,	// FMAXNMv4f16
    0U,	// FMAXNMv4f32
    0U,	// FMAXNMv8f16
    0U,	// FMAXPv2f32
    0U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    0U,	// FMAXPv4f16
    0U,	// FMAXPv4f32
    0U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    0U,	// FMAXv2f32
    0U,	// FMAXv2f64
    0U,	// FMAXv4f16
    0U,	// FMAXv4f32
    0U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    0U,	// FMINNMPv2f32
    0U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    0U,	// FMINNMPv4f16
    0U,	// FMINNMPv4f32
    0U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    0U,	// FMINNMv2f32
    0U,	// FMINNMv2f64
    0U,	// FMINNMv4f16
    0U,	// FMINNMv4f32
    0U,	// FMINNMv8f16
    0U,	// FMINPv2f32
    0U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    0U,	// FMINPv4f16
    0U,	// FMINPv4f32
    0U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    0U,	// FMINv2f32
    0U,	// FMINv2f64
    0U,	// FMINv4f16
    0U,	// FMINv4f32
    0U,	// FMINv8f16
    0U,	// FMLAv1i16_indexed
    0U,	// FMLAv1i32_indexed
    0U,	// FMLAv1i64_indexed
    0U,	// FMLAv2f32
    0U,	// FMLAv2f64
    0U,	// FMLAv2i32_indexed
    0U,	// FMLAv2i64_indexed
    0U,	// FMLAv4f16
    0U,	// FMLAv4f32
    0U,	// FMLAv4i16_indexed
    0U,	// FMLAv4i32_indexed
    0U,	// FMLAv8f16
    0U,	// FMLAv8i16_indexed
    0U,	// FMLSv1i16_indexed
    0U,	// FMLSv1i32_indexed
    0U,	// FMLSv1i64_indexed
    0U,	// FMLSv2f32
    0U,	// FMLSv2f64
    0U,	// FMLSv2i32_indexed
    0U,	// FMLSv2i64_indexed
    0U,	// FMLSv4f16
    0U,	// FMLSv4f32
    0U,	// FMLSv4i16_indexed
    0U,	// FMLSv4i32_indexed
    0U,	// FMLSv8f16
    0U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    0U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVH0
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    0U,	// FMSUBDrrr
    0U,	// FMSUBHrrr
    0U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    0U,	// FMULXv1i16_indexed
    0U,	// FMULXv1i32_indexed
    0U,	// FMULXv1i64_indexed
    0U,	// FMULXv2f32
    0U,	// FMULXv2f64
    0U,	// FMULXv2i32_indexed
    0U,	// FMULXv2i64_indexed
    0U,	// FMULXv4f16
    0U,	// FMULXv4f32
    0U,	// FMULXv4i16_indexed
    0U,	// FMULXv4i32_indexed
    0U,	// FMULXv8f16
    0U,	// FMULXv8i16_indexed
    0U,	// FMULv1i16_indexed
    0U,	// FMULv1i32_indexed
    0U,	// FMULv1i64_indexed
    0U,	// FMULv2f32
    0U,	// FMULv2f64
    0U,	// FMULv2i32_indexed
    0U,	// FMULv2i64_indexed
    0U,	// FMULv4f16
    0U,	// FMULv4f32
    0U,	// FMULv4i16_indexed
    0U,	// FMULv4i32_indexed
    0U,	// FMULv8f16
    0U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    0U,	// FNMADDDrrr
    0U,	// FNMADDHrrr
    0U,	// FNMADDSrrr
    0U,	// FNMSUBDrrr
    0U,	// FNMSUBHrrr
    0U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    0U,	// FRECPSv2f32
    0U,	// FRECPSv2f64
    0U,	// FRECPSv4f16
    0U,	// FRECPSv4f32
    0U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    0U,	// FRSQRTSv2f32
    0U,	// FRSQRTSv2f64
    0U,	// FRSQRTSv4f16
    0U,	// FRSQRTSv4f32
    0U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    0U,	// FSUBv2f32
    0U,	// FSUBv2f64
    0U,	// FSUBv4f16
    0U,	// FSUBv4f32
    0U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    0U,	// LDAPRB
    0U,	// LDAPRH
    0U,	// LDAPRW
    0U,	// LDAPRX
    0U,	// LDARB
    0U,	// LDARH
    0U,	// LDARW
    0U,	// LDARX
    0U,	// LDAXPW
    0U,	// LDAXPX
    0U,	// LDAXRB
    0U,	// LDAXRH
    0U,	// LDAXRW
    0U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    0U,	// LDLARB
    0U,	// LDLARH
    0U,	// LDLARW
    0U,	// LDLARX
    0U,	// LDNPDi
    1U,	// LDNPQi
    1U,	// LDNPSi
    1U,	// LDNPWi
    0U,	// LDNPXi
    0U,	// LDPDi
    1U,	// LDPDpost
    5U,	// LDPDpre
    1U,	// LDPQi
    1U,	// LDPQpost
    5U,	// LDPQpre
    1U,	// LDPSWi
    1U,	// LDPSWpost
    5U,	// LDPSWpre
    1U,	// LDPSi
    1U,	// LDPSpost
    5U,	// LDPSpre
    1U,	// LDPWi
    1U,	// LDPWpost
    5U,	// LDPWpre
    0U,	// LDPXi
    1U,	// LDPXpost
    5U,	// LDPXpre
    0U,	// LDRAAindexed
    0U,	// LDRAAwriteback
    0U,	// LDRABindexed
    0U,	// LDRABwriteback
    0U,	// LDRBBpost
    0U,	// LDRBBpre
    1U,	// LDRBBroW
    1U,	// LDRBBroX
    0U,	// LDRBBui
    0U,	// LDRBpost
    0U,	// LDRBpre
    1U,	// LDRBroW
    1U,	// LDRBroX
    0U,	// LDRBui
    0U,	// LDRDl
    0U,	// LDRDpost
    0U,	// LDRDpre
    1U,	// LDRDroW
    2U,	// LDRDroX
    0U,	// LDRDui
    0U,	// LDRHHpost
    0U,	// LDRHHpre
    2U,	// LDRHHroW
    2U,	// LDRHHroX
    0U,	// LDRHHui
    0U,	// LDRHpost
    0U,	// LDRHpre
    2U,	// LDRHroW
    2U,	// LDRHroX
    0U,	// LDRHui
    0U,	// LDRQl
    0U,	// LDRQpost
    0U,	// LDRQpre
    2U,	// LDRQroW
    2U,	// LDRQroX
    0U,	// LDRQui
    0U,	// LDRSBWpost
    0U,	// LDRSBWpre
    1U,	// LDRSBWroW
    1U,	// LDRSBWroX
    0U,	// LDRSBWui
    0U,	// LDRSBXpost
    0U,	// LDRSBXpre
    1U,	// LDRSBXroW
    1U,	// LDRSBXroX
    0U,	// LDRSBXui
    0U,	// LDRSHWpost
    0U,	// LDRSHWpre
    2U,	// LDRSHWroW
    2U,	// LDRSHWroX
    0U,	// LDRSHWui
    0U,	// LDRSHXpost
    0U,	// LDRSHXpre
    2U,	// LDRSHXroW
    2U,	// LDRSHXroX
    0U,	// LDRSHXui
    0U,	// LDRSWl
    0U,	// LDRSWpost
    0U,	// LDRSWpre
    2U,	// LDRSWroW
    2U,	// LDRSWroX
    0U,	// LDRSWui
    0U,	// LDRSl
    0U,	// LDRSpost
    0U,	// LDRSpre
    2U,	// LDRSroW
    2U,	// LDRSroX
    0U,	// LDRSui
    0U,	// LDRWl
    0U,	// LDRWpost
    0U,	// LDRWpre
    2U,	// LDRWroW
    2U,	// LDRWroX
    0U,	// LDRWui
    0U,	// LDRXl
    0U,	// LDRXpost
    0U,	// LDRXpre
    1U,	// LDRXroW
    2U,	// LDRXroX
    0U,	// LDRXui
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    0U,	// LDTRBi
    0U,	// LDTRHi
    0U,	// LDTRSBWi
    0U,	// LDTRSBXi
    0U,	// LDTRSHWi
    0U,	// LDTRSHXi
    0U,	// LDTRSWi
    0U,	// LDTRWi
    0U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    0U,	// LDURBBi
    0U,	// LDURBi
    0U,	// LDURDi
    0U,	// LDURHHi
    0U,	// LDURHi
    0U,	// LDURQi
    0U,	// LDURSBWi
    0U,	// LDURSBXi
    0U,	// LDURSHWi
    0U,	// LDURSHXi
    0U,	// LDURSWi
    0U,	// LDURSi
    0U,	// LDURWi
    0U,	// LDURXi
    0U,	// LDXPW
    0U,	// LDXPX
    0U,	// LDXRB
    0U,	// LDXRH
    0U,	// LDXRW
    0U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    0U,	// MADDWrrr
    0U,	// MADDXrrr
    0U,	// MLAv16i8
    0U,	// MLAv2i32
    0U,	// MLAv2i32_indexed
    0U,	// MLAv4i16
    0U,	// MLAv4i16_indexed
    0U,	// MLAv4i32
    0U,	// MLAv4i32_indexed
    0U,	// MLAv8i16
    0U,	// MLAv8i16_indexed
    0U,	// MLAv8i8
    0U,	// MLSv16i8
    0U,	// MLSv2i32
    0U,	// MLSv2i32_indexed
    0U,	// MLSv4i16
    0U,	// MLSv4i16_indexed
    0U,	// MLSv4i32
    0U,	// MLSv4i32_indexed
    0U,	// MLSv8i16
    0U,	// MLSv8i16_indexed
    0U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    0U,	// MOVIv2i32
    0U,	// MOVIv2s_msl
    0U,	// MOVIv4i16
    0U,	// MOVIv4i32
    0U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    0U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    0U,	// MOVNWi
    0U,	// MOVNXi
    0U,	// MOVZWi
    0U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    0U,	// MSUBWrrr
    0U,	// MSUBXrrr
    0U,	// MULv16i8
    0U,	// MULv2i32
    0U,	// MULv2i32_indexed
    0U,	// MULv4i16
    0U,	// MULv4i16_indexed
    0U,	// MULv4i32
    0U,	// MULv4i32_indexed
    0U,	// MULv8i16
    0U,	// MULv8i16_indexed
    0U,	// MULv8i8
    0U,	// MVNIv2i32
    0U,	// MVNIv2s_msl
    0U,	// MVNIv4i16
    0U,	// MVNIv4i32
    0U,	// MVNIv4s_msl
    0U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    0U,	// ORNWrs
    0U,	// ORNXrr
    0U,	// ORNXrs
    0U,	// ORNv16i8
    0U,	// ORNv8i8
    0U,	// ORRWri
    0U,	// ORRWrr
    0U,	// ORRWrs
    0U,	// ORRXri
    0U,	// ORRXrr
    0U,	// ORRXrs
    0U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    0U,	// ORRv8i8
    0U,	// PACDA
    0U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    0U,	// PACGA
    0U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    0U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    0U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    0U,	// PMULLv8i8
    0U,	// PMULv16i8
    0U,	// PMULv8i8
    0U,	// PRFMl
    1U,	// PRFMroW
    2U,	// PRFMroX
    0U,	// PRFMui
    0U,	// PRFUMi
    0U,	// RADDHNv2i64_v2i32
    0U,	// RADDHNv2i64_v4i32
    0U,	// RADDHNv4i32_v4i16
    0U,	// RADDHNv4i32_v8i16
    0U,	// RADDHNv8i16_v16i8
    0U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    0U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    0U,	// RSHRNv4i32_shift
    0U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    0U,	// RSUBHNv2i64_v2i32
    0U,	// RSUBHNv2i64_v4i32
    0U,	// RSUBHNv4i32_v4i16
    0U,	// RSUBHNv4i32_v8i16
    0U,	// RSUBHNv8i16_v16i8
    0U,	// RSUBHNv8i16_v8i8
    0U,	// SABALv16i8_v8i16
    0U,	// SABALv2i32_v2i64
    0U,	// SABALv4i16_v4i32
    0U,	// SABALv4i32_v2i64
    0U,	// SABALv8i16_v4i32
    0U,	// SABALv8i8_v8i16
    0U,	// SABAv16i8
    0U,	// SABAv2i32
    0U,	// SABAv4i16
    0U,	// SABAv4i32
    0U,	// SABAv8i16
    0U,	// SABAv8i8
    0U,	// SABDLv16i8_v8i16
    0U,	// SABDLv2i32_v2i64
    0U,	// SABDLv4i16_v4i32
    0U,	// SABDLv4i32_v2i64
    0U,	// SABDLv8i16_v4i32
    0U,	// SABDLv8i8_v8i16
    0U,	// SABDv16i8
    0U,	// SABDv2i32
    0U,	// SABDv4i16
    0U,	// SABDv4i32
    0U,	// SABDv8i16
    0U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    0U,	// SADDLv16i8_v8i16
    0U,	// SADDLv2i32_v2i64
    0U,	// SADDLv4i16_v4i32
    0U,	// SADDLv4i32_v2i64
    0U,	// SADDLv8i16_v4i32
    0U,	// SADDLv8i8_v8i16
    0U,	// SADDWv16i8_v8i16
    0U,	// SADDWv2i32_v2i64
    0U,	// SADDWv4i16_v4i32
    0U,	// SADDWv4i32_v2i64
    0U,	// SADDWv8i16_v4i32
    0U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    0U,	// SBFMWri
    0U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDOT2S
    0U,	// SDOT4S
    0U,	// SDOTIDX2S
    0U,	// SDOTIDX4S
    0U,	// SHA1Crrr
    0U,	// SHA1Hrr
    0U,	// SHA1Mrrr
    0U,	// SHA1Prrr
    0U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    0U,	// SHA256H2rrr
    0U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    0U,	// SHA256SU1rrr
    0U,	// SHADDv16i8
    0U,	// SHADDv2i32
    0U,	// SHADDv4i16
    0U,	// SHADDv4i32
    0U,	// SHADDv8i16
    0U,	// SHADDv8i8
    0U,	// SHLLv16i8
    0U,	// SHLLv2i32
    0U,	// SHLLv4i16
    0U,	// SHLLv4i32
    0U,	// SHLLv8i16
    0U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    0U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    0U,	// SHRNv4i32_shift
    0U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    0U,	// SHSUBv16i8
    0U,	// SHSUBv2i32
    0U,	// SHSUBv4i16
    0U,	// SHSUBv4i32
    0U,	// SHSUBv8i16
    0U,	// SHSUBv8i8
    0U,	// SLId
    0U,	// SLIv16i8_shift
    0U,	// SLIv2i32_shift
    0U,	// SLIv2i64_shift
    0U,	// SLIv4i16_shift
    0U,	// SLIv4i32_shift
    0U,	// SLIv8i16_shift
    0U,	// SLIv8i8_shift
    0U,	// SMADDLrrr
    0U,	// SMAXPv16i8
    0U,	// SMAXPv2i32
    0U,	// SMAXPv4i16
    0U,	// SMAXPv4i32
    0U,	// SMAXPv8i16
    0U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    0U,	// SMAXv16i8
    0U,	// SMAXv2i32
    0U,	// SMAXv4i16
    0U,	// SMAXv4i32
    0U,	// SMAXv8i16
    0U,	// SMAXv8i8
    0U,	// SMC
    0U,	// SMINPv16i8
    0U,	// SMINPv2i32
    0U,	// SMINPv4i16
    0U,	// SMINPv4i32
    0U,	// SMINPv8i16
    0U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    0U,	// SMINv16i8
    0U,	// SMINv2i32
    0U,	// SMINv4i16
    0U,	// SMINv4i32
    0U,	// SMINv8i16
    0U,	// SMINv8i8
    0U,	// SMLALv16i8_v8i16
    0U,	// SMLALv2i32_indexed
    0U,	// SMLALv2i32_v2i64
    0U,	// SMLALv4i16_indexed
    0U,	// SMLALv4i16_v4i32
    0U,	// SMLALv4i32_indexed
    0U,	// SMLALv4i32_v2i64
    0U,	// SMLALv8i16_indexed
    0U,	// SMLALv8i16_v4i32
    0U,	// SMLALv8i8_v8i16
    0U,	// SMLSLv16i8_v8i16
    0U,	// SMLSLv2i32_indexed
    0U,	// SMLSLv2i32_v2i64
    0U,	// SMLSLv4i16_indexed
    0U,	// SMLSLv4i16_v4i32
    0U,	// SMLSLv4i32_indexed
    0U,	// SMLSLv4i32_v2i64
    0U,	// SMLSLv8i16_indexed
    0U,	// SMLSLv8i16_v4i32
    0U,	// SMLSLv8i8_v8i16
    0U,	// SMOVvi16to32
    0U,	// SMOVvi16to64
    0U,	// SMOVvi32to64
    0U,	// SMOVvi8to32
    0U,	// SMOVvi8to64
    0U,	// SMSUBLrrr
    0U,	// SMULHrr
    0U,	// SMULLv16i8_v8i16
    0U,	// SMULLv2i32_indexed
    0U,	// SMULLv2i32_v2i64
    0U,	// SMULLv4i16_indexed
    0U,	// SMULLv4i16_v4i32
    0U,	// SMULLv4i32_indexed
    0U,	// SMULLv4i32_v2i64
    0U,	// SMULLv8i16_indexed
    0U,	// SMULLv8i16_v4i32
    0U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    0U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    0U,	// SQADDv2i32
    0U,	// SQADDv2i64
    0U,	// SQADDv4i16
    0U,	// SQADDv4i32
    0U,	// SQADDv8i16
    0U,	// SQADDv8i8
    0U,	// SQDMLALi16
    0U,	// SQDMLALi32
    0U,	// SQDMLALv1i32_indexed
    0U,	// SQDMLALv1i64_indexed
    0U,	// SQDMLALv2i32_indexed
    0U,	// SQDMLALv2i32_v2i64
    0U,	// SQDMLALv4i16_indexed
    0U,	// SQDMLALv4i16_v4i32
    0U,	// SQDMLALv4i32_indexed
    0U,	// SQDMLALv4i32_v2i64
    0U,	// SQDMLALv8i16_indexed
    0U,	// SQDMLALv8i16_v4i32
    0U,	// SQDMLSLi16
    0U,	// SQDMLSLi32
    0U,	// SQDMLSLv1i32_indexed
    0U,	// SQDMLSLv1i64_indexed
    0U,	// SQDMLSLv2i32_indexed
    0U,	// SQDMLSLv2i32_v2i64
    0U,	// SQDMLSLv4i16_indexed
    0U,	// SQDMLSLv4i16_v4i32
    0U,	// SQDMLSLv4i32_indexed
    0U,	// SQDMLSLv4i32_v2i64
    0U,	// SQDMLSLv8i16_indexed
    0U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    0U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    0U,	// SQDMULHv1i32_indexed
    0U,	// SQDMULHv2i32
    0U,	// SQDMULHv2i32_indexed
    0U,	// SQDMULHv4i16
    0U,	// SQDMULHv4i16_indexed
    0U,	// SQDMULHv4i32
    0U,	// SQDMULHv4i32_indexed
    0U,	// SQDMULHv8i16
    0U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    0U,	// SQDMULLv1i32_indexed
    0U,	// SQDMULLv1i64_indexed
    0U,	// SQDMULLv2i32_indexed
    0U,	// SQDMULLv2i32_v2i64
    0U,	// SQDMULLv4i16_indexed
    0U,	// SQDMULLv4i16_v4i32
    0U,	// SQDMULLv4i32_indexed
    0U,	// SQDMULLv4i32_v2i64
    0U,	// SQDMULLv8i16_indexed
    0U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    0U,	// SQRDMLAHi16_indexed
    0U,	// SQRDMLAHi32_indexed
    0U,	// SQRDMLAHv1i16
    0U,	// SQRDMLAHv1i32
    0U,	// SQRDMLAHv2i32
    0U,	// SQRDMLAHv2i32_indexed
    0U,	// SQRDMLAHv4i16
    0U,	// SQRDMLAHv4i16_indexed
    0U,	// SQRDMLAHv4i32
    0U,	// SQRDMLAHv4i32_indexed
    0U,	// SQRDMLAHv8i16
    0U,	// SQRDMLAHv8i16_indexed
    0U,	// SQRDMLSHi16_indexed
    0U,	// SQRDMLSHi32_indexed
    0U,	// SQRDMLSHv1i16
    0U,	// SQRDMLSHv1i32
    0U,	// SQRDMLSHv2i32
    0U,	// SQRDMLSHv2i32_indexed
    0U,	// SQRDMLSHv4i16
    0U,	// SQRDMLSHv4i16_indexed
    0U,	// SQRDMLSHv4i32
    0U,	// SQRDMLSHv4i32_indexed
    0U,	// SQRDMLSHv8i16
    0U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    0U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    0U,	// SQRDMULHv1i32_indexed
    0U,	// SQRDMULHv2i32
    0U,	// SQRDMULHv2i32_indexed
    0U,	// SQRDMULHv4i16
    0U,	// SQRDMULHv4i16_indexed
    0U,	// SQRDMULHv4i32
    0U,	// SQRDMULHv4i32_indexed
    0U,	// SQRDMULHv8i16
    0U,	// SQRDMULHv8i16_indexed
    0U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    0U,	// SQRSHLv2i32
    0U,	// SQRSHLv2i64
    0U,	// SQRSHLv4i16
    0U,	// SQRSHLv4i32
    0U,	// SQRSHLv8i16
    0U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    0U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    0U,	// SQRSHRNv4i32_shift
    0U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    0U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    0U,	// SQRSHRUNv4i32_shift
    0U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    0U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    0U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    0U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    0U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    0U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    0U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    0U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    0U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    0U,	// SQSHRNv4i32_shift
    0U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    0U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    0U,	// SQSHRUNv4i32_shift
    0U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    0U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    0U,	// SQSUBv2i32
    0U,	// SQSUBv2i64
    0U,	// SQSUBv4i16
    0U,	// SQSUBv4i32
    0U,	// SQSUBv8i16
    0U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    0U,	// SRHADDv16i8
    0U,	// SRHADDv2i32
    0U,	// SRHADDv4i16
    0U,	// SRHADDv4i32
    0U,	// SRHADDv8i16
    0U,	// SRHADDv8i8
    0U,	// SRId
    0U,	// SRIv16i8_shift
    0U,	// SRIv2i32_shift
    0U,	// SRIv2i64_shift
    0U,	// SRIv4i16_shift
    0U,	// SRIv4i32_shift
    0U,	// SRIv8i16_shift
    0U,	// SRIv8i8_shift
    0U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    0U,	// SRSHLv2i32
    0U,	// SRSHLv2i64
    0U,	// SRSHLv4i16
    0U,	// SRSHLv4i32
    0U,	// SRSHLv8i16
    0U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    0U,	// SRSRAd
    0U,	// SRSRAv16i8_shift
    0U,	// SRSRAv2i32_shift
    0U,	// SRSRAv2i64_shift
    0U,	// SRSRAv4i16_shift
    0U,	// SRSRAv4i32_shift
    0U,	// SRSRAv8i16_shift
    0U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    0U,	// SSHLv16i8
    0U,	// SSHLv1i64
    0U,	// SSHLv2i32
    0U,	// SSHLv2i64
    0U,	// SSHLv4i16
    0U,	// SSHLv4i32
    0U,	// SSHLv8i16
    0U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    0U,	// SSRAd
    0U,	// SSRAv16i8_shift
    0U,	// SSRAv2i32_shift
    0U,	// SSRAv2i64_shift
    0U,	// SSRAv4i16_shift
    0U,	// SSRAv4i32_shift
    0U,	// SSRAv8i16_shift
    0U,	// SSRAv8i8_shift
    0U,	// SSUBLv16i8_v8i16
    0U,	// SSUBLv2i32_v2i64
    0U,	// SSUBLv4i16_v4i32
    0U,	// SSUBLv4i32_v2i64
    0U,	// SSUBLv8i16_v4i32
    0U,	// SSUBLv8i8_v8i16
    0U,	// SSUBWv16i8_v8i16
    0U,	// SSUBWv2i32_v2i64
    0U,	// SSUBWv4i16_v4i32
    0U,	// SSUBWv4i32_v2i64
    0U,	// SSUBWv8i16_v4i32
    0U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    0U,	// STLLRB
    0U,	// STLLRH
    0U,	// STLLRW
    0U,	// STLLRX
    0U,	// STLRB
    0U,	// STLRH
    0U,	// STLRW
    0U,	// STLRX
    0U,	// STLXPW
    0U,	// STLXPX
    0U,	// STLXRB
    0U,	// STLXRH
    0U,	// STLXRW
    0U,	// STLXRX
    0U,	// STNPDi
    1U,	// STNPQi
    1U,	// STNPSi
    1U,	// STNPWi
    0U,	// STNPXi
    0U,	// STPDi
    1U,	// STPDpost
    5U,	// STPDpre
    1U,	// STPQi
    1U,	// STPQpost
    5U,	// STPQpre
    1U,	// STPSi
    1U,	// STPSpost
    5U,	// STPSpre
    1U,	// STPWi
    1U,	// STPWpost
    5U,	// STPWpre
    0U,	// STPXi
    1U,	// STPXpost
    5U,	// STPXpre
    0U,	// STRBBpost
    0U,	// STRBBpre
    1U,	// STRBBroW
    1U,	// STRBBroX
    0U,	// STRBBui
    0U,	// STRBpost
    0U,	// STRBpre
    1U,	// STRBroW
    1U,	// STRBroX
    0U,	// STRBui
    0U,	// STRDpost
    0U,	// STRDpre
    1U,	// STRDroW
    2U,	// STRDroX
    0U,	// STRDui
    0U,	// STRHHpost
    0U,	// STRHHpre
    2U,	// STRHHroW
    2U,	// STRHHroX
    0U,	// STRHHui
    0U,	// STRHpost
    0U,	// STRHpre
    2U,	// STRHroW
    2U,	// STRHroX
    0U,	// STRHui
    0U,	// STRQpost
    0U,	// STRQpre
    2U,	// STRQroW
    2U,	// STRQroX
    0U,	// STRQui
    0U,	// STRSpost
    0U,	// STRSpre
    2U,	// STRSroW
    2U,	// STRSroX
    0U,	// STRSui
    0U,	// STRWpost
    0U,	// STRWpre
    2U,	// STRWroW
    2U,	// STRWroX
    0U,	// STRWui
    0U,	// STRXpost
    0U,	// STRXpre
    1U,	// STRXroW
    2U,	// STRXroX
    0U,	// STRXui
    0U,	// STTRBi
    0U,	// STTRHi
    0U,	// STTRWi
    0U,	// STTRXi
    0U,	// STURBBi
    0U,	// STURBi
    0U,	// STURDi
    0U,	// STURHHi
    0U,	// STURHi
    0U,	// STURQi
    0U,	// STURSi
    0U,	// STURWi
    0U,	// STURXi
    0U,	// STXPW
    0U,	// STXPX
    0U,	// STXRB
    0U,	// STXRH
    0U,	// STXRW
    0U,	// STXRX
    0U,	// SUBHNv2i64_v2i32
    0U,	// SUBHNv2i64_v4i32
    0U,	// SUBHNv4i32_v4i16
    0U,	// SUBHNv4i32_v8i16
    0U,	// SUBHNv8i16_v16i8
    0U,	// SUBHNv8i16_v8i8
    0U,	// SUBSWri
    0U,	// SUBSWrr
    0U,	// SUBSWrs
    0U,	// SUBSWrx
    0U,	// SUBSXri
    0U,	// SUBSXrr
    0U,	// SUBSXrs
    0U,	// SUBSXrx
    0U,	// SUBSXrx64
    0U,	// SUBWri
    0U,	// SUBWrr
    0U,	// SUBWrs
    0U,	// SUBWrx
    0U,	// SUBXri
    0U,	// SUBXrr
    0U,	// SUBXrs
    0U,	// SUBXrx
    0U,	// SUBXrx64
    0U,	// SUB_ZZZ_B
    0U,	// SUB_ZZZ_D
    0U,	// SUB_ZZZ_H
    0U,	// SUB_ZZZ_S
    0U,	// SUBv16i8
    0U,	// SUBv1i64
    0U,	// SUBv2i32
    0U,	// SUBv2i64
    0U,	// SUBv4i16
    0U,	// SUBv4i32
    0U,	// SUBv8i16
    0U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    0U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    0U,	// TBLv8i8Four
    0U,	// TBLv8i8One
    0U,	// TBLv8i8Three
    0U,	// TBLv8i8Two
    0U,	// TBNZW
    0U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    0U,	// TBXv8i8Four
    0U,	// TBXv8i8One
    0U,	// TBXv8i8Three
    0U,	// TBXv8i8Two
    0U,	// TBZW
    0U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    0U,	// TRN1v16i8
    0U,	// TRN1v2i32
    0U,	// TRN1v2i64
    0U,	// TRN1v4i16
    0U,	// TRN1v4i32
    0U,	// TRN1v8i16
    0U,	// TRN1v8i8
    0U,	// TRN2v16i8
    0U,	// TRN2v2i32
    0U,	// TRN2v2i64
    0U,	// TRN2v4i16
    0U,	// TRN2v4i32
    0U,	// TRN2v8i16
    0U,	// TRN2v8i8
    0U,	// UABALv16i8_v8i16
    0U,	// UABALv2i32_v2i64
    0U,	// UABALv4i16_v4i32
    0U,	// UABALv4i32_v2i64
    0U,	// UABALv8i16_v4i32
    0U,	// UABALv8i8_v8i16
    0U,	// UABAv16i8
    0U,	// UABAv2i32
    0U,	// UABAv4i16
    0U,	// UABAv4i32
    0U,	// UABAv8i16
    0U,	// UABAv8i8
    0U,	// UABDLv16i8_v8i16
    0U,	// UABDLv2i32_v2i64
    0U,	// UABDLv4i16_v4i32
    0U,	// UABDLv4i32_v2i64
    0U,	// UABDLv8i16_v4i32
    0U,	// UABDLv8i8_v8i16
    0U,	// UABDv16i8
    0U,	// UABDv2i32
    0U,	// UABDv4i16
    0U,	// UABDv4i32
    0U,	// UABDv8i16
    0U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    0U,	// UADDLv16i8_v8i16
    0U,	// UADDLv2i32_v2i64
    0U,	// UADDLv4i16_v4i32
    0U,	// UADDLv4i32_v2i64
    0U,	// UADDLv8i16_v4i32
    0U,	// UADDLv8i8_v8i16
    0U,	// UADDWv16i8_v8i16
    0U,	// UADDWv2i32_v2i64
    0U,	// UADDWv4i16_v4i32
    0U,	// UADDWv4i32_v2i64
    0U,	// UADDWv8i16_v4i32
    0U,	// UADDWv8i8_v8i16
    0U,	// UBFMWri
    0U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDOT2S
    0U,	// UDOT4S
    0U,	// UDOTIDX2S
    0U,	// UDOTIDX4S
    0U,	// UHADDv16i8
    0U,	// UHADDv2i32
    0U,	// UHADDv4i16
    0U,	// UHADDv4i32
    0U,	// UHADDv8i16
    0U,	// UHADDv8i8
    0U,	// UHSUBv16i8
    0U,	// UHSUBv2i32
    0U,	// UHSUBv4i16
    0U,	// UHSUBv4i32
    0U,	// UHSUBv8i16
    0U,	// UHSUBv8i8
    0U,	// UMADDLrrr
    0U,	// UMAXPv16i8
    0U,	// UMAXPv2i32
    0U,	// UMAXPv4i16
    0U,	// UMAXPv4i32
    0U,	// UMAXPv8i16
    0U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    0U,	// UMAXv16i8
    0U,	// UMAXv2i32
    0U,	// UMAXv4i16
    0U,	// UMAXv4i32
    0U,	// UMAXv8i16
    0U,	// UMAXv8i8
    0U,	// UMINPv16i8
    0U,	// UMINPv2i32
    0U,	// UMINPv4i16
    0U,	// UMINPv4i32
    0U,	// UMINPv8i16
    0U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    0U,	// UMINv16i8
    0U,	// UMINv2i32
    0U,	// UMINv4i16
    0U,	// UMINv4i32
    0U,	// UMINv8i16
    0U,	// UMINv8i8
    0U,	// UMLALv16i8_v8i16
    0U,	// UMLALv2i32_indexed
    0U,	// UMLALv2i32_v2i64
    0U,	// UMLALv4i16_indexed
    0U,	// UMLALv4i16_v4i32
    0U,	// UMLALv4i32_indexed
    0U,	// UMLALv4i32_v2i64
    0U,	// UMLALv8i16_indexed
    0U,	// UMLALv8i16_v4i32
    0U,	// UMLALv8i8_v8i16
    0U,	// UMLSLv16i8_v8i16
    0U,	// UMLSLv2i32_indexed
    0U,	// UMLSLv2i32_v2i64
    0U,	// UMLSLv4i16_indexed
    0U,	// UMLSLv4i16_v4i32
    0U,	// UMLSLv4i32_indexed
    0U,	// UMLSLv4i32_v2i64
    0U,	// UMLSLv8i16_indexed
    0U,	// UMLSLv8i16_v4i32
    0U,	// UMLSLv8i8_v8i16
    0U,	// UMOVvi16
    0U,	// UMOVvi32
    0U,	// UMOVvi64
    0U,	// UMOVvi8
    0U,	// UMSUBLrrr
    0U,	// UMULHrr
    0U,	// UMULLv16i8_v8i16
    0U,	// UMULLv2i32_indexed
    0U,	// UMULLv2i32_v2i64
    0U,	// UMULLv4i16_indexed
    0U,	// UMULLv4i16_v4i32
    0U,	// UMULLv4i32_indexed
    0U,	// UMULLv4i32_v2i64
    0U,	// UMULLv8i16_indexed
    0U,	// UMULLv8i16_v4i32
    0U,	// UMULLv8i8_v8i16
    0U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    0U,	// UQADDv2i32
    0U,	// UQADDv2i64
    0U,	// UQADDv4i16
    0U,	// UQADDv4i32
    0U,	// UQADDv8i16
    0U,	// UQADDv8i8
    0U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    0U,	// UQRSHLv2i32
    0U,	// UQRSHLv2i64
    0U,	// UQRSHLv4i16
    0U,	// UQRSHLv4i32
    0U,	// UQRSHLv8i16
    0U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    0U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    0U,	// UQRSHRNv4i32_shift
    0U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    0U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    0U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    0U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    0U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    0U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    0U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    0U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    0U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    0U,	// UQSHRNv4i32_shift
    0U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    0U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    0U,	// UQSUBv2i32
    0U,	// UQSUBv2i64
    0U,	// UQSUBv4i16
    0U,	// UQSUBv4i32
    0U,	// UQSUBv8i16
    0U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    0U,	// URHADDv16i8
    0U,	// URHADDv2i32
    0U,	// URHADDv4i16
    0U,	// URHADDv4i32
    0U,	// URHADDv8i16
    0U,	// URHADDv8i8
    0U,	// URSHLv16i8
    0U,	// URSHLv1i64
    0U,	// URSHLv2i32
    0U,	// URSHLv2i64
    0U,	// URSHLv4i16
    0U,	// URSHLv4i32
    0U,	// URSHLv8i16
    0U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    0U,	// URSRAd
    0U,	// URSRAv16i8_shift
    0U,	// URSRAv2i32_shift
    0U,	// URSRAv2i64_shift
    0U,	// URSRAv4i16_shift
    0U,	// URSRAv4i32_shift
    0U,	// URSRAv8i16_shift
    0U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    0U,	// USHLv16i8
    0U,	// USHLv1i64
    0U,	// USHLv2i32
    0U,	// USHLv2i64
    0U,	// USHLv4i16
    0U,	// USHLv4i32
    0U,	// USHLv8i16
    0U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    0U,	// USRAd
    0U,	// USRAv16i8_shift
    0U,	// USRAv2i32_shift
    0U,	// USRAv2i64_shift
    0U,	// USRAv4i16_shift
    0U,	// USRAv4i32_shift
    0U,	// USRAv8i16_shift
    0U,	// USRAv8i8_shift
    0U,	// USUBLv16i8_v8i16
    0U,	// USUBLv2i32_v2i64
    0U,	// USUBLv4i16_v4i32
    0U,	// USUBLv4i32_v2i64
    0U,	// USUBLv8i16_v4i32
    0U,	// USUBLv8i8_v8i16
    0U,	// USUBWv16i8_v8i16
    0U,	// USUBWv2i32_v2i64
    0U,	// USUBWv4i16_v4i32
    0U,	// USUBWv4i32_v2i64
    0U,	// USUBWv8i16_v4i32
    0U,	// USUBWv8i8_v8i16
    0U,	// UZP1v16i8
    0U,	// UZP1v2i32
    0U,	// UZP1v2i64
    0U,	// UZP1v4i16
    0U,	// UZP1v4i32
    0U,	// UZP1v8i16
    0U,	// UZP1v8i8
    0U,	// UZP2v16i8
    0U,	// UZP2v2i32
    0U,	// UZP2v2i64
    0U,	// UZP2v4i16
    0U,	// UZP2v4i32
    0U,	// UZP2v8i16
    0U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    0U,	// ZIP1_PPP_B
    0U,	// ZIP1_PPP_D
    0U,	// ZIP1_PPP_H
    0U,	// ZIP1_PPP_S
    0U,	// ZIP1_ZZZ_B
    0U,	// ZIP1_ZZZ_D
    0U,	// ZIP1_ZZZ_H
    0U,	// ZIP1_ZZZ_S
    0U,	// ZIP1v16i8
    0U,	// ZIP1v2i32
    0U,	// ZIP1v2i64
    0U,	// ZIP1v4i16
    0U,	// ZIP1v4i32
    0U,	// ZIP1v8i16
    0U,	// ZIP1v8i8
    0U,	// ZIP2_PPP_B
    0U,	// ZIP2_PPP_D
    0U,	// ZIP2_PPP_H
    0U,	// ZIP2_PPP_S
    0U,	// ZIP2_ZZZ_B
    0U,	// ZIP2_ZZZ_D
    0U,	// ZIP2_ZZZ_H
    0U,	// ZIP2_ZZZ_S
    0U,	// ZIP2v16i8
    0U,	// ZIP2v2i32
    0U,	// ZIP2v2i64
    0U,	// ZIP2v4i16
    0U,	// ZIP2v4i32
    0U,	// ZIP2v8i16
    0U,	// ZIP2v8i8
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 6 bits for 47 unique commands.
  switch ((Bits >> 14) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O);
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, STI, O);
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // ADD_ZZZ_B, SUB_ZZZ_B, ZIP1_PPP_B, ZIP1_ZZZ_B, ZIP2_PPP_B, ZIP2_ZZZ_B
    printSVERegOp<'b'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'b'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'b'>(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADD_ZZZ_D, SUB_ZZZ_D, ZIP1_PPP_D, ZIP1_ZZZ_D, ZIP2_PPP_D, ZIP2_ZZZ_D
    printSVERegOp<'d'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'d'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'d'>(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ADD_ZZZ_H, SUB_ZZZ_H, ZIP1_PPP_H, ZIP1_ZZZ_H, ZIP2_PPP_H, ZIP2_ZZZ_H
    printSVERegOp<'h'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'h'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'h'>(MI, 2, STI, O);
    return;
    break;
  case 7:
    // ADD_ZZZ_S, SUB_ZZZ_S, ZIP1_PPP_S, ZIP1_ZZZ_S, ZIP2_PPP_S, ZIP2_ZZZ_S
    printSVERegOp<'s'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'s'>(MI, 1, STI, O);
    O << ", ";
    printSVERegOp<'s'>(MI, 2, STI, O);
    return;
    break;
  case 8:
    // B, BL
    printAlignedLabel(MI, 0, STI, O);
    return;
    break;
  case 9:
    // BRK, DCPS1, DCPS2, DCPS3, HLT, HVC, SMC, SVC
    printImmHex(MI, 0, STI, O);
    return;
    break;
  case 10:
    // Bcc
    printCondCode(MI, 0, STI, O);
    O << "\t";
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 11:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    printOperand(MI, 1, STI, O);
    break;
  case 12:
    // CASPALW, CASPAW, CASPLW, CASPW
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // CASPALX, CASPAX, CASPLX, CASPX
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O);
    return;
    break;
  case 15:
    // HINT
    printImm(MI, 0, STI, O);
    return;
    break;
  case 16:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 18:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 20:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 22:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 24:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 25:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 26:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 27:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 28:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 29:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 30:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 31:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 32:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 33:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 34:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 35:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 36:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 37:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 38:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 39:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 40:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 41:
    // MSRpstateImm1, MSRpstateImm4
    printSystemPStateField(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 42:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O);
    break;
  case 43:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 44:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 45:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 46:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 20) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    O << ", ";
    break;
  case 1:
    // AUTDZA, AUTDZB, AUTIZA, AUTIZB, BLR, BLRAAZ, BLRABZ, BR, BRAAZ, BRABZ,...
    return;
    break;
  case 2:
    // FCMPDri, FCMPEDri, FCMPEHri, FCMPESri, FCMPHri, FCMPSri
    O << ", #0.0";
    return;
    break;
  case 3:
    // FCVTLv2i32, FCVTLv4i32
    O << ".2d, ";
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // FCVTLv4i16, FCVTLv8i16, FCVTNv4i32, FCVTXNv4f32
    O << ".4s, ";
    break;
  case 5:
    // FCVTNv2i32, FCVTXNv2f32
    O << ".2s, ";
    printVRegOperand(MI, 1, STI, O);
    O << ".2d";
    return;
    break;
  case 6:
    // FCVTNv4i16
    O << ".4h, ";
    printVRegOperand(MI, 1, STI, O);
    O << ".4s";
    return;
    break;
  case 7:
    // FCVTNv8i16
    O << ".8h, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".4s";
    return;
    break;
  case 8:
    // FMOVXDHighr, INSvi16gpr, INSvi16lane, INSvi32gpr, INSvi32lane, INSvi64...
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 9:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O);
    return;
    break;
  case 10:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O);
    return;
    break;
  case 11:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O);
    return;
    break;
  case 12:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O);
    return;
    break;
  case 13:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O);
    return;
    break;
  case 14:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O);
    return;
    break;
  case 15:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O);
    return;
    break;
  case 16:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O);
    return;
    break;
  case 17:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O);
    return;
    break;
  case 18:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']';
    return;
    break;
  case 19:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O);
    return;
    break;
  case 20:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O);
    return;
    break;
  case 21:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O);
    return;
    break;
  case 22:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O);
    return;
    break;
  case 23:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O);
    return;
    break;
  case 24:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O);
    return;
    break;
  case 25:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O);
    return;
    break;
  case 26:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O);
    return;
    break;
  case 27:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O);
    return;
    break;
  case 28:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O);
    return;
    break;
  case 29:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O);
    return;
    break;
  case 30:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O);
    return;
    break;
  case 31:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O);
    return;
    break;
  case 32:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ", [";
    break;
  case 33:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], ";
    break;
  case 34:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b, ";
    break;
  case 35:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b, ";
    break;
  }


  // Fragment 2 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 26) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, STI, O);
    return;
    break;
  case 4:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 2, STI, O);
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printImm(MI, 2, STI, O);
    printShifter(MI, 3, STI, O);
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // FCVTLv2i32
    O << ".2s";
    return;
    break;
  case 8:
    // FCVTLv4i32
    O << ".4s";
    return;
    break;
  case 9:
    // FMOVDi, FMOVHi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f16_ns, FMOV...
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 10:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O);
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 12:
    // LDADDAB, LDADDAH, LDADDALB, LDADDALH, LDADDALW, LDADDALX, LDADDAW, LDA...
    printOperand(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O);
    return;
    break;
  case 14:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printImm(MI, 1, STI, O);
    break;
  case 15:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O);
    return;
    break;
  case 16:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O);
    return;
    break;
  case 17:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O);
    return;
    break;
  case 18:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O);
    return;
    break;
  case 19:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O);
    return;
    break;
  case 20:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O);
    return;
    break;
  case 21:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O);
    return;
    break;
  case 22:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O);
    return;
    break;
  case 23:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O);
    return;
    break;
  case 24:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O);
    return;
    break;
  case 25:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O);
    return;
    break;
  case 26:
    // SYSxt
    printSysCROperand(MI, 1, STI, O);
    O << ", ";
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 27:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", ";
    printVRegOperand(MI, 2, STI, O);
    break;
  case 28:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O);
    O << ", ";
    printVRegOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 31) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    return;
    break;
  case 1:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    O << ", ";
    break;
  case 2:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ", [";
    break;
  case 3:
    // CMEQv16i8rz, CMEQv1i64rz, CMEQv2i32rz, CMEQv2i64rz, CMEQv4i16rz, CMEQv...
    O << ", #0";
    return;
    break;
  case 4:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 5:
    // FCMEQv1i16rz, FCMEQv1i32rz, FCMEQv1i64rz, FCMEQv2i32rz, FCMEQv2i64rz, ...
    O << ", #0.0";
    return;
    break;
  case 6:
    // FCVTLv4i16
    O << ".4h";
    return;
    break;
  case 7:
    // FCVTLv8i16
    O << ".8h";
    return;
    break;
  case 8:
    // FCVTNv4i32, FCVTXNv4f32
    O << ".2d";
    return;
    break;
  case 9:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ']';
    return;
    break;
  case 10:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O);
    return;
    break;
  case 12:
    // SHLLv16i8, SHLLv8i8
    O << ", #8";
    return;
    break;
  case 13:
    // SHLLv2i32, SHLLv4i32
    O << ", #32";
    return;
    break;
  case 14:
    // SHLLv4i16, SHLLv8i16
    O << ", #16";
    return;
    break;
  case 15:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b";
    return;
    break;
  case 16:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b";
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 36) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O);
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O);
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, STI, O);
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, STI, O);
    return;
    break;
  case 8:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 3, STI, O);
    break;
  case 9:
    // LDRAAindexed, LDRABindexed
    printImmScale<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDRAAwriteback, LDRABwriteback
    printImmScale<8>(MI, 3, STI, O);
    O << "]!";
    return;
    break;
  case 11:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printSysCROperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 17:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    return;
    break;
  case 1:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O);
    return;
    break;
  case 2:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", ";
    break;
  case 3:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ']';
    return;
    break;
  case 4:
    // FCMLAv4f16_indexed, FCMLAv4f32_indexed, FCMLAv8f16_indexed, FMLAv1i16_...
    printVectorIndex(MI, 4, STI, O);
    break;
  case 5:
    // FMULXv1i16_indexed, FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 6:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], ";
    break;
  case 7:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!";
    return;
    break;
  case 8:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 45) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O);
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, EXTv16i8, EXTv8i8, FMADDDrrr, FMADDHrrr, FMADDSrrr...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 3:
    // FCADDv2f32, FCADDv2f64, FCADDv4f16, FCADDv4f32, FCADDv8f16
    printComplexRotationOp<180, 90>(MI, 3, STI, O);
    return;
    break;
  case 4:
    // FCMLAv2f32, FCMLAv2f64, FCMLAv4f16, FCMLAv4f32, FCMLAv8f16
    printComplexRotationOp<90, 0>(MI, 4, STI, O);
    return;
    break;
  case 5:
    // FCMLAv4f16_indexed, FCMLAv4f32_indexed, FCMLAv8f16_indexed
    O << ", ";
    printComplexRotationOp<90, 0>(MI, 5, STI, O);
    return;
    break;
  case 6:
    // FMLAv1i16_indexed, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_ind...
    return;
    break;
  case 7:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 8:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 9:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O);
    break;
  case 11:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O);
    break;
  case 12:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O);
    break;
  case 13:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 20:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 50) & 1) {
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!";
    return;
  } else {
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64AppleInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 564 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'W', '9', '_', 'W', '1', '0', 0,
  /* 33 */ 'X', '9', '_', 'X', '1', '0', 0,
  /* 40 */ 'b', '1', '0', 0,
  /* 44 */ 'd', '1', '0', 0,
  /* 48 */ 'h', '1', '0', 0,
  /* 52 */ 'p', '1', '0', 0,
  /* 56 */ 'q', '1', '0', 0,
  /* 60 */ 's', '1', '0', 0,
  /* 64 */ 'w', '1', '0', 0,
  /* 68 */ 'x', '1', '0', 0,
  /* 72 */ 'z', '1', '0', 0,
  /* 76 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 92 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 108 */ 'W', '1', '9', '_', 'W', '2', '0', 0,
  /* 116 */ 'X', '1', '9', '_', 'X', '2', '0', 0,
  /* 124 */ 'b', '2', '0', 0,
  /* 128 */ 'd', '2', '0', 0,
  /* 132 */ 'h', '2', '0', 0,
  /* 136 */ 'q', '2', '0', 0,
  /* 140 */ 's', '2', '0', 0,
  /* 144 */ 'w', '2', '0', 0,
  /* 148 */ 'x', '2', '0', 0,
  /* 152 */ 'z', '2', '0', 0,
  /* 156 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 172 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 188 */ 'W', '2', '9', '_', 'W', '3', '0', 0,
  /* 196 */ 'b', '3', '0', 0,
  /* 200 */ 'd', '3', '0', 0,
  /* 204 */ 'h', '3', '0', 0,
  /* 208 */ 'q', '3', '0', 0,
  /* 212 */ 's', '3', '0', 0,
  /* 216 */ 'w', '3', '0', 0,
  /* 220 */ 'x', '3', '0', 0,
  /* 224 */ 'z', '3', '0', 0,
  /* 228 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 243 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 258 */ 'W', 'Z', 'R', '_', 'W', '0', 0,
  /* 265 */ 'X', 'Z', 'R', '_', 'X', '0', 0,
  /* 272 */ 'b', '0', 0,
  /* 275 */ 'd', '0', 0,
  /* 278 */ 'h', '0', 0,
  /* 281 */ 'p', '0', 0,
  /* 284 */ 'q', '0', 0,
  /* 287 */ 's', '0', 0,
  /* 290 */ 'w', '0', 0,
  /* 293 */ 'x', '0', 0,
  /* 296 */ 'z', '0', 0,
  /* 299 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 313 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 327 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 335 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 343 */ 'b', '1', '1', 0,
  /* 347 */ 'd', '1', '1', 0,
  /* 351 */ 'h', '1', '1', 0,
  /* 355 */ 'p', '1', '1', 0,
  /* 359 */ 'q', '1', '1', 0,
  /* 363 */ 's', '1', '1', 0,
  /* 367 */ 'w', '1', '1', 0,
  /* 371 */ 'x', '1', '1', 0,
  /* 375 */ 'z', '1', '1', 0,
  /* 379 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 395 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 411 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 419 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 427 */ 'b', '2', '1', 0,
  /* 431 */ 'd', '2', '1', 0,
  /* 435 */ 'h', '2', '1', 0,
  /* 439 */ 'q', '2', '1', 0,
  /* 443 */ 's', '2', '1', 0,
  /* 447 */ 'w', '2', '1', 0,
  /* 451 */ 'x', '2', '1', 0,
  /* 455 */ 'z', '2', '1', 0,
  /* 459 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 475 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 491 */ 'b', '3', '1', 0,
  /* 495 */ 'd', '3', '1', 0,
  /* 499 */ 'h', '3', '1', 0,
  /* 503 */ 'q', '3', '1', 0,
  /* 507 */ 's', '3', '1', 0,
  /* 511 */ 'z', '3', '1', 0,
  /* 515 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 529 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 543 */ 'W', '0', '_', 'W', '1', 0,
  /* 549 */ 'X', '0', '_', 'X', '1', 0,
  /* 555 */ 'b', '1', 0,
  /* 558 */ 'd', '1', 0,
  /* 561 */ 'h', '1', 0,
  /* 564 */ 'p', '1', 0,
  /* 567 */ 'q', '1', 0,
  /* 570 */ 's', '1', 0,
  /* 573 */ 'w', '1', 0,
  /* 576 */ 'x', '1', 0,
  /* 579 */ 'z', '1', 0,
  /* 582 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 597 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 612 */ 'W', '1', '1', '_', 'W', '1', '2', 0,
  /* 620 */ 'X', '1', '1', '_', 'X', '1', '2', 0,
  /* 628 */ 'b', '1', '2', 0,
  /* 632 */ 'd', '1', '2', 0,
  /* 636 */ 'h', '1', '2', 0,
  /* 640 */ 'p', '1', '2', 0,
  /* 644 */ 'q', '1', '2', 0,
  /* 648 */ 's', '1', '2', 0,
  /* 652 */ 'w', '1', '2', 0,
  /* 656 */ 'x', '1', '2', 0,
  /* 660 */ 'z', '1', '2', 0,
  /* 664 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 680 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 696 */ 'W', '2', '1', '_', 'W', '2', '2', 0,
  /* 704 */ 'X', '2', '1', '_', 'X', '2', '2', 0,
  /* 712 */ 'b', '2', '2', 0,
  /* 716 */ 'd', '2', '2', 0,
  /* 720 */ 'h', '2', '2', 0,
  /* 724 */ 'q', '2', '2', 0,
  /* 728 */ 's', '2', '2', 0,
  /* 732 */ 'w', '2', '2', 0,
  /* 736 */ 'x', '2', '2', 0,
  /* 740 */ 'z', '2', '2', 0,
  /* 744 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 757 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 770 */ 'W', '1', '_', 'W', '2', 0,
  /* 776 */ 'X', '1', '_', 'X', '2', 0,
  /* 782 */ 'b', '2', 0,
  /* 785 */ 'd', '2', 0,
  /* 788 */ 'h', '2', 0,
  /* 791 */ 'p', '2', 0,
  /* 794 */ 'q', '2', 0,
  /* 797 */ 's', '2', 0,
  /* 800 */ 'w', '2', 0,
  /* 803 */ 'x', '2', 0,
  /* 806 */ 'z', '2', 0,
  /* 809 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 825 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 841 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 849 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 857 */ 'b', '1', '3', 0,
  /* 861 */ 'd', '1', '3', 0,
  /* 865 */ 'h', '1', '3', 0,
  /* 869 */ 'p', '1', '3', 0,
  /* 873 */ 'q', '1', '3', 0,
  /* 877 */ 's', '1', '3', 0,
  /* 881 */ 'w', '1', '3', 0,
  /* 885 */ 'x', '1', '3', 0,
  /* 889 */ 'z', '1', '3', 0,
  /* 893 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 909 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 925 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 933 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 941 */ 'b', '2', '3', 0,
  /* 945 */ 'd', '2', '3', 0,
  /* 949 */ 'h', '2', '3', 0,
  /* 953 */ 'q', '2', '3', 0,
  /* 957 */ 's', '2', '3', 0,
  /* 961 */ 'w', '2', '3', 0,
  /* 965 */ 'x', '2', '3', 0,
  /* 969 */ 'z', '2', '3', 0,
  /* 973 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 985 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 997 */ 'W', '2', '_', 'W', '3', 0,
  /* 1003 */ 'X', '2', '_', 'X', '3', 0,
  /* 1009 */ 'b', '3', 0,
  /* 1012 */ 'd', '3', 0,
  /* 1015 */ 'h', '3', 0,
  /* 1018 */ 'p', '3', 0,
  /* 1021 */ 'q', '3', 0,
  /* 1024 */ 's', '3', 0,
  /* 1027 */ 'w', '3', 0,
  /* 1030 */ 'x', '3', 0,
  /* 1033 */ 'z', '3', 0,
  /* 1036 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 1052 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 1068 */ 'W', '1', '3', '_', 'W', '1', '4', 0,
  /* 1076 */ 'X', '1', '3', '_', 'X', '1', '4', 0,
  /* 1084 */ 'b', '1', '4', 0,
  /* 1088 */ 'd', '1', '4', 0,
  /* 1092 */ 'h', '1', '4', 0,
  /* 1096 */ 'p', '1', '4', 0,
  /* 1100 */ 'q', '1', '4', 0,
  /* 1104 */ 's', '1', '4', 0,
  /* 1108 */ 'w', '1', '4', 0,
  /* 1112 */ 'x', '1', '4', 0,
  /* 1116 */ 'z', '1', '4', 0,
  /* 1120 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1136 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1152 */ 'W', '2', '3', '_', 'W', '2', '4', 0,
  /* 1160 */ 'X', '2', '3', '_', 'X', '2', '4', 0,
  /* 1168 */ 'b', '2', '4', 0,
  /* 1172 */ 'd', '2', '4', 0,
  /* 1176 */ 'h', '2', '4', 0,
  /* 1180 */ 'q', '2', '4', 0,
  /* 1184 */ 's', '2', '4', 0,
  /* 1188 */ 'w', '2', '4', 0,
  /* 1192 */ 'x', '2', '4', 0,
  /* 1196 */ 'z', '2', '4', 0,
  /* 1200 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1212 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1224 */ 'W', '3', '_', 'W', '4', 0,
  /* 1230 */ 'X', '3', '_', 'X', '4', 0,
  /* 1236 */ 'b', '4', 0,
  /* 1239 */ 'd', '4', 0,
  /* 1242 */ 'h', '4', 0,
  /* 1245 */ 'p', '4', 0,
  /* 1248 */ 'q', '4', 0,
  /* 1251 */ 's', '4', 0,
  /* 1254 */ 'w', '4', 0,
  /* 1257 */ 'x', '4', 0,
  /* 1260 */ 'z', '4', 0,
  /* 1263 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1279 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1295 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1303 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1311 */ 'b', '1', '5', 0,
  /* 1315 */ 'd', '1', '5', 0,
  /* 1319 */ 'h', '1', '5', 0,
  /* 1323 */ 'p', '1', '5', 0,
  /* 1327 */ 'q', '1', '5', 0,
  /* 1331 */ 's', '1', '5', 0,
  /* 1335 */ 'w', '1', '5', 0,
  /* 1339 */ 'x', '1', '5', 0,
  /* 1343 */ 'z', '1', '5', 0,
  /* 1347 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1363 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1379 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1387 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1395 */ 'b', '2', '5', 0,
  /* 1399 */ 'd', '2', '5', 0,
  /* 1403 */ 'h', '2', '5', 0,
  /* 1407 */ 'q', '2', '5', 0,
  /* 1411 */ 's', '2', '5', 0,
  /* 1415 */ 'w', '2', '5', 0,
  /* 1419 */ 'x', '2', '5', 0,
  /* 1423 */ 'z', '2', '5', 0,
  /* 1427 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1439 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1451 */ 'W', '4', '_', 'W', '5', 0,
  /* 1457 */ 'X', '4', '_', 'X', '5', 0,
  /* 1463 */ 'b', '5', 0,
  /* 1466 */ 'd', '5', 0,
  /* 1469 */ 'h', '5', 0,
  /* 1472 */ 'p', '5', 0,
  /* 1475 */ 'q', '5', 0,
  /* 1478 */ 's', '5', 0,
  /* 1481 */ 'w', '5', 0,
  /* 1484 */ 'x', '5', 0,
  /* 1487 */ 'z', '5', 0,
  /* 1490 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1506 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1522 */ 'W', '1', '5', '_', 'W', '1', '6', 0,
  /* 1530 */ 'X', '1', '5', '_', 'X', '1', '6', 0,
  /* 1538 */ 'b', '1', '6', 0,
  /* 1542 */ 'd', '1', '6', 0,
  /* 1546 */ 'h', '1', '6', 0,
  /* 1550 */ 'q', '1', '6', 0,
  /* 1554 */ 's', '1', '6', 0,
  /* 1558 */ 'w', '1', '6', 0,
  /* 1562 */ 'x', '1', '6', 0,
  /* 1566 */ 'z', '1', '6', 0,
  /* 1570 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1586 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1602 */ 'W', '2', '5', '_', 'W', '2', '6', 0,
  /* 1610 */ 'X', '2', '5', '_', 'X', '2', '6', 0,
  /* 1618 */ 'b', '2', '6', 0,
  /* 1622 */ 'd', '2', '6', 0,
  /* 1626 */ 'h', '2', '6', 0,
  /* 1630 */ 'q', '2', '6', 0,
  /* 1634 */ 's', '2', '6', 0,
  /* 1638 */ 'w', '2', '6', 0,
  /* 1642 */ 'x', '2', '6', 0,
  /* 1646 */ 'z', '2', '6', 0,
  /* 1650 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1662 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1674 */ 'W', '5', '_', 'W', '6', 0,
  /* 1680 */ 'X', '5', '_', 'X', '6', 0,
  /* 1686 */ 'b', '6', 0,
  /* 1689 */ 'd', '6', 0,
  /* 1692 */ 'h', '6', 0,
  /* 1695 */ 'p', '6', 0,
  /* 1698 */ 'q', '6', 0,
  /* 1701 */ 's', '6', 0,
  /* 1704 */ 'w', '6', 0,
  /* 1707 */ 'x', '6', 0,
  /* 1710 */ 'z', '6', 0,
  /* 1713 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1729 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1745 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 1753 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 1761 */ 'b', '1', '7', 0,
  /* 1765 */ 'd', '1', '7', 0,
  /* 1769 */ 'h', '1', '7', 0,
  /* 1773 */ 'q', '1', '7', 0,
  /* 1777 */ 's', '1', '7', 0,
  /* 1781 */ 'w', '1', '7', 0,
  /* 1785 */ 'x', '1', '7', 0,
  /* 1789 */ 'z', '1', '7', 0,
  /* 1793 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1809 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1825 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 1833 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 1841 */ 'b', '2', '7', 0,
  /* 1845 */ 'd', '2', '7', 0,
  /* 1849 */ 'h', '2', '7', 0,
  /* 1853 */ 'q', '2', '7', 0,
  /* 1857 */ 's', '2', '7', 0,
  /* 1861 */ 'w', '2', '7', 0,
  /* 1865 */ 'x', '2', '7', 0,
  /* 1869 */ 'z', '2', '7', 0,
  /* 1873 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1885 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1897 */ 'W', '6', '_', 'W', '7', 0,
  /* 1903 */ 'X', '6', '_', 'X', '7', 0,
  /* 1909 */ 'b', '7', 0,
  /* 1912 */ 'd', '7', 0,
  /* 1915 */ 'h', '7', 0,
  /* 1918 */ 'p', '7', 0,
  /* 1921 */ 'q', '7', 0,
  /* 1924 */ 's', '7', 0,
  /* 1927 */ 'w', '7', 0,
  /* 1930 */ 'x', '7', 0,
  /* 1933 */ 'z', '7', 0,
  /* 1936 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1952 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1968 */ 'W', '1', '7', '_', 'W', '1', '8', 0,
  /* 1976 */ 'X', '1', '7', '_', 'X', '1', '8', 0,
  /* 1984 */ 'b', '1', '8', 0,
  /* 1988 */ 'd', '1', '8', 0,
  /* 1992 */ 'h', '1', '8', 0,
  /* 1996 */ 'q', '1', '8', 0,
  /* 2000 */ 's', '1', '8', 0,
  /* 2004 */ 'w', '1', '8', 0,
  /* 2008 */ 'x', '1', '8', 0,
  /* 2012 */ 'z', '1', '8', 0,
  /* 2016 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 2032 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 2048 */ 'W', '2', '7', '_', 'W', '2', '8', 0,
  /* 2056 */ 'X', '2', '7', '_', 'X', '2', '8', 0,
  /* 2064 */ 'b', '2', '8', 0,
  /* 2068 */ 'd', '2', '8', 0,
  /* 2072 */ 'h', '2', '8', 0,
  /* 2076 */ 'q', '2', '8', 0,
  /* 2080 */ 's', '2', '8', 0,
  /* 2084 */ 'w', '2', '8', 0,
  /* 2088 */ 'x', '2', '8', 0,
  /* 2092 */ 'z', '2', '8', 0,
  /* 2096 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 2108 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 2120 */ 'W', '7', '_', 'W', '8', 0,
  /* 2126 */ 'X', '7', '_', 'X', '8', 0,
  /* 2132 */ 'b', '8', 0,
  /* 2135 */ 'd', '8', 0,
  /* 2138 */ 'h', '8', 0,
  /* 2141 */ 'p', '8', 0,
  /* 2144 */ 'q', '8', 0,
  /* 2147 */ 's', '8', 0,
  /* 2150 */ 'w', '8', 0,
  /* 2153 */ 'x', '8', 0,
  /* 2156 */ 'z', '8', 0,
  /* 2159 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2175 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2191 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2199 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2207 */ 'b', '1', '9', 0,
  /* 2211 */ 'd', '1', '9', 0,
  /* 2215 */ 'h', '1', '9', 0,
  /* 2219 */ 'q', '1', '9', 0,
  /* 2223 */ 's', '1', '9', 0,
  /* 2227 */ 'w', '1', '9', 0,
  /* 2231 */ 'x', '1', '9', 0,
  /* 2235 */ 'z', '1', '9', 0,
  /* 2239 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2255 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2271 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2279 */ 'b', '2', '9', 0,
  /* 2283 */ 'd', '2', '9', 0,
  /* 2287 */ 'h', '2', '9', 0,
  /* 2291 */ 'q', '2', '9', 0,
  /* 2295 */ 's', '2', '9', 0,
  /* 2299 */ 'w', '2', '9', 0,
  /* 2303 */ 'x', '2', '9', 0,
  /* 2307 */ 'z', '2', '9', 0,
  /* 2311 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2323 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2335 */ 'W', '8', '_', 'W', '9', 0,
  /* 2341 */ 'X', '8', '_', 'X', '9', 0,
  /* 2347 */ 'b', '9', 0,
  /* 2350 */ 'd', '9', 0,
  /* 2353 */ 'h', '9', 0,
  /* 2356 */ 'p', '9', 0,
  /* 2359 */ 'q', '9', 0,
  /* 2362 */ 's', '9', 0,
  /* 2365 */ 'w', '9', 0,
  /* 2368 */ 'x', '9', 0,
  /* 2371 */ 'z', '9', 0,
  /* 2374 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2381 */ 'F', 'P', '_', 'L', 'R', 0,
  /* 2387 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2395 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2402 */ 'z', '1', '0', '_', 'h', 'i', 0,
  /* 2409 */ 'z', '2', '0', '_', 'h', 'i', 0,
  /* 2416 */ 'z', '3', '0', '_', 'h', 'i', 0,
  /* 2423 */ 'z', '0', '_', 'h', 'i', 0,
  /* 2429 */ 'z', '1', '1', '_', 'h', 'i', 0,
  /* 2436 */ 'z', '2', '1', '_', 'h', 'i', 0,
  /* 2443 */ 'z', '3', '1', '_', 'h', 'i', 0,
  /* 2450 */ 'z', '1', '_', 'h', 'i', 0,
  /* 2456 */ 'z', '1', '2', '_', 'h', 'i', 0,
  /* 2463 */ 'z', '2', '2', '_', 'h', 'i', 0,
  /* 2470 */ 'z', '2', '_', 'h', 'i', 0,
  /* 2476 */ 'z', '1', '3', '_', 'h', 'i', 0,
  /* 2483 */ 'z', '2', '3', '_', 'h', 'i', 0,
  /* 2490 */ 'z', '3', '_', 'h', 'i', 0,
  /* 2496 */ 'z', '1', '4', '_', 'h', 'i', 0,
  /* 2503 */ 'z', '2', '4', '_', 'h', 'i', 0,
  /* 2510 */ 'z', '4', '_', 'h', 'i', 0,
  /* 2516 */ 'z', '1', '5', '_', 'h', 'i', 0,
  /* 2523 */ 'z', '2', '5', '_', 'h', 'i', 0,
  /* 2530 */ 'z', '5', '_', 'h', 'i', 0,
  /* 2536 */ 'z', '1', '6', '_', 'h', 'i', 0,
  /* 2543 */ 'z', '2', '6', '_', 'h', 'i', 0,
  /* 2550 */ 'z', '6', '_', 'h', 'i', 0,
  /* 2556 */ 'z', '1', '7', '_', 'h', 'i', 0,
  /* 2563 */ 'z', '2', '7', '_', 'h', 'i', 0,
  /* 2570 */ 'z', '7', '_', 'h', 'i', 0,
  /* 2576 */ 'z', '1', '8', '_', 'h', 'i', 0,
  /* 2583 */ 'z', '2', '8', '_', 'h', 'i', 0,
  /* 2590 */ 'z', '8', '_', 'h', 'i', 0,
  /* 2596 */ 'z', '1', '9', '_', 'h', 'i', 0,
  /* 2603 */ 'z', '2', '9', '_', 'h', 'i', 0,
  /* 2610 */ 'z', '9', '_', 'h', 'i', 0,
  /* 2616 */ 'w', 's', 'p', 0,
  /* 2620 */ 'w', 'z', 'r', 0,
  /* 2624 */ 'x', 'z', 'r', 0,
  /* 2628 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    2303, 220, 2628, 2617, 2616, 2620, 2624, 272, 555, 782, 1009, 1236, 1463, 1686, 
    1909, 2132, 2347, 40, 343, 628, 857, 1084, 1311, 1538, 1761, 1984, 2207, 124, 
    427, 712, 941, 1168, 1395, 1618, 1841, 2064, 2279, 196, 491, 275, 558, 785, 
    1012, 1239, 1466, 1689, 1912, 2135, 2350, 44, 347, 632, 861, 1088, 1315, 1542, 
    1765, 1988, 2211, 128, 431, 716, 945, 1172, 1399, 1622, 1845, 2068, 2283, 200, 
    495, 278, 561, 788, 1015, 1242, 1469, 1692, 1915, 2138, 2353, 48, 351, 636, 
    865, 1092, 1319, 1546, 1769, 1992, 2215, 132, 435, 720, 949, 1176, 1403, 1626, 
    1849, 2072, 2287, 204, 499, 281, 564, 791, 1018, 1245, 1472, 1695, 1918, 2141, 
    2356, 52, 355, 640, 869, 1096, 1323, 284, 567, 794, 1021, 1248, 1475, 1698, 
    1921, 2144, 2359, 56, 359, 644, 873, 1100, 1327, 1550, 1773, 1996, 2219, 136, 
    439, 724, 953, 1180, 1407, 1630, 1853, 2076, 2291, 208, 503, 287, 570, 797, 
    1024, 1251, 1478, 1701, 1924, 2147, 2362, 60, 363, 648, 877, 1104, 1331, 1554, 
    1777, 2000, 2223, 140, 443, 728, 957, 1184, 1411, 1634, 1857, 2080, 2295, 212, 
    507, 290, 573, 800, 1027, 1254, 1481, 1704, 1927, 2150, 2365, 64, 367, 652, 
    881, 1108, 1335, 1558, 1781, 2004, 2227, 144, 447, 732, 961, 1188, 1415, 1638, 
    1861, 2084, 2299, 216, 293, 576, 803, 1030, 1257, 1484, 1707, 1930, 2153, 2368, 
    68, 371, 656, 885, 1112, 1339, 1562, 1785, 2008, 2231, 148, 451, 736, 965, 
    1192, 1419, 1642, 1865, 2088, 296, 579, 806, 1033, 1260, 1487, 1710, 1933, 2156, 
    2371, 72, 375, 660, 889, 1116, 1343, 1566, 1789, 2012, 2235, 152, 455, 740, 
    969, 1196, 1423, 1646, 1869, 2092, 2307, 224, 511, 2423, 2450, 2470, 2490, 2510, 
    2530, 2550, 2570, 2590, 2610, 2402, 2429, 2456, 2476, 2496, 2516, 2536, 2556, 2576, 
    2596, 2409, 2436, 2463, 2483, 2503, 2523, 2543, 2563, 2583, 2603, 2416, 2443, 523, 
    751, 979, 1206, 1433, 1656, 1879, 2102, 2317, 6, 305, 589, 817, 1044, 1271, 
    1498, 1721, 1944, 2167, 84, 387, 672, 901, 1128, 1355, 1578, 1801, 2024, 2247, 
    164, 467, 236, 973, 1200, 1427, 1650, 1873, 2096, 2311, 0, 299, 582, 809, 
    1036, 1263, 1490, 1713, 1936, 2159, 76, 379, 664, 893, 1120, 1347, 1570, 1793, 
    2016, 2239, 156, 459, 228, 515, 744, 748, 976, 1203, 1430, 1653, 1876, 2099, 
    2314, 3, 302, 585, 813, 1040, 1267, 1494, 1717, 1940, 2163, 80, 383, 668, 
    897, 1124, 1351, 1574, 1797, 2020, 2243, 160, 463, 232, 519, 537, 764, 991, 
    1218, 1445, 1668, 1891, 2114, 2329, 19, 319, 604, 833, 1060, 1287, 1514, 1737, 
    1960, 2183, 100, 403, 688, 917, 1144, 1371, 1594, 1817, 2040, 2263, 180, 483, 
    251, 985, 1212, 1439, 1662, 1885, 2108, 2323, 13, 313, 597, 825, 1052, 1279, 
    1506, 1729, 1952, 2175, 92, 395, 680, 909, 1136, 1363, 1586, 1809, 2032, 2255, 
    172, 475, 243, 529, 757, 761, 988, 1215, 1442, 1665, 1888, 2111, 2326, 16, 
    316, 600, 829, 1056, 1283, 1510, 1733, 1956, 2179, 96, 399, 684, 913, 1140, 
    1367, 1590, 1813, 2036, 2259, 176, 479, 247, 533, 258, 2387, 543, 770, 997, 
    1224, 1451, 1674, 1897, 2120, 2335, 26, 327, 612, 841, 1068, 1295, 1522, 1745, 
    1968, 2191, 108, 411, 696, 925, 1152, 1379, 1602, 1825, 2048, 2271, 188, 2381, 
    2395, 265, 2374, 549, 776, 1003, 1230, 1457, 1680, 1903, 2126, 2341, 33, 335, 
    620, 849, 1076, 1303, 1530, 1753, 1976, 2199, 116, 419, 704, 933, 1160, 1387, 
    1610, 1833, 2056, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 
    27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 
    63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 
    111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64AppleInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool AArch64AppleInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        STI.getFeatureBits()[AArch64::FeatureRAS]) {
      // (HINT { 1, 0, 0, 0, 0 })
      AsmString = "esb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(0), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSPE]) {
      // (HINT psbhint_op:$op)
      AsmString = "psb $\xFF\x01\x09";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x03\x0A, $\xFF\x04\x06$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x03\x0A, $\xFF\x04\x06$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x03\x0A, $\xFF\x04\x06$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x03\x0A, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x03\x0A, $\xFF\x04\x06$\xFF\x05\x0A";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x12, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x12, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x12, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x12, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x04\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x04\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x04\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x16$\xFF\x04\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRAAindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRAAindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldraa	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRABindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRABindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrab	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn.16b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn.8b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov.16b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov.8b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum	$\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x19, $\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov.s	$\x01, $\xFF\x02\x06$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov.d	$\x01, $\xFF\x02\x06$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64AppleInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, STI, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 6:
    printImm(MI, OpIdx, STI, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 8:
    printPSBHintOp(MI, OpIdx, STI, OS);
    break;
  case 9:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 10:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 12:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 22:
    printImmHex(MI, OpIdx, STI, OS);
    break;
  case 23:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 24:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64AppleInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  case 2: {

    // Check, if operand is valid, to fix exhaustive aliasing in disassembly.
    // "psb" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64PSBHint::lookupPSBByEncoding(MCOp.getImm()) != nullptr;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
