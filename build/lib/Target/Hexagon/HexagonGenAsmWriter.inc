/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', '"', 32, 0,
  /* 26 */ 'i', 'f', 32, '(', '!', 'p', '0', ')', 32, 0,
  /* 36 */ 'i', 'f', 32, '(', 'p', '0', ')', 32, 0,
  /* 45 */ 'i', 'f', 32, '(', '!', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 0,
  /* 59 */ 'i', 'f', 32, '(', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 0,
  /* 72 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 78 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 84 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 91 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 98 */ 'i', 'f', 32, '(', '!', 0,
  /* 104 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', '"', 0,
  /* 129 */ 't', 'r', 'a', 'p', '0', '(', '#', 0,
  /* 137 */ 'v', 'w', 'h', 'i', 's', 't', '1', '2', '8', '(', '#', 0,
  /* 149 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 156 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 163 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 176 */ 'p', 'a', 'u', 's', 'e', '(', '#', 0,
  /* 184 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 191 */ 'i', 'm', 'm', 'e', 'x', 't', '(', '#', 0,
  /* 200 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 207 */ 'm', 'e', 'm', 'd', '(', 'r', '2', '9', '+', '#', 0,
  /* 218 */ 'm', 'e', 'm', 'w', '(', 'r', '2', '9', '+', '#', 0,
  /* 229 */ 'm', 'e', 'm', 'b', '(', 'g', 'p', '+', '#', 0,
  /* 239 */ 'm', 'e', 'm', 'd', '(', 'g', 'p', '+', '#', 0,
  /* 249 */ 'm', 'e', 'm', 'h', '(', 'g', 'p', '+', '#', 0,
  /* 259 */ 'm', 'e', 'm', 'w', '(', 'g', 'p', '+', '#', 0,
  /* 269 */ 'i', 'f', 32, '(', 0,
  /* 274 */ 'p', '3', 32, '=', 32, 's', 'p', '1', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 289 */ 'p', '3', 32, '=', 32, 's', 'p', '2', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 304 */ 'p', '3', 32, '=', 32, 's', 'p', '3', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 319 */ 'l', 'o', 'o', 'p', '1', '(', 0,
  /* 326 */ 'v', 't', 'r', 'a', 'n', 's', '2', 'x', '2', '(', 0,
  /* 337 */ 'v', 'w', 'h', 'i', 's', 't', '2', '5', '6', '(', 0,
  /* 348 */ 'v', 'w', 'h', 'i', 's', 't', '1', '2', '8', '(', 0,
  /* 359 */ 'd', 'c', 'c', 'l', 'e', 'a', 'n', 'a', '(', 0,
  /* 369 */ 'd', 'c', 'z', 'e', 'r', 'o', 'a', '(', 0,
  /* 378 */ 'd', 'c', 'i', 'n', 'v', 'a', '(', 0,
  /* 386 */ 'i', 'c', 'i', 'n', 'v', 'a', '(', 0,
  /* 394 */ 'd', 'c', 'c', 'l', 'e', 'a', 'n', 'i', 'n', 'v', 'a', '(', 0,
  /* 407 */ 'm', 'e', 'm', 'b', '(', 0,
  /* 413 */ 'm', 'e', 'm', 'd', '_', 'l', 'o', 'c', 'k', 'e', 'd', '(', 0,
  /* 426 */ 'm', 'e', 'm', 'w', '_', 'l', 'o', 'c', 'k', 'e', 'd', '(', 0,
  /* 439 */ 'm', 'e', 'm', 'd', '(', 0,
  /* 445 */ 't', 'r', 'a', 'c', 'e', '(', 0,
  /* 452 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', 0,
  /* 464 */ 'v', 's', 'h', 'u', 'f', 'f', '(', 0,
  /* 472 */ 'l', '2', 'f', 'e', 't', 'c', 'h', '(', 0,
  /* 481 */ 'd', 'c', 'f', 'e', 't', 'c', 'h', '(', 0,
  /* 490 */ 'm', 'e', 'm', 'h', '(', 0,
  /* 496 */ 'v', 'd', 'e', 'a', 'l', '(', 0,
  /* 503 */ 'v', 'm', 'e', 'm', '(', 0,
  /* 509 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 522 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 535 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 548 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 560 */ 'v', 't', 'm', 'p', '.', 'h', 32, '=', 32, 'v', 'g', 'a', 't', 'h', 'e', 'r', '(', 0,
  /* 578 */ 'v', 't', 'm', 'p', '.', 'w', 32, '=', 32, 'v', 'g', 'a', 't', 'h', 'e', 'r', '(', 0,
  /* 596 */ 'v', 's', 'c', 'a', 't', 't', 'e', 'r', '(', 0,
  /* 606 */ 'h', 'i', 'n', 't', 'j', 'r', '(', 0,
  /* 614 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 627 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 640 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 653 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 665 */ 'p', '0', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 678 */ 'p', '1', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 691 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 704 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 716 */ 'v', 'h', 'i', 's', 't', '(', 0,
  /* 723 */ 'v', 'm', 'e', 'm', 'u', '(', 0,
  /* 730 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 744 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 758 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 772 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 785 */ 'm', 'e', 'm', 'w', '(', 0,
  /* 791 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 822 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 847 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 870 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 893 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 915 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 925 */ 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', '1', 0,
  /* 935 */ 'i', 'f', 32, '(', '!', 'p', '0', ')', 32, 'j', 'u', 'm', 'p', 'r', 32, 'r', '3', '1', 0,
  /* 954 */ 'i', 'f', 32, '(', 'p', '0', ')', 32, 'j', 'u', 'm', 'p', 'r', 32, 'r', '3', '1', 0,
  /* 972 */ 'i', 'f', 32, '(', '!', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'j', 'u', 'm', 'p', 'r', ':', 'n', 't', 32, 'r', '3', '1', 0,
  /* 998 */ 'i', 'f', 32, '(', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'j', 'u', 'm', 'p', 'r', ':', 'n', 't', 32, 'r', '3', '1', 0,
  /* 1023 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '1', 0,
  /* 1033 */ 'v', 'w', 'h', 'i', 's', 't', '2', '5', '6', 0,
  /* 1043 */ 'v', 'w', 'h', 'i', 's', 't', '1', '2', '8', 0,
  /* 1053 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1066 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1073 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1083 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1098 */ 'D', 'U', 'P', 'L', 'E', 'X', 0,
  /* 1105 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 1111 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 1124 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 1138 */ 'i', 'f', 32, '(', '!', 'p', '0', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 1162 */ 'i', 'f', 32, '(', 'p', '0', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 1185 */ 'n', 'o', 'p', 0,
  /* 1189 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 1197 */ 'v', 'w', 'h', 'i', 's', 't', '2', '5', '6', ':', 's', 'a', 't', 0,
  /* 1211 */ 's', 'y', 'n', 'c', 'h', 't', 0,
  /* 1218 */ 'i', 'f', 32, '(', '!', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', ':', 'n', 't', 0,
  /* 1249 */ 'i', 'f', 32, '(', 'p', '0', '.', 'n', 'e', 'w', ')', 32, 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', ':', 'n', 't', 0,
  /* 1279 */ 'b', 'r', 'k', 'p', 't', 0,
  /* 1285 */ 'v', 'h', 'i', 's', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1074U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1067U,	// BUNDLE
    1084U,	// LIFETIME_START
    1054U,	// LIFETIME_END
    0U,	// STACKMAP
    1125U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    848U,	// PATCHABLE_FUNCTION_ENTER
    792U,	// PATCHABLE_RET
    894U,	// PATCHABLE_FUNCTION_EXIT
    871U,	// PATCHABLE_TAIL_CALL
    823U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    2074U,	// A2_abs
    2074U,	// A2_absp
    16779290U,	// A2_abssat
    33572890U,	// A2_add
    33572890U,	// A2_addh_h16_hh
    33572890U,	// A2_addh_h16_hl
    33572890U,	// A2_addh_h16_lh
    33572890U,	// A2_addh_h16_ll
    33572890U,	// A2_addh_h16_sat_hh
    33572890U,	// A2_addh_h16_sat_hl
    33572890U,	// A2_addh_h16_sat_lh
    33572890U,	// A2_addh_h16_sat_ll
    33572890U,	// A2_addh_l16_hl
    33572890U,	// A2_addh_l16_ll
    33572890U,	// A2_addh_l16_sat_hl
    33572890U,	// A2_addh_l16_sat_ll
    33572890U,	// A2_addi
    33572890U,	// A2_addp
    33572890U,	// A2_addpsat
    33572890U,	// A2_addsat
    33572890U,	// A2_addsp
    33572890U,	// A2_addsph
    33572890U,	// A2_addspl
    50366490U,	// A2_and
    67143706U,	// A2_andir
    50366490U,	// A2_andp
    51226U,	// A2_aslh
    67610U,	// A2_asrh
    83970074U,	// A2_combine_hh
    83970074U,	// A2_combine_hl
    100747290U,	// A2_combine_lh
    100747290U,	// A2_combine_ll
    67209242U,	// A2_combineii
    50415642U,	// A2_combinew
    116762U,	// A2_iconst
    133146U,	// A2_max
    133146U,	// A2_maxp
    149530U,	// A2_maxu
    149530U,	// A2_maxup
    165914U,	// A2_min
    165914U,	// A2_minp
    182298U,	// A2_minu
    182298U,	// A2_minup
    198682U,	// A2_neg
    198682U,	// A2_negp
    16975898U,	// A2_negsat
    1186U,	// A2_nop
    215066U,	// A2_not
    215066U,	// A2_notp
    50563098U,	// A2_or
    67340314U,	// A2_orir
    50563098U,	// A2_orp
    117690467U,	// A2_paddf
    117706851U,	// A2_paddfnew
    117690467U,	// A2_paddif
    117706851U,	// A2_paddifnew
    117690638U,	// A2_paddit
    117707022U,	// A2_padditnew
    117690638U,	// A2_paddt
    117707022U,	// A2_paddtnew
    134467683U,	// A2_pandf
    134484067U,	// A2_pandfnew
    134467854U,	// A2_pandt
    134484238U,	// A2_pandtnew
    151244899U,	// A2_porf
    151261283U,	// A2_porfnew
    151245070U,	// A2_port
    151261454U,	// A2_portnew
    168022115U,	// A2_psubf
    168038499U,	// A2_psubfnew
    168022286U,	// A2_psubt
    168038670U,	// A2_psubtnew
    184799331U,	// A2_pxorf
    184815715U,	// A2_pxorfnew
    184799502U,	// A2_pxort
    184815886U,	// A2_pxortnew
    17057818U,	// A2_roundsat
    296986U,	// A2_sat
    313370U,	// A2_satb
    329754U,	// A2_sath
    346138U,	// A2_satub
    362522U,	// A2_satuh
    33933338U,	// A2_sub
    33933338U,	// A2_subh_h16_hh
    33933338U,	// A2_subh_h16_hl
    33933338U,	// A2_subh_h16_lh
    33933338U,	// A2_subh_h16_ll
    33933338U,	// A2_subh_h16_sat_hh
    33933338U,	// A2_subh_h16_sat_hl
    33933338U,	// A2_subh_h16_sat_lh
    33933338U,	// A2_subh_h16_sat_ll
    33933338U,	// A2_subh_l16_hl
    33933338U,	// A2_subh_l16_ll
    33933338U,	// A2_subh_l16_sat_hl
    33933338U,	// A2_subh_l16_sat_ll
    33933338U,	// A2_subp
    50726938U,	// A2_subri
    33933338U,	// A2_subsat
    411674U,	// A2_svaddh
    17188890U,	// A2_svaddhs
    17205274U,	// A2_svadduhs
    444442U,	// A2_svavgh
    201771034U,	// A2_svavghs
    460826U,	// A2_svnavgh
    477210U,	// A2_svsubh
    17254426U,	// A2_svsubhs
    17270810U,	// A2_svsubuhs
    509978U,	// A2_swiz
    526362U,	// A2_sxtb
    542746U,	// A2_sxth
    559130U,	// A2_sxtw
    218679322U,	// A2_tfr
    218679322U,	// A2_tfrcrr
    235130979U,	// A2_tfrf
    235147363U,	// A2_tfrfnew
    591898U,	// A2_tfrih
    608282U,	// A2_tfril
    218679322U,	// A2_tfrp
    235130979U,	// A2_tfrpf
    235147363U,	// A2_tfrpfnew
    218728474U,	// A2_tfrpi
    235131150U,	// A2_tfrpt
    235147534U,	// A2_tfrptnew
    218679322U,	// A2_tfrrcr
    218728474U,	// A2_tfrsi
    235131150U,	// A2_tfrt
    235147534U,	// A2_tfrtnew
    641050U,	// A2_vabsh
    17418266U,	// A2_vabshsat
    657434U,	// A2_vabsw
    17434650U,	// A2_vabswsat
    673818U,	// A2_vaddb_map
    411674U,	// A2_vaddh
    17188890U,	// A2_vaddhs
    690202U,	// A2_vaddub
    17467418U,	// A2_vaddubs
    17205274U,	// A2_vadduhs
    706586U,	// A2_vaddw
    17483802U,	// A2_vaddws
    444442U,	// A2_vavgh
    252102682U,	// A2_vavghcr
    201771034U,	// A2_vavghr
    722970U,	// A2_vavgub
    202049562U,	// A2_vavgubr
    739354U,	// A2_vavguh
    202065946U,	// A2_vavguhr
    755738U,	// A2_vavguw
    202082330U,	// A2_vavguwr
    772122U,	// A2_vavgw
    252430362U,	// A2_vavgwcr
    202098714U,	// A2_vavgwr
    51120154U,	// A2_vcmpbeq
    51136538U,	// A2_vcmpbgtu
    51152922U,	// A2_vcmpheq
    51169306U,	// A2_vcmphgt
    51185690U,	// A2_vcmphgtu
    51202074U,	// A2_vcmpweq
    51218458U,	// A2_vcmpwgt
    51234842U,	// A2_vcmpwgtu
    919578U,	// A2_vconj
    935962U,	// A2_vmaxb
    952346U,	// A2_vmaxh
    968730U,	// A2_vmaxub
    985114U,	// A2_vmaxuh
    1001498U,	// A2_vmaxuw
    1017882U,	// A2_vmaxw
    1034266U,	// A2_vminb
    1050650U,	// A2_vminh
    1067034U,	// A2_vminub
    1083418U,	// A2_vminuh
    1099802U,	// A2_vminuw
    1116186U,	// A2_vminw
    460826U,	// A2_vnavgh
    268896282U,	// A2_vnavghcr
    285673498U,	// A2_vnavghr
    1132570U,	// A2_vnavgw
    269568026U,	// A2_vnavgwcr
    286345242U,	// A2_vnavgwr
    1148954U,	// A2_vraddub
    1165338U,	// A2_vraddub_acc
    1181722U,	// A2_vrsadub
    1198106U,	// A2_vrsadub_acc
    1214490U,	// A2_vsubb_map
    477210U,	// A2_vsubh
    17254426U,	// A2_vsubhs
    1230874U,	// A2_vsubub
    18008090U,	// A2_vsububs
    17270810U,	// A2_vsubuhs
    1247258U,	// A2_vsubw
    18024474U,	// A2_vsubws
    1263642U,	// A2_xor
    1263642U,	// A2_xorp
    1280026U,	// A2_zxtb
    1296410U,	// A2_zxth
    302008346U,	// A4_addp_c
    318801946U,	// A4_andn
    318801946U,	// A4_andnp
    51644442U,	// A4_bitsplit
    68421658U,	// A4_bitspliti
    1329178U,	// A4_boundscheck
    336873498U,	// A4_boundscheck_hi
    353650714U,	// A4_boundscheck_lo
    51677210U,	// A4_cmpbeq
    68454426U,	// A4_cmpbeqi
    51693594U,	// A4_cmpbgt
    68470810U,	// A4_cmpbgti
    51709978U,	// A4_cmpbgtu
    68487194U,	// A4_cmpbgtui
    51726362U,	// A4_cmpheq
    68503578U,	// A4_cmpheqi
    51742746U,	// A4_cmphgt
    68519962U,	// A4_cmphgti
    51759130U,	// A4_cmphgtu
    68536346U,	// A4_cmphgtui
    67209242U,	// A4_combineii
    50432026U,	// A4_combineir
    67192858U,	// A4_combineri
    68552730U,	// A4_cround_ri
    51775514U,	// A4_cround_rr
    1460416U,	// A4_ext
    1476634U,	// A4_modwrapu
    318998554U,	// A4_orn
    318998554U,	// A4_ornp
    369348707U,	// A4_paslhf
    369365091U,	// A4_paslhfnew
    369348878U,	// A4_paslht
    369365262U,	// A4_paslhtnew
    386125923U,	// A4_pasrhf
    386142307U,	// A4_pasrhfnew
    386126094U,	// A4_pasrht
    386142478U,	// A4_pasrhtnew
    402903139U,	// A4_psxtbf
    402919523U,	// A4_psxtbfnew
    402903310U,	// A4_psxtbt
    402919694U,	// A4_psxtbtnew
    419680355U,	// A4_psxthf
    419696739U,	// A4_psxthfnew
    419680526U,	// A4_psxtht
    419696910U,	// A4_psxthtnew
    436457571U,	// A4_pzxtbf
    436473955U,	// A4_pzxtbfnew
    436457742U,	// A4_pzxtbt
    436474126U,	// A4_pzxtbtnew
    453234787U,	// A4_pzxthf
    453251171U,	// A4_pzxthfnew
    453234958U,	// A4_pzxtht
    453251342U,	// A4_pzxthtnew
    51824666U,	// A4_rcmpeq
    68601882U,	// A4_rcmpeqi
    51841050U,	// A4_rcmpneq
    68618266U,	// A4_rcmpneqi
    67389466U,	// A4_round_ri
    67389466U,	// A4_round_ri_sat
    50612250U,	// A4_round_rr
    50612250U,	// A4_round_rr_sat
    302368794U,	// A4_subp_c
    218679322U,	// A4_tfrcpp
    218679322U,	// A4_tfrpcp
    1525786U,	// A4_tlbmatch
    1542170U,	// A4_vcmpbeq_any
    67897370U,	// A4_vcmpbeqi
    51890202U,	// A4_vcmpbgt
    68667418U,	// A4_vcmpbgti
    67913754U,	// A4_vcmpbgtui
    67930138U,	// A4_vcmpheqi
    67946522U,	// A4_vcmphgti
    67962906U,	// A4_vcmphgtui
    67979290U,	// A4_vcmpweqi
    67995674U,	// A4_vcmpwgti
    68012058U,	// A4_vcmpwgtui
    1574938U,	// A4_vrmaxh
    1591322U,	// A4_vrmaxuh
    1607706U,	// A4_vrmaxuw
    1624090U,	// A4_vrmaxw
    1640474U,	// A4_vrminh
    1656858U,	// A4_vrminuh
    1673242U,	// A4_vrminuw
    1689626U,	// A4_vrminw
    35260442U,	// A5_ACS
    1722394U,	// A5_vaddhubs
    1738778U,	// A6_vcmpbeq_notany
    35260442U,	// A6_vminub_RdP
    1U,	// ADJCALLSTACKDOWN
    1U,	// ADJCALLSTACKUP
    1755162U,	// C2_all8
    50366490U,	// C2_and
    469796890U,	// C2_andn
    1771546U,	// C2_any8
    52119578U,	// C2_bitsclr
    68896794U,	// C2_bitsclri
    1804314U,	// C2_bitsset
    486789219U,	// C2_ccombinewf
    486805603U,	// C2_ccombinewnewf
    486805774U,	// C2_ccombinewnewt
    486789390U,	// C2_ccombinewt
    503566435U,	// C2_cmoveif
    503566606U,	// C2_cmoveit
    503582819U,	// C2_cmovenewif
    503582990U,	// C2_cmovenewit
    51824666U,	// C2_cmpeq
    68601882U,	// C2_cmpeqi
    51824666U,	// C2_cmpeqp
    1820698U,	// C2_cmpgei
    1837082U,	// C2_cmpgeui
    52185114U,	// C2_cmpgt
    68962330U,	// C2_cmpgti
    52185114U,	// C2_cmpgtp
    52201498U,	// C2_cmpgtu
    68978714U,	// C2_cmpgtui
    52201498U,	// C2_cmpgtup
    1886234U,	// C2_cmplt
    1902618U,	// C2_cmpltu
    1919002U,	// C2_mask
    52267034U,	// C2_mux
    69044250U,	// C2_muxii
    52267034U,	// C2_muxir
    69044250U,	// C2_muxri
    215066U,	// C2_not
    50563098U,	// C2_or
    469993498U,	// C2_orn
    218679322U,	// C2_pxfer_map
    218679322U,	// C2_tfrpr
    218679322U,	// C2_tfrrp
    1951770U,	// C2_vitpack
    1968154U,	// C2_vmux
    1263642U,	// C2_xor
    1984538U,	// C4_addipc
    520128538U,	// C4_and_and
    520128538U,	// C4_and_andn
    536905754U,	// C4_and_or
    536905754U,	// C4_and_orn
    52332570U,	// C4_cmplte
    69109786U,	// C4_cmpltei
    52348954U,	// C4_cmplteu
    69126170U,	// C4_cmplteui
    51841050U,	// C4_cmpneq
    68618266U,	// C4_cmpneqi
    2033690U,	// C4_fastcorner9
    2050074U,	// C4_fastcorner9_not
    52398106U,	// C4_nbitsclr
    69175322U,	// C4_nbitsclri
    2082842U,	// C4_nbitsset
    520325146U,	// C4_or_and
    520325146U,	// C4_or_andn
    537102362U,	// C4_or_or
    537102362U,	// C4_or_orn
    2103369U,	// CALLProfile
    2115610U,	// CONST32
    2131994U,	// CONST64
    1099U,	// DUPLEX_Pseudo
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    2099292U,	// EH_RETURN_JMPR
    916U,	// ENDLOOP0
    1024U,	// ENDLOOP1
    2148378U,	// F2_conv_d2df
    2164762U,	// F2_conv_d2sf
    2181146U,	// F2_conv_df2d
    555829274U,	// F2_conv_df2d_chop
    2197530U,	// F2_conv_df2sf
    2213914U,	// F2_conv_df2ud
    555862042U,	// F2_conv_df2ud_chop
    2230298U,	// F2_conv_df2uw
    555878426U,	// F2_conv_df2uw_chop
    2246682U,	// F2_conv_df2w
    555894810U,	// F2_conv_df2w_chop
    2263066U,	// F2_conv_sf2d
    555911194U,	// F2_conv_sf2d_chop
    2279450U,	// F2_conv_sf2df
    2295834U,	// F2_conv_sf2ud
    555943962U,	// F2_conv_sf2ud_chop
    2312218U,	// F2_conv_sf2uw
    555960346U,	// F2_conv_sf2uw_chop
    2328602U,	// F2_conv_sf2w
    555976730U,	// F2_conv_sf2w_chop
    2344986U,	// F2_conv_ud2df
    2361370U,	// F2_conv_ud2sf
    2377754U,	// F2_conv_uw2df
    2394138U,	// F2_conv_uw2sf
    2410522U,	// F2_conv_w2df
    2426906U,	// F2_conv_w2sf
    2443290U,	// F2_dfclass
    2459674U,	// F2_dfcmpeq
    2476058U,	// F2_dfcmpge
    2492442U,	// F2_dfcmpgt
    2508826U,	// F2_dfcmpuo
    572950554U,	// F2_dfimm_n
    589727770U,	// F2_dfimm_p
    2541594U,	// F2_sfadd
    2557978U,	// F2_sfclass
    2574362U,	// F2_sfcmpeq
    2590746U,	// F2_sfcmpge
    2607130U,	// F2_sfcmpgt
    2623514U,	// F2_sfcmpuo
    2639898U,	// F2_sffixupd
    2656282U,	// F2_sffixupn
    2672666U,	// F2_sffixupr
    2689050U,	// F2_sffma
    606668826U,	// F2_sffma_lib
    53020698U,	// F2_sffma_sc
    2705434U,	// F2_sffms
    606685210U,	// F2_sffms_lib
    573147162U,	// F2_sfimm_n
    589924378U,	// F2_sfimm_p
    35260442U,	// F2_sfinvsqrta
    2738202U,	// F2_sfmax
    2754586U,	// F2_sfmin
    2770970U,	// F2_sfmpy
    35260442U,	// F2_sfrecipa
    2787354U,	// F2_sfsub
    2803738U,	// HI
    2103369U,	// J2_call
    2820195U,	// J2_callf
    2099285U,	// J2_callr
    2836579U,	// J2_callrf
    2836750U,	// J2_callrt
    2820366U,	// J2_callt
    917U,	// J2_endloop0
    926U,	// J2_endloop01
    1025U,	// J2_endloop1
    2103375U,	// J2_jump
    2852963U,	// J2_jumpf
    2869347U,	// J2_jumpf_nopred_map
    2885731U,	// J2_jumpfnew
    2902115U,	// J2_jumpfnewpt
    2918499U,	// J2_jumpfpt
    2099292U,	// J2_jumpr
    2934883U,	// J2_jumprf
    2951267U,	// J2_jumprf_nopred_map
    2967651U,	// J2_jumprfnew
    2984035U,	// J2_jumprfnewpt
    3000419U,	// J2_jumprfpt
    3016974U,	// J2_jumprgtez
    3033358U,	// J2_jumprgtezpt
    3049742U,	// J2_jumprltez
    3066126U,	// J2_jumprltezpt
    3082510U,	// J2_jumprnz
    3098894U,	// J2_jumprnzpt
    2935054U,	// J2_jumprt
    2951438U,	// J2_jumprt_nopred_map
    2967822U,	// J2_jumprtnew
    2984206U,	// J2_jumprtnewpt
    3000590U,	// J2_jumprtpt
    3115278U,	// J2_jumprz
    3131662U,	// J2_jumprzpt
    2853134U,	// J2_jumpt
    2869518U,	// J2_jumpt_nopred_map
    2885902U,	// J2_jumptnew
    2902286U,	// J2_jumptnewpt
    2918670U,	// J2_jumptpt
    36706587U,	// J2_loop0i
    36706587U,	// J2_loop0iext
    35264795U,	// J2_loop0r
    35264795U,	// J2_loop0rext
    36706624U,	// J2_loop1i
    36706624U,	// J2_loop1iext
    35264832U,	// J2_loop1r
    35264832U,	// J2_loop1rext
    1460401U,	// J2_pause
    36706579U,	// J2_ploop1si
    35264787U,	// J2_ploop1sr
    36706594U,	// J2_ploop2si
    35264802U,	// J2_ploop2sr
    36706609U,	// J2_ploop3si
    35264817U,	// J2_ploop3sr
    1460354U,	// J2_trap0
    623921688U,	// J4_cmpeq_f_jumpnv_nt
    640698904U,	// J4_cmpeq_f_jumpnv_t
    35260926U,	// J4_cmpeq_fp0_jump_nt
    35260926U,	// J4_cmpeq_fp0_jump_t
    35260939U,	// J4_cmpeq_fp1_jump_nt
    35260939U,	// J4_cmpeq_fp1_jump_t
    623921701U,	// J4_cmpeq_t_jumpnv_nt
    640698917U,	// J4_cmpeq_t_jumpnv_t
    35260926U,	// J4_cmpeq_tp0_jump_nt
    35260926U,	// J4_cmpeq_tp0_jump_t
    35260939U,	// J4_cmpeq_tp1_jump_nt
    35260939U,	// J4_cmpeq_tp1_jump_t
    623938072U,	// J4_cmpeqi_f_jumpnv_nt
    640715288U,	// J4_cmpeqi_f_jumpnv_t
    36702718U,	// J4_cmpeqi_fp0_jump_nt
    36702718U,	// J4_cmpeqi_fp0_jump_t
    36702731U,	// J4_cmpeqi_fp1_jump_nt
    36702731U,	// J4_cmpeqi_fp1_jump_t
    623938085U,	// J4_cmpeqi_t_jumpnv_nt
    640715301U,	// J4_cmpeqi_t_jumpnv_t
    36702718U,	// J4_cmpeqi_tp0_jump_nt
    36702718U,	// J4_cmpeqi_tp0_jump_t
    36702731U,	// J4_cmpeqi_tp1_jump_nt
    36702731U,	// J4_cmpeqi_tp1_jump_t
    623938072U,	// J4_cmpeqn1_f_jumpnv_nt
    640715288U,	// J4_cmpeqn1_f_jumpnv_t
    36702718U,	// J4_cmpeqn1_fp0_jump_nt
    36702718U,	// J4_cmpeqn1_fp0_jump_t
    36702731U,	// J4_cmpeqn1_fp1_jump_nt
    36702731U,	// J4_cmpeqn1_fp1_jump_t
    623938085U,	// J4_cmpeqn1_t_jumpnv_nt
    640715301U,	// J4_cmpeqn1_t_jumpnv_t
    36702718U,	// J4_cmpeqn1_tp0_jump_nt
    36702718U,	// J4_cmpeqn1_tp0_jump_t
    36702731U,	// J4_cmpeqn1_tp1_jump_nt
    36702731U,	// J4_cmpeqn1_tp1_jump_t
    623921793U,	// J4_cmpgt_f_jumpnv_nt
    640699009U,	// J4_cmpgt_f_jumpnv_t
    35261031U,	// J4_cmpgt_fp0_jump_nt
    35261031U,	// J4_cmpgt_fp0_jump_t
    35261044U,	// J4_cmpgt_fp1_jump_nt
    35261044U,	// J4_cmpgt_fp1_jump_t
    623921806U,	// J4_cmpgt_t_jumpnv_nt
    640699022U,	// J4_cmpgt_t_jumpnv_t
    35261031U,	// J4_cmpgt_tp0_jump_nt
    35261031U,	// J4_cmpgt_tp0_jump_t
    35261044U,	// J4_cmpgt_tp1_jump_nt
    35261044U,	// J4_cmpgt_tp1_jump_t
    623938177U,	// J4_cmpgti_f_jumpnv_nt
    640715393U,	// J4_cmpgti_f_jumpnv_t
    36702823U,	// J4_cmpgti_fp0_jump_nt
    36702823U,	// J4_cmpgti_fp0_jump_t
    36702836U,	// J4_cmpgti_fp1_jump_nt
    36702836U,	// J4_cmpgti_fp1_jump_t
    623938190U,	// J4_cmpgti_t_jumpnv_nt
    640715406U,	// J4_cmpgti_t_jumpnv_t
    36702823U,	// J4_cmpgti_tp0_jump_nt
    36702823U,	// J4_cmpgti_tp0_jump_t
    36702836U,	// J4_cmpgti_tp1_jump_nt
    36702836U,	// J4_cmpgti_tp1_jump_t
    623938177U,	// J4_cmpgtn1_f_jumpnv_nt
    640715393U,	// J4_cmpgtn1_f_jumpnv_t
    36702823U,	// J4_cmpgtn1_fp0_jump_nt
    36702823U,	// J4_cmpgtn1_fp0_jump_t
    36702836U,	// J4_cmpgtn1_fp1_jump_nt
    36702836U,	// J4_cmpgtn1_fp1_jump_t
    623938190U,	// J4_cmpgtn1_t_jumpnv_nt
    640715406U,	// J4_cmpgtn1_t_jumpnv_t
    36702823U,	// J4_cmpgtn1_tp0_jump_nt
    36702823U,	// J4_cmpgtn1_tp0_jump_t
    36702836U,	// J4_cmpgtn1_tp1_jump_nt
    36702836U,	// J4_cmpgtn1_tp1_jump_t
    623921911U,	// J4_cmpgtu_f_jumpnv_nt
    640699127U,	// J4_cmpgtu_f_jumpnv_t
    35261147U,	// J4_cmpgtu_fp0_jump_nt
    35261147U,	// J4_cmpgtu_fp0_jump_t
    35261161U,	// J4_cmpgtu_fp1_jump_nt
    35261161U,	// J4_cmpgtu_fp1_jump_t
    623921925U,	// J4_cmpgtu_t_jumpnv_nt
    640699141U,	// J4_cmpgtu_t_jumpnv_t
    35261147U,	// J4_cmpgtu_tp0_jump_nt
    35261147U,	// J4_cmpgtu_tp0_jump_t
    35261161U,	// J4_cmpgtu_tp1_jump_nt
    35261161U,	// J4_cmpgtu_tp1_jump_t
    623938295U,	// J4_cmpgtui_f_jumpnv_nt
    640715511U,	// J4_cmpgtui_f_jumpnv_t
    36702939U,	// J4_cmpgtui_fp0_jump_nt
    36702939U,	// J4_cmpgtui_fp0_jump_t
    36702953U,	// J4_cmpgtui_fp1_jump_nt
    36702953U,	// J4_cmpgtui_fp1_jump_t
    623938309U,	// J4_cmpgtui_t_jumpnv_nt
    640715525U,	// J4_cmpgtui_t_jumpnv_t
    36702939U,	// J4_cmpgtui_tp0_jump_nt
    36702939U,	// J4_cmpgtui_tp0_jump_t
    36702953U,	// J4_cmpgtui_tp1_jump_nt
    36702953U,	// J4_cmpgtui_tp1_jump_t
    35261057U,	// J4_cmplt_f_jumpnv_nt
    35261057U,	// J4_cmplt_f_jumpnv_t
    35261070U,	// J4_cmplt_t_jumpnv_nt
    35261070U,	// J4_cmplt_t_jumpnv_t
    35261175U,	// J4_cmpltu_f_jumpnv_nt
    35261175U,	// J4_cmpltu_f_jumpnv_t
    35261189U,	// J4_cmpltu_t_jumpnv_nt
    35261189U,	// J4_cmpltu_t_jumpnv_t
    1460831U,	// J4_hintjumpr
    654936090U,	// J4_jumpseti
    654886938U,	// J4_jumpsetr
    3197620U,	// J4_tstbit0_f_jumpnv_nt
    3214004U,	// J4_tstbit0_f_jumpnv_t
    3230362U,	// J4_tstbit0_fp0_jump_nt
    3246746U,	// J4_tstbit0_fp0_jump_t
    3263143U,	// J4_tstbit0_fp1_jump_nt
    3279527U,	// J4_tstbit0_fp1_jump_t
    3197633U,	// J4_tstbit0_t_jumpnv_nt
    3214017U,	// J4_tstbit0_t_jumpnv_t
    3295898U,	// J4_tstbit0_tp0_jump_nt
    3312282U,	// J4_tstbit0_tp0_jump_t
    3328679U,	// J4_tstbit0_tp1_jump_nt
    3345063U,	// J4_tstbit0_tp1_jump_t
    3360794U,	// L2_deallocframe
    305367066U,	// L2_loadalignb_io
    36931610U,	// L2_loadalignb_pbr
    36931610U,	// L2_loadalignb_pci
    36931610U,	// L2_loadalignb_pcr
    36931610U,	// L2_loadalignb_pi
    36931610U,	// L2_loadalignb_pr
    305367066U,	// L2_loadalignb_zomap
    305383450U,	// L2_loadalignh_io
    36947994U,	// L2_loadalignh_pbr
    36947994U,	// L2_loadalignh_pci
    36947994U,	// L2_loadalignh_pcr
    36947994U,	// L2_loadalignh_pi
    36947994U,	// L2_loadalignh_pr
    305383450U,	// L2_loadalignh_zomap
    674498586U,	// L2_loadbsw2_io
    691275802U,	// L2_loadbsw2_pbr
    708053018U,	// L2_loadbsw2_pci
    724830234U,	// L2_loadbsw2_pcr
    708053018U,	// L2_loadbsw2_pi
    691275802U,	// L2_loadbsw2_pr
    3409946U,	// L2_loadbsw2_zomap
    674498586U,	// L2_loadbsw4_io
    691275802U,	// L2_loadbsw4_pbr
    708053018U,	// L2_loadbsw4_pci
    724830234U,	// L2_loadbsw4_pcr
    708053018U,	// L2_loadbsw4_pi
    691275802U,	// L2_loadbsw4_pr
    3409946U,	// L2_loadbsw4_zomap
    674514970U,	// L2_loadbzw2_io
    691292186U,	// L2_loadbzw2_pbr
    708069402U,	// L2_loadbzw2_pci
    724846618U,	// L2_loadbzw2_pcr
    708069402U,	// L2_loadbzw2_pi
    691292186U,	// L2_loadbzw2_pr
    3426330U,	// L2_loadbzw2_zomap
    674514970U,	// L2_loadbzw4_io
    691292186U,	// L2_loadbzw4_pbr
    708069402U,	// L2_loadbzw4_pci
    724846618U,	// L2_loadbzw4_pcr
    708069402U,	// L2_loadbzw4_pi
    691292186U,	// L2_loadbzw4_pr
    3426330U,	// L2_loadbzw4_zomap
    674531354U,	// L2_loadrb_io
    691308570U,	// L2_loadrb_pbr
    708085786U,	// L2_loadrb_pci
    724863002U,	// L2_loadrb_pcr
    708085786U,	// L2_loadrb_pi
    691308570U,	// L2_loadrb_pr
    3442714U,	// L2_loadrb_zomap
    3459098U,	// L2_loadrbgp
    674564122U,	// L2_loadrd_io
    691341338U,	// L2_loadrd_pbr
    708118554U,	// L2_loadrd_pci
    724895770U,	// L2_loadrd_pcr
    708118554U,	// L2_loadrd_pi
    691341338U,	// L2_loadrd_pr
    3475482U,	// L2_loadrd_zomap
    3491866U,	// L2_loadrdgp
    674596890U,	// L2_loadrh_io
    691374106U,	// L2_loadrh_pbr
    708151322U,	// L2_loadrh_pci
    724928538U,	// L2_loadrh_pcr
    708151322U,	// L2_loadrh_pi
    691374106U,	// L2_loadrh_pr
    3508250U,	// L2_loadrh_zomap
    3524634U,	// L2_loadrhgp
    674629658U,	// L2_loadri_io
    691406874U,	// L2_loadri_pbr
    708184090U,	// L2_loadri_pci
    724961306U,	// L2_loadri_pcr
    708184090U,	// L2_loadri_pi
    691406874U,	// L2_loadri_pr
    3541018U,	// L2_loadri_zomap
    3557402U,	// L2_loadrigp
    674662426U,	// L2_loadrub_io
    691439642U,	// L2_loadrub_pbr
    708216858U,	// L2_loadrub_pci
    724994074U,	// L2_loadrub_pcr
    708216858U,	// L2_loadrub_pi
    691439642U,	// L2_loadrub_pr
    3573786U,	// L2_loadrub_zomap
    3590170U,	// L2_loadrubgp
    674695194U,	// L2_loadruh_io
    691472410U,	// L2_loadruh_pbr
    708249626U,	// L2_loadruh_pci
    725026842U,	// L2_loadruh_pcr
    708249626U,	// L2_loadruh_pi
    691472410U,	// L2_loadruh_pr
    3606554U,	// L2_loadruh_zomap
    3622938U,	// L2_loadruhgp
    3639322U,	// L2_loadw_locked
    738447459U,	// L2_ploadrbf_io
    738451555U,	// L2_ploadrbf_pi
    738447459U,	// L2_ploadrbf_zomap
    738463843U,	// L2_ploadrbfnew_io
    738467939U,	// L2_ploadrbfnew_pi
    738463843U,	// L2_ploadrbfnew_zomap
    738447630U,	// L2_ploadrbt_io
    738451726U,	// L2_ploadrbt_pi
    738447630U,	// L2_ploadrbt_zomap
    738464014U,	// L2_ploadrbtnew_io
    738468110U,	// L2_ploadrbtnew_pi
    738464014U,	// L2_ploadrbtnew_zomap
    755224675U,	// L2_ploadrdf_io
    755228771U,	// L2_ploadrdf_pi
    755224675U,	// L2_ploadrdf_zomap
    755241059U,	// L2_ploadrdfnew_io
    755245155U,	// L2_ploadrdfnew_pi
    755241059U,	// L2_ploadrdfnew_zomap
    755224846U,	// L2_ploadrdt_io
    755228942U,	// L2_ploadrdt_pi
    755224846U,	// L2_ploadrdt_zomap
    755241230U,	// L2_ploadrdtnew_io
    755245326U,	// L2_ploadrdtnew_pi
    755241230U,	// L2_ploadrdtnew_zomap
    772001891U,	// L2_ploadrhf_io
    772005987U,	// L2_ploadrhf_pi
    772001891U,	// L2_ploadrhf_zomap
    772018275U,	// L2_ploadrhfnew_io
    772022371U,	// L2_ploadrhfnew_pi
    772018275U,	// L2_ploadrhfnew_zomap
    772002062U,	// L2_ploadrht_io
    772006158U,	// L2_ploadrht_pi
    772002062U,	// L2_ploadrht_zomap
    772018446U,	// L2_ploadrhtnew_io
    772022542U,	// L2_ploadrhtnew_pi
    772018446U,	// L2_ploadrhtnew_zomap
    788779107U,	// L2_ploadrif_io
    788783203U,	// L2_ploadrif_pi
    788779107U,	// L2_ploadrif_zomap
    788795491U,	// L2_ploadrifnew_io
    788799587U,	// L2_ploadrifnew_pi
    788795491U,	// L2_ploadrifnew_zomap
    788779278U,	// L2_ploadrit_io
    788783374U,	// L2_ploadrit_pi
    788779278U,	// L2_ploadrit_zomap
    788795662U,	// L2_ploadritnew_io
    788799758U,	// L2_ploadritnew_pi
    788795662U,	// L2_ploadritnew_zomap
    805556323U,	// L2_ploadrubf_io
    805560419U,	// L2_ploadrubf_pi
    805556323U,	// L2_ploadrubf_zomap
    805572707U,	// L2_ploadrubfnew_io
    805576803U,	// L2_ploadrubfnew_pi
    805572707U,	// L2_ploadrubfnew_zomap
    805556494U,	// L2_ploadrubt_io
    805560590U,	// L2_ploadrubt_pi
    805556494U,	// L2_ploadrubt_zomap
    805572878U,	// L2_ploadrubtnew_io
    805576974U,	// L2_ploadrubtnew_pi
    805572878U,	// L2_ploadrubtnew_zomap
    822333539U,	// L2_ploadruhf_io
    822337635U,	// L2_ploadruhf_pi
    822333539U,	// L2_ploadruhf_zomap
    822349923U,	// L2_ploadruhfnew_io
    822354019U,	// L2_ploadruhfnew_pi
    822349923U,	// L2_ploadruhfnew_zomap
    822333710U,	// L2_ploadruht_io
    822337806U,	// L2_ploadruht_pi
    822333710U,	// L2_ploadruht_zomap
    822350094U,	// L2_ploadruhtnew_io
    822354190U,	// L2_ploadruhtnew_pi
    822350094U,	// L2_ploadruhtnew_zomap
    842516888U,	// L4_add_memopb_io
    3672472U,	// L4_add_memopb_zomap
    842516971U,	// L4_add_memoph_io
    3672555U,	// L4_add_memoph_zomap
    842517266U,	// L4_add_memopw_io
    3672850U,	// L4_add_memopw_zomap
    859294104U,	// L4_and_memopb_io
    3688856U,	// L4_and_memopb_zomap
    859294187U,	// L4_and_memoph_io
    3688939U,	// L4_and_memoph_zomap
    859294482U,	// L4_and_memopw_io
    3689234U,	// L4_and_memopw_zomap
    876071320U,	// L4_iadd_memopb_io
    3705240U,	// L4_iadd_memopb_zomap
    876071403U,	// L4_iadd_memoph_io
    3705323U,	// L4_iadd_memoph_zomap
    876071698U,	// L4_iadd_memopw_io
    3705618U,	// L4_iadd_memopw_zomap
    892848536U,	// L4_iand_memopb_io
    3721624U,	// L4_iand_memopb_zomap
    892848619U,	// L4_iand_memoph_io
    3721707U,	// L4_iand_memoph_zomap
    892848914U,	// L4_iand_memopw_io
    3722002U,	// L4_iand_memopw_zomap
    909625752U,	// L4_ior_memopb_io
    3738008U,	// L4_ior_memopb_zomap
    909625835U,	// L4_ior_memoph_io
    3738091U,	// L4_ior_memoph_zomap
    909626130U,	// L4_ior_memopw_io
    3738386U,	// L4_ior_memopw_zomap
    926402968U,	// L4_isub_memopb_io
    3754392U,	// L4_isub_memopb_zomap
    926403051U,	// L4_isub_memoph_io
    3754475U,	// L4_isub_memoph_zomap
    926403346U,	// L4_isub_memopw_io
    3754770U,	// L4_isub_memopw_zomap
    36931610U,	// L4_loadalignb_ap
    305367066U,	// L4_loadalignb_ur
    36947994U,	// L4_loadalignh_ap
    305383450U,	// L4_loadalignh_ur
    942934042U,	// L4_loadbsw2_ap
    959711258U,	// L4_loadbsw2_ur
    942934042U,	// L4_loadbsw4_ap
    959711258U,	// L4_loadbsw4_ur
    942950426U,	// L4_loadbzw2_ap
    959727642U,	// L4_loadbzw2_ur
    942950426U,	// L4_loadbzw4_ap
    959727642U,	// L4_loadbzw4_ur
    3770394U,	// L4_loadd_locked
    942966810U,	// L4_loadrb_ap
    976521242U,	// L4_loadrb_rr
    959744026U,	// L4_loadrb_ur
    942999578U,	// L4_loadrd_ap
    976554010U,	// L4_loadrd_rr
    959776794U,	// L4_loadrd_ur
    943032346U,	// L4_loadrh_ap
    976586778U,	// L4_loadrh_rr
    959809562U,	// L4_loadrh_ur
    943065114U,	// L4_loadri_ap
    976619546U,	// L4_loadri_rr
    959842330U,	// L4_loadri_ur
    943097882U,	// L4_loadrub_ap
    976652314U,	// L4_loadrub_rr
    959875098U,	// L4_loadrub_ur
    943130650U,	// L4_loadruh_ap
    976685082U,	// L4_loadruh_rr
    959907866U,	// L4_loadruh_ur
    993511832U,	// L4_or_memopb_io
    3787160U,	// L4_or_memopb_zomap
    993511915U,	// L4_or_memoph_io
    3787243U,	// L4_or_memoph_zomap
    993512210U,	// L4_or_memopw_io
    3787538U,	// L4_or_memopw_zomap
    1006882915U,	// L4_ploadrbf_abs
    738447459U,	// L4_ploadrbf_rr
    1006899299U,	// L4_ploadrbfnew_abs
    738463843U,	// L4_ploadrbfnew_rr
    1006883086U,	// L4_ploadrbt_abs
    738447630U,	// L4_ploadrbt_rr
    1006899470U,	// L4_ploadrbtnew_abs
    738464014U,	// L4_ploadrbtnew_rr
    1023660131U,	// L4_ploadrdf_abs
    755224675U,	// L4_ploadrdf_rr
    1023676515U,	// L4_ploadrdfnew_abs
    755241059U,	// L4_ploadrdfnew_rr
    1023660302U,	// L4_ploadrdt_abs
    755224846U,	// L4_ploadrdt_rr
    1023676686U,	// L4_ploadrdtnew_abs
    755241230U,	// L4_ploadrdtnew_rr
    1040437347U,	// L4_ploadrhf_abs
    772001891U,	// L4_ploadrhf_rr
    1040453731U,	// L4_ploadrhfnew_abs
    772018275U,	// L4_ploadrhfnew_rr
    1040437518U,	// L4_ploadrht_abs
    772002062U,	// L4_ploadrht_rr
    1040453902U,	// L4_ploadrhtnew_abs
    772018446U,	// L4_ploadrhtnew_rr
    1057214563U,	// L4_ploadrif_abs
    788779107U,	// L4_ploadrif_rr
    1057230947U,	// L4_ploadrifnew_abs
    788795491U,	// L4_ploadrifnew_rr
    1057214734U,	// L4_ploadrit_abs
    788779278U,	// L4_ploadrit_rr
    1057231118U,	// L4_ploadritnew_abs
    788795662U,	// L4_ploadritnew_rr
    1073991779U,	// L4_ploadrubf_abs
    805556323U,	// L4_ploadrubf_rr
    1074008163U,	// L4_ploadrubfnew_abs
    805572707U,	// L4_ploadrubfnew_rr
    1073991950U,	// L4_ploadrubt_abs
    805556494U,	// L4_ploadrubt_rr
    1074008334U,	// L4_ploadrubtnew_abs
    805572878U,	// L4_ploadrubtnew_rr
    1090768995U,	// L4_ploadruhf_abs
    822333539U,	// L4_ploadruhf_rr
    1090785379U,	// L4_ploadruhfnew_abs
    822349923U,	// L4_ploadruhfnew_rr
    1090769166U,	// L4_ploadruht_abs
    822333710U,	// L4_ploadruht_rr
    1090785550U,	// L4_ploadruhtnew_abs
    822350094U,	// L4_ploadruhtnew_rr
    3803162U,	// L4_return
    1107546211U,	// L4_return_f
    1107562595U,	// L4_return_fnew_pnt
    1107562595U,	// L4_return_fnew_pt
    3819619U,	// L4_return_map_to_raw_f
    3836003U,	// L4_return_map_to_raw_fnew_pnt
    3852387U,	// L4_return_map_to_raw_fnew_pt
    3819790U,	// L4_return_map_to_raw_t
    3836174U,	// L4_return_map_to_raw_tnew_pnt
    3852558U,	// L4_return_map_to_raw_tnew_pt
    1107546382U,	// L4_return_t
    1107562766U,	// L4_return_tnew_pnt
    1107562766U,	// L4_return_tnew_pt
    1127729560U,	// L4_sub_memopb_io
    3869080U,	// L4_sub_memopb_zomap
    1127729643U,	// L4_sub_memoph_io
    3869163U,	// L4_sub_memoph_zomap
    1127729938U,	// L4_sub_memopw_io
    3869458U,	// L4_sub_memopw_zomap
    1112U,	// L6_deallocframe_map_to_raw
    1148U,	// L6_return_map_to_raw
    105U,	// LDriw_mod
    105U,	// LDriw_pred
    3885082U,	// LO
    54233114U,	// M2_acci
    71010330U,	// M2_accii
    3917850U,	// M2_cmaci_s0
    3934234U,	// M2_cmacr_s0
    20727834U,	// M2_cmacs_s0
    1144801306U,	// M2_cmacs_s1
    1161578522U,	// M2_cmacsc_s0
    1178355738U,	// M2_cmacsc_s1
    3967002U,	// M2_cmpyi_s0
    3983386U,	// M2_cmpyr_s0
    289212442U,	// M2_cmpyrs_s0
    1195182106U,	// M2_cmpyrs_s1
    1211959322U,	// M2_cmpyrsc_s0
    1228736538U,	// M2_cmpyrsc_s1
    20776986U,	// M2_cmpys_s0
    1144850458U,	// M2_cmpys_s1
    1161627674U,	// M2_cmpysc_s0
    1178404890U,	// M2_cmpysc_s1
    20793370U,	// M2_cnacs_s0
    1144866842U,	// M2_cnacs_s1
    1161644058U,	// M2_cnacsc_s0
    1178421274U,	// M2_cnacsc_s1
    54364186U,	// M2_dpmpyss_acc_s0
    54380570U,	// M2_dpmpyss_nac_s0
    54396954U,	// M2_dpmpyss_rnd_s0
    54396954U,	// M2_dpmpyss_s0
    54413338U,	// M2_dpmpyuu_acc_s0
    54429722U,	// M2_dpmpyuu_nac_s0
    54446106U,	// M2_dpmpyuu_s0
    54396954U,	// M2_hmmpyh_rs1
    54396954U,	// M2_hmmpyh_s1
    54396954U,	// M2_hmmpyl_rs1
    54396954U,	// M2_hmmpyl_s1
    54462490U,	// M2_maci
    4147226U,	// M2_macsin
    71239706U,	// M2_macsip
    289376282U,	// M2_mmachs_rs0
    1195345946U,	// M2_mmachs_rs1
    20940826U,	// M2_mmachs_s0
    1145014298U,	// M2_mmachs_s1
    289392666U,	// M2_mmacls_rs0
    1195362330U,	// M2_mmacls_rs1
    20957210U,	// M2_mmacls_s0
    1145030682U,	// M2_mmacls_s1
    289409050U,	// M2_mmacuhs_rs0
    1195378714U,	// M2_mmacuhs_rs1
    20973594U,	// M2_mmacuhs_s0
    1145047066U,	// M2_mmacuhs_s1
    289425434U,	// M2_mmaculs_rs0
    1195395098U,	// M2_mmaculs_rs1
    20989978U,	// M2_mmaculs_s0
    1145063450U,	// M2_mmaculs_s1
    289441818U,	// M2_mmpyh_rs0
    1195411482U,	// M2_mmpyh_rs1
    21006362U,	// M2_mmpyh_s0
    1145079834U,	// M2_mmpyh_s1
    289458202U,	// M2_mmpyl_rs0
    1195427866U,	// M2_mmpyl_rs1
    21022746U,	// M2_mmpyl_s0
    1145096218U,	// M2_mmpyl_s1
    289474586U,	// M2_mmpyuh_rs0
    1195444250U,	// M2_mmpyuh_rs1
    21039130U,	// M2_mmpyuh_s0
    1145112602U,	// M2_mmpyuh_s1
    289490970U,	// M2_mmpyul_rs0
    1195460634U,	// M2_mmpyul_rs1
    21055514U,	// M2_mmpyul_s0
    1145128986U,	// M2_mmpyul_s1
    87918618U,	// M2_mpy_acc_hh_s0
    87918618U,	// M2_mpy_acc_hh_s1
    87918618U,	// M2_mpy_acc_hl_s0
    87918618U,	// M2_mpy_acc_hl_s1
    104695834U,	// M2_mpy_acc_lh_s0
    104695834U,	// M2_mpy_acc_lh_s1
    104695834U,	// M2_mpy_acc_ll_s0
    104695834U,	// M2_mpy_acc_ll_s1
    87918618U,	// M2_mpy_acc_sat_hh_s0
    87918618U,	// M2_mpy_acc_sat_hh_s1
    87918618U,	// M2_mpy_acc_sat_hl_s0
    87918618U,	// M2_mpy_acc_sat_hl_s1
    104695834U,	// M2_mpy_acc_sat_lh_s0
    104695834U,	// M2_mpy_acc_sat_lh_s1
    104695834U,	// M2_mpy_acc_sat_ll_s0
    104695834U,	// M2_mpy_acc_sat_ll_s1
    87951386U,	// M2_mpy_hh_s0
    87951386U,	// M2_mpy_hh_s1
    87951386U,	// M2_mpy_hl_s0
    87951386U,	// M2_mpy_hl_s1
    104728602U,	// M2_mpy_lh_s0
    104728602U,	// M2_mpy_lh_s1
    104728602U,	// M2_mpy_ll_s0
    104728602U,	// M2_mpy_ll_s1
    87935002U,	// M2_mpy_nac_hh_s0
    87935002U,	// M2_mpy_nac_hh_s1
    87935002U,	// M2_mpy_nac_hl_s0
    87935002U,	// M2_mpy_nac_hl_s1
    104712218U,	// M2_mpy_nac_lh_s0
    104712218U,	// M2_mpy_nac_lh_s1
    104712218U,	// M2_mpy_nac_ll_s0
    104712218U,	// M2_mpy_nac_ll_s1
    87935002U,	// M2_mpy_nac_sat_hh_s0
    87935002U,	// M2_mpy_nac_sat_hh_s1
    87935002U,	// M2_mpy_nac_sat_hl_s0
    87935002U,	// M2_mpy_nac_sat_hl_s1
    104712218U,	// M2_mpy_nac_sat_lh_s0
    104712218U,	// M2_mpy_nac_sat_lh_s1
    104712218U,	// M2_mpy_nac_sat_ll_s0
    104712218U,	// M2_mpy_nac_sat_ll_s1
    87951386U,	// M2_mpy_rnd_hh_s0
    87951386U,	// M2_mpy_rnd_hh_s1
    87951386U,	// M2_mpy_rnd_hl_s0
    87951386U,	// M2_mpy_rnd_hl_s1
    104728602U,	// M2_mpy_rnd_lh_s0
    104728602U,	// M2_mpy_rnd_lh_s1
    104728602U,	// M2_mpy_rnd_ll_s0
    104728602U,	// M2_mpy_rnd_ll_s1
    87951386U,	// M2_mpy_sat_hh_s0
    87951386U,	// M2_mpy_sat_hh_s1
    87951386U,	// M2_mpy_sat_hl_s0
    87951386U,	// M2_mpy_sat_hl_s1
    104728602U,	// M2_mpy_sat_lh_s0
    104728602U,	// M2_mpy_sat_lh_s1
    104728602U,	// M2_mpy_sat_ll_s0
    104728602U,	// M2_mpy_sat_ll_s1
    87951386U,	// M2_mpy_sat_rnd_hh_s0
    87951386U,	// M2_mpy_sat_rnd_hh_s1
    87951386U,	// M2_mpy_sat_rnd_hl_s0
    87951386U,	// M2_mpy_sat_rnd_hl_s1
    104728602U,	// M2_mpy_sat_rnd_lh_s0
    104728602U,	// M2_mpy_sat_rnd_lh_s1
    104728602U,	// M2_mpy_sat_rnd_ll_s0
    104728602U,	// M2_mpy_sat_rnd_ll_s1
    54396954U,	// M2_mpy_up
    54396954U,	// M2_mpy_up_s1
    54396954U,	// M2_mpy_up_s1_sat
    87918618U,	// M2_mpyd_acc_hh_s0
    87918618U,	// M2_mpyd_acc_hh_s1
    87918618U,	// M2_mpyd_acc_hl_s0
    87918618U,	// M2_mpyd_acc_hl_s1
    104695834U,	// M2_mpyd_acc_lh_s0
    104695834U,	// M2_mpyd_acc_lh_s1
    104695834U,	// M2_mpyd_acc_ll_s0
    104695834U,	// M2_mpyd_acc_ll_s1
    87951386U,	// M2_mpyd_hh_s0
    87951386U,	// M2_mpyd_hh_s1
    87951386U,	// M2_mpyd_hl_s0
    87951386U,	// M2_mpyd_hl_s1
    104728602U,	// M2_mpyd_lh_s0
    104728602U,	// M2_mpyd_lh_s1
    104728602U,	// M2_mpyd_ll_s0
    104728602U,	// M2_mpyd_ll_s1
    87935002U,	// M2_mpyd_nac_hh_s0
    87935002U,	// M2_mpyd_nac_hh_s1
    87935002U,	// M2_mpyd_nac_hl_s0
    87935002U,	// M2_mpyd_nac_hl_s1
    104712218U,	// M2_mpyd_nac_lh_s0
    104712218U,	// M2_mpyd_nac_lh_s1
    104712218U,	// M2_mpyd_nac_ll_s0
    104712218U,	// M2_mpyd_nac_ll_s1
    87951386U,	// M2_mpyd_rnd_hh_s0
    87951386U,	// M2_mpyd_rnd_hh_s1
    87951386U,	// M2_mpyd_rnd_hl_s0
    87951386U,	// M2_mpyd_rnd_hl_s1
    104728602U,	// M2_mpyd_rnd_lh_s0
    104728602U,	// M2_mpyd_rnd_lh_s1
    104728602U,	// M2_mpyd_rnd_ll_s0
    104728602U,	// M2_mpyd_rnd_ll_s1
    54626330U,	// M2_mpyi
    4311066U,	// M2_mpysin
    4327450U,	// M2_mpysip
    71403546U,	// M2_mpysmi
    4343834U,	// M2_mpysu_up
    87967770U,	// M2_mpyu_acc_hh_s0
    87967770U,	// M2_mpyu_acc_hh_s1
    87967770U,	// M2_mpyu_acc_hl_s0
    87967770U,	// M2_mpyu_acc_hl_s1
    104744986U,	// M2_mpyu_acc_lh_s0
    104744986U,	// M2_mpyu_acc_lh_s1
    104744986U,	// M2_mpyu_acc_ll_s0
    104744986U,	// M2_mpyu_acc_ll_s1
    88000538U,	// M2_mpyu_hh_s0
    88000538U,	// M2_mpyu_hh_s1
    88000538U,	// M2_mpyu_hl_s0
    88000538U,	// M2_mpyu_hl_s1
    104777754U,	// M2_mpyu_lh_s0
    104777754U,	// M2_mpyu_lh_s1
    104777754U,	// M2_mpyu_ll_s0
    104777754U,	// M2_mpyu_ll_s1
    87984154U,	// M2_mpyu_nac_hh_s0
    87984154U,	// M2_mpyu_nac_hh_s1
    87984154U,	// M2_mpyu_nac_hl_s0
    87984154U,	// M2_mpyu_nac_hl_s1
    104761370U,	// M2_mpyu_nac_lh_s0
    104761370U,	// M2_mpyu_nac_lh_s1
    104761370U,	// M2_mpyu_nac_ll_s0
    104761370U,	// M2_mpyu_nac_ll_s1
    54446106U,	// M2_mpyu_up
    87967770U,	// M2_mpyud_acc_hh_s0
    87967770U,	// M2_mpyud_acc_hh_s1
    87967770U,	// M2_mpyud_acc_hl_s0
    87967770U,	// M2_mpyud_acc_hl_s1
    104744986U,	// M2_mpyud_acc_lh_s0
    104744986U,	// M2_mpyud_acc_lh_s1
    104744986U,	// M2_mpyud_acc_ll_s0
    104744986U,	// M2_mpyud_acc_ll_s1
    88000538U,	// M2_mpyud_hh_s0
    88000538U,	// M2_mpyud_hh_s1
    88000538U,	// M2_mpyud_hl_s0
    88000538U,	// M2_mpyud_hl_s1
    104777754U,	// M2_mpyud_lh_s0
    104777754U,	// M2_mpyud_lh_s1
    104777754U,	// M2_mpyud_ll_s0
    104777754U,	// M2_mpyud_ll_s1
    87984154U,	// M2_mpyud_nac_hh_s0
    87984154U,	// M2_mpyud_nac_hh_s1
    87984154U,	// M2_mpyud_nac_hl_s0
    87984154U,	// M2_mpyud_nac_hl_s1
    104761370U,	// M2_mpyud_nac_lh_s0
    104761370U,	// M2_mpyud_nac_lh_s1
    104761370U,	// M2_mpyud_nac_ll_s0
    104761370U,	// M2_mpyud_nac_ll_s1
    4360218U,	// M2_mpyui
    54708250U,	// M2_nacci
    71485466U,	// M2_naccii
    4392986U,	// M2_subacc
    4409370U,	// M2_vabsdiffh
    4425754U,	// M2_vabsdiffw
    4442138U,	// M2_vcmac_s0_sat_i
    4458522U,	// M2_vcmac_s0_sat_r
    21252122U,	// M2_vcmpy_s0_sat_i
    21268506U,	// M2_vcmpy_s0_sat_r
    1145325594U,	// M2_vcmpy_s1_sat_i
    1145341978U,	// M2_vcmpy_s1_sat_r
    21284890U,	// M2_vdmacs_s0
    1145358362U,	// M2_vdmacs_s1
    289736730U,	// M2_vdmpyrs_s0
    1195706394U,	// M2_vdmpyrs_s1
    21301274U,	// M2_vdmpys_s0
    1145374746U,	// M2_vdmpys_s1
    4540442U,	// M2_vmac2
    4556826U,	// M2_vmac2es
    21334042U,	// M2_vmac2es_s0
    1145407514U,	// M2_vmac2es_s1
    21317658U,	// M2_vmac2s_s0
    1145391130U,	// M2_vmac2s_s1
    21350426U,	// M2_vmac2su_s0
    1145423898U,	// M2_vmac2su_s1
    21366810U,	// M2_vmpy2es_s0
    1145440282U,	// M2_vmpy2es_s1
    21383194U,	// M2_vmpy2s_s0
    289818650U,	// M2_vmpy2s_s0pack
    1145456666U,	// M2_vmpy2s_s1
    1195788314U,	// M2_vmpy2s_s1pack
    21399578U,	// M2_vmpy2su_s0
    1145473050U,	// M2_vmpy2su_s1
    4638746U,	// M2_vraddh
    4655130U,	// M2_vradduh
    4671514U,	// M2_vrcmaci_s0
    1246185498U,	// M2_vrcmaci_s0c
    4687898U,	// M2_vrcmacr_s0
    1246201882U,	// M2_vrcmacr_s0c
    4704282U,	// M2_vrcmpyi_s0
    1246218266U,	// M2_vrcmpyi_s0c
    4720666U,	// M2_vrcmpyr_s0
    1246234650U,	// M2_vrcmpyr_s0c
    1145587738U,	// M2_vrcmpys_acc_s1
    1263028250U,	// M2_vrcmpys_acc_s1_h
    1279805466U,	// M2_vrcmpys_acc_s1_l
    1145604122U,	// M2_vrcmpys_s1
    1263044634U,	// M2_vrcmpys_s1_h
    1279821850U,	// M2_vrcmpys_s1_l
    1195935770U,	// M2_vrcmpys_s1rp
    1296599066U,	// M2_vrcmpys_s1rp_h
    1313376282U,	// M2_vrcmpys_s1rp_l
    4769818U,	// M2_vrmac_s0
    4786202U,	// M2_vrmpy_s0
    4802586U,	// M2_xor_xacc
    55150618U,	// M4_and_and
    323586074U,	// M4_and_andn
    4835354U,	// M4_and_or
    4851738U,	// M4_and_xor
    1196050458U,	// M4_cmpyi_wh
    1229604890U,	// M4_cmpyi_whc
    1196066842U,	// M4_cmpyr_wh
    1229621274U,	// M4_cmpyr_whc
    54364186U,	// M4_mac_up_s1_sat
    1330300954U,	// M4_mpyri_addi
    33572890U,	// M4_mpyri_addr
    33572890U,	// M4_mpyri_addr_u2
    1330300954U,	// M4_mpyrr_addi
    33572890U,	// M4_mpyrr_addr
    54380570U,	// M4_nac_up_s1_sat
    55248922U,	// M4_or_and
    323684378U,	// M4_or_andn
    55265306U,	// M4_or_or
    4950042U,	// M4_or_xor
    4966426U,	// M4_pmpyw
    4982810U,	// M4_pmpyw_acc
    4999194U,	// M4_vpmpyh
    5015578U,	// M4_vpmpyh_acc
    5031962U,	// M4_vrmpyeh_acc_s0
    1347209242U,	// M4_vrmpyeh_acc_s1
    5048346U,	// M4_vrmpyeh_s0
    1347225626U,	// M4_vrmpyeh_s1
    5064730U,	// M4_vrmpyoh_acc_s0
    1347242010U,	// M4_vrmpyoh_acc_s1
    5081114U,	// M4_vrmpyoh_s0
    1347258394U,	// M4_vrmpyoh_s1
    55429146U,	// M4_xor_and
    323864602U,	// M4_xor_andn
    5113882U,	// M4_xor_or
    4802586U,	// M4_xor_xacc
    5130266U,	// M5_vdmacbsu
    5146650U,	// M5_vdmpybsu
    5163034U,	// M5_vmacbsu
    5179418U,	// M5_vmacbuu
    5195802U,	// M5_vmpybsu
    5212186U,	// M5_vmpybuu
    5228570U,	// M5_vrmacbsu
    5244954U,	// M5_vrmacbuu
    5261338U,	// M5_vrmpybsu
    5277722U,	// M5_vrmpybuu
    5294106U,	// M6_vabsdiffb
    5310490U,	// M6_vabsdiffub
    0U,	// PS_aligna
    0U,	// PS_alloca
    0U,	// PS_call_nr
    2103369U,	// PS_call_stk
    2099285U,	// PS_callr_nr
    0U,	// PS_false
    0U,	// PS_fi
    0U,	// PS_fia
    2099292U,	// PS_jmpret
    2934883U,	// PS_jmpretf
    2967651U,	// PS_jmpretfnew
    2984035U,	// PS_jmpretfnewpt
    2935054U,	// PS_jmprett
    2967822U,	// PS_jmprettnew
    2984206U,	// PS_jmprettnewpt
    5326874U,	// PS_loadrbabs
    5343258U,	// PS_loadrdabs
    5359642U,	// PS_loadrhabs
    5376026U,	// PS_loadriabs
    5392410U,	// PS_loadrubabs
    5408794U,	// PS_loadruhabs
    1U,	// PS_pselect
    223529110U,	// PS_storerbabs
    1364379798U,	// PS_storerbnewabs
    223529117U,	// PS_storerdabs
    1381157049U,	// PS_storerfabs
    223529145U,	// PS_storerhabs
    1364379833U,	// PS_storerhnewabs
    223529161U,	// PS_storeriabs
    1364379849U,	// PS_storerinewabs
    0U,	// PS_tailcall_i
    2099292U,	// PS_tailcall_r
    0U,	// PS_true
    0U,	// PS_vloadrq_ai
    0U,	// PS_vloadrw_ai
    0U,	// PS_vloadrw_nt_ai
    0U,	// PS_vloadrwu_ai
    0U,	// PS_vmulw
    0U,	// PS_vmulw_acc
    0U,	// PS_vselect
    0U,	// PS_vstorerq_ai
    0U,	// PS_vstorerw_ai
    0U,	// PS_vstorerw_nt_ai
    0U,	// PS_vstorerwu_ai
    0U,	// PS_wselect
    2103369U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    2103369U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT
    2103369U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT_PIC
    2103369U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_PIC
    2103375U,	// RESTORE_DEALLOC_RET_JMP_V4
    2103375U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT
    2103375U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT_PIC
    2103375U,	// RESTORE_DEALLOC_RET_JMP_V4_PIC
    5441562U,	// S2_addasl_rrri
    305138117U,	// S2_allocframe
    72566810U,	// S2_asl_i_p
    72583194U,	// S2_asl_i_p_acc
    72599578U,	// S2_asl_i_p_and
    72615962U,	// S2_asl_i_p_nac
    72632346U,	// S2_asl_i_p_or
    72648730U,	// S2_asl_i_p_xacc
    72566810U,	// S2_asl_i_r
    72583194U,	// S2_asl_i_r_acc
    72599578U,	// S2_asl_i_r_and
    72615962U,	// S2_asl_i_r_nac
    72632346U,	// S2_asl_i_r_or
    72566810U,	// S2_asl_i_r_sat
    72648730U,	// S2_asl_i_r_xacc
    72665114U,	// S2_asl_i_vh
    72681498U,	// S2_asl_i_vw
    55789594U,	// S2_asl_r_p
    55805978U,	// S2_asl_r_p_acc
    55822362U,	// S2_asl_r_p_and
    55838746U,	// S2_asl_r_p_nac
    55855130U,	// S2_asl_r_p_or
    55871514U,	// S2_asl_r_p_xor
    55789594U,	// S2_asl_r_r
    55805978U,	// S2_asl_r_r_acc
    55822362U,	// S2_asl_r_r_and
    55838746U,	// S2_asl_r_r_nac
    55855130U,	// S2_asl_r_r_or
    55789594U,	// S2_asl_r_r_sat
    55887898U,	// S2_asl_r_vh
    55904282U,	// S2_asl_r_vw
    72697882U,	// S2_asr_i_p
    72714266U,	// S2_asr_i_p_acc
    72730650U,	// S2_asr_i_p_and
    72747034U,	// S2_asr_i_p_nac
    72763418U,	// S2_asr_i_p_or
    72697882U,	// S2_asr_i_p_rnd
    5670938U,	// S2_asr_i_p_rnd_goodsyntax
    72697882U,	// S2_asr_i_r
    72714266U,	// S2_asr_i_r_acc
    72730650U,	// S2_asr_i_r_and
    72747034U,	// S2_asr_i_r_nac
    72763418U,	// S2_asr_i_r_or
    72697882U,	// S2_asr_i_r_rnd
    5670938U,	// S2_asr_i_r_rnd_goodsyntax
    72796186U,	// S2_asr_i_svw_trun
    72812570U,	// S2_asr_i_vh
    72796186U,	// S2_asr_i_vw
    55920666U,	// S2_asr_r_p
    55937050U,	// S2_asr_r_p_acc
    55953434U,	// S2_asr_r_p_and
    55969818U,	// S2_asr_r_p_nac
    55986202U,	// S2_asr_r_p_or
    5720090U,	// S2_asr_r_p_xor
    55920666U,	// S2_asr_r_r
    55937050U,	// S2_asr_r_r_acc
    55953434U,	// S2_asr_r_r_and
    55969818U,	// S2_asr_r_r_nac
    55986202U,	// S2_asr_r_r_or
    55920666U,	// S2_asr_r_r_sat
    56018970U,	// S2_asr_r_svw_trun
    56035354U,	// S2_asr_r_vh
    56018970U,	// S2_asr_r_vw
    5736474U,	// S2_brev
    5736474U,	// S2_brevp
    5752858U,	// S2_cabacdecbin
    5769242U,	// S2_cl0
    5769242U,	// S2_cl0p
    5785626U,	// S2_cl1
    5785626U,	// S2_cl1p
    5802010U,	// S2_clb
    5818394U,	// S2_clbnorm
    5802010U,	// S2_clbp
    72943642U,	// S2_clrbit_i
    56166426U,	// S2_clrbit_r
    5851162U,	// S2_ct0
    5851162U,	// S2_ct0p
    5867546U,	// S2_ct1
    5867546U,	// S2_ct1p
    5883930U,	// S2_deinterleave
    73009178U,	// S2_extractu
    56231962U,	// S2_extractu_rp
    73009178U,	// S2_extractup
    56231962U,	// S2_extractup_rp
    73025562U,	// S2_insert
    56248346U,	// S2_insert_rp
    73025562U,	// S2_insertp
    56248346U,	// S2_insertp_rp
    5933082U,	// S2_interleave
    5949466U,	// S2_lfsp
    5965850U,	// S2_lsl_r_p
    5982234U,	// S2_lsl_r_p_acc
    5998618U,	// S2_lsl_r_p_and
    6015002U,	// S2_lsl_r_p_nac
    6031386U,	// S2_lsl_r_p_or
    6047770U,	// S2_lsl_r_p_xor
    5965850U,	// S2_lsl_r_r
    5982234U,	// S2_lsl_r_r_acc
    5998618U,	// S2_lsl_r_r_and
    6015002U,	// S2_lsl_r_r_nac
    6031386U,	// S2_lsl_r_r_or
    6064154U,	// S2_lsl_r_vh
    6080538U,	// S2_lsl_r_vw
    73205786U,	// S2_lsr_i_p
    73222170U,	// S2_lsr_i_p_acc
    73238554U,	// S2_lsr_i_p_and
    73254938U,	// S2_lsr_i_p_nac
    73271322U,	// S2_lsr_i_p_or
    73287706U,	// S2_lsr_i_p_xacc
    73205786U,	// S2_lsr_i_r
    73222170U,	// S2_lsr_i_r_acc
    73238554U,	// S2_lsr_i_r_and
    73254938U,	// S2_lsr_i_r_nac
    73271322U,	// S2_lsr_i_r_or
    73287706U,	// S2_lsr_i_r_xacc
    73304090U,	// S2_lsr_i_vh
    73320474U,	// S2_lsr_i_vw
    56428570U,	// S2_lsr_r_p
    56444954U,	// S2_lsr_r_p_acc
    56461338U,	// S2_lsr_r_p_and
    56477722U,	// S2_lsr_r_p_nac
    56494106U,	// S2_lsr_r_p_or
    56510490U,	// S2_lsr_r_p_xor
    56428570U,	// S2_lsr_r_r
    56444954U,	// S2_lsr_r_r_acc
    56461338U,	// S2_lsr_r_r_and
    56477722U,	// S2_lsr_r_r_nac
    56494106U,	// S2_lsr_r_r_or
    56526874U,	// S2_lsr_r_vh
    56543258U,	// S2_lsr_r_vw
    6227994U,	// S2_packhl
    6244378U,	// S2_parityp
    39815267U,	// S2_pstorerbf_io
    1398771811U,	// S2_pstorerbf_pi
    39815267U,	// S2_pstorerbf_zomap
    1398788195U,	// S2_pstorerbfnew_pi
    39815267U,	// S2_pstorerbnewf_io
    1398771811U,	// S2_pstorerbnewf_pi
    39815267U,	// S2_pstorerbnewf_zomap
    1398788195U,	// S2_pstorerbnewfnew_pi
    39815438U,	// S2_pstorerbnewt_io
    1398771982U,	// S2_pstorerbnewt_pi
    39815438U,	// S2_pstorerbnewt_zomap
    1398788366U,	// S2_pstorerbnewtnew_pi
    39815438U,	// S2_pstorerbt_io
    1398771982U,	// S2_pstorerbt_pi
    39815438U,	// S2_pstorerbt_zomap
    1398788366U,	// S2_pstorerbtnew_pi
    39848035U,	// S2_pstorerdf_io
    1398804579U,	// S2_pstorerdf_pi
    39848035U,	// S2_pstorerdf_zomap
    1398820963U,	// S2_pstorerdfnew_pi
    39848206U,	// S2_pstorerdt_io
    1398804750U,	// S2_pstorerdt_pi
    39848206U,	// S2_pstorerdt_zomap
    1398821134U,	// S2_pstorerdtnew_pi
    39880803U,	// S2_pstorerff_io
    1398837347U,	// S2_pstorerff_pi
    39880803U,	// S2_pstorerff_zomap
    1398853731U,	// S2_pstorerffnew_pi
    39880974U,	// S2_pstorerft_io
    1398837518U,	// S2_pstorerft_pi
    39880974U,	// S2_pstorerft_zomap
    1398853902U,	// S2_pstorerftnew_pi
    39880803U,	// S2_pstorerhf_io
    1398837347U,	// S2_pstorerhf_pi
    39880803U,	// S2_pstorerhf_zomap
    1398853731U,	// S2_pstorerhfnew_pi
    39880803U,	// S2_pstorerhnewf_io
    1398837347U,	// S2_pstorerhnewf_pi
    39880803U,	// S2_pstorerhnewf_zomap
    1398853731U,	// S2_pstorerhnewfnew_pi
    39880974U,	// S2_pstorerhnewt_io
    1398837518U,	// S2_pstorerhnewt_pi
    39880974U,	// S2_pstorerhnewt_zomap
    1398853902U,	// S2_pstorerhnewtnew_pi
    39880974U,	// S2_pstorerht_io
    1398837518U,	// S2_pstorerht_pi
    39880974U,	// S2_pstorerht_zomap
    1398853902U,	// S2_pstorerhtnew_pi
    39913571U,	// S2_pstorerif_io
    1398870115U,	// S2_pstorerif_pi
    39913571U,	// S2_pstorerif_zomap
    1398886499U,	// S2_pstorerifnew_pi
    39913571U,	// S2_pstorerinewf_io
    1398870115U,	// S2_pstorerinewf_pi
    39913571U,	// S2_pstorerinewf_zomap
    1398886499U,	// S2_pstorerinewfnew_pi
    39913742U,	// S2_pstorerinewt_io
    1398870286U,	// S2_pstorerinewt_pi
    39913742U,	// S2_pstorerinewt_zomap
    1398886670U,	// S2_pstorerinewtnew_pi
    39913742U,	// S2_pstorerit_io
    1398870286U,	// S2_pstorerit_pi
    39913742U,	// S2_pstorerit_zomap
    1398886670U,	// S2_pstoreritnew_pi
    73500698U,	// S2_setbit_i
    56723482U,	// S2_setbit_r
    6408218U,	// S2_shuffeb
    6424602U,	// S2_shuffeh
    6440986U,	// S2_shuffob
    6457370U,	// S2_shuffoh
    1412942232U,	// S2_storerb_io
    1432537496U,	// S2_storerb_pbr
    1449331096U,	// S2_storerb_pci
    224610712U,	// S2_storerb_pcr
    1415776664U,	// S2_storerb_pi
    1415760280U,	// S2_storerb_pr
    223529368U,	// S2_storerb_zomap
    223529190U,	// S2_storerbgp
    1412942232U,	// S2_storerbnew_io
    1432537496U,	// S2_storerbnew_pbr
    1449331096U,	// S2_storerbnew_pci
    1365461400U,	// S2_storerbnew_pcr
    1415776664U,	// S2_storerbnew_pi
    1415760280U,	// S2_storerbnew_pr
    1364380056U,	// S2_storerbnew_zomap
    1364379878U,	// S2_storerbnewgp
    1412942264U,	// S2_storerd_io
    1432537528U,	// S2_storerd_pbr
    1449331128U,	// S2_storerd_pci
    224610744U,	// S2_storerd_pcr
    1415776696U,	// S2_storerd_pi
    1415760312U,	// S2_storerd_pr
    223529400U,	// S2_storerd_zomap
    223529200U,	// S2_storerdgp
    1412942315U,	// S2_storerf_io
    1432537579U,	// S2_storerf_pbr
    1449331179U,	// S2_storerf_pci
    1382238699U,	// S2_storerf_pcr
    1415776747U,	// S2_storerf_pi
    1415760363U,	// S2_storerf_pr
    1381157355U,	// S2_storerf_zomap
    1381157114U,	// S2_storerfgp
    1412942315U,	// S2_storerh_io
    1432537579U,	// S2_storerh_pbr
    1449331179U,	// S2_storerh_pci
    224610795U,	// S2_storerh_pcr
    1415776747U,	// S2_storerh_pi
    1415760363U,	// S2_storerh_pr
    223529451U,	// S2_storerh_zomap
    223529210U,	// S2_storerhgp
    1412942315U,	// S2_storerhnew_io
    1432537579U,	// S2_storerhnew_pbr
    1449331179U,	// S2_storerhnew_pci
    1365461483U,	// S2_storerhnew_pcr
    1415776747U,	// S2_storerhnew_pi
    1415760363U,	// S2_storerhnew_pr
    1364380139U,	// S2_storerhnew_zomap
    1364379898U,	// S2_storerhnewgp
    1412942610U,	// S2_storeri_io
    1432537874U,	// S2_storeri_pbr
    1449331474U,	// S2_storeri_pci
    224611090U,	// S2_storeri_pcr
    1415777042U,	// S2_storeri_pi
    1415760658U,	// S2_storeri_pr
    223529746U,	// S2_storeri_zomap
    223529220U,	// S2_storerigp
    1412942610U,	// S2_storerinew_io
    1432537874U,	// S2_storerinew_pbr
    1449331474U,	// S2_storerinew_pci
    1365461778U,	// S2_storerinew_pcr
    1415777042U,	// S2_storerinew_pi
    1415760658U,	// S2_storerinew_pr
    1364380434U,	// S2_storerinew_zomap
    1364379908U,	// S2_storerinewgp
    1394217387U,	// S2_storew_locked
    6522906U,	// S2_svsathb
    6539290U,	// S2_svsathub
    1466173466U,	// S2_tableidxb
    6555674U,	// S2_tableidxb_goodsyntax
    1466189850U,	// S2_tableidxd
    6572058U,	// S2_tableidxd_goodsyntax
    1466206234U,	// S2_tableidxh
    6588442U,	// S2_tableidxh_goodsyntax
    1466222618U,	// S2_tableidxw
    6604826U,	// S2_tableidxw_goodsyntax
    73730074U,	// S2_togglebit_i
    56952858U,	// S2_togglebit_r
    73746458U,	// S2_tstbit_i
    56969242U,	// S2_tstbit_r
    73762842U,	// S2_valignib
    56985626U,	// S2_valignrb
    6670362U,	// S2_vcnegh
    6686746U,	// S2_vcrotate
    6703130U,	// S2_vrcnegh
    6719514U,	// S2_vrndpackwh
    23496730U,	// S2_vrndpackwhs
    6522906U,	// S2_vsathb
    6522906U,	// S2_vsathb_nopack
    6539290U,	// S2_vsathub
    6539290U,	// S2_vsathub_nopack
    6735898U,	// S2_vsatwh
    6735898U,	// S2_vsatwh_nopack
    6752282U,	// S2_vsatwuh
    6752282U,	// S2_vsatwuh_nopack
    6768666U,	// S2_vsplatrb
    6785050U,	// S2_vsplatrh
    73910298U,	// S2_vspliceib
    57133082U,	// S2_vsplicerb
    6817818U,	// S2_vsxtbh
    6834202U,	// S2_vsxthw
    6850586U,	// S2_vtrunehb
    6866970U,	// S2_vtrunewh
    6883354U,	// S2_vtrunohb
    6899738U,	// S2_vtrunowh
    6916122U,	// S2_vzxtbh
    6932506U,	// S2_vzxthw
    33572890U,	// S4_addaddi
    1481295898U,	// S4_addi_asl_ri
    1498073114U,	// S4_addi_lsr_ri
    1483343898U,	// S4_andi_asl_ri
    1500121114U,	// S4_andi_lsr_ri
    6965274U,	// S4_clbaddi
    6965274U,	// S4_clbpaddi
    5818394U,	// S4_clbpnorm
    74090522U,	// S4_extract
    57313306U,	// S4_extract_rp
    74090522U,	// S4_extractp
    57313306U,	// S4_extractp_rp
    6998042U,	// S4_lsli
    74123290U,	// S4_ntstbit_i
    57346074U,	// S4_ntstbit_r
    72026138U,	// S4_or_andi
    520325146U,	// S4_or_andix
    72042522U,	// S4_or_ori
    1483425818U,	// S4_ori_asl_ri
    1500203034U,	// S4_ori_lsr_ri
    6244378U,	// S4_parity
    225151075U,	// S4_pstorerbf_abs
    39815267U,	// S4_pstorerbf_rr
    225167459U,	// S4_pstorerbfnew_abs
    39831651U,	// S4_pstorerbfnew_io
    39831651U,	// S4_pstorerbfnew_rr
    39831651U,	// S4_pstorerbfnew_zomap
    1366001763U,	// S4_pstorerbnewf_abs
    39815267U,	// S4_pstorerbnewf_rr
    1366018147U,	// S4_pstorerbnewfnew_abs
    39831651U,	// S4_pstorerbnewfnew_io
    39831651U,	// S4_pstorerbnewfnew_rr
    39831651U,	// S4_pstorerbnewfnew_zomap
    1366001934U,	// S4_pstorerbnewt_abs
    39815438U,	// S4_pstorerbnewt_rr
    1366018318U,	// S4_pstorerbnewtnew_abs
    39831822U,	// S4_pstorerbnewtnew_io
    39831822U,	// S4_pstorerbnewtnew_rr
    39831822U,	// S4_pstorerbnewtnew_zomap
    225151246U,	// S4_pstorerbt_abs
    39815438U,	// S4_pstorerbt_rr
    225167630U,	// S4_pstorerbtnew_abs
    39831822U,	// S4_pstorerbtnew_io
    39831822U,	// S4_pstorerbtnew_rr
    39831822U,	// S4_pstorerbtnew_zomap
    7080035U,	// S4_pstorerdf_abs
    39848035U,	// S4_pstorerdf_rr
    7096419U,	// S4_pstorerdfnew_abs
    39864419U,	// S4_pstorerdfnew_io
    39864419U,	// S4_pstorerdfnew_rr
    39864419U,	// S4_pstorerdfnew_zomap
    7080206U,	// S4_pstorerdt_abs
    39848206U,	// S4_pstorerdt_rr
    7096590U,	// S4_pstorerdtnew_abs
    39864590U,	// S4_pstorerdtnew_io
    39864590U,	// S4_pstorerdtnew_rr
    39864590U,	// S4_pstorerdtnew_zomap
    1382844515U,	// S4_pstorerff_abs
    39880803U,	// S4_pstorerff_rr
    1382860899U,	// S4_pstorerffnew_abs
    39897187U,	// S4_pstorerffnew_io
    39897187U,	// S4_pstorerffnew_rr
    39897187U,	// S4_pstorerffnew_zomap
    1382844686U,	// S4_pstorerft_abs
    39880974U,	// S4_pstorerft_rr
    1382861070U,	// S4_pstorerftnew_abs
    39897358U,	// S4_pstorerftnew_io
    39897358U,	// S4_pstorerftnew_rr
    39897358U,	// S4_pstorerftnew_zomap
    225216611U,	// S4_pstorerhf_abs
    39880803U,	// S4_pstorerhf_rr
    225232995U,	// S4_pstorerhfnew_abs
    39897187U,	// S4_pstorerhfnew_io
    39897187U,	// S4_pstorerhfnew_rr
    39897187U,	// S4_pstorerhfnew_zomap
    1366067299U,	// S4_pstorerhnewf_abs
    39880803U,	// S4_pstorerhnewf_rr
    1366083683U,	// S4_pstorerhnewfnew_abs
    39897187U,	// S4_pstorerhnewfnew_io
    39897187U,	// S4_pstorerhnewfnew_rr
    39897187U,	// S4_pstorerhnewfnew_zomap
    1366067470U,	// S4_pstorerhnewt_abs
    39880974U,	// S4_pstorerhnewt_rr
    1366083854U,	// S4_pstorerhnewtnew_abs
    39897358U,	// S4_pstorerhnewtnew_io
    39897358U,	// S4_pstorerhnewtnew_rr
    39897358U,	// S4_pstorerhnewtnew_zomap
    225216782U,	// S4_pstorerht_abs
    39880974U,	// S4_pstorerht_rr
    225233166U,	// S4_pstorerhtnew_abs
    39897358U,	// S4_pstorerhtnew_io
    39897358U,	// S4_pstorerhtnew_rr
    39897358U,	// S4_pstorerhtnew_zomap
    225249379U,	// S4_pstorerif_abs
    39913571U,	// S4_pstorerif_rr
    225265763U,	// S4_pstorerifnew_abs
    39929955U,	// S4_pstorerifnew_io
    39929955U,	// S4_pstorerifnew_rr
    39929955U,	// S4_pstorerifnew_zomap
    1366100067U,	// S4_pstorerinewf_abs
    39913571U,	// S4_pstorerinewf_rr
    1366116451U,	// S4_pstorerinewfnew_abs
    39929955U,	// S4_pstorerinewfnew_io
    39929955U,	// S4_pstorerinewfnew_rr
    39929955U,	// S4_pstorerinewfnew_zomap
    1366100238U,	// S4_pstorerinewt_abs
    39913742U,	// S4_pstorerinewt_rr
    1366116622U,	// S4_pstorerinewtnew_abs
    39930126U,	// S4_pstorerinewtnew_io
    39930126U,	// S4_pstorerinewtnew_rr
    39930126U,	// S4_pstorerinewtnew_zomap
    225249550U,	// S4_pstorerit_abs
    39913742U,	// S4_pstorerit_rr
    225265934U,	// S4_pstoreritnew_abs
    39930126U,	// S4_pstoreritnew_io
    39930126U,	// S4_pstoreritnew_rr
    39930126U,	// S4_pstoreritnew_zomap
    1394217374U,	// S4_stored_locked
    1513605528U,	// S4_storeirb_io
    7178648U,	// S4_storeirb_zomap
    39815267U,	// S4_storeirbf_io
    39815267U,	// S4_storeirbf_zomap
    39831651U,	// S4_storeirbfnew_io
    39831651U,	// S4_storeirbfnew_zomap
    39815438U,	// S4_storeirbt_io
    39815438U,	// S4_storeirbt_zomap
    39831822U,	// S4_storeirbtnew_io
    39831822U,	// S4_storeirbtnew_zomap
    1513605611U,	// S4_storeirh_io
    7178731U,	// S4_storeirh_zomap
    39880803U,	// S4_storeirhf_io
    39880803U,	// S4_storeirhf_zomap
    39897187U,	// S4_storeirhfnew_io
    39897187U,	// S4_storeirhfnew_zomap
    39880974U,	// S4_storeirht_io
    39880974U,	// S4_storeirht_zomap
    39897358U,	// S4_storeirhtnew_io
    39897358U,	// S4_storeirhtnew_zomap
    1513605906U,	// S4_storeiri_io
    7179026U,	// S4_storeiri_zomap
    39913571U,	// S4_storeirif_io
    39913571U,	// S4_storeirif_zomap
    39929955U,	// S4_storeirifnew_io
    39929955U,	// S4_storeirifnew_zomap
    39913742U,	// S4_storeirit_io
    39913742U,	// S4_storeirit_zomap
    39930126U,	// S4_storeiritnew_io
    39930126U,	// S4_storeiritnew_zomap
    225298840U,	// S4_storerb_ap
    225315224U,	// S4_storerb_rr
    225331608U,	// S4_storerb_ur
    1366149528U,	// S4_storerbnew_ap
    1366165912U,	// S4_storerbnew_rr
    1366182296U,	// S4_storerbnew_ur
    225298872U,	// S4_storerd_ap
    225315256U,	// S4_storerd_rr
    225331640U,	// S4_storerd_ur
    1382926827U,	// S4_storerf_ap
    1382943211U,	// S4_storerf_rr
    1382959595U,	// S4_storerf_ur
    225298923U,	// S4_storerh_ap
    225315307U,	// S4_storerh_rr
    225331691U,	// S4_storerh_ur
    1366149611U,	// S4_storerhnew_ap
    1366165995U,	// S4_storerhnew_rr
    1366182379U,	// S4_storerhnew_ur
    225299218U,	// S4_storeri_ap
    225315602U,	// S4_storeri_rr
    225331986U,	// S4_storeri_ur
    1366149906U,	// S4_storerinew_ap
    1366166290U,	// S4_storerinew_rr
    1366182674U,	// S4_storerinew_ur
    33572890U,	// S4_subaddi
    1476790298U,	// S4_subi_asl_ri
    1493567514U,	// S4_subi_lsr_ri
    7243802U,	// S4_vrcrotate
    7260186U,	// S4_vrcrotate_acc
    24053786U,	// S4_vxaddsubh
    1534003226U,	// S4_vxaddsubhr
    7292954U,	// S4_vxaddsubw
    24086554U,	// S4_vxsubaddh
    1534035994U,	// S4_vxsubaddhr
    7325722U,	// S4_vxsubaddw
    74450970U,	// S5_asrhub_rnd_sat
    74450970U,	// S5_asrhub_rnd_sat_goodsyntax
    74450970U,	// S5_asrhub_sat
    7358490U,	// S5_popcountp
    72812570U,	// S5_vasrhrnd
    72812570U,	// S5_vasrhrnd_goodsyntax
    1460388U,	// S6_allocframe_to_raw
    7374874U,	// S6_rol_i_p
    7391258U,	// S6_rol_i_p_acc
    7407642U,	// S6_rol_i_p_and
    7424026U,	// S6_rol_i_p_nac
    7440410U,	// S6_rol_i_p_or
    7456794U,	// S6_rol_i_p_xacc
    7374874U,	// S6_rol_i_r
    7391258U,	// S6_rol_i_r_acc
    7407642U,	// S6_rol_i_r_and
    7424026U,	// S6_rol_i_r_nac
    7440410U,	// S6_rol_i_r_or
    7456794U,	// S6_rol_i_r_xacc
    6768666U,	// S6_vsplatrbp
    57182234U,	// S6_vtrunehb_ppp
    57215002U,	// S6_vtrunohb_ppp
    33572890U,	// SA1_addi
    33572890U,	// SA1_addrx
    7473178U,	// SA1_addsp
    1543538714U,	// SA1_and1
    7489563U,	// SA1_clrf
    7489582U,	// SA1_clrfnew
    7489573U,	// SA1_clrt
    7489596U,	// SA1_clrtnew
    36702718U,	// SA1_cmpeqi
    7505946U,	// SA1_combine0i
    7522330U,	// SA1_combine1i
    7538714U,	// SA1_combine2i
    7555098U,	// SA1_combine3i
    1560365082U,	// SA1_combinerz
    7571482U,	// SA1_combinezr
    33572890U,	// SA1_dec
    33572890U,	// SA1_inc
    218728474U,	// SA1_seti
    218728474U,	// SA1_setin1
    526362U,	// SA1_sxtb
    542746U,	// SA1_sxth
    218679322U,	// SA1_tfr
    1577093146U,	// SA1_zxtb
    1296410U,	// SA1_zxth
    2103369U,	// SAVE_REGISTERS_CALL_V4
    2103369U,	// SAVE_REGISTERS_CALL_V4STK
    2103369U,	// SAVE_REGISTERS_CALL_V4STK_EXT
    2103369U,	// SAVE_REGISTERS_CALL_V4STK_EXT_PIC
    2103369U,	// SAVE_REGISTERS_CALL_V4STK_PIC
    2103369U,	// SAVE_REGISTERS_CALL_V4_EXT
    2103369U,	// SAVE_REGISTERS_CALL_V4_EXT_PIC
    2103369U,	// SAVE_REGISTERS_CALL_V4_PIC
    674629658U,	// SL1_loadri_io
    674662426U,	// SL1_loadrub_io
    1112U,	// SL2_deallocframe
    945U,	// SL2_jumpr31
    936U,	// SL2_jumpr31_f
    973U,	// SL2_jumpr31_fnew
    955U,	// SL2_jumpr31_t
    999U,	// SL2_jumpr31_tnew
    674531354U,	// SL2_loadrb_io
    7587866U,	// SL2_loadrd_sp
    674596890U,	// SL2_loadrh_io
    7604250U,	// SL2_loadri_sp
    674695194U,	// SL2_loadruh_io
    1148U,	// SL2_return
    1139U,	// SL2_return_f
    1219U,	// SL2_return_fnew
    1163U,	// SL2_return_t
    1250U,	// SL2_return_tnew
    1412942232U,	// SS1_storeb_io
    1412942610U,	// SS1_storew_io
    1460388U,	// SS2_allocframe
    1597491608U,	// SS2_storebi0
    1614268824U,	// SS2_storebi1
    223529168U,	// SS2_stored_sp
    1412942315U,	// SS2_storeh_io
    223529179U,	// SS2_storew_sp
    1597491986U,	// SS2_storewi0
    1614269202U,	// SS2_storewi1
    105U,	// STriw_mod
    105U,	// STriw_pred
    7620634U,	// TFRI64_V2_ext
    218728474U,	// TFRI64_V4
    1635026970U,	// V6_MAP_equb
    1635043354U,	// V6_MAP_equb_and
    1635059738U,	// V6_MAP_equb_ior
    1635076122U,	// V6_MAP_equb_xor
    1651804186U,	// V6_MAP_equh
    1651820570U,	// V6_MAP_equh_and
    1651836954U,	// V6_MAP_equh_ior
    1651853338U,	// V6_MAP_equh_xor
    1668581402U,	// V6_MAP_equw
    1668597786U,	// V6_MAP_equw_and
    1668614170U,	// V6_MAP_equw_ior
    1668630554U,	// V6_MAP_equw_xor
    7702554U,	// V6_extractw
    7718938U,	// V6_extractw_alt
    7735322U,	// V6_hi
    7751706U,	// V6_ld0
    1677971555U,	// V6_ldcnp0
    1677971555U,	// V6_ldcnpnt0
    1677971726U,	// V6_ldcp0
    1677971726U,	// V6_ldcpnt0
    1694748771U,	// V6_ldnp0
    1694748771U,	// V6_ldnpnt0
    1719027738U,	// V6_ldnt0
    1719027738U,	// V6_ldntnt0
    1694748942U,	// V6_ldp0
    1694748942U,	// V6_ldpnt0
    1728303203U,	// V6_ldtnp0
    1728303203U,	// V6_ldtnpnt0
    1728303374U,	// V6_ldtp0
    1728303374U,	// V6_ldtpnt0
    7768090U,	// V6_ldu0
    7784474U,	// V6_lo
    7800858U,	// V6_lvsplatb
    7817242U,	// V6_lvsplath
    7833626U,	// V6_lvsplatw
    50366490U,	// V6_pred_and
    469796890U,	// V6_pred_and_n
    215066U,	// V6_pred_not
    50563098U,	// V6_pred_or
    469993498U,	// V6_pred_or_n
    7850010U,	// V6_pred_scalar2
    7866394U,	// V6_pred_scalar2v2
    1263642U,	// V6_pred_xor
    91768858U,	// V6_shuffeqh
    1752729626U,	// V6_shuffeqw
    223529464U,	// V6_st0
    1364380152U,	// V6_stn0
    1366870520U,	// V6_stnnt0
    41486435U,	// V6_stnp0
    41486435U,	// V6_stnpnt0
    41486435U,	// V6_stnq0
    41486435U,	// V6_stnqnt0
    226019832U,	// V6_stnt0
    41486606U,	// V6_stp0
    41486606U,	// V6_stpnt0
    41486606U,	// V6_stq0
    41486606U,	// V6_stqnt0
    223529684U,	// V6_stu0
    41502819U,	// V6_stunp0
    41502990U,	// V6_stup0
    678856730U,	// V6_vL32Ub_ai
    712411162U,	// V6_vL32Ub_pi
    695633946U,	// V6_vL32Ub_ppu
    678840346U,	// V6_vL32b_ai
    679053338U,	// V6_vL32b_cur_ai
    1677971555U,	// V6_vL32b_cur_npred_ai
    1677975651U,	// V6_vL32b_cur_npred_pi
    1677975651U,	// V6_vL32b_cur_npred_ppu
    712607770U,	// V6_vL32b_cur_pi
    695830554U,	// V6_vL32b_cur_ppu
    1677971726U,	// V6_vL32b_cur_pred_ai
    1677975822U,	// V6_vL32b_cur_pred_pi
    1677975822U,	// V6_vL32b_cur_pred_ppu
    1694748771U,	// V6_vL32b_npred_ai
    1694752867U,	// V6_vL32b_npred_pi
    1694752867U,	// V6_vL32b_npred_ppu
    678840346U,	// V6_vL32b_nt_ai
    679053338U,	// V6_vL32b_nt_cur_ai
    1677971555U,	// V6_vL32b_nt_cur_npred_ai
    1677975651U,	// V6_vL32b_nt_cur_npred_pi
    1677975651U,	// V6_vL32b_nt_cur_npred_ppu
    712607770U,	// V6_vL32b_nt_cur_pi
    695830554U,	// V6_vL32b_nt_cur_ppu
    1677971726U,	// V6_vL32b_nt_cur_pred_ai
    1677975822U,	// V6_vL32b_nt_cur_pred_pi
    1677975822U,	// V6_vL32b_nt_cur_pred_ppu
    1694748771U,	// V6_vL32b_nt_npred_ai
    1694752867U,	// V6_vL32b_nt_npred_pi
    1694752867U,	// V6_vL32b_nt_npred_ppu
    712394778U,	// V6_vL32b_nt_pi
    695617562U,	// V6_vL32b_nt_ppu
    1694748942U,	// V6_vL32b_nt_pred_ai
    1694753038U,	// V6_vL32b_nt_pred_pi
    1694753038U,	// V6_vL32b_nt_pred_ppu
    679069722U,	// V6_vL32b_nt_tmp_ai
    1728303203U,	// V6_vL32b_nt_tmp_npred_ai
    1728307299U,	// V6_vL32b_nt_tmp_npred_pi
    1728307299U,	// V6_vL32b_nt_tmp_npred_ppu
    712624154U,	// V6_vL32b_nt_tmp_pi
    695846938U,	// V6_vL32b_nt_tmp_ppu
    1728303374U,	// V6_vL32b_nt_tmp_pred_ai
    1728307470U,	// V6_vL32b_nt_tmp_pred_pi
    1728307470U,	// V6_vL32b_nt_tmp_pred_ppu
    712394778U,	// V6_vL32b_pi
    695617562U,	// V6_vL32b_ppu
    1694748942U,	// V6_vL32b_pred_ai
    1694753038U,	// V6_vL32b_pred_pi
    1694753038U,	// V6_vL32b_pred_ppu
    679069722U,	// V6_vL32b_tmp_ai
    1728303203U,	// V6_vL32b_tmp_npred_ai
    1728307299U,	// V6_vL32b_tmp_npred_pi
    1728307299U,	// V6_vL32b_tmp_npred_ppu
    712624154U,	// V6_vL32b_tmp_pi
    695846938U,	// V6_vL32b_tmp_ppu
    1728303374U,	// V6_vL32b_tmp_pred_ai
    1728307470U,	// V6_vL32b_tmp_pred_pi
    1728307470U,	// V6_vL32b_tmp_pred_ppu
    1412942548U,	// V6_vS32Ub_ai
    41502819U,	// V6_vS32Ub_npred_ai
    1400459363U,	// V6_vS32Ub_npred_pi
    1400459363U,	// V6_vS32Ub_npred_ppu
    1415776980U,	// V6_vS32Ub_pi
    1415760596U,	// V6_vS32Ub_ppu
    41502990U,	// V6_vS32Ub_pred_ai
    1400459534U,	// V6_vS32Ub_pred_pi
    1400459534U,	// V6_vS32Ub_pred_ppu
    1412942328U,	// V6_vS32b_ai
    1412942328U,	// V6_vS32b_new_ai
    41486435U,	// V6_vS32b_new_npred_ai
    1400442979U,	// V6_vS32b_new_npred_pi
    1400442979U,	// V6_vS32b_new_npred_ppu
    1415776760U,	// V6_vS32b_new_pi
    1415760376U,	// V6_vS32b_new_ppu
    41486606U,	// V6_vS32b_new_pred_ai
    1400443150U,	// V6_vS32b_new_pred_pi
    1400443150U,	// V6_vS32b_new_pred_ppu
    41486435U,	// V6_vS32b_npred_ai
    1400442979U,	// V6_vS32b_npred_pi
    1400442979U,	// V6_vS32b_npred_ppu
    41486435U,	// V6_vS32b_nqpred_ai
    1400442979U,	// V6_vS32b_nqpred_pi
    1400442979U,	// V6_vS32b_nqpred_ppu
    1765263864U,	// V6_vS32b_nt_ai
    1765263864U,	// V6_vS32b_nt_new_ai
    41486435U,	// V6_vS32b_nt_new_npred_ai
    1400442979U,	// V6_vS32b_nt_new_npred_pi
    1400442979U,	// V6_vS32b_nt_new_npred_ppu
    1768098296U,	// V6_vS32b_nt_new_pi
    1768081912U,	// V6_vS32b_nt_new_ppu
    41486606U,	// V6_vS32b_nt_new_pred_ai
    1400443150U,	// V6_vS32b_nt_new_pred_pi
    1400443150U,	// V6_vS32b_nt_new_pred_ppu
    41486435U,	// V6_vS32b_nt_npred_ai
    1400442979U,	// V6_vS32b_nt_npred_pi
    1400442979U,	// V6_vS32b_nt_npred_ppu
    41486435U,	// V6_vS32b_nt_nqpred_ai
    1400442979U,	// V6_vS32b_nt_nqpred_pi
    1400442979U,	// V6_vS32b_nt_nqpred_ppu
    1768098296U,	// V6_vS32b_nt_pi
    1768081912U,	// V6_vS32b_nt_ppu
    41486606U,	// V6_vS32b_nt_pred_ai
    1400443150U,	// V6_vS32b_nt_pred_pi
    1400443150U,	// V6_vS32b_nt_pred_ppu
    41486606U,	// V6_vS32b_nt_qpred_ai
    1400443150U,	// V6_vS32b_nt_qpred_pi
    1400443150U,	// V6_vS32b_nt_qpred_ppu
    1415776760U,	// V6_vS32b_pi
    1415760376U,	// V6_vS32b_ppu
    41486606U,	// V6_vS32b_pred_ai
    1400443150U,	// V6_vS32b_pred_pi
    1400443150U,	// V6_vS32b_pred_ppu
    41486606U,	// V6_vS32b_qpred_ai
    1400443150U,	// V6_vS32b_qpred_pi
    1400443150U,	// V6_vS32b_qpred_ppu
    1782041080U,	// V6_vS32b_srls_ai
    1784875512U,	// V6_vS32b_srls_pi
    1784859128U,	// V6_vS32b_srls_ppu
    1803159578U,	// V6_vabsb
    8013850U,	// V6_vabsb_alt
    1819936794U,	// V6_vabsb_sat
    24791066U,	// V6_vabsb_sat_alt
    91916314U,	// V6_vabsdiffh
    4409370U,	// V6_vabsdiffh_alt
    8046618U,	// V6_vabsdiffub
    5310490U,	// V6_vabsdiffub_alt
    1652197402U,	// V6_vabsdiffuh
    8063002U,	// V6_vabsdiffuh_alt
    8079386U,	// V6_vabsdiffw
    4425754U,	// V6_vabsdiffw_alt
    1836812314U,	// V6_vabsh
    641050U,	// V6_vabsh_alt
    1853589530U,	// V6_vabsh_sat
    17418266U,	// V6_vabsh_sat_alt
    8112154U,	// V6_vabsub_alt
    8128538U,	// V6_vabsuh_alt
    8144922U,	// V6_vabsuw_alt
    1870432282U,	// V6_vabsw
    657434U,	// V6_vabsw_alt
    1887209498U,	// V6_vabsw_sat
    17434650U,	// V6_vabsw_sat_alt
    1803339802U,	// V6_vaddb
    673818U,	// V6_vaddb_alt
    1803339802U,	// V6_vaddb_dv
    673818U,	// V6_vaddb_dv_alt
    1896075363U,	// V6_vaddbnq
    1904021603U,	// V6_vaddbnq_alt
    1896075534U,	// V6_vaddbq
    1904021774U,	// V6_vaddbq_alt
    1820117018U,	// V6_vaddbsat
    17451034U,	// V6_vaddbsat_alt
    1820117018U,	// V6_vaddbsat_dv
    17451034U,	// V6_vaddbsat_dv_alt
    310200346U,	// V6_vaddcarry
    8226842U,	// V6_vaddclbh
    8243226U,	// V6_vaddclbw
    92145690U,	// V6_vaddh
    411674U,	// V6_vaddh_alt
    92145690U,	// V6_vaddh_dv
    411674U,	// V6_vaddh_dv_alt
    1912852579U,	// V6_vaddhnq
    1920880739U,	// V6_vaddhnq_alt
    1912852750U,	// V6_vaddhq
    1920880910U,	// V6_vaddhq_alt
    92145690U,	// V6_vaddhsat
    17188890U,	// V6_vaddhsat_alt
    92145690U,	// V6_vaddhsat_dv
    17188890U,	// V6_vaddhsat_dv_alt
    41764890U,	// V6_vaddhw
    92178458U,	// V6_vaddhw_acc
    8308762U,	// V6_vaddhw_acc_alt
    411674U,	// V6_vaddhw_alt
    1635649562U,	// V6_vaddubh
    8325146U,	// V6_vaddubh_acc
    8341530U,	// V6_vaddubh_acc_alt
    690202U,	// V6_vaddubh_alt
    1937737754U,	// V6_vaddubsat
    17467418U,	// V6_vaddubsat_alt
    1937737754U,	// V6_vaddubsat_dv
    17467418U,	// V6_vaddubsat_dv_alt
    1820297242U,	// V6_vaddububb_sat
    8374298U,	// V6_vadduhsat
    17205274U,	// V6_vadduhsat_alt
    8374298U,	// V6_vadduhsat_dv
    17205274U,	// V6_vadduhsat_dv_alt
    41764890U,	// V6_vadduhw
    1652459546U,	// V6_vadduhw_acc
    8390682U,	// V6_vadduhw_acc_alt
    428058U,	// V6_vadduhw_alt
    8407066U,	// V6_vadduwsat
    8423450U,	// V6_vadduwsat_alt
    8407066U,	// V6_vadduwsat_dv
    8423450U,	// V6_vadduwsat_dv_alt
    41764890U,	// V6_vaddw
    706586U,	// V6_vaddw_alt
    41764890U,	// V6_vaddw_dv
    706586U,	// V6_vaddw_dv_alt
    1946407011U,	// V6_vaddwnq
    1954599011U,	// V6_vaddwnq_alt
    1946407182U,	// V6_vaddwq
    1954599182U,	// V6_vaddwq_alt
    41764890U,	// V6_vaddwsat
    17483802U,	// V6_vaddwsat_alt
    41764890U,	// V6_vaddwsat_dv
    17483802U,	// V6_vaddwsat_dv_alt
    58787866U,	// V6_valignb
    75565082U,	// V6_valignbi
    8472602U,	// V6_vand
    8488986U,	// V6_vandnqrt
    8505370U,	// V6_vandnqrt_acc
    8521754U,	// V6_vandnqrt_acc_alt
    8538138U,	// V6_vandnqrt_alt
    8472602U,	// V6_vandqrt
    8554522U,	// V6_vandqrt_acc
    8570906U,	// V6_vandqrt_acc_alt
    8587290U,	// V6_vandqrt_alt
    8488986U,	// V6_vandvnqv
    8472602U,	// V6_vandvqv
    8472602U,	// V6_vandvrt
    8554522U,	// V6_vandvrt_acc
    8570906U,	// V6_vandvrt_acc_alt
    8587290U,	// V6_vandvrt_alt
    8603674U,	// V6_vaslh
    8620058U,	// V6_vaslh_acc
    8636442U,	// V6_vaslh_acc_alt
    55887898U,	// V6_vaslh_alt
    1837320218U,	// V6_vaslhv
    55887898U,	// V6_vaslhv_alt
    8652826U,	// V6_vaslw
    8669210U,	// V6_vaslw_acc
    8685594U,	// V6_vaslw_acc_alt
    55904282U,	// V6_vaslw_alt
    1870923802U,	// V6_vaslwv
    55904282U,	// V6_vaslwv_alt
    92588058U,	// V6_vasrh
    8718362U,	// V6_vasrh_acc
    8734746U,	// V6_vasrh_acc_alt
    56035354U,	// V6_vasrh_alt
    293963802U,	// V6_vasrhbrndsat
    8767514U,	// V6_vasrhbrndsat_alt
    25528346U,	// V6_vasrhbsat
    92669978U,	// V6_vasrhubrndsat
    57673754U,	// V6_vasrhubrndsat_alt
    92669978U,	// V6_vasrhubsat
    57673754U,	// V6_vasrhubsat_alt
    92588058U,	// V6_vasrhv
    56035354U,	// V6_vasrhv_alt
    1652951066U,	// V6_vasruhubrndsat
    1652951066U,	// V6_vasruhubsat
    1669744666U,	// V6_vasruwuhrndsat
    1669744666U,	// V6_vasruwuhsat
    8816666U,	// V6_vasrw
    8833050U,	// V6_vasrw_acc
    8849434U,	// V6_vasrw_acc_alt
    56018970U,	// V6_vasrw_alt
    1753532442U,	// V6_vasrwh
    8865818U,	// V6_vasrwh_alt
    1753532442U,	// V6_vasrwhrndsat
    294078490U,	// V6_vasrwhrndsat_alt
    1753532442U,	// V6_vasrwhsat
    25643034U,	// V6_vasrwhsat_alt
    1753630746U,	// V6_vasrwuhrndsat
    1753630746U,	// V6_vasrwuhsat
    8882202U,	// V6_vasrwuhsat_alt
    1871087642U,	// V6_vasrwv
    56018970U,	// V6_vasrwv_alt
    218679322U,	// V6_vassign
    218679322U,	// V6_vassignp
    1804060698U,	// V6_vavgb
    8914970U,	// V6_vavgb_alt
    1971832858U,	// V6_vavgbrnd
    210241562U,	// V6_vavgbrnd_alt
    1837647898U,	// V6_vavgh
    444442U,	// V6_vavgh_alt
    1988642842U,	// V6_vavghrnd
    201771034U,	// V6_vavghrnd_alt
    2005436442U,	// V6_vavgub
    722970U,	// V6_vavgub_alt
    2022213658U,	// V6_vavgubrnd
    202049562U,	// V6_vavgubrnd_alt
    2039007258U,	// V6_vavguh
    739354U,	// V6_vavguh_alt
    2055784474U,	// V6_vavguhrnd
    202065946U,	// V6_vavguhrnd_alt
    2072578074U,	// V6_vavguw
    755738U,	// V6_vavguw_alt
    2089355290U,	// V6_vavguwrnd
    202082330U,	// V6_vavguwrnd_alt
    1871267866U,	// V6_vavgw
    772122U,	// V6_vavgw_alt
    2106148890U,	// V6_vavgwrnd
    202098714U,	// V6_vavgwrnd_alt
    2114179342U,	// V6_vccombine
    9013274U,	// V6_vcl0h
    9029658U,	// V6_vcl0h_alt
    9046042U,	// V6_vcl0w
    9062426U,	// V6_vcl0w_alt
    235131150U,	// V6_vcmov
    9078810U,	// V6_vcombine
    7489562U,	// V6_vd0
    7489562U,	// V6_vdd0
    35260913U,	// V6_vdeal
    9095194U,	// V6_vdealb
    9111578U,	// V6_vdealb4w
    9127962U,	// V6_vdealb4w_alt
    9144346U,	// V6_vdealb_alt
    9160730U,	// V6_vdealh
    9177114U,	// V6_vdealh_alt
    9193498U,	// V6_vdealvdd
    9209882U,	// V6_vdelta
    9226266U,	// V6_vdmpybus
    9242650U,	// V6_vdmpybus_acc
    9259034U,	// V6_vdmpybus_acc_alt
    9275418U,	// V6_vdmpybus_alt
    9226266U,	// V6_vdmpybus_dv
    9242650U,	// V6_vdmpybus_dv_acc
    9259034U,	// V6_vdmpybus_dv_acc_alt
    9275418U,	// V6_vdmpybus_dv_alt
    1804453914U,	// V6_vdmpyhb
    1804470298U,	// V6_vdmpyhb_acc
    9324570U,	// V6_vdmpyhb_acc_alt
    9340954U,	// V6_vdmpyhb_alt
    1804453914U,	// V6_vdmpyhb_dv
    1804470298U,	// V6_vdmpyhb_dv_acc
    9324570U,	// V6_vdmpyhb_dv_acc_alt
    9340954U,	// V6_vdmpyhb_dv_alt
    1854785562U,	// V6_vdmpyhisat
    1854801946U,	// V6_vdmpyhisat_acc
    9357338U,	// V6_vdmpyhisat_acc_alt
    9373722U,	// V6_vdmpyhisat_alt
    1854785562U,	// V6_vdmpyhsat
    1854801946U,	// V6_vdmpyhsat_acc
    9357338U,	// V6_vdmpyhsat_acc_alt
    9373722U,	// V6_vdmpyhsat_alt
    2139998234U,	// V6_vdmpyhsuisat
    2140014618U,	// V6_vdmpyhsuisat_acc
    2156873754U,	// V6_vdmpyhsuisat_acc_alt
    2156890138U,	// V6_vdmpyhsuisat_alt
    2173552666U,	// V6_vdmpyhsusat
    2173569050U,	// V6_vdmpyhsusat_acc
    26167322U,	// V6_vdmpyhsusat_acc_alt
    26183706U,	// V6_vdmpyhsusat_alt
    1854785562U,	// V6_vdmpyhvsat
    1854801946U,	// V6_vdmpyhvsat_acc
    9357338U,	// V6_vdmpyhvsat_acc_alt
    9373722U,	// V6_vdmpyhvsat_alt
    9422874U,	// V6_vdsaduh
    9439258U,	// V6_vdsaduh_acc
    9455642U,	// V6_vdsaduh_acc_alt
    9472026U,	// V6_vdsaduh_alt
    2188675098U,	// V6_veqb
    2188691482U,	// V6_veqb_and
    2188707866U,	// V6_veqb_or
    2188724250U,	// V6_veqb_xor
    91523098U,	// V6_veqh
    91539482U,	// V6_veqh_and
    91555866U,	// V6_veqh_or
    91572250U,	// V6_veqh_xor
    1752467482U,	// V6_veqw
    1752483866U,	// V6_veqw_and
    1752500250U,	// V6_veqw_or
    1752516634U,	// V6_veqw_xor
    35260977U,	// V6_vgathermh
    1U,	// V6_vgathermh_pseudo
    2207303950U,	// V6_vgathermhq
    1U,	// V6_vgathermhq_pseudo
    35260977U,	// V6_vgathermhw
    1U,	// V6_vgathermhw_pseudo
    2224081166U,	// V6_vgathermhwq
    1U,	// V6_vgathermhwq_pseudo
    35260995U,	// V6_vgathermw
    1U,	// V6_vgathermw_pseudo
    9505038U,	// V6_vgathermwq
    1U,	// V6_vgathermwq_pseudo
    2190559258U,	// V6_vgtb
    2190575642U,	// V6_vgtb_and
    2190592026U,	// V6_vgtb_or
    2190608410U,	// V6_vgtb_xor
    93407258U,	// V6_vgth
    93423642U,	// V6_vgth_and
    93440026U,	// V6_vgth_or
    93456410U,	// V6_vgth_xor
    1636911130U,	// V6_vgtub
    1636927514U,	// V6_vgtub_and
    1636943898U,	// V6_vgtub_or
    1636960282U,	// V6_vgtub_xor
    1653688346U,	// V6_vgtuh
    1653704730U,	// V6_vgtuh_and
    1653721114U,	// V6_vgtuh_or
    1653737498U,	// V6_vgtuh_xor
    1670465562U,	// V6_vgtuw
    1670481946U,	// V6_vgtuw_and
    1670498330U,	// V6_vgtuw_or
    1670514714U,	// V6_vgtuw_xor
    1754351642U,	// V6_vgtw
    1754368026U,	// V6_vgtw_and
    1754384410U,	// V6_vgtw_or
    1754400794U,	// V6_vgtw_xor
    1286U,	// V6_vhist
    1460941U,	// V6_vhistq
    9586714U,	// V6_vinsertwr
    59934746U,	// V6_vlalignb
    76711962U,	// V6_vlalignbi
    9619482U,	// V6_vlsrb
    9635866U,	// V6_vlsrh
    56526874U,	// V6_vlsrh_alt
    9652250U,	// V6_vlsrhv
    56526874U,	// V6_vlsrhv_alt
    9668634U,	// V6_vlsrw
    56543258U,	// V6_vlsrw_alt
    9685018U,	// V6_vlsrwv
    56543258U,	// V6_vlsrwv_alt
    9701402U,	// V6_vlut4
    2190755866U,	// V6_vlutvvb
    2190755866U,	// V6_vlutvvb_nm
    2190772250U,	// V6_vlutvvb_oracc
    2241103898U,	// V6_vlutvvb_oracci
    2241087514U,	// V6_vlutvvbi
    93636634U,	// V6_vlutvwh
    93636634U,	// V6_vlutvwh_nm
    93653018U,	// V6_vlutvwh_oracc
    2257913882U,	// V6_vlutvwh_oracci
    2257897498U,	// V6_vlutvwhi
    9783322U,	// V6_vmaxb
    935962U,	// V6_vmaxb_alt
    9799706U,	// V6_vmaxh
    952346U,	// V6_vmaxh_alt
    9816090U,	// V6_vmaxub
    968730U,	// V6_vmaxub_alt
    9832474U,	// V6_vmaxuh
    985114U,	// V6_vmaxuh_alt
    9848858U,	// V6_vmaxw
    1017882U,	// V6_vmaxw_alt
    9865242U,	// V6_vminb
    1034266U,	// V6_vminb_alt
    9881626U,	// V6_vminh
    1050650U,	// V6_vminh_alt
    9898010U,	// V6_vminub
    1067034U,	// V6_vminub_alt
    9914394U,	// V6_vminuh
    1083418U,	// V6_vminuh_alt
    9930778U,	// V6_vminw
    1116186U,	// V6_vminw_alt
    1637337114U,	// V6_vmpabus
    1805125658U,	// V6_vmpabus_acc
    9979930U,	// V6_vmpabus_acc_alt
    9996314U,	// V6_vmpabus_alt
    1637337114U,	// V6_vmpabusv
    9996314U,	// V6_vmpabusv_alt
    1637337114U,	// V6_vmpabuu
    2006452250U,	// V6_vmpabuu_acc
    10012698U,	// V6_vmpabuu_acc_alt
    10029082U,	// V6_vmpabuu_alt
    1637337114U,	// V6_vmpabuuv
    10029082U,	// V6_vmpabuuv_alt
    93931546U,	// V6_vmpahb
    93947930U,	// V6_vmpahb_acc
    10078234U,	// V6_vmpahb_acc_alt
    10094618U,	// V6_vmpahb_alt
    93833242U,	// V6_vmpahhsat
    1654212634U,	// V6_vmpauhb
    1654229018U,	// V6_vmpauhb_acc
    10111002U,	// V6_vmpauhb_acc_alt
    10127386U,	// V6_vmpauhb_alt
    93833242U,	// V6_vmpauhuhsat
    10143770U,	// V6_vmpsuhuhsat
    1637550106U,	// V6_vmpybus
    1637566490U,	// V6_vmpybus_acc
    10192922U,	// V6_vmpybus_acc_alt
    10209306U,	// V6_vmpybus_alt
    1637550106U,	// V6_vmpybusv
    1637566490U,	// V6_vmpybusv_acc
    10192922U,	// V6_vmpybusv_acc_alt
    10209306U,	// V6_vmpybusv_alt
    2191198234U,	// V6_vmpybv
    2191214618U,	// V6_vmpybv_acc
    10225690U,	// V6_vmpybv_acc_alt
    10242074U,	// V6_vmpybv_alt
    10258458U,	// V6_vmpyewuh
    10274842U,	// V6_vmpyewuh_64
    10291226U,	// V6_vmpyewuh_alt
    1839024154U,	// V6_vmpyh
    1839040538U,	// V6_vmpyh_acc
    4540442U,	// V6_vmpyh_acc_alt
    4605978U,	// V6_vmpyh_alt
    1855817754U,	// V6_vmpyhsat_acc
    21317658U,	// V6_vmpyhsat_acc_alt
    94046234U,	// V6_vmpyhsrs
    1195788314U,	// V6_vmpyhsrs_alt
    94046234U,	// V6_vmpyhss
    1145456666U,	// V6_vmpyhss_alt
    2040350746U,	// V6_vmpyhus
    2040367130U,	// V6_vmpyhus_acc
    10340378U,	// V6_vmpyhus_acc_alt
    10356762U,	// V6_vmpyhus_alt
    1839024154U,	// V6_vmpyhv
    1839040538U,	// V6_vmpyhv_acc
    4540442U,	// V6_vmpyhv_acc_alt
    4605978U,	// V6_vmpyhv_alt
    94046234U,	// V6_vmpyhvsrs
    1195788314U,	// V6_vmpyhvsrs_alt
    10373146U,	// V6_vmpyieoh
    1839106074U,	// V6_vmpyiewh_acc
    10405914U,	// V6_vmpyiewh_acc_alt
    10422298U,	// V6_vmpyiewuh
    2040432666U,	// V6_vmpyiewuh_acc
    10438682U,	// V6_vmpyiewuh_acc_alt
    10455066U,	// V6_vmpyiewuh_alt
    1839187994U,	// V6_vmpyih
    1839204378U,	// V6_vmpyih_acc
    10504218U,	// V6_vmpyih_acc_alt
    10520602U,	// V6_vmpyih_alt
    1805633562U,	// V6_vmpyihb
    1805649946U,	// V6_vmpyihb_acc
    10536986U,	// V6_vmpyihb_acc_alt
    10553370U,	// V6_vmpyihb_alt
    10569754U,	// V6_vmpyiowh
    10586138U,	// V6_vmpyiowh_alt
    1805764634U,	// V6_vmpyiwb
    1805781018U,	// V6_vmpyiwb_acc
    10635290U,	// V6_vmpyiwb_acc_alt
    10651674U,	// V6_vmpyiwb_alt
    1839319066U,	// V6_vmpyiwh
    1839335450U,	// V6_vmpyiwh_acc
    10668058U,	// V6_vmpyiwh_acc_alt
    10684442U,	// V6_vmpyiwh_alt
    2007091226U,	// V6_vmpyiwub
    2007107610U,	// V6_vmpyiwub_acc
    10700826U,	// V6_vmpyiwub_acc_alt
    10717210U,	// V6_vmpyiwub_alt
    2275657754U,	// V6_vmpyowh
    10749978U,	// V6_vmpyowh_64_acc
    1151617050U,	// V6_vmpyowh_alt
    2292434970U,	// V6_vmpyowh_rnd
    1201948698U,	// V6_vmpyowh_rnd_alt
    2309261338U,	// V6_vmpyowh_rnd_sacc
    2326054938U,	// V6_vmpyowh_rnd_sacc_alt
    2342815770U,	// V6_vmpyowh_sacc
    2359609370U,	// V6_vmpyowh_sacc_alt
    10815514U,	// V6_vmpyub
    10831898U,	// V6_vmpyub_acc
    10848282U,	// V6_vmpyub_acc_alt
    10864666U,	// V6_vmpyub_alt
    10815514U,	// V6_vmpyubv
    10831898U,	// V6_vmpyubv_acc
    10848282U,	// V6_vmpyubv_acc_alt
    10864666U,	// V6_vmpyubv_alt
    10881050U,	// V6_vmpyuh
    10897434U,	// V6_vmpyuh_acc
    10913818U,	// V6_vmpyuh_acc_alt
    10930202U,	// V6_vmpyuh_alt
    10946586U,	// V6_vmpyuhe
    10962970U,	// V6_vmpyuhe_acc
    10881050U,	// V6_vmpyuhv
    10897434U,	// V6_vmpyuhv_acc
    10913818U,	// V6_vmpyuhv_acc_alt
    10930202U,	// V6_vmpyuhv_alt
    1968154U,	// V6_vmux
    2192017434U,	// V6_vnavgb
    10995738U,	// V6_vnavgb_alt
    11012122U,	// V6_vnavgh
    460826U,	// V6_vnavgh_alt
    1638369306U,	// V6_vnavgub
    11028506U,	// V6_vnavgub_alt
    11044890U,	// V6_vnavgw
    1132570U,	// V6_vnavgw_alt
    2114179171U,	// V6_vnccombine
    235130979U,	// V6_vncmov
    11061274U,	// V6_vnormamth
    11077658U,	// V6_vnormamth_alt
    11094042U,	// V6_vnormamtw
    11110426U,	// V6_vnormamtw_alt
    11126810U,	// V6_vnot
    11143194U,	// V6_vor
    11159578U,	// V6_vpackeb
    11175962U,	// V6_vpackeb_alt
    11192346U,	// V6_vpackeh
    11208730U,	// V6_vpackeh_alt
    11225114U,	// V6_vpackhb_sat
    11241498U,	// V6_vpackhb_sat_alt
    11257882U,	// V6_vpackhub_sat
    11274266U,	// V6_vpackhub_sat_alt
    11290650U,	// V6_vpackob
    11307034U,	// V6_vpackob_alt
    11323418U,	// V6_vpackoh
    11339802U,	// V6_vpackoh_alt
    11356186U,	// V6_vpackwh_sat
    11372570U,	// V6_vpackwh_sat_alt
    11388954U,	// V6_vpackwuh_sat
    11405338U,	// V6_vpackwuh_sat_alt
    11421722U,	// V6_vpopcounth
    11438106U,	// V6_vpopcounth_alt
    11454490U,	// V6_vprefixqb
    11470874U,	// V6_vprefixqh
    11487258U,	// V6_vprefixqw
    11503642U,	// V6_vrdelta
    2192558106U,	// V6_vrmpybub_rtt
    2192574490U,	// V6_vrmpybub_rtt_acc
    2192574490U,	// V6_vrmpybub_rtt_acc_alt
    2192558106U,	// V6_vrmpybub_rtt_alt
    1638909978U,	// V6_vrmpybus
    1638926362U,	// V6_vrmpybus_acc
    11552794U,	// V6_vrmpybus_acc_alt
    11569178U,	// V6_vrmpybus_alt
    1638909978U,	// V6_vrmpybusi
    1638926362U,	// V6_vrmpybusi_acc
    78661658U,	// V6_vrmpybusi_acc_alt
    78678042U,	// V6_vrmpybusi_alt
    1638909978U,	// V6_vrmpybusv
    1638926362U,	// V6_vrmpybusv_acc
    11552794U,	// V6_vrmpybusv_acc_alt
    11569178U,	// V6_vrmpybusv_alt
    2192558106U,	// V6_vrmpybv
    2192574490U,	// V6_vrmpybv_acc
    11585562U,	// V6_vrmpybv_acc_alt
    11601946U,	// V6_vrmpybv_alt
    2008107034U,	// V6_vrmpyub
    2008123418U,	// V6_vrmpyub_acc
    11651098U,	// V6_vrmpyub_acc_alt
    11667482U,	// V6_vrmpyub_alt
    2008107034U,	// V6_vrmpyub_rtt
    2008123418U,	// V6_vrmpyub_rtt_acc
    2008123418U,	// V6_vrmpyub_rtt_acc_alt
    2008107034U,	// V6_vrmpyub_rtt_alt
    2377205786U,	// V6_vrmpyubi
    2377222170U,	// V6_vrmpyubi_acc
    78759962U,	// V6_vrmpyubi_acc_alt
    78776346U,	// V6_vrmpyubi_alt
    2008107034U,	// V6_vrmpyubv
    2008123418U,	// V6_vrmpyubv_acc
    11651098U,	// V6_vrmpyubv_acc_alt
    11667482U,	// V6_vrmpyubv_alt
    11683866U,	// V6_vror
    11700250U,	// V6_vroundhb
    11716634U,	// V6_vroundhb_alt
    95619098U,	// V6_vroundhub
    11749402U,	// V6_vroundhub_alt
    1655900186U,	// V6_vrounduhub
    11765786U,	// V6_vrounduhub_alt
    1672726554U,	// V6_vrounduwuh
    11798554U,	// V6_vrounduwuh_alt
    11814938U,	// V6_vroundwh
    11831322U,	// V6_vroundwh_alt
    1756612634U,	// V6_vroundwuh
    11847706U,	// V6_vroundwuh_alt
    11864090U,	// V6_vrsadubi
    11880474U,	// V6_vrsadubi_acc
    68306970U,	// V6_vrsadubi_acc_alt
    68290586U,	// V6_vrsadubi_alt
    11896858U,	// V6_vsathub
    56870938U,	// V6_vsathub_alt
    11913242U,	// V6_vsatuwuh
    11929626U,	// V6_vsatuwuh_alt
    11946010U,	// V6_vsatwh
    57067546U,	// V6_vsatwh_alt
    11962394U,	// V6_vsb
    11978778U,	// V6_vsb_alt
    35261013U,	// V6_vscattermh
    35261013U,	// V6_vscattermh_add
    35261013U,	// V6_vscattermh_add_alt
    35261013U,	// V6_vscattermh_alt
    2394360078U,	// V6_vscattermhq
    2411137294U,	// V6_vscattermhq_alt
    35261013U,	// V6_vscattermhw
    35261013U,	// V6_vscattermhw_add
    2427914510U,	// V6_vscattermhwq
    35261013U,	// V6_vscattermw
    35261013U,	// V6_vscattermw_add
    35261013U,	// V6_vscattermw_add_alt
    35261013U,	// V6_vscattermw_alt
    35261013U,	// V6_vscattermwh_add_alt
    35261013U,	// V6_vscattermwh_alt
    2444691726U,	// V6_vscattermwhq_alt
    2461468942U,	// V6_vscattermwq
    2444691726U,	// V6_vscattermwq_alt
    12011546U,	// V6_vsh
    12027930U,	// V6_vsh_alt
    91785242U,	// V6_vshufeh
    12044314U,	// V6_vshufeh_alt
    35260881U,	// V6_vshuff
    12060698U,	// V6_vshuffb
    12077082U,	// V6_vshuffb_alt
    2188920858U,	// V6_vshuffeb
    12093466U,	// V6_vshuffeb_alt
    12109850U,	// V6_vshuffh
    12126234U,	// V6_vshuffh_alt
    12142618U,	// V6_vshuffob
    12159002U,	// V6_vshuffob_alt
    12175386U,	// V6_vshuffvdd
    12191770U,	// V6_vshufoeb
    12208154U,	// V6_vshufoeb_alt
    12224538U,	// V6_vshufoeh
    12240922U,	// V6_vshufoeh_alt
    12257306U,	// V6_vshufoh
    12273690U,	// V6_vshufoh_alt
    1807452186U,	// V6_vsubb
    1214490U,	// V6_vsubb_alt
    1807452186U,	// V6_vsubb_dv
    1214490U,	// V6_vsubb_dv_alt
    2466500707U,	// V6_vsubbnq
    2474446947U,	// V6_vsubbnq_alt
    2466500878U,	// V6_vsubbq
    2474447118U,	// V6_vsubbq_alt
    1824229402U,	// V6_vsubbsat
    17991706U,	// V6_vsubbsat_alt
    1824229402U,	// V6_vsubbsat_dv
    17991706U,	// V6_vsubbsat_dv_alt
    314296346U,	// V6_vsubcarry
    96208922U,	// V6_vsubh
    477210U,	// V6_vsubh_alt
    96208922U,	// V6_vsubh_dv
    477210U,	// V6_vsubh_dv_alt
    2483277923U,	// V6_vsubhnq
    2491306083U,	// V6_vsubhnq_alt
    2483278094U,	// V6_vsubhq
    2491306254U,	// V6_vsubhq_alt
    96208922U,	// V6_vsubhsat
    17254426U,	// V6_vsubhsat_alt
    96208922U,	// V6_vsubhsat_dv
    17254426U,	// V6_vsubhsat_dv_alt
    45860890U,	// V6_vsubhw
    477210U,	// V6_vsubhw_alt
    1639712794U,	// V6_vsububh
    1230874U,	// V6_vsububh_alt
    1941719066U,	// V6_vsububsat
    18008090U,	// V6_vsububsat_alt
    1941719066U,	// V6_vsububsat_dv
    18008090U,	// V6_vsububsat_dv_alt
    1824278554U,	// V6_vsubububb_sat
    12355610U,	// V6_vsubuhsat
    17270810U,	// V6_vsubuhsat_alt
    12355610U,	// V6_vsubuhsat_dv
    17270810U,	// V6_vsubuhsat_dv_alt
    45860890U,	// V6_vsubuhw
    493594U,	// V6_vsubuhw_alt
    12371994U,	// V6_vsubuwsat
    12388378U,	// V6_vsubuwsat_alt
    12371994U,	// V6_vsubuwsat_dv
    12388378U,	// V6_vsubuwsat_dv_alt
    45860890U,	// V6_vsubw
    1247258U,	// V6_vsubw_alt
    45860890U,	// V6_vsubw_dv
    1247258U,	// V6_vsubw_dv_alt
    2500055139U,	// V6_vsubwnq
    2508247139U,	// V6_vsubwnq_alt
    2500055310U,	// V6_vsubwq
    2508247310U,	// V6_vsubwq_alt
    45860890U,	// V6_vsubwsat
    18024474U,	// V6_vsubwsat_alt
    45860890U,	// V6_vsubwsat_dv
    18024474U,	// V6_vsubwsat_dv_alt
    12404762U,	// V6_vswap
    2193459226U,	// V6_vtmpyb
    2193475610U,	// V6_vtmpyb_acc
    12453914U,	// V6_vtmpyb_acc_alt
    12470298U,	// V6_vtmpyb_alt
    1639811098U,	// V6_vtmpybus
    1639827482U,	// V6_vtmpybus_acc
    12486682U,	// V6_vtmpybus_acc_alt
    12503066U,	// V6_vtmpybus_alt
    12519450U,	// V6_vtmpyhb
    12535834U,	// V6_vtmpyhb_acc
    12552218U,	// V6_vtmpyhb_acc_alt
    12568602U,	// V6_vtmpyhb_alt
    35260743U,	// V6_vtran2x2_map
    12584986U,	// V6_vunpackb
    12601370U,	// V6_vunpackb_alt
    12617754U,	// V6_vunpackh
    12634138U,	// V6_vunpackh_alt
    12650522U,	// V6_vunpackob
    12666906U,	// V6_vunpackob_alt
    12683290U,	// V6_vunpackoh
    12699674U,	// V6_vunpackoh_alt
    12716058U,	// V6_vunpackub
    12732442U,	// V6_vunpackub_alt
    12748826U,	// V6_vunpackuh
    12765210U,	// V6_vunpackuh_alt
    1044U,	// V6_vwhist128
    1460362U,	// V6_vwhist128m
    1460573U,	// V6_vwhist128q
    36702557U,	// V6_vwhist128qm
    1034U,	// V6_vwhist256
    1198U,	// V6_vwhist256_sat
    1460562U,	// V6_vwhist256q
    12781906U,	// V6_vwhist256q_sat
    12797978U,	// V6_vxor
    12814362U,	// V6_vzb
    12830746U,	// V6_vzb_alt
    12847130U,	// V6_vzh
    12863514U,	// V6_vzh_alt
    1190U,	// Y2_barrier
    1280U,	// Y2_break
    1460584U,	// Y2_dccleana
    1460619U,	// Y2_dccleaninva
    1460706U,	// Y2_dcfetch
    3656162U,	// Y2_dcfetchbo
    1460603U,	// Y2_dcinva
    1460594U,	// Y2_dczeroa
    1460611U,	// Y2_icinva
    1106U,	// Y2_isync
    1212U,	// Y2_syncht
    35260889U,	// Y4_l2fetch
    1460670U,	// Y4_trace
    35260889U,	// Y5_l2fetch
    33572890U,	// dep_A2_addsat
    33933338U,	// dep_A2_subsat
    2522810394U,	// dep_S2_packhl
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// A2_abs
    0U,	// A2_absp
    0U,	// A2_abssat
    0U,	// A2_add
    65U,	// A2_addh_h16_hh
    129U,	// A2_addh_h16_hl
    66U,	// A2_addh_h16_lh
    130U,	// A2_addh_h16_ll
    193U,	// A2_addh_h16_sat_hh
    257U,	// A2_addh_h16_sat_hl
    194U,	// A2_addh_h16_sat_lh
    258U,	// A2_addh_h16_sat_ll
    322U,	// A2_addh_l16_hl
    386U,	// A2_addh_l16_ll
    450U,	// A2_addh_l16_sat_hl
    514U,	// A2_addh_l16_sat_ll
    3U,	// A2_addi
    0U,	// A2_addp
    4096U,	// A2_addpsat
    4096U,	// A2_addsat
    0U,	// A2_addsp
    8192U,	// A2_addsph
    12288U,	// A2_addspl
    580U,	// A2_and
    580U,	// A2_andir
    580U,	// A2_andp
    0U,	// A2_aslh
    0U,	// A2_asrh
    324U,	// A2_combine_hh
    388U,	// A2_combine_hl
    324U,	// A2_combine_lh
    388U,	// A2_combine_ll
    580U,	// A2_combineii
    580U,	// A2_combinew
    0U,	// A2_iconst
    0U,	// A2_max
    0U,	// A2_maxp
    0U,	// A2_maxu
    0U,	// A2_maxup
    0U,	// A2_min
    0U,	// A2_minp
    0U,	// A2_minu
    0U,	// A2_minup
    0U,	// A2_neg
    0U,	// A2_negp
    0U,	// A2_negsat
    0U,	// A2_nop
    0U,	// A2_not
    0U,	// A2_notp
    580U,	// A2_or
    580U,	// A2_orir
    580U,	// A2_orp
    640U,	// A2_paddf
    640U,	// A2_paddfnew
    643U,	// A2_paddif
    643U,	// A2_paddifnew
    643U,	// A2_paddit
    643U,	// A2_padditnew
    640U,	// A2_paddt
    640U,	// A2_paddtnew
    0U,	// A2_pandf
    0U,	// A2_pandfnew
    0U,	// A2_pandt
    0U,	// A2_pandtnew
    0U,	// A2_porf
    0U,	// A2_porfnew
    0U,	// A2_port
    0U,	// A2_portnew
    0U,	// A2_psubf
    0U,	// A2_psubfnew
    0U,	// A2_psubt
    0U,	// A2_psubtnew
    0U,	// A2_pxorf
    0U,	// A2_pxorfnew
    0U,	// A2_pxort
    0U,	// A2_pxortnew
    0U,	// A2_roundsat
    0U,	// A2_sat
    0U,	// A2_satb
    0U,	// A2_sath
    0U,	// A2_satub
    0U,	// A2_satuh
    0U,	// A2_sub
    65U,	// A2_subh_h16_hh
    129U,	// A2_subh_h16_hl
    66U,	// A2_subh_h16_lh
    130U,	// A2_subh_h16_ll
    193U,	// A2_subh_h16_sat_hh
    257U,	// A2_subh_h16_sat_hl
    194U,	// A2_subh_h16_sat_lh
    258U,	// A2_subh_h16_sat_ll
    322U,	// A2_subh_l16_hl
    386U,	// A2_subh_l16_ll
    450U,	// A2_subh_l16_sat_hl
    514U,	// A2_subh_l16_sat_ll
    0U,	// A2_subp
    580U,	// A2_subri
    4096U,	// A2_subsat
    0U,	// A2_svaddh
    0U,	// A2_svaddhs
    0U,	// A2_svadduhs
    0U,	// A2_svavgh
    0U,	// A2_svavghs
    0U,	// A2_svnavgh
    0U,	// A2_svsubh
    0U,	// A2_svsubhs
    0U,	// A2_svsubuhs
    0U,	// A2_swiz
    0U,	// A2_sxtb
    0U,	// A2_sxth
    0U,	// A2_sxtw
    0U,	// A2_tfr
    0U,	// A2_tfrcrr
    0U,	// A2_tfrf
    0U,	// A2_tfrfnew
    0U,	// A2_tfrih
    0U,	// A2_tfril
    0U,	// A2_tfrp
    0U,	// A2_tfrpf
    0U,	// A2_tfrpfnew
    0U,	// A2_tfrpi
    0U,	// A2_tfrpt
    0U,	// A2_tfrptnew
    0U,	// A2_tfrrcr
    0U,	// A2_tfrsi
    0U,	// A2_tfrt
    0U,	// A2_tfrtnew
    0U,	// A2_vabsh
    0U,	// A2_vabshsat
    0U,	// A2_vabsw
    0U,	// A2_vabswsat
    0U,	// A2_vaddb_map
    0U,	// A2_vaddh
    0U,	// A2_vaddhs
    0U,	// A2_vaddub
    0U,	// A2_vaddubs
    0U,	// A2_vadduhs
    0U,	// A2_vaddw
    0U,	// A2_vaddws
    0U,	// A2_vavgh
    0U,	// A2_vavghcr
    0U,	// A2_vavghr
    0U,	// A2_vavgub
    0U,	// A2_vavgubr
    0U,	// A2_vavguh
    0U,	// A2_vavguhr
    0U,	// A2_vavguw
    0U,	// A2_vavguwr
    0U,	// A2_vavgw
    0U,	// A2_vavgwcr
    0U,	// A2_vavgwr
    580U,	// A2_vcmpbeq
    580U,	// A2_vcmpbgtu
    580U,	// A2_vcmpheq
    580U,	// A2_vcmphgt
    580U,	// A2_vcmphgtu
    580U,	// A2_vcmpweq
    580U,	// A2_vcmpwgt
    580U,	// A2_vcmpwgtu
    0U,	// A2_vconj
    0U,	// A2_vmaxb
    0U,	// A2_vmaxh
    0U,	// A2_vmaxub
    0U,	// A2_vmaxuh
    0U,	// A2_vmaxuw
    0U,	// A2_vmaxw
    0U,	// A2_vminb
    0U,	// A2_vminh
    0U,	// A2_vminub
    0U,	// A2_vminuh
    0U,	// A2_vminuw
    0U,	// A2_vminw
    0U,	// A2_vnavgh
    0U,	// A2_vnavghcr
    0U,	// A2_vnavghr
    0U,	// A2_vnavgw
    0U,	// A2_vnavgwcr
    0U,	// A2_vnavgwr
    0U,	// A2_vraddub
    0U,	// A2_vraddub_acc
    0U,	// A2_vrsadub
    0U,	// A2_vrsadub_acc
    0U,	// A2_vsubb_map
    0U,	// A2_vsubh
    0U,	// A2_vsubhs
    0U,	// A2_vsubub
    0U,	// A2_vsububs
    0U,	// A2_vsubuhs
    0U,	// A2_vsubw
    0U,	// A2_vsubws
    0U,	// A2_xor
    0U,	// A2_xorp
    0U,	// A2_zxtb
    0U,	// A2_zxth
    17024U,	// A4_addp_c
    580U,	// A4_andn
    580U,	// A4_andnp
    580U,	// A4_bitsplit
    580U,	// A4_bitspliti
    0U,	// A4_boundscheck
    0U,	// A4_boundscheck_hi
    0U,	// A4_boundscheck_lo
    580U,	// A4_cmpbeq
    580U,	// A4_cmpbeqi
    580U,	// A4_cmpbgt
    580U,	// A4_cmpbgti
    580U,	// A4_cmpbgtu
    580U,	// A4_cmpbgtui
    580U,	// A4_cmpheq
    580U,	// A4_cmpheqi
    580U,	// A4_cmphgt
    580U,	// A4_cmphgti
    580U,	// A4_cmphgtu
    580U,	// A4_cmphgtui
    580U,	// A4_combineii
    580U,	// A4_combineir
    580U,	// A4_combineri
    580U,	// A4_cround_ri
    580U,	// A4_cround_rr
    0U,	// A4_ext
    0U,	// A4_modwrapu
    580U,	// A4_orn
    580U,	// A4_ornp
    0U,	// A4_paslhf
    0U,	// A4_paslhfnew
    0U,	// A4_paslht
    0U,	// A4_paslhtnew
    0U,	// A4_pasrhf
    0U,	// A4_pasrhfnew
    0U,	// A4_pasrht
    0U,	// A4_pasrhtnew
    0U,	// A4_psxtbf
    0U,	// A4_psxtbfnew
    0U,	// A4_psxtbt
    0U,	// A4_psxtbtnew
    0U,	// A4_psxthf
    0U,	// A4_psxthfnew
    0U,	// A4_psxtht
    0U,	// A4_psxthtnew
    0U,	// A4_pzxtbf
    0U,	// A4_pzxtbfnew
    0U,	// A4_pzxtbt
    0U,	// A4_pzxtbtnew
    0U,	// A4_pzxthf
    0U,	// A4_pzxthfnew
    0U,	// A4_pzxtht
    0U,	// A4_pzxthtnew
    580U,	// A4_rcmpeq
    580U,	// A4_rcmpeqi
    580U,	// A4_rcmpneq
    580U,	// A4_rcmpneqi
    580U,	// A4_round_ri
    708U,	// A4_round_ri_sat
    580U,	// A4_round_rr
    708U,	// A4_round_rr_sat
    17024U,	// A4_subp_c
    0U,	// A4_tfrcpp
    0U,	// A4_tfrpcp
    0U,	// A4_tlbmatch
    0U,	// A4_vcmpbeq_any
    580U,	// A4_vcmpbeqi
    580U,	// A4_vcmpbgt
    580U,	// A4_vcmpbgti
    580U,	// A4_vcmpbgtui
    580U,	// A4_vcmpheqi
    580U,	// A4_vcmphgti
    580U,	// A4_vcmphgtui
    580U,	// A4_vcmpweqi
    580U,	// A4_vcmpwgti
    580U,	// A4_vcmpwgtui
    0U,	// A4_vrmaxh
    0U,	// A4_vrmaxuh
    0U,	// A4_vrmaxuw
    0U,	// A4_vrmaxw
    0U,	// A4_vrminh
    0U,	// A4_vrminuh
    0U,	// A4_vrminuw
    0U,	// A4_vrminw
    5U,	// A5_ACS
    0U,	// A5_vaddhubs
    0U,	// A6_vcmpbeq_notany
    6U,	// A6_vminub_RdP
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// C2_all8
    580U,	// C2_and
    0U,	// C2_andn
    0U,	// C2_any8
    580U,	// C2_bitsclr
    580U,	// C2_bitsclri
    0U,	// C2_bitsset
    0U,	// C2_ccombinewf
    0U,	// C2_ccombinewnewf
    0U,	// C2_ccombinewnewt
    0U,	// C2_ccombinewt
    0U,	// C2_cmoveif
    0U,	// C2_cmoveit
    0U,	// C2_cmovenewif
    0U,	// C2_cmovenewit
    580U,	// C2_cmpeq
    580U,	// C2_cmpeqi
    580U,	// C2_cmpeqp
    0U,	// C2_cmpgei
    0U,	// C2_cmpgeui
    580U,	// C2_cmpgt
    580U,	// C2_cmpgti
    580U,	// C2_cmpgtp
    580U,	// C2_cmpgtu
    580U,	// C2_cmpgtui
    580U,	// C2_cmpgtup
    0U,	// C2_cmplt
    0U,	// C2_cmpltu
    0U,	// C2_mask
    772U,	// C2_mux
    21316U,	// C2_muxii
    21316U,	// C2_muxir
    772U,	// C2_muxri
    0U,	// C2_not
    580U,	// C2_or
    0U,	// C2_orn
    0U,	// C2_pxfer_map
    0U,	// C2_tfrpr
    0U,	// C2_tfrrp
    0U,	// C2_vitpack
    0U,	// C2_vmux
    0U,	// C2_xor
    0U,	// C4_addipc
    25216U,	// C4_and_and
    7U,	// C4_and_andn
    25216U,	// C4_and_or
    7U,	// C4_and_orn
    580U,	// C4_cmplte
    580U,	// C4_cmpltei
    580U,	// C4_cmplteu
    580U,	// C4_cmplteui
    580U,	// C4_cmpneq
    580U,	// C4_cmpneqi
    0U,	// C4_fastcorner9
    0U,	// C4_fastcorner9_not
    580U,	// C4_nbitsclr
    580U,	// C4_nbitsclri
    0U,	// C4_nbitsset
    25216U,	// C4_or_and
    7U,	// C4_or_andn
    25216U,	// C4_or_or
    7U,	// C4_or_orn
    0U,	// CALLProfile
    0U,	// CONST32
    0U,	// CONST64
    0U,	// DUPLEX_Pseudo
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    0U,	// EH_RETURN_JMPR
    0U,	// ENDLOOP0
    0U,	// ENDLOOP1
    0U,	// F2_conv_d2df
    0U,	// F2_conv_d2sf
    0U,	// F2_conv_df2d
    0U,	// F2_conv_df2d_chop
    0U,	// F2_conv_df2sf
    0U,	// F2_conv_df2ud
    0U,	// F2_conv_df2ud_chop
    0U,	// F2_conv_df2uw
    0U,	// F2_conv_df2uw_chop
    0U,	// F2_conv_df2w
    0U,	// F2_conv_df2w_chop
    0U,	// F2_conv_sf2d
    0U,	// F2_conv_sf2d_chop
    0U,	// F2_conv_sf2df
    0U,	// F2_conv_sf2ud
    0U,	// F2_conv_sf2ud_chop
    0U,	// F2_conv_sf2uw
    0U,	// F2_conv_sf2uw_chop
    0U,	// F2_conv_sf2w
    0U,	// F2_conv_sf2w_chop
    0U,	// F2_conv_ud2df
    0U,	// F2_conv_ud2sf
    0U,	// F2_conv_uw2df
    0U,	// F2_conv_uw2sf
    0U,	// F2_conv_w2df
    0U,	// F2_conv_w2sf
    0U,	// F2_dfclass
    0U,	// F2_dfcmpeq
    0U,	// F2_dfcmpge
    0U,	// F2_dfcmpgt
    0U,	// F2_dfcmpuo
    0U,	// F2_dfimm_n
    0U,	// F2_dfimm_p
    0U,	// F2_sfadd
    0U,	// F2_sfclass
    0U,	// F2_sfcmpeq
    0U,	// F2_sfcmpge
    0U,	// F2_sfcmpgt
    0U,	// F2_sfcmpuo
    0U,	// F2_sffixupd
    0U,	// F2_sffixupn
    0U,	// F2_sffixupr
    0U,	// F2_sffma
    0U,	// F2_sffma_lib
    904U,	// F2_sffma_sc
    0U,	// F2_sffms
    0U,	// F2_sffms_lib
    0U,	// F2_sfimm_n
    0U,	// F2_sfimm_p
    9U,	// F2_sfinvsqrta
    0U,	// F2_sfmax
    0U,	// F2_sfmin
    0U,	// F2_sfmpy
    10U,	// F2_sfrecipa
    0U,	// F2_sfsub
    0U,	// HI
    0U,	// J2_call
    0U,	// J2_callf
    0U,	// J2_callr
    0U,	// J2_callrf
    0U,	// J2_callrt
    0U,	// J2_callt
    0U,	// J2_endloop0
    0U,	// J2_endloop01
    0U,	// J2_endloop1
    0U,	// J2_jump
    0U,	// J2_jumpf
    0U,	// J2_jumpf_nopred_map
    0U,	// J2_jumpfnew
    0U,	// J2_jumpfnewpt
    0U,	// J2_jumpfpt
    0U,	// J2_jumpr
    0U,	// J2_jumprf
    0U,	// J2_jumprf_nopred_map
    0U,	// J2_jumprfnew
    0U,	// J2_jumprfnewpt
    0U,	// J2_jumprfpt
    0U,	// J2_jumprgtez
    0U,	// J2_jumprgtezpt
    0U,	// J2_jumprltez
    0U,	// J2_jumprltezpt
    0U,	// J2_jumprnz
    0U,	// J2_jumprnzpt
    0U,	// J2_jumprt
    0U,	// J2_jumprt_nopred_map
    0U,	// J2_jumprtnew
    0U,	// J2_jumprtnewpt
    0U,	// J2_jumprtpt
    0U,	// J2_jumprz
    0U,	// J2_jumprzpt
    0U,	// J2_jumpt
    0U,	// J2_jumpt_nopred_map
    0U,	// J2_jumptnew
    0U,	// J2_jumptnewpt
    0U,	// J2_jumptpt
    11U,	// J2_loop0i
    11U,	// J2_loop0iext
    11U,	// J2_loop0r
    11U,	// J2_loop0rext
    11U,	// J2_loop1i
    11U,	// J2_loop1iext
    11U,	// J2_loop1r
    11U,	// J2_loop1rext
    0U,	// J2_pause
    11U,	// J2_ploop1si
    11U,	// J2_ploop1sr
    11U,	// J2_ploop2si
    11U,	// J2_ploop2sr
    11U,	// J2_ploop3si
    11U,	// J2_ploop3sr
    0U,	// J2_trap0
    0U,	// J4_cmpeq_f_jumpnv_nt
    0U,	// J4_cmpeq_f_jumpnv_t
    12U,	// J4_cmpeq_fp0_jump_nt
    13U,	// J4_cmpeq_fp0_jump_t
    14U,	// J4_cmpeq_fp1_jump_nt
    15U,	// J4_cmpeq_fp1_jump_t
    0U,	// J4_cmpeq_t_jumpnv_nt
    0U,	// J4_cmpeq_t_jumpnv_t
    16U,	// J4_cmpeq_tp0_jump_nt
    17U,	// J4_cmpeq_tp0_jump_t
    18U,	// J4_cmpeq_tp1_jump_nt
    19U,	// J4_cmpeq_tp1_jump_t
    0U,	// J4_cmpeqi_f_jumpnv_nt
    0U,	// J4_cmpeqi_f_jumpnv_t
    12U,	// J4_cmpeqi_fp0_jump_nt
    13U,	// J4_cmpeqi_fp0_jump_t
    14U,	// J4_cmpeqi_fp1_jump_nt
    15U,	// J4_cmpeqi_fp1_jump_t
    0U,	// J4_cmpeqi_t_jumpnv_nt
    0U,	// J4_cmpeqi_t_jumpnv_t
    16U,	// J4_cmpeqi_tp0_jump_nt
    17U,	// J4_cmpeqi_tp0_jump_t
    18U,	// J4_cmpeqi_tp1_jump_nt
    19U,	// J4_cmpeqi_tp1_jump_t
    0U,	// J4_cmpeqn1_f_jumpnv_nt
    0U,	// J4_cmpeqn1_f_jumpnv_t
    12U,	// J4_cmpeqn1_fp0_jump_nt
    13U,	// J4_cmpeqn1_fp0_jump_t
    14U,	// J4_cmpeqn1_fp1_jump_nt
    15U,	// J4_cmpeqn1_fp1_jump_t
    0U,	// J4_cmpeqn1_t_jumpnv_nt
    0U,	// J4_cmpeqn1_t_jumpnv_t
    16U,	// J4_cmpeqn1_tp0_jump_nt
    17U,	// J4_cmpeqn1_tp0_jump_t
    18U,	// J4_cmpeqn1_tp1_jump_nt
    19U,	// J4_cmpeqn1_tp1_jump_t
    0U,	// J4_cmpgt_f_jumpnv_nt
    0U,	// J4_cmpgt_f_jumpnv_t
    12U,	// J4_cmpgt_fp0_jump_nt
    13U,	// J4_cmpgt_fp0_jump_t
    14U,	// J4_cmpgt_fp1_jump_nt
    15U,	// J4_cmpgt_fp1_jump_t
    0U,	// J4_cmpgt_t_jumpnv_nt
    0U,	// J4_cmpgt_t_jumpnv_t
    16U,	// J4_cmpgt_tp0_jump_nt
    17U,	// J4_cmpgt_tp0_jump_t
    18U,	// J4_cmpgt_tp1_jump_nt
    19U,	// J4_cmpgt_tp1_jump_t
    0U,	// J4_cmpgti_f_jumpnv_nt
    0U,	// J4_cmpgti_f_jumpnv_t
    12U,	// J4_cmpgti_fp0_jump_nt
    13U,	// J4_cmpgti_fp0_jump_t
    14U,	// J4_cmpgti_fp1_jump_nt
    15U,	// J4_cmpgti_fp1_jump_t
    0U,	// J4_cmpgti_t_jumpnv_nt
    0U,	// J4_cmpgti_t_jumpnv_t
    16U,	// J4_cmpgti_tp0_jump_nt
    17U,	// J4_cmpgti_tp0_jump_t
    18U,	// J4_cmpgti_tp1_jump_nt
    19U,	// J4_cmpgti_tp1_jump_t
    0U,	// J4_cmpgtn1_f_jumpnv_nt
    0U,	// J4_cmpgtn1_f_jumpnv_t
    12U,	// J4_cmpgtn1_fp0_jump_nt
    13U,	// J4_cmpgtn1_fp0_jump_t
    14U,	// J4_cmpgtn1_fp1_jump_nt
    15U,	// J4_cmpgtn1_fp1_jump_t
    0U,	// J4_cmpgtn1_t_jumpnv_nt
    0U,	// J4_cmpgtn1_t_jumpnv_t
    16U,	// J4_cmpgtn1_tp0_jump_nt
    17U,	// J4_cmpgtn1_tp0_jump_t
    18U,	// J4_cmpgtn1_tp1_jump_nt
    19U,	// J4_cmpgtn1_tp1_jump_t
    0U,	// J4_cmpgtu_f_jumpnv_nt
    0U,	// J4_cmpgtu_f_jumpnv_t
    12U,	// J4_cmpgtu_fp0_jump_nt
    13U,	// J4_cmpgtu_fp0_jump_t
    14U,	// J4_cmpgtu_fp1_jump_nt
    15U,	// J4_cmpgtu_fp1_jump_t
    0U,	// J4_cmpgtu_t_jumpnv_nt
    0U,	// J4_cmpgtu_t_jumpnv_t
    16U,	// J4_cmpgtu_tp0_jump_nt
    17U,	// J4_cmpgtu_tp0_jump_t
    18U,	// J4_cmpgtu_tp1_jump_nt
    19U,	// J4_cmpgtu_tp1_jump_t
    0U,	// J4_cmpgtui_f_jumpnv_nt
    0U,	// J4_cmpgtui_f_jumpnv_t
    12U,	// J4_cmpgtui_fp0_jump_nt
    13U,	// J4_cmpgtui_fp0_jump_t
    14U,	// J4_cmpgtui_fp1_jump_nt
    15U,	// J4_cmpgtui_fp1_jump_t
    0U,	// J4_cmpgtui_t_jumpnv_nt
    0U,	// J4_cmpgtui_t_jumpnv_t
    16U,	// J4_cmpgtui_tp0_jump_nt
    17U,	// J4_cmpgtui_tp0_jump_t
    18U,	// J4_cmpgtui_tp1_jump_nt
    19U,	// J4_cmpgtui_tp1_jump_t
    20U,	// J4_cmplt_f_jumpnv_nt
    21U,	// J4_cmplt_f_jumpnv_t
    20U,	// J4_cmplt_t_jumpnv_nt
    21U,	// J4_cmplt_t_jumpnv_t
    20U,	// J4_cmpltu_f_jumpnv_nt
    21U,	// J4_cmpltu_f_jumpnv_t
    20U,	// J4_cmpltu_t_jumpnv_nt
    21U,	// J4_cmpltu_t_jumpnv_t
    0U,	// J4_hintjumpr
    0U,	// J4_jumpseti
    0U,	// J4_jumpsetr
    0U,	// J4_tstbit0_f_jumpnv_nt
    0U,	// J4_tstbit0_f_jumpnv_t
    0U,	// J4_tstbit0_fp0_jump_nt
    0U,	// J4_tstbit0_fp0_jump_t
    0U,	// J4_tstbit0_fp1_jump_nt
    0U,	// J4_tstbit0_fp1_jump_t
    0U,	// J4_tstbit0_t_jumpnv_nt
    0U,	// J4_tstbit0_t_jumpnv_t
    0U,	// J4_tstbit0_tp0_jump_nt
    0U,	// J4_tstbit0_tp0_jump_t
    0U,	// J4_tstbit0_tp1_jump_nt
    0U,	// J4_tstbit0_tp1_jump_t
    0U,	// L2_deallocframe
    662U,	// L2_loadalignb_io
    29655U,	// L2_loadalignb_pbr
    33752U,	// L2_loadalignb_pci
    25U,	// L2_loadalignb_pcr
    984U,	// L2_loadalignb_pi
    983U,	// L2_loadalignb_pr
    11U,	// L2_loadalignb_zomap
    662U,	// L2_loadalignh_io
    29655U,	// L2_loadalignh_pbr
    33752U,	// L2_loadalignh_pci
    25U,	// L2_loadalignh_pcr
    984U,	// L2_loadalignh_pi
    983U,	// L2_loadalignh_pr
    11U,	// L2_loadalignh_zomap
    11U,	// L2_loadbsw2_io
    26U,	// L2_loadbsw2_pbr
    27U,	// L2_loadbsw2_pci
    0U,	// L2_loadbsw2_pcr
    11U,	// L2_loadbsw2_pi
    11U,	// L2_loadbsw2_pr
    0U,	// L2_loadbsw2_zomap
    11U,	// L2_loadbsw4_io
    26U,	// L2_loadbsw4_pbr
    27U,	// L2_loadbsw4_pci
    0U,	// L2_loadbsw4_pcr
    11U,	// L2_loadbsw4_pi
    11U,	// L2_loadbsw4_pr
    0U,	// L2_loadbsw4_zomap
    11U,	// L2_loadbzw2_io
    26U,	// L2_loadbzw2_pbr
    27U,	// L2_loadbzw2_pci
    0U,	// L2_loadbzw2_pcr
    11U,	// L2_loadbzw2_pi
    11U,	// L2_loadbzw2_pr
    0U,	// L2_loadbzw2_zomap
    11U,	// L2_loadbzw4_io
    26U,	// L2_loadbzw4_pbr
    27U,	// L2_loadbzw4_pci
    0U,	// L2_loadbzw4_pcr
    11U,	// L2_loadbzw4_pi
    11U,	// L2_loadbzw4_pr
    0U,	// L2_loadbzw4_zomap
    11U,	// L2_loadrb_io
    26U,	// L2_loadrb_pbr
    27U,	// L2_loadrb_pci
    0U,	// L2_loadrb_pcr
    11U,	// L2_loadrb_pi
    11U,	// L2_loadrb_pr
    0U,	// L2_loadrb_zomap
    0U,	// L2_loadrbgp
    11U,	// L2_loadrd_io
    26U,	// L2_loadrd_pbr
    27U,	// L2_loadrd_pci
    0U,	// L2_loadrd_pcr
    11U,	// L2_loadrd_pi
    11U,	// L2_loadrd_pr
    0U,	// L2_loadrd_zomap
    0U,	// L2_loadrdgp
    11U,	// L2_loadrh_io
    26U,	// L2_loadrh_pbr
    27U,	// L2_loadrh_pci
    0U,	// L2_loadrh_pcr
    11U,	// L2_loadrh_pi
    11U,	// L2_loadrh_pr
    0U,	// L2_loadrh_zomap
    0U,	// L2_loadrhgp
    11U,	// L2_loadri_io
    26U,	// L2_loadri_pbr
    27U,	// L2_loadri_pci
    0U,	// L2_loadri_pcr
    11U,	// L2_loadri_pi
    11U,	// L2_loadri_pr
    0U,	// L2_loadri_zomap
    0U,	// L2_loadrigp
    11U,	// L2_loadrub_io
    26U,	// L2_loadrub_pbr
    27U,	// L2_loadrub_pci
    0U,	// L2_loadrub_pcr
    11U,	// L2_loadrub_pi
    11U,	// L2_loadrub_pr
    0U,	// L2_loadrub_zomap
    0U,	// L2_loadrubgp
    11U,	// L2_loadruh_io
    26U,	// L2_loadruh_pbr
    27U,	// L2_loadruh_pci
    0U,	// L2_loadruh_pcr
    11U,	// L2_loadruh_pi
    11U,	// L2_loadruh_pr
    0U,	// L2_loadruh_zomap
    0U,	// L2_loadruhgp
    0U,	// L2_loadw_locked
    1028U,	// L2_ploadrbf_io
    1116U,	// L2_ploadrbf_pi
    580U,	// L2_ploadrbf_zomap
    1028U,	// L2_ploadrbfnew_io
    1116U,	// L2_ploadrbfnew_pi
    580U,	// L2_ploadrbfnew_zomap
    1028U,	// L2_ploadrbt_io
    1116U,	// L2_ploadrbt_pi
    580U,	// L2_ploadrbt_zomap
    1028U,	// L2_ploadrbtnew_io
    1116U,	// L2_ploadrbtnew_pi
    580U,	// L2_ploadrbtnew_zomap
    1028U,	// L2_ploadrdf_io
    1116U,	// L2_ploadrdf_pi
    580U,	// L2_ploadrdf_zomap
    1028U,	// L2_ploadrdfnew_io
    1116U,	// L2_ploadrdfnew_pi
    580U,	// L2_ploadrdfnew_zomap
    1028U,	// L2_ploadrdt_io
    1116U,	// L2_ploadrdt_pi
    580U,	// L2_ploadrdt_zomap
    1028U,	// L2_ploadrdtnew_io
    1116U,	// L2_ploadrdtnew_pi
    580U,	// L2_ploadrdtnew_zomap
    1028U,	// L2_ploadrhf_io
    1116U,	// L2_ploadrhf_pi
    580U,	// L2_ploadrhf_zomap
    1028U,	// L2_ploadrhfnew_io
    1116U,	// L2_ploadrhfnew_pi
    580U,	// L2_ploadrhfnew_zomap
    1028U,	// L2_ploadrht_io
    1116U,	// L2_ploadrht_pi
    580U,	// L2_ploadrht_zomap
    1028U,	// L2_ploadrhtnew_io
    1116U,	// L2_ploadrhtnew_pi
    580U,	// L2_ploadrhtnew_zomap
    1028U,	// L2_ploadrif_io
    1116U,	// L2_ploadrif_pi
    580U,	// L2_ploadrif_zomap
    1028U,	// L2_ploadrifnew_io
    1116U,	// L2_ploadrifnew_pi
    580U,	// L2_ploadrifnew_zomap
    1028U,	// L2_ploadrit_io
    1116U,	// L2_ploadrit_pi
    580U,	// L2_ploadrit_zomap
    1028U,	// L2_ploadritnew_io
    1116U,	// L2_ploadritnew_pi
    580U,	// L2_ploadritnew_zomap
    1028U,	// L2_ploadrubf_io
    1116U,	// L2_ploadrubf_pi
    580U,	// L2_ploadrubf_zomap
    1028U,	// L2_ploadrubfnew_io
    1116U,	// L2_ploadrubfnew_pi
    580U,	// L2_ploadrubfnew_zomap
    1028U,	// L2_ploadrubt_io
    1116U,	// L2_ploadrubt_pi
    580U,	// L2_ploadrubt_zomap
    1028U,	// L2_ploadrubtnew_io
    1116U,	// L2_ploadrubtnew_pi
    580U,	// L2_ploadrubtnew_zomap
    1028U,	// L2_ploadruhf_io
    1116U,	// L2_ploadruhf_pi
    580U,	// L2_ploadruhf_zomap
    1028U,	// L2_ploadruhfnew_io
    1116U,	// L2_ploadruhfnew_pi
    580U,	// L2_ploadruhfnew_zomap
    1028U,	// L2_ploadruht_io
    1116U,	// L2_ploadruht_pi
    580U,	// L2_ploadruht_zomap
    1028U,	// L2_ploadruhtnew_io
    1116U,	// L2_ploadruhtnew_pi
    580U,	// L2_ploadruhtnew_zomap
    0U,	// L4_add_memopb_io
    0U,	// L4_add_memopb_zomap
    0U,	// L4_add_memoph_io
    0U,	// L4_add_memoph_zomap
    0U,	// L4_add_memopw_io
    0U,	// L4_add_memopw_zomap
    0U,	// L4_and_memopb_io
    0U,	// L4_and_memopb_zomap
    0U,	// L4_and_memoph_io
    0U,	// L4_and_memoph_zomap
    0U,	// L4_and_memopw_io
    0U,	// L4_and_memopw_zomap
    0U,	// L4_iadd_memopb_io
    0U,	// L4_iadd_memopb_zomap
    0U,	// L4_iadd_memoph_io
    0U,	// L4_iadd_memoph_zomap
    0U,	// L4_iadd_memopw_io
    0U,	// L4_iadd_memopw_zomap
    0U,	// L4_iand_memopb_io
    0U,	// L4_iand_memopb_zomap
    0U,	// L4_iand_memoph_io
    0U,	// L4_iand_memoph_zomap
    0U,	// L4_iand_memopw_io
    0U,	// L4_iand_memopw_zomap
    0U,	// L4_ior_memopb_io
    0U,	// L4_ior_memopb_zomap
    0U,	// L4_ior_memoph_io
    0U,	// L4_ior_memoph_zomap
    0U,	// L4_ior_memopw_io
    0U,	// L4_ior_memopw_zomap
    0U,	// L4_isub_memopb_io
    0U,	// L4_isub_memopb_zomap
    0U,	// L4_isub_memoph_io
    0U,	// L4_isub_memoph_zomap
    0U,	// L4_isub_memopw_io
    0U,	// L4_isub_memopw_zomap
    29U,	// L4_loadalignb_ap
    30U,	// L4_loadalignb_ur
    29U,	// L4_loadalignh_ap
    30U,	// L4_loadalignh_ur
    0U,	// L4_loadbsw2_ap
    0U,	// L4_loadbsw2_ur
    0U,	// L4_loadbsw4_ap
    0U,	// L4_loadbsw4_ur
    0U,	// L4_loadbzw2_ap
    0U,	// L4_loadbzw2_ur
    0U,	// L4_loadbzw4_ap
    0U,	// L4_loadbzw4_ur
    0U,	// L4_loadd_locked
    0U,	// L4_loadrb_ap
    0U,	// L4_loadrb_rr
    0U,	// L4_loadrb_ur
    0U,	// L4_loadrd_ap
    0U,	// L4_loadrd_rr
    0U,	// L4_loadrd_ur
    0U,	// L4_loadrh_ap
    0U,	// L4_loadrh_rr
    0U,	// L4_loadrh_ur
    0U,	// L4_loadri_ap
    0U,	// L4_loadri_rr
    0U,	// L4_loadri_ur
    0U,	// L4_loadrub_ap
    0U,	// L4_loadrub_rr
    0U,	// L4_loadrub_ur
    0U,	// L4_loadruh_ap
    0U,	// L4_loadruh_rr
    0U,	// L4_loadruh_ur
    0U,	// L4_or_memopb_io
    0U,	// L4_or_memopb_zomap
    0U,	// L4_or_memoph_io
    0U,	// L4_or_memoph_zomap
    0U,	// L4_or_memopw_io
    0U,	// L4_or_memopw_zomap
    0U,	// L4_ploadrbf_abs
    1156U,	// L4_ploadrbf_rr
    0U,	// L4_ploadrbfnew_abs
    1156U,	// L4_ploadrbfnew_rr
    0U,	// L4_ploadrbt_abs
    1156U,	// L4_ploadrbt_rr
    0U,	// L4_ploadrbtnew_abs
    1156U,	// L4_ploadrbtnew_rr
    0U,	// L4_ploadrdf_abs
    1156U,	// L4_ploadrdf_rr
    0U,	// L4_ploadrdfnew_abs
    1156U,	// L4_ploadrdfnew_rr
    0U,	// L4_ploadrdt_abs
    1156U,	// L4_ploadrdt_rr
    0U,	// L4_ploadrdtnew_abs
    1156U,	// L4_ploadrdtnew_rr
    0U,	// L4_ploadrhf_abs
    1156U,	// L4_ploadrhf_rr
    0U,	// L4_ploadrhfnew_abs
    1156U,	// L4_ploadrhfnew_rr
    0U,	// L4_ploadrht_abs
    1156U,	// L4_ploadrht_rr
    0U,	// L4_ploadrhtnew_abs
    1156U,	// L4_ploadrhtnew_rr
    0U,	// L4_ploadrif_abs
    1156U,	// L4_ploadrif_rr
    0U,	// L4_ploadrifnew_abs
    1156U,	// L4_ploadrifnew_rr
    0U,	// L4_ploadrit_abs
    1156U,	// L4_ploadrit_rr
    0U,	// L4_ploadritnew_abs
    1156U,	// L4_ploadritnew_rr
    0U,	// L4_ploadrubf_abs
    1156U,	// L4_ploadrubf_rr
    0U,	// L4_ploadrubfnew_abs
    1156U,	// L4_ploadrubfnew_rr
    0U,	// L4_ploadrubt_abs
    1156U,	// L4_ploadrubt_rr
    0U,	// L4_ploadrubtnew_abs
    1156U,	// L4_ploadrubtnew_rr
    0U,	// L4_ploadruhf_abs
    1156U,	// L4_ploadruhf_rr
    0U,	// L4_ploadruhfnew_abs
    1156U,	// L4_ploadruhfnew_rr
    0U,	// L4_ploadruht_abs
    1156U,	// L4_ploadruht_rr
    0U,	// L4_ploadruhtnew_abs
    1156U,	// L4_ploadruhtnew_rr
    0U,	// L4_return
    31U,	// L4_return_f
    32U,	// L4_return_fnew_pnt
    33U,	// L4_return_fnew_pt
    0U,	// L4_return_map_to_raw_f
    0U,	// L4_return_map_to_raw_fnew_pnt
    0U,	// L4_return_map_to_raw_fnew_pt
    0U,	// L4_return_map_to_raw_t
    0U,	// L4_return_map_to_raw_tnew_pnt
    0U,	// L4_return_map_to_raw_tnew_pt
    31U,	// L4_return_t
    32U,	// L4_return_tnew_pnt
    33U,	// L4_return_tnew_pt
    0U,	// L4_sub_memopb_io
    0U,	// L4_sub_memopb_zomap
    0U,	// L4_sub_memoph_io
    0U,	// L4_sub_memoph_zomap
    0U,	// L4_sub_memopw_io
    0U,	// L4_sub_memopw_zomap
    0U,	// L6_deallocframe_map_to_raw
    0U,	// L6_return_map_to_raw
    0U,	// LDriw_mod
    0U,	// LDriw_pred
    0U,	// LO
    610U,	// M2_acci
    610U,	// M2_accii
    0U,	// M2_cmaci_s0
    0U,	// M2_cmacr_s0
    0U,	// M2_cmacs_s0
    0U,	// M2_cmacs_s1
    0U,	// M2_cmacsc_s0
    0U,	// M2_cmacsc_s1
    0U,	// M2_cmpyi_s0
    0U,	// M2_cmpyr_s0
    0U,	// M2_cmpyrs_s0
    0U,	// M2_cmpyrs_s1
    0U,	// M2_cmpyrsc_s0
    0U,	// M2_cmpyrsc_s1
    0U,	// M2_cmpys_s0
    0U,	// M2_cmpys_s1
    0U,	// M2_cmpysc_s0
    0U,	// M2_cmpysc_s1
    0U,	// M2_cnacs_s0
    0U,	// M2_cnacs_s1
    0U,	// M2_cnacsc_s0
    0U,	// M2_cnacsc_s1
    610U,	// M2_dpmpyss_acc_s0
    610U,	// M2_dpmpyss_nac_s0
    1220U,	// M2_dpmpyss_rnd_s0
    580U,	// M2_dpmpyss_s0
    610U,	// M2_dpmpyuu_acc_s0
    610U,	// M2_dpmpyuu_nac_s0
    580U,	// M2_dpmpyuu_s0
    1284U,	// M2_hmmpyh_rs1
    1348U,	// M2_hmmpyh_s1
    1412U,	// M2_hmmpyl_rs1
    1476U,	// M2_hmmpyl_s1
    610U,	// M2_maci
    0U,	// M2_macsin
    610U,	// M2_macsip
    0U,	// M2_mmachs_rs0
    0U,	// M2_mmachs_rs1
    0U,	// M2_mmachs_s0
    0U,	// M2_mmachs_s1
    0U,	// M2_mmacls_rs0
    0U,	// M2_mmacls_rs1
    0U,	// M2_mmacls_s0
    0U,	// M2_mmacls_s1
    0U,	// M2_mmacuhs_rs0
    0U,	// M2_mmacuhs_rs1
    0U,	// M2_mmacuhs_s0
    0U,	// M2_mmacuhs_s1
    0U,	// M2_mmaculs_rs0
    0U,	// M2_mmaculs_rs1
    0U,	// M2_mmaculs_s0
    0U,	// M2_mmaculs_s1
    0U,	// M2_mmpyh_rs0
    0U,	// M2_mmpyh_rs1
    0U,	// M2_mmpyh_s0
    0U,	// M2_mmpyh_s1
    0U,	// M2_mmpyl_rs0
    0U,	// M2_mmpyl_rs1
    0U,	// M2_mmpyl_s0
    0U,	// M2_mmpyl_s1
    0U,	// M2_mmpyuh_rs0
    0U,	// M2_mmpyuh_rs1
    0U,	// M2_mmpyuh_s0
    0U,	// M2_mmpyuh_s1
    0U,	// M2_mmpyul_rs0
    0U,	// M2_mmpyul_rs1
    0U,	// M2_mmpyul_s0
    0U,	// M2_mmpyul_s1
    354U,	// M2_mpy_acc_hh_s0
    1570U,	// M2_mpy_acc_hh_s1
    418U,	// M2_mpy_acc_hl_s0
    1634U,	// M2_mpy_acc_hl_s1
    354U,	// M2_mpy_acc_lh_s0
    1570U,	// M2_mpy_acc_lh_s1
    418U,	// M2_mpy_acc_ll_s0
    1634U,	// M2_mpy_acc_ll_s1
    482U,	// M2_mpy_acc_sat_hh_s0
    1378U,	// M2_mpy_acc_sat_hh_s1
    546U,	// M2_mpy_acc_sat_hl_s0
    1506U,	// M2_mpy_acc_sat_hl_s1
    482U,	// M2_mpy_acc_sat_lh_s0
    1378U,	// M2_mpy_acc_sat_lh_s1
    546U,	// M2_mpy_acc_sat_ll_s0
    1506U,	// M2_mpy_acc_sat_ll_s1
    324U,	// M2_mpy_hh_s0
    1540U,	// M2_mpy_hh_s1
    388U,	// M2_mpy_hl_s0
    1604U,	// M2_mpy_hl_s1
    324U,	// M2_mpy_lh_s0
    1540U,	// M2_mpy_lh_s1
    388U,	// M2_mpy_ll_s0
    1604U,	// M2_mpy_ll_s1
    354U,	// M2_mpy_nac_hh_s0
    1570U,	// M2_mpy_nac_hh_s1
    418U,	// M2_mpy_nac_hl_s0
    1634U,	// M2_mpy_nac_hl_s1
    354U,	// M2_mpy_nac_lh_s0
    1570U,	// M2_mpy_nac_lh_s1
    418U,	// M2_mpy_nac_ll_s0
    1634U,	// M2_mpy_nac_ll_s1
    482U,	// M2_mpy_nac_sat_hh_s0
    1378U,	// M2_mpy_nac_sat_hh_s1
    546U,	// M2_mpy_nac_sat_hl_s0
    1506U,	// M2_mpy_nac_sat_hl_s1
    482U,	// M2_mpy_nac_sat_lh_s0
    1378U,	// M2_mpy_nac_sat_lh_s1
    546U,	// M2_mpy_nac_sat_ll_s0
    1506U,	// M2_mpy_nac_sat_ll_s1
    1668U,	// M2_mpy_rnd_hh_s0
    1732U,	// M2_mpy_rnd_hh_s1
    1796U,	// M2_mpy_rnd_hl_s0
    1860U,	// M2_mpy_rnd_hl_s1
    1668U,	// M2_mpy_rnd_lh_s0
    1732U,	// M2_mpy_rnd_lh_s1
    1796U,	// M2_mpy_rnd_ll_s0
    1860U,	// M2_mpy_rnd_ll_s1
    452U,	// M2_mpy_sat_hh_s0
    1348U,	// M2_mpy_sat_hh_s1
    516U,	// M2_mpy_sat_hl_s0
    1476U,	// M2_mpy_sat_hl_s1
    452U,	// M2_mpy_sat_lh_s0
    1348U,	// M2_mpy_sat_lh_s1
    516U,	// M2_mpy_sat_ll_s0
    1476U,	// M2_mpy_sat_ll_s1
    1924U,	// M2_mpy_sat_rnd_hh_s0
    1284U,	// M2_mpy_sat_rnd_hh_s1
    1988U,	// M2_mpy_sat_rnd_hl_s0
    1412U,	// M2_mpy_sat_rnd_hl_s1
    1924U,	// M2_mpy_sat_rnd_lh_s0
    1284U,	// M2_mpy_sat_rnd_lh_s1
    1988U,	// M2_mpy_sat_rnd_ll_s0
    1412U,	// M2_mpy_sat_rnd_ll_s1
    580U,	// M2_mpy_up
    2052U,	// M2_mpy_up_s1
    2116U,	// M2_mpy_up_s1_sat
    354U,	// M2_mpyd_acc_hh_s0
    1570U,	// M2_mpyd_acc_hh_s1
    418U,	// M2_mpyd_acc_hl_s0
    1634U,	// M2_mpyd_acc_hl_s1
    354U,	// M2_mpyd_acc_lh_s0
    1570U,	// M2_mpyd_acc_lh_s1
    418U,	// M2_mpyd_acc_ll_s0
    1634U,	// M2_mpyd_acc_ll_s1
    324U,	// M2_mpyd_hh_s0
    1540U,	// M2_mpyd_hh_s1
    388U,	// M2_mpyd_hl_s0
    1604U,	// M2_mpyd_hl_s1
    324U,	// M2_mpyd_lh_s0
    1540U,	// M2_mpyd_lh_s1
    388U,	// M2_mpyd_ll_s0
    1604U,	// M2_mpyd_ll_s1
    354U,	// M2_mpyd_nac_hh_s0
    1570U,	// M2_mpyd_nac_hh_s1
    418U,	// M2_mpyd_nac_hl_s0
    1634U,	// M2_mpyd_nac_hl_s1
    354U,	// M2_mpyd_nac_lh_s0
    1570U,	// M2_mpyd_nac_lh_s1
    418U,	// M2_mpyd_nac_ll_s0
    1634U,	// M2_mpyd_nac_ll_s1
    1668U,	// M2_mpyd_rnd_hh_s0
    1732U,	// M2_mpyd_rnd_hh_s1
    1796U,	// M2_mpyd_rnd_hl_s0
    1860U,	// M2_mpyd_rnd_hl_s1
    1668U,	// M2_mpyd_rnd_lh_s0
    1732U,	// M2_mpyd_rnd_lh_s1
    1796U,	// M2_mpyd_rnd_ll_s0
    1860U,	// M2_mpyd_rnd_ll_s1
    580U,	// M2_mpyi
    0U,	// M2_mpysin
    0U,	// M2_mpysip
    580U,	// M2_mpysmi
    0U,	// M2_mpysu_up
    354U,	// M2_mpyu_acc_hh_s0
    1570U,	// M2_mpyu_acc_hh_s1
    418U,	// M2_mpyu_acc_hl_s0
    1634U,	// M2_mpyu_acc_hl_s1
    354U,	// M2_mpyu_acc_lh_s0
    1570U,	// M2_mpyu_acc_lh_s1
    418U,	// M2_mpyu_acc_ll_s0
    1634U,	// M2_mpyu_acc_ll_s1
    324U,	// M2_mpyu_hh_s0
    1540U,	// M2_mpyu_hh_s1
    388U,	// M2_mpyu_hl_s0
    1604U,	// M2_mpyu_hl_s1
    324U,	// M2_mpyu_lh_s0
    1540U,	// M2_mpyu_lh_s1
    388U,	// M2_mpyu_ll_s0
    1604U,	// M2_mpyu_ll_s1
    354U,	// M2_mpyu_nac_hh_s0
    1570U,	// M2_mpyu_nac_hh_s1
    418U,	// M2_mpyu_nac_hl_s0
    1634U,	// M2_mpyu_nac_hl_s1
    354U,	// M2_mpyu_nac_lh_s0
    1570U,	// M2_mpyu_nac_lh_s1
    418U,	// M2_mpyu_nac_ll_s0
    1634U,	// M2_mpyu_nac_ll_s1
    580U,	// M2_mpyu_up
    354U,	// M2_mpyud_acc_hh_s0
    1570U,	// M2_mpyud_acc_hh_s1
    418U,	// M2_mpyud_acc_hl_s0
    1634U,	// M2_mpyud_acc_hl_s1
    354U,	// M2_mpyud_acc_lh_s0
    1570U,	// M2_mpyud_acc_lh_s1
    418U,	// M2_mpyud_acc_ll_s0
    1634U,	// M2_mpyud_acc_ll_s1
    324U,	// M2_mpyud_hh_s0
    1540U,	// M2_mpyud_hh_s1
    388U,	// M2_mpyud_hl_s0
    1604U,	// M2_mpyud_hl_s1
    324U,	// M2_mpyud_lh_s0
    1540U,	// M2_mpyud_lh_s1
    388U,	// M2_mpyud_ll_s0
    1604U,	// M2_mpyud_ll_s1
    354U,	// M2_mpyud_nac_hh_s0
    1570U,	// M2_mpyud_nac_hh_s1
    418U,	// M2_mpyud_nac_hl_s0
    1634U,	// M2_mpyud_nac_hl_s1
    354U,	// M2_mpyud_nac_lh_s0
    1570U,	// M2_mpyud_nac_lh_s1
    418U,	// M2_mpyud_nac_ll_s0
    1634U,	// M2_mpyud_nac_ll_s1
    0U,	// M2_mpyui
    610U,	// M2_nacci
    610U,	// M2_naccii
    0U,	// M2_subacc
    0U,	// M2_vabsdiffh
    0U,	// M2_vabsdiffw
    0U,	// M2_vcmac_s0_sat_i
    0U,	// M2_vcmac_s0_sat_r
    0U,	// M2_vcmpy_s0_sat_i
    0U,	// M2_vcmpy_s0_sat_r
    0U,	// M2_vcmpy_s1_sat_i
    0U,	// M2_vcmpy_s1_sat_r
    0U,	// M2_vdmacs_s0
    0U,	// M2_vdmacs_s1
    0U,	// M2_vdmpyrs_s0
    0U,	// M2_vdmpyrs_s1
    0U,	// M2_vdmpys_s0
    0U,	// M2_vdmpys_s1
    0U,	// M2_vmac2
    0U,	// M2_vmac2es
    0U,	// M2_vmac2es_s0
    0U,	// M2_vmac2es_s1
    0U,	// M2_vmac2s_s0
    0U,	// M2_vmac2s_s1
    0U,	// M2_vmac2su_s0
    0U,	// M2_vmac2su_s1
    0U,	// M2_vmpy2es_s0
    0U,	// M2_vmpy2es_s1
    0U,	// M2_vmpy2s_s0
    0U,	// M2_vmpy2s_s0pack
    0U,	// M2_vmpy2s_s1
    0U,	// M2_vmpy2s_s1pack
    0U,	// M2_vmpy2su_s0
    0U,	// M2_vmpy2su_s1
    0U,	// M2_vraddh
    0U,	// M2_vradduh
    0U,	// M2_vrcmaci_s0
    0U,	// M2_vrcmaci_s0c
    0U,	// M2_vrcmacr_s0
    0U,	// M2_vrcmacr_s0c
    0U,	// M2_vrcmpyi_s0
    0U,	// M2_vrcmpyi_s0c
    0U,	// M2_vrcmpyr_s0
    0U,	// M2_vrcmpyr_s0c
    0U,	// M2_vrcmpys_acc_s1
    0U,	// M2_vrcmpys_acc_s1_h
    0U,	// M2_vrcmpys_acc_s1_l
    0U,	// M2_vrcmpys_s1
    0U,	// M2_vrcmpys_s1_h
    0U,	// M2_vrcmpys_s1_l
    0U,	// M2_vrcmpys_s1rp
    0U,	// M2_vrcmpys_s1rp_h
    0U,	// M2_vrcmpys_s1rp_l
    0U,	// M2_vrmac_s0
    0U,	// M2_vrmpy_s0
    0U,	// M2_xor_xacc
    610U,	// M4_and_and
    610U,	// M4_and_andn
    0U,	// M4_and_or
    0U,	// M4_and_xor
    0U,	// M4_cmpyi_wh
    0U,	// M4_cmpyi_whc
    0U,	// M4_cmpyr_wh
    0U,	// M4_cmpyr_whc
    2146U,	// M4_mac_up_s1_sat
    25219U,	// M4_mpyri_addi
    21347U,	// M4_mpyri_addr
    36U,	// M4_mpyri_addr_u2
    25216U,	// M4_mpyrr_addi
    25379U,	// M4_mpyrr_addr
    2146U,	// M4_nac_up_s1_sat
    610U,	// M4_or_and
    610U,	// M4_or_andn
    610U,	// M4_or_or
    0U,	// M4_or_xor
    0U,	// M4_pmpyw
    0U,	// M4_pmpyw_acc
    0U,	// M4_vpmpyh
    0U,	// M4_vpmpyh_acc
    0U,	// M4_vrmpyeh_acc_s0
    0U,	// M4_vrmpyeh_acc_s1
    0U,	// M4_vrmpyeh_s0
    0U,	// M4_vrmpyeh_s1
    0U,	// M4_vrmpyoh_acc_s0
    0U,	// M4_vrmpyoh_acc_s1
    0U,	// M4_vrmpyoh_s0
    0U,	// M4_vrmpyoh_s1
    610U,	// M4_xor_and
    610U,	// M4_xor_andn
    0U,	// M4_xor_or
    0U,	// M4_xor_xacc
    0U,	// M5_vdmacbsu
    0U,	// M5_vdmpybsu
    0U,	// M5_vmacbsu
    0U,	// M5_vmacbuu
    0U,	// M5_vmpybsu
    0U,	// M5_vmpybuu
    0U,	// M5_vrmacbsu
    0U,	// M5_vrmacbuu
    0U,	// M5_vrmpybsu
    0U,	// M5_vrmpybuu
    0U,	// M6_vabsdiffb
    0U,	// M6_vabsdiffub
    0U,	// PS_aligna
    0U,	// PS_alloca
    0U,	// PS_call_nr
    0U,	// PS_call_stk
    0U,	// PS_callr_nr
    0U,	// PS_false
    0U,	// PS_fi
    0U,	// PS_fia
    0U,	// PS_jmpret
    0U,	// PS_jmpretf
    0U,	// PS_jmpretfnew
    0U,	// PS_jmpretfnewpt
    0U,	// PS_jmprett
    0U,	// PS_jmprettnew
    0U,	// PS_jmprettnewpt
    0U,	// PS_loadrbabs
    0U,	// PS_loadrdabs
    0U,	// PS_loadrhabs
    0U,	// PS_loadriabs
    0U,	// PS_loadrubabs
    0U,	// PS_loadruhabs
    0U,	// PS_pselect
    0U,	// PS_storerbabs
    0U,	// PS_storerbnewabs
    0U,	// PS_storerdabs
    0U,	// PS_storerfabs
    0U,	// PS_storerhabs
    0U,	// PS_storerhnewabs
    0U,	// PS_storeriabs
    0U,	// PS_storerinewabs
    0U,	// PS_tailcall_i
    0U,	// PS_tailcall_r
    0U,	// PS_true
    0U,	// PS_vloadrq_ai
    0U,	// PS_vloadrw_ai
    0U,	// PS_vloadrw_nt_ai
    0U,	// PS_vloadrwu_ai
    0U,	// PS_vmulw
    0U,	// PS_vmulw_acc
    0U,	// PS_vselect
    0U,	// PS_vstorerq_ai
    0U,	// PS_vstorerw_ai
    0U,	// PS_vstorerw_nt_ai
    0U,	// PS_vstorerwu_ai
    0U,	// PS_wselect
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT_PIC
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_PIC
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT_PIC
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_PIC
    0U,	// S2_addasl_rrri
    31U,	// S2_allocframe
    580U,	// S2_asl_i_p
    610U,	// S2_asl_i_p_acc
    610U,	// S2_asl_i_p_and
    610U,	// S2_asl_i_p_nac
    610U,	// S2_asl_i_p_or
    610U,	// S2_asl_i_p_xacc
    580U,	// S2_asl_i_r
    610U,	// S2_asl_i_r_acc
    610U,	// S2_asl_i_r_and
    610U,	// S2_asl_i_r_nac
    610U,	// S2_asl_i_r_or
    708U,	// S2_asl_i_r_sat
    610U,	// S2_asl_i_r_xacc
    580U,	// S2_asl_i_vh
    580U,	// S2_asl_i_vw
    580U,	// S2_asl_r_p
    610U,	// S2_asl_r_p_acc
    610U,	// S2_asl_r_p_and
    610U,	// S2_asl_r_p_nac
    610U,	// S2_asl_r_p_or
    610U,	// S2_asl_r_p_xor
    580U,	// S2_asl_r_r
    610U,	// S2_asl_r_r_acc
    610U,	// S2_asl_r_r_and
    610U,	// S2_asl_r_r_nac
    610U,	// S2_asl_r_r_or
    708U,	// S2_asl_r_r_sat
    580U,	// S2_asl_r_vh
    580U,	// S2_asl_r_vw
    580U,	// S2_asr_i_p
    610U,	// S2_asr_i_p_acc
    610U,	// S2_asr_i_p_and
    610U,	// S2_asr_i_p_nac
    610U,	// S2_asr_i_p_or
    1220U,	// S2_asr_i_p_rnd
    0U,	// S2_asr_i_p_rnd_goodsyntax
    580U,	// S2_asr_i_r
    610U,	// S2_asr_i_r_acc
    610U,	// S2_asr_i_r_and
    610U,	// S2_asr_i_r_nac
    610U,	// S2_asr_i_r_or
    1220U,	// S2_asr_i_r_rnd
    0U,	// S2_asr_i_r_rnd_goodsyntax
    580U,	// S2_asr_i_svw_trun
    580U,	// S2_asr_i_vh
    580U,	// S2_asr_i_vw
    580U,	// S2_asr_r_p
    610U,	// S2_asr_r_p_acc
    610U,	// S2_asr_r_p_and
    610U,	// S2_asr_r_p_nac
    610U,	// S2_asr_r_p_or
    0U,	// S2_asr_r_p_xor
    580U,	// S2_asr_r_r
    610U,	// S2_asr_r_r_acc
    610U,	// S2_asr_r_r_and
    610U,	// S2_asr_r_r_nac
    610U,	// S2_asr_r_r_or
    708U,	// S2_asr_r_r_sat
    580U,	// S2_asr_r_svw_trun
    580U,	// S2_asr_r_vh
    580U,	// S2_asr_r_vw
    0U,	// S2_brev
    0U,	// S2_brevp
    0U,	// S2_cabacdecbin
    0U,	// S2_cl0
    0U,	// S2_cl0p
    0U,	// S2_cl1
    0U,	// S2_cl1p
    0U,	// S2_clb
    0U,	// S2_clbnorm
    0U,	// S2_clbp
    580U,	// S2_clrbit_i
    580U,	// S2_clrbit_r
    0U,	// S2_ct0
    0U,	// S2_ct0p
    0U,	// S2_ct1
    0U,	// S2_ct1p
    0U,	// S2_deinterleave
    21316U,	// S2_extractu
    580U,	// S2_extractu_rp
    21316U,	// S2_extractup
    580U,	// S2_extractup_rp
    37730U,	// S2_insert
    610U,	// S2_insert_rp
    37730U,	// S2_insertp
    610U,	// S2_insertp_rp
    0U,	// S2_interleave
    0U,	// S2_lfsp
    0U,	// S2_lsl_r_p
    0U,	// S2_lsl_r_p_acc
    0U,	// S2_lsl_r_p_and
    0U,	// S2_lsl_r_p_nac
    0U,	// S2_lsl_r_p_or
    0U,	// S2_lsl_r_p_xor
    0U,	// S2_lsl_r_r
    0U,	// S2_lsl_r_r_acc
    0U,	// S2_lsl_r_r_and
    0U,	// S2_lsl_r_r_nac
    0U,	// S2_lsl_r_r_or
    0U,	// S2_lsl_r_vh
    0U,	// S2_lsl_r_vw
    580U,	// S2_lsr_i_p
    610U,	// S2_lsr_i_p_acc
    610U,	// S2_lsr_i_p_and
    610U,	// S2_lsr_i_p_nac
    610U,	// S2_lsr_i_p_or
    610U,	// S2_lsr_i_p_xacc
    580U,	// S2_lsr_i_r
    610U,	// S2_lsr_i_r_acc
    610U,	// S2_lsr_i_r_and
    610U,	// S2_lsr_i_r_nac
    610U,	// S2_lsr_i_r_or
    610U,	// S2_lsr_i_r_xacc
    580U,	// S2_lsr_i_vh
    580U,	// S2_lsr_i_vw
    580U,	// S2_lsr_r_p
    610U,	// S2_lsr_r_p_acc
    610U,	// S2_lsr_r_p_and
    610U,	// S2_lsr_r_p_nac
    610U,	// S2_lsr_r_p_or
    610U,	// S2_lsr_r_p_xor
    580U,	// S2_lsr_r_r
    610U,	// S2_lsr_r_r_acc
    610U,	// S2_lsr_r_r_and
    610U,	// S2_lsr_r_r_nac
    610U,	// S2_lsr_r_r_or
    580U,	// S2_lsr_r_vh
    580U,	// S2_lsr_r_vw
    0U,	// S2_packhl
    0U,	// S2_parityp
    40982U,	// S2_pstorerbf_io
    41624U,	// S2_pstorerbf_pi
    2213U,	// S2_pstorerbf_zomap
    41624U,	// S2_pstorerbfnew_pi
    40982U,	// S2_pstorerbnewf_io
    41624U,	// S2_pstorerbnewf_pi
    2277U,	// S2_pstorerbnewf_zomap
    41624U,	// S2_pstorerbnewfnew_pi
    40982U,	// S2_pstorerbnewt_io
    41624U,	// S2_pstorerbnewt_pi
    2277U,	// S2_pstorerbnewt_zomap
    41624U,	// S2_pstorerbnewtnew_pi
    40982U,	// S2_pstorerbt_io
    41624U,	// S2_pstorerbt_pi
    2213U,	// S2_pstorerbt_zomap
    41624U,	// S2_pstorerbtnew_pi
    40982U,	// S2_pstorerdf_io
    41624U,	// S2_pstorerdf_pi
    2213U,	// S2_pstorerdf_zomap
    41624U,	// S2_pstorerdfnew_pi
    40982U,	// S2_pstorerdt_io
    41624U,	// S2_pstorerdt_pi
    2213U,	// S2_pstorerdt_zomap
    41624U,	// S2_pstorerdtnew_pi
    40982U,	// S2_pstorerff_io
    41624U,	// S2_pstorerff_pi
    2341U,	// S2_pstorerff_zomap
    41624U,	// S2_pstorerffnew_pi
    40982U,	// S2_pstorerft_io
    41624U,	// S2_pstorerft_pi
    2341U,	// S2_pstorerft_zomap
    41624U,	// S2_pstorerftnew_pi
    40982U,	// S2_pstorerhf_io
    41624U,	// S2_pstorerhf_pi
    2213U,	// S2_pstorerhf_zomap
    41624U,	// S2_pstorerhfnew_pi
    40982U,	// S2_pstorerhnewf_io
    41624U,	// S2_pstorerhnewf_pi
    2277U,	// S2_pstorerhnewf_zomap
    41624U,	// S2_pstorerhnewfnew_pi
    40982U,	// S2_pstorerhnewt_io
    41624U,	// S2_pstorerhnewt_pi
    2277U,	// S2_pstorerhnewt_zomap
    41624U,	// S2_pstorerhnewtnew_pi
    40982U,	// S2_pstorerht_io
    41624U,	// S2_pstorerht_pi
    2213U,	// S2_pstorerht_zomap
    41624U,	// S2_pstorerhtnew_pi
    40982U,	// S2_pstorerif_io
    41624U,	// S2_pstorerif_pi
    2213U,	// S2_pstorerif_zomap
    41624U,	// S2_pstorerifnew_pi
    40982U,	// S2_pstorerinewf_io
    41624U,	// S2_pstorerinewf_pi
    2277U,	// S2_pstorerinewf_zomap
    41624U,	// S2_pstorerinewfnew_pi
    40982U,	// S2_pstorerinewt_io
    41624U,	// S2_pstorerinewt_pi
    2277U,	// S2_pstorerinewt_zomap
    41624U,	// S2_pstorerinewtnew_pi
    40982U,	// S2_pstorerit_io
    41624U,	// S2_pstorerit_pi
    2213U,	// S2_pstorerit_zomap
    41624U,	// S2_pstoreritnew_pi
    580U,	// S2_setbit_i
    580U,	// S2_setbit_r
    0U,	// S2_shuffeb
    0U,	// S2_shuffeh
    0U,	// S2_shuffob
    0U,	// S2_shuffoh
    2180U,	// S2_storerb_io
    38U,	// S2_storerb_pbr
    38U,	// S2_storerb_pci
    0U,	// S2_storerb_pcr
    2210U,	// S2_storerb_pi
    2210U,	// S2_storerb_pr
    0U,	// S2_storerb_zomap
    0U,	// S2_storerbgp
    2244U,	// S2_storerbnew_io
    39U,	// S2_storerbnew_pbr
    39U,	// S2_storerbnew_pci
    0U,	// S2_storerbnew_pcr
    2274U,	// S2_storerbnew_pi
    2274U,	// S2_storerbnew_pr
    0U,	// S2_storerbnew_zomap
    0U,	// S2_storerbnewgp
    2180U,	// S2_storerd_io
    38U,	// S2_storerd_pbr
    38U,	// S2_storerd_pci
    0U,	// S2_storerd_pcr
    2210U,	// S2_storerd_pi
    2210U,	// S2_storerd_pr
    0U,	// S2_storerd_zomap
    0U,	// S2_storerdgp
    2308U,	// S2_storerf_io
    40U,	// S2_storerf_pbr
    40U,	// S2_storerf_pci
    0U,	// S2_storerf_pcr
    2338U,	// S2_storerf_pi
    2338U,	// S2_storerf_pr
    0U,	// S2_storerf_zomap
    0U,	// S2_storerfgp
    2180U,	// S2_storerh_io
    38U,	// S2_storerh_pbr
    38U,	// S2_storerh_pci
    0U,	// S2_storerh_pcr
    2210U,	// S2_storerh_pi
    2210U,	// S2_storerh_pr
    0U,	// S2_storerh_zomap
    0U,	// S2_storerhgp
    2244U,	// S2_storerhnew_io
    39U,	// S2_storerhnew_pbr
    39U,	// S2_storerhnew_pci
    0U,	// S2_storerhnew_pcr
    2274U,	// S2_storerhnew_pi
    2274U,	// S2_storerhnew_pr
    0U,	// S2_storerhnew_zomap
    0U,	// S2_storerhnewgp
    2180U,	// S2_storeri_io
    38U,	// S2_storeri_pbr
    38U,	// S2_storeri_pci
    0U,	// S2_storeri_pcr
    2210U,	// S2_storeri_pi
    2210U,	// S2_storeri_pr
    0U,	// S2_storeri_zomap
    0U,	// S2_storerigp
    2244U,	// S2_storerinew_io
    39U,	// S2_storerinew_pbr
    39U,	// S2_storerinew_pci
    0U,	// S2_storerinew_pcr
    2274U,	// S2_storerinew_pi
    2274U,	// S2_storerinew_pr
    0U,	// S2_storerinew_zomap
    0U,	// S2_storerinewgp
    2213U,	// S2_storew_locked
    0U,	// S2_svsathb
    0U,	// S2_svsathub
    0U,	// S2_tableidxb
    0U,	// S2_tableidxb_goodsyntax
    0U,	// S2_tableidxd
    0U,	// S2_tableidxd_goodsyntax
    0U,	// S2_tableidxh
    0U,	// S2_tableidxh_goodsyntax
    0U,	// S2_tableidxw
    0U,	// S2_tableidxw_goodsyntax
    580U,	// S2_togglebit_i
    580U,	// S2_togglebit_r
    580U,	// S2_tstbit_i
    580U,	// S2_tstbit_r
    610U,	// S2_valignib
    610U,	// S2_valignrb
    0U,	// S2_vcnegh
    0U,	// S2_vcrotate
    0U,	// S2_vrcnegh
    0U,	// S2_vrndpackwh
    0U,	// S2_vrndpackwhs
    0U,	// S2_vsathb
    0U,	// S2_vsathb_nopack
    0U,	// S2_vsathub
    0U,	// S2_vsathub_nopack
    0U,	// S2_vsatwh
    0U,	// S2_vsatwh_nopack
    0U,	// S2_vsatwuh
    0U,	// S2_vsatwuh_nopack
    0U,	// S2_vsplatrb
    0U,	// S2_vsplatrh
    610U,	// S2_vspliceib
    610U,	// S2_vsplicerb
    0U,	// S2_vsxtbh
    0U,	// S2_vsxthw
    0U,	// S2_vtrunehb
    0U,	// S2_vtrunewh
    0U,	// S2_vtrunohb
    0U,	// S2_vtrunowh
    0U,	// S2_vzxtbh
    0U,	// S2_vzxthw
    41U,	// S4_addaddi
    0U,	// S4_addi_asl_ri
    0U,	// S4_addi_lsr_ri
    0U,	// S4_andi_asl_ri
    0U,	// S4_andi_lsr_ri
    0U,	// S4_clbaddi
    0U,	// S4_clbpaddi
    0U,	// S4_clbpnorm
    21316U,	// S4_extract
    580U,	// S4_extract_rp
    21316U,	// S4_extractp
    580U,	// S4_extractp_rp
    0U,	// S4_lsli
    580U,	// S4_ntstbit_i
    580U,	// S4_ntstbit_r
    610U,	// S4_or_andi
    25219U,	// S4_or_andix
    610U,	// S4_or_ori
    0U,	// S4_ori_asl_ri
    0U,	// S4_ori_lsr_ri
    0U,	// S4_parity
    0U,	// S4_pstorerbf_abs
    2218U,	// S4_pstorerbf_rr
    0U,	// S4_pstorerbfnew_abs
    40982U,	// S4_pstorerbfnew_io
    2218U,	// S4_pstorerbfnew_rr
    2213U,	// S4_pstorerbfnew_zomap
    0U,	// S4_pstorerbnewf_abs
    2282U,	// S4_pstorerbnewf_rr
    0U,	// S4_pstorerbnewfnew_abs
    40982U,	// S4_pstorerbnewfnew_io
    2282U,	// S4_pstorerbnewfnew_rr
    2277U,	// S4_pstorerbnewfnew_zomap
    0U,	// S4_pstorerbnewt_abs
    2282U,	// S4_pstorerbnewt_rr
    0U,	// S4_pstorerbnewtnew_abs
    40982U,	// S4_pstorerbnewtnew_io
    2282U,	// S4_pstorerbnewtnew_rr
    2277U,	// S4_pstorerbnewtnew_zomap
    0U,	// S4_pstorerbt_abs
    2218U,	// S4_pstorerbt_rr
    0U,	// S4_pstorerbtnew_abs
    40982U,	// S4_pstorerbtnew_io
    2218U,	// S4_pstorerbtnew_rr
    2213U,	// S4_pstorerbtnew_zomap
    0U,	// S4_pstorerdf_abs
    2218U,	// S4_pstorerdf_rr
    0U,	// S4_pstorerdfnew_abs
    40982U,	// S4_pstorerdfnew_io
    2218U,	// S4_pstorerdfnew_rr
    2213U,	// S4_pstorerdfnew_zomap
    0U,	// S4_pstorerdt_abs
    2218U,	// S4_pstorerdt_rr
    0U,	// S4_pstorerdtnew_abs
    40982U,	// S4_pstorerdtnew_io
    2218U,	// S4_pstorerdtnew_rr
    2213U,	// S4_pstorerdtnew_zomap
    0U,	// S4_pstorerff_abs
    2346U,	// S4_pstorerff_rr
    0U,	// S4_pstorerffnew_abs
    40982U,	// S4_pstorerffnew_io
    2346U,	// S4_pstorerffnew_rr
    2341U,	// S4_pstorerffnew_zomap
    0U,	// S4_pstorerft_abs
    2346U,	// S4_pstorerft_rr
    0U,	// S4_pstorerftnew_abs
    40982U,	// S4_pstorerftnew_io
    2346U,	// S4_pstorerftnew_rr
    2341U,	// S4_pstorerftnew_zomap
    0U,	// S4_pstorerhf_abs
    2218U,	// S4_pstorerhf_rr
    0U,	// S4_pstorerhfnew_abs
    40982U,	// S4_pstorerhfnew_io
    2218U,	// S4_pstorerhfnew_rr
    2213U,	// S4_pstorerhfnew_zomap
    0U,	// S4_pstorerhnewf_abs
    2282U,	// S4_pstorerhnewf_rr
    0U,	// S4_pstorerhnewfnew_abs
    40982U,	// S4_pstorerhnewfnew_io
    2282U,	// S4_pstorerhnewfnew_rr
    2277U,	// S4_pstorerhnewfnew_zomap
    0U,	// S4_pstorerhnewt_abs
    2282U,	// S4_pstorerhnewt_rr
    0U,	// S4_pstorerhnewtnew_abs
    40982U,	// S4_pstorerhnewtnew_io
    2282U,	// S4_pstorerhnewtnew_rr
    2277U,	// S4_pstorerhnewtnew_zomap
    0U,	// S4_pstorerht_abs
    2218U,	// S4_pstorerht_rr
    0U,	// S4_pstorerhtnew_abs
    40982U,	// S4_pstorerhtnew_io
    2218U,	// S4_pstorerhtnew_rr
    2213U,	// S4_pstorerhtnew_zomap
    0U,	// S4_pstorerif_abs
    2218U,	// S4_pstorerif_rr
    0U,	// S4_pstorerifnew_abs
    40982U,	// S4_pstorerifnew_io
    2218U,	// S4_pstorerifnew_rr
    2213U,	// S4_pstorerifnew_zomap
    0U,	// S4_pstorerinewf_abs
    2282U,	// S4_pstorerinewf_rr
    0U,	// S4_pstorerinewfnew_abs
    40982U,	// S4_pstorerinewfnew_io
    2282U,	// S4_pstorerinewfnew_rr
    2277U,	// S4_pstorerinewfnew_zomap
    0U,	// S4_pstorerinewt_abs
    2282U,	// S4_pstorerinewt_rr
    0U,	// S4_pstorerinewtnew_abs
    40982U,	// S4_pstorerinewtnew_io
    2282U,	// S4_pstorerinewtnew_rr
    2277U,	// S4_pstorerinewtnew_zomap
    0U,	// S4_pstorerit_abs
    2218U,	// S4_pstorerit_rr
    0U,	// S4_pstoreritnew_abs
    40982U,	// S4_pstoreritnew_io
    2218U,	// S4_pstoreritnew_rr
    2213U,	// S4_pstoreritnew_zomap
    2213U,	// S4_stored_locked
    0U,	// S4_storeirb_io
    0U,	// S4_storeirb_zomap
    45078U,	// S4_storeirbf_io
    43U,	// S4_storeirbf_zomap
    45078U,	// S4_storeirbfnew_io
    43U,	// S4_storeirbfnew_zomap
    45078U,	// S4_storeirbt_io
    43U,	// S4_storeirbt_zomap
    45078U,	// S4_storeirbtnew_io
    43U,	// S4_storeirbtnew_zomap
    0U,	// S4_storeirh_io
    0U,	// S4_storeirh_zomap
    45078U,	// S4_storeirhf_io
    43U,	// S4_storeirhf_zomap
    45078U,	// S4_storeirhfnew_io
    43U,	// S4_storeirhfnew_zomap
    45078U,	// S4_storeirht_io
    43U,	// S4_storeirht_zomap
    45078U,	// S4_storeirhtnew_io
    43U,	// S4_storeirhtnew_zomap
    0U,	// S4_storeiri_io
    0U,	// S4_storeiri_zomap
    45078U,	// S4_storeirif_io
    43U,	// S4_storeirif_zomap
    45078U,	// S4_storeirifnew_io
    43U,	// S4_storeirifnew_zomap
    45078U,	// S4_storeirit_io
    43U,	// S4_storeirit_zomap
    45078U,	// S4_storeiritnew_io
    43U,	// S4_storeiritnew_zomap
    0U,	// S4_storerb_ap
    0U,	// S4_storerb_rr
    0U,	// S4_storerb_ur
    0U,	// S4_storerbnew_ap
    0U,	// S4_storerbnew_rr
    0U,	// S4_storerbnew_ur
    0U,	// S4_storerd_ap
    0U,	// S4_storerd_rr
    0U,	// S4_storerd_ur
    0U,	// S4_storerf_ap
    0U,	// S4_storerf_rr
    0U,	// S4_storerf_ur
    0U,	// S4_storerh_ap
    0U,	// S4_storerh_rr
    0U,	// S4_storerh_ur
    0U,	// S4_storerhnew_ap
    0U,	// S4_storerhnew_rr
    0U,	// S4_storerhnew_ur
    0U,	// S4_storeri_ap
    0U,	// S4_storeri_rr
    0U,	// S4_storeri_ur
    0U,	// S4_storerinew_ap
    0U,	// S4_storerinew_rr
    0U,	// S4_storerinew_ur
    44U,	// S4_subaddi
    0U,	// S4_subi_asl_ri
    0U,	// S4_subi_lsr_ri
    0U,	// S4_vrcrotate
    0U,	// S4_vrcrotate_acc
    0U,	// S4_vxaddsubh
    0U,	// S4_vxaddsubhr
    0U,	// S4_vxaddsubw
    0U,	// S4_vxsubaddh
    0U,	// S4_vxsubaddhr
    0U,	// S4_vxsubaddw
    2372U,	// S5_asrhub_rnd_sat
    2436U,	// S5_asrhub_rnd_sat_goodsyntax
    708U,	// S5_asrhub_sat
    0U,	// S5_popcountp
    2372U,	// S5_vasrhrnd
    1220U,	// S5_vasrhrnd_goodsyntax
    0U,	// S6_allocframe_to_raw
    0U,	// S6_rol_i_p
    0U,	// S6_rol_i_p_acc
    0U,	// S6_rol_i_p_and
    0U,	// S6_rol_i_p_nac
    0U,	// S6_rol_i_p_or
    0U,	// S6_rol_i_p_xacc
    0U,	// S6_rol_i_r
    0U,	// S6_rol_i_r_acc
    0U,	// S6_rol_i_r_and
    0U,	// S6_rol_i_r_nac
    0U,	// S6_rol_i_r_or
    0U,	// S6_rol_i_r_xacc
    0U,	// S6_vsplatrbp
    580U,	// S6_vtrunehb_ppp
    580U,	// S6_vtrunohb_ppp
    3U,	// SA1_addi
    0U,	// SA1_addrx
    0U,	// SA1_addsp
    0U,	// SA1_and1
    0U,	// SA1_clrf
    0U,	// SA1_clrfnew
    0U,	// SA1_clrt
    0U,	// SA1_clrtnew
    11U,	// SA1_cmpeqi
    0U,	// SA1_combine0i
    0U,	// SA1_combine1i
    0U,	// SA1_combine2i
    0U,	// SA1_combine3i
    0U,	// SA1_combinerz
    0U,	// SA1_combinezr
    3U,	// SA1_dec
    45U,	// SA1_inc
    0U,	// SA1_seti
    0U,	// SA1_setin1
    0U,	// SA1_sxtb
    0U,	// SA1_sxth
    0U,	// SA1_tfr
    0U,	// SA1_zxtb
    0U,	// SA1_zxth
    0U,	// SAVE_REGISTERS_CALL_V4
    0U,	// SAVE_REGISTERS_CALL_V4STK
    0U,	// SAVE_REGISTERS_CALL_V4STK_EXT
    0U,	// SAVE_REGISTERS_CALL_V4STK_EXT_PIC
    0U,	// SAVE_REGISTERS_CALL_V4STK_PIC
    0U,	// SAVE_REGISTERS_CALL_V4_EXT
    0U,	// SAVE_REGISTERS_CALL_V4_EXT_PIC
    0U,	// SAVE_REGISTERS_CALL_V4_PIC
    11U,	// SL1_loadri_io
    11U,	// SL1_loadrub_io
    0U,	// SL2_deallocframe
    0U,	// SL2_jumpr31
    0U,	// SL2_jumpr31_f
    0U,	// SL2_jumpr31_fnew
    0U,	// SL2_jumpr31_t
    0U,	// SL2_jumpr31_tnew
    11U,	// SL2_loadrb_io
    0U,	// SL2_loadrd_sp
    11U,	// SL2_loadrh_io
    0U,	// SL2_loadri_sp
    11U,	// SL2_loadruh_io
    0U,	// SL2_return
    0U,	// SL2_return_f
    0U,	// SL2_return_fnew
    0U,	// SL2_return_t
    0U,	// SL2_return_tnew
    2180U,	// SS1_storeb_io
    2180U,	// SS1_storew_io
    0U,	// SS2_allocframe
    0U,	// SS2_storebi0
    0U,	// SS2_storebi1
    0U,	// SS2_stored_sp
    2180U,	// SS2_storeh_io
    0U,	// SS2_storew_sp
    0U,	// SS2_storewi0
    0U,	// SS2_storewi1
    0U,	// STriw_mod
    0U,	// STriw_pred
    0U,	// TFRI64_V2_ext
    0U,	// TFRI64_V4
    2500U,	// V6_MAP_equb
    2530U,	// V6_MAP_equb_and
    2530U,	// V6_MAP_equb_ior
    2530U,	// V6_MAP_equb_xor
    2564U,	// V6_MAP_equh
    2594U,	// V6_MAP_equh_and
    2594U,	// V6_MAP_equh_ior
    2594U,	// V6_MAP_equh_xor
    2628U,	// V6_MAP_equw
    2658U,	// V6_MAP_equw_and
    2658U,	// V6_MAP_equw_ior
    2658U,	// V6_MAP_equw_xor
    0U,	// V6_extractw
    0U,	// V6_extractw_alt
    0U,	// V6_hi
    0U,	// V6_ld0
    580U,	// V6_ldcnp0
    2692U,	// V6_ldcnpnt0
    580U,	// V6_ldcp0
    2692U,	// V6_ldcpnt0
    580U,	// V6_ldnp0
    2692U,	// V6_ldnpnt0
    0U,	// V6_ldnt0
    0U,	// V6_ldntnt0
    580U,	// V6_ldp0
    2692U,	// V6_ldpnt0
    580U,	// V6_ldtnp0
    2692U,	// V6_ldtnpnt0
    580U,	// V6_ldtp0
    2692U,	// V6_ldtpnt0
    0U,	// V6_ldu0
    0U,	// V6_lo
    0U,	// V6_lvsplatb
    0U,	// V6_lvsplath
    0U,	// V6_lvsplatw
    580U,	// V6_pred_and
    0U,	// V6_pred_and_n
    0U,	// V6_pred_not
    580U,	// V6_pred_or
    0U,	// V6_pred_or_n
    0U,	// V6_pred_scalar2
    0U,	// V6_pred_scalar2v2
    0U,	// V6_pred_xor
    324U,	// V6_shuffeqh
    2756U,	// V6_shuffeqw
    0U,	// V6_st0
    0U,	// V6_stn0
    0U,	// V6_stnnt0
    2213U,	// V6_stnp0
    46U,	// V6_stnpnt0
    2213U,	// V6_stnq0
    46U,	// V6_stnqnt0
    0U,	// V6_stnt0
    2213U,	// V6_stp0
    46U,	// V6_stpnt0
    2213U,	// V6_stq0
    46U,	// V6_stqnt0
    0U,	// V6_stu0
    2213U,	// V6_stunp0
    2213U,	// V6_stup0
    11U,	// V6_vL32Ub_ai
    11U,	// V6_vL32Ub_pi
    11U,	// V6_vL32Ub_ppu
    11U,	// V6_vL32b_ai
    11U,	// V6_vL32b_cur_ai
    1028U,	// V6_vL32b_cur_npred_ai
    1116U,	// V6_vL32b_cur_npred_pi
    2844U,	// V6_vL32b_cur_npred_ppu
    11U,	// V6_vL32b_cur_pi
    11U,	// V6_vL32b_cur_ppu
    1028U,	// V6_vL32b_cur_pred_ai
    1116U,	// V6_vL32b_cur_pred_pi
    2844U,	// V6_vL32b_cur_pred_ppu
    1028U,	// V6_vL32b_npred_ai
    1116U,	// V6_vL32b_npred_pi
    2844U,	// V6_vL32b_npred_ppu
    47U,	// V6_vL32b_nt_ai
    47U,	// V6_vL32b_nt_cur_ai
    50180U,	// V6_vL32b_nt_cur_npred_ai
    50268U,	// V6_vL32b_nt_cur_npred_pi
    51996U,	// V6_vL32b_nt_cur_npred_ppu
    47U,	// V6_vL32b_nt_cur_pi
    47U,	// V6_vL32b_nt_cur_ppu
    50180U,	// V6_vL32b_nt_cur_pred_ai
    50268U,	// V6_vL32b_nt_cur_pred_pi
    51996U,	// V6_vL32b_nt_cur_pred_ppu
    50180U,	// V6_vL32b_nt_npred_ai
    50268U,	// V6_vL32b_nt_npred_pi
    51996U,	// V6_vL32b_nt_npred_ppu
    47U,	// V6_vL32b_nt_pi
    47U,	// V6_vL32b_nt_ppu
    50180U,	// V6_vL32b_nt_pred_ai
    50268U,	// V6_vL32b_nt_pred_pi
    51996U,	// V6_vL32b_nt_pred_ppu
    47U,	// V6_vL32b_nt_tmp_ai
    50180U,	// V6_vL32b_nt_tmp_npred_ai
    50268U,	// V6_vL32b_nt_tmp_npred_pi
    51996U,	// V6_vL32b_nt_tmp_npred_ppu
    47U,	// V6_vL32b_nt_tmp_pi
    47U,	// V6_vL32b_nt_tmp_ppu
    50180U,	// V6_vL32b_nt_tmp_pred_ai
    50268U,	// V6_vL32b_nt_tmp_pred_pi
    51996U,	// V6_vL32b_nt_tmp_pred_ppu
    11U,	// V6_vL32b_pi
    11U,	// V6_vL32b_ppu
    1028U,	// V6_vL32b_pred_ai
    1116U,	// V6_vL32b_pred_pi
    2844U,	// V6_vL32b_pred_ppu
    11U,	// V6_vL32b_tmp_ai
    1028U,	// V6_vL32b_tmp_npred_ai
    1116U,	// V6_vL32b_tmp_npred_pi
    2844U,	// V6_vL32b_tmp_npred_ppu
    11U,	// V6_vL32b_tmp_pi
    11U,	// V6_vL32b_tmp_ppu
    1028U,	// V6_vL32b_tmp_pred_ai
    1116U,	// V6_vL32b_tmp_pred_pi
    2844U,	// V6_vL32b_tmp_pred_ppu
    2180U,	// V6_vS32Ub_ai
    40982U,	// V6_vS32Ub_npred_ai
    41624U,	// V6_vS32Ub_npred_pi
    41623U,	// V6_vS32Ub_npred_ppu
    2210U,	// V6_vS32Ub_pi
    2210U,	// V6_vS32Ub_ppu
    40982U,	// V6_vS32Ub_pred_ai
    41624U,	// V6_vS32Ub_pred_pi
    41623U,	// V6_vS32Ub_pred_ppu
    2180U,	// V6_vS32b_ai
    2244U,	// V6_vS32b_new_ai
    40982U,	// V6_vS32b_new_npred_ai
    41624U,	// V6_vS32b_new_npred_pi
    41623U,	// V6_vS32b_new_npred_ppu
    2274U,	// V6_vS32b_new_pi
    2274U,	// V6_vS32b_new_ppu
    40982U,	// V6_vS32b_new_pred_ai
    41624U,	// V6_vS32b_new_pred_pi
    41623U,	// V6_vS32b_new_pred_ppu
    40982U,	// V6_vS32b_npred_ai
    41624U,	// V6_vS32b_npred_pi
    41623U,	// V6_vS32b_npred_ppu
    40982U,	// V6_vS32b_nqpred_ai
    41624U,	// V6_vS32b_nqpred_pi
    41623U,	// V6_vS32b_nqpred_ppu
    2180U,	// V6_vS32b_nt_ai
    2244U,	// V6_vS32b_nt_new_ai
    53270U,	// V6_vS32b_nt_new_npred_ai
    53912U,	// V6_vS32b_nt_new_npred_pi
    53911U,	// V6_vS32b_nt_new_npred_ppu
    2274U,	// V6_vS32b_nt_new_pi
    2274U,	// V6_vS32b_nt_new_ppu
    53270U,	// V6_vS32b_nt_new_pred_ai
    53912U,	// V6_vS32b_nt_new_pred_pi
    53911U,	// V6_vS32b_nt_new_pred_ppu
    53270U,	// V6_vS32b_nt_npred_ai
    53912U,	// V6_vS32b_nt_npred_pi
    53911U,	// V6_vS32b_nt_npred_ppu
    53270U,	// V6_vS32b_nt_nqpred_ai
    53912U,	// V6_vS32b_nt_nqpred_pi
    53911U,	// V6_vS32b_nt_nqpred_ppu
    2210U,	// V6_vS32b_nt_pi
    2210U,	// V6_vS32b_nt_ppu
    53270U,	// V6_vS32b_nt_pred_ai
    53912U,	// V6_vS32b_nt_pred_pi
    53911U,	// V6_vS32b_nt_pred_ppu
    53270U,	// V6_vS32b_nt_qpred_ai
    53912U,	// V6_vS32b_nt_qpred_pi
    53911U,	// V6_vS32b_nt_qpred_ppu
    2210U,	// V6_vS32b_pi
    2210U,	// V6_vS32b_ppu
    40982U,	// V6_vS32b_pred_ai
    41624U,	// V6_vS32b_pred_pi
    41623U,	// V6_vS32b_pred_ppu
    40982U,	// V6_vS32b_qpred_ai
    41624U,	// V6_vS32b_qpred_pi
    41623U,	// V6_vS32b_qpred_ppu
    0U,	// V6_vS32b_srls_ai
    0U,	// V6_vS32b_srls_pi
    0U,	// V6_vS32b_srls_ppu
    0U,	// V6_vabsb
    0U,	// V6_vabsb_alt
    0U,	// V6_vabsb_sat
    0U,	// V6_vabsb_sat_alt
    324U,	// V6_vabsdiffh
    0U,	// V6_vabsdiffh_alt
    0U,	// V6_vabsdiffub
    0U,	// V6_vabsdiffub_alt
    2564U,	// V6_vabsdiffuh
    0U,	// V6_vabsdiffuh_alt
    0U,	// V6_vabsdiffw
    0U,	// V6_vabsdiffw_alt
    0U,	// V6_vabsh
    0U,	// V6_vabsh_alt
    0U,	// V6_vabsh_sat
    0U,	// V6_vabsh_sat_alt
    0U,	// V6_vabsub_alt
    0U,	// V6_vabsuh_alt
    0U,	// V6_vabsuw_alt
    0U,	// V6_vabsw
    0U,	// V6_vabsw_alt
    0U,	// V6_vabsw_sat
    0U,	// V6_vabsw_sat_alt
    0U,	// V6_vaddb
    0U,	// V6_vaddb_alt
    0U,	// V6_vaddb_dv
    0U,	// V6_vaddb_dv_alt
    0U,	// V6_vaddbnq
    0U,	// V6_vaddbnq_alt
    0U,	// V6_vaddbq
    0U,	// V6_vaddbq_alt
    0U,	// V6_vaddbsat
    0U,	// V6_vaddbsat_alt
    0U,	// V6_vaddbsat_dv
    0U,	// V6_vaddbsat_dv_alt
    58032U,	// V6_vaddcarry
    0U,	// V6_vaddclbh
    0U,	// V6_vaddclbw
    324U,	// V6_vaddh
    0U,	// V6_vaddh_alt
    324U,	// V6_vaddh_dv
    0U,	// V6_vaddh_dv_alt
    0U,	// V6_vaddhnq
    0U,	// V6_vaddhnq_alt
    0U,	// V6_vaddhq
    0U,	// V6_vaddhq_alt
    452U,	// V6_vaddhsat
    0U,	// V6_vaddhsat_alt
    452U,	// V6_vaddhsat_dv
    0U,	// V6_vaddhsat_dv_alt
    321U,	// V6_vaddhw
    354U,	// V6_vaddhw_acc
    0U,	// V6_vaddhw_acc_alt
    0U,	// V6_vaddhw_alt
    2500U,	// V6_vaddubh
    0U,	// V6_vaddubh_acc
    0U,	// V6_vaddubh_acc_alt
    0U,	// V6_vaddubh_alt
    0U,	// V6_vaddubsat
    0U,	// V6_vaddubsat_alt
    0U,	// V6_vaddubsat_dv
    0U,	// V6_vaddubsat_dv_alt
    0U,	// V6_vaddububb_sat
    0U,	// V6_vadduhsat
    0U,	// V6_vadduhsat_alt
    0U,	// V6_vadduhsat_dv
    0U,	// V6_vadduhsat_dv_alt
    49U,	// V6_vadduhw
    2594U,	// V6_vadduhw_acc
    0U,	// V6_vadduhw_acc_alt
    0U,	// V6_vadduhw_alt
    0U,	// V6_vadduwsat
    0U,	// V6_vadduwsat_alt
    0U,	// V6_vadduwsat_dv
    0U,	// V6_vadduwsat_dv_alt
    61488U,	// V6_vaddw
    0U,	// V6_vaddw_alt
    61488U,	// V6_vaddw_dv
    0U,	// V6_vaddw_dv_alt
    0U,	// V6_vaddwnq
    0U,	// V6_vaddwnq_alt
    0U,	// V6_vaddwq
    0U,	// V6_vaddwq_alt
    48U,	// V6_vaddwsat
    0U,	// V6_vaddwsat_alt
    48U,	// V6_vaddwsat_dv
    0U,	// V6_vaddwsat_dv_alt
    610U,	// V6_valignb
    610U,	// V6_valignbi
    0U,	// V6_vand
    0U,	// V6_vandnqrt
    0U,	// V6_vandnqrt_acc
    0U,	// V6_vandnqrt_acc_alt
    0U,	// V6_vandnqrt_alt
    0U,	// V6_vandqrt
    0U,	// V6_vandqrt_acc
    0U,	// V6_vandqrt_acc_alt
    0U,	// V6_vandqrt_alt
    0U,	// V6_vandvnqv
    0U,	// V6_vandvqv
    0U,	// V6_vandvrt
    0U,	// V6_vandvrt_acc
    0U,	// V6_vandvrt_acc_alt
    0U,	// V6_vandvrt_alt
    0U,	// V6_vaslh
    0U,	// V6_vaslh_acc
    0U,	// V6_vaslh_acc_alt
    580U,	// V6_vaslh_alt
    0U,	// V6_vaslhv
    580U,	// V6_vaslhv_alt
    0U,	// V6_vaslw
    0U,	// V6_vaslw_acc
    0U,	// V6_vaslw_acc_alt
    580U,	// V6_vaslw_alt
    0U,	// V6_vaslwv
    580U,	// V6_vaslwv_alt
    580U,	// V6_vasrh
    0U,	// V6_vasrh_acc
    0U,	// V6_vasrh_acc_alt
    580U,	// V6_vasrh_alt
    0U,	// V6_vasrhbrndsat
    0U,	// V6_vasrhbrndsat_alt
    0U,	// V6_vasrhbsat
    6980U,	// V6_vasrhubrndsat
    4868U,	// V6_vasrhubrndsat_alt
    6980U,	// V6_vasrhubsat
    4868U,	// V6_vasrhubsat_alt
    324U,	// V6_vasrhv
    580U,	// V6_vasrhv_alt
    7044U,	// V6_vasruhubrndsat
    7044U,	// V6_vasruhubsat
    7108U,	// V6_vasruwuhrndsat
    7108U,	// V6_vasruwuhsat
    0U,	// V6_vasrw
    0U,	// V6_vasrw_acc
    0U,	// V6_vasrw_acc_alt
    580U,	// V6_vasrw_alt
    3076U,	// V6_vasrwh
    0U,	// V6_vasrwh_alt
    7172U,	// V6_vasrwhrndsat
    0U,	// V6_vasrwhrndsat_alt
    7172U,	// V6_vasrwhsat
    0U,	// V6_vasrwhsat_alt
    7172U,	// V6_vasrwuhrndsat
    7172U,	// V6_vasrwuhsat
    0U,	// V6_vasrwuhsat_alt
    0U,	// V6_vasrwv
    580U,	// V6_vasrwv_alt
    0U,	// V6_vassign
    0U,	// V6_vassignp
    0U,	// V6_vavgb
    0U,	// V6_vavgb_alt
    0U,	// V6_vavgbrnd
    0U,	// V6_vavgbrnd_alt
    0U,	// V6_vavgh
    0U,	// V6_vavgh_alt
    0U,	// V6_vavghrnd
    0U,	// V6_vavghrnd_alt
    0U,	// V6_vavgub
    0U,	// V6_vavgub_alt
    0U,	// V6_vavgubrnd
    0U,	// V6_vavgubrnd_alt
    0U,	// V6_vavguh
    0U,	// V6_vavguh_alt
    0U,	// V6_vavguhrnd
    0U,	// V6_vavguhrnd_alt
    0U,	// V6_vavguw
    0U,	// V6_vavguw_alt
    0U,	// V6_vavguwrnd
    0U,	// V6_vavguwrnd_alt
    0U,	// V6_vavgw
    0U,	// V6_vavgw_alt
    0U,	// V6_vavgwrnd
    0U,	// V6_vavgwrnd_alt
    0U,	// V6_vccombine
    0U,	// V6_vcl0h
    0U,	// V6_vcl0h_alt
    0U,	// V6_vcl0w
    0U,	// V6_vcl0w_alt
    0U,	// V6_vcmov
    0U,	// V6_vcombine
    0U,	// V6_vd0
    0U,	// V6_vdd0
    960U,	// V6_vdeal
    0U,	// V6_vdealb
    0U,	// V6_vdealb4w
    0U,	// V6_vdealb4w_alt
    0U,	// V6_vdealb_alt
    0U,	// V6_vdealh
    0U,	// V6_vdealh_alt
    0U,	// V6_vdealvdd
    0U,	// V6_vdelta
    0U,	// V6_vdmpybus
    0U,	// V6_vdmpybus_acc
    0U,	// V6_vdmpybus_acc_alt
    0U,	// V6_vdmpybus_alt
    0U,	// V6_vdmpybus_dv
    0U,	// V6_vdmpybus_dv_acc
    0U,	// V6_vdmpybus_dv_acc_alt
    0U,	// V6_vdmpybus_dv_alt
    0U,	// V6_vdmpyhb
    0U,	// V6_vdmpyhb_acc
    0U,	// V6_vdmpyhb_acc_alt
    0U,	// V6_vdmpyhb_alt
    0U,	// V6_vdmpyhb_dv
    0U,	// V6_vdmpyhb_dv_acc
    0U,	// V6_vdmpyhb_dv_acc_alt
    0U,	// V6_vdmpyhb_dv_alt
    0U,	// V6_vdmpyhisat
    0U,	// V6_vdmpyhisat_acc
    0U,	// V6_vdmpyhisat_acc_alt
    0U,	// V6_vdmpyhisat_alt
    0U,	// V6_vdmpyhsat
    0U,	// V6_vdmpyhsat_acc
    0U,	// V6_vdmpyhsat_acc_alt
    0U,	// V6_vdmpyhsat_alt
    0U,	// V6_vdmpyhsuisat
    0U,	// V6_vdmpyhsuisat_acc
    0U,	// V6_vdmpyhsuisat_acc_alt
    0U,	// V6_vdmpyhsuisat_alt
    0U,	// V6_vdmpyhsusat
    0U,	// V6_vdmpyhsusat_acc
    0U,	// V6_vdmpyhsusat_acc_alt
    0U,	// V6_vdmpyhsusat_alt
    0U,	// V6_vdmpyhvsat
    0U,	// V6_vdmpyhvsat_acc
    0U,	// V6_vdmpyhvsat_acc_alt
    0U,	// V6_vdmpyhvsat_alt
    0U,	// V6_vdsaduh
    0U,	// V6_vdsaduh_acc
    0U,	// V6_vdsaduh_acc_alt
    0U,	// V6_vdsaduh_alt
    3140U,	// V6_veqb
    3170U,	// V6_veqb_and
    3170U,	// V6_veqb_or
    3170U,	// V6_veqb_xor
    324U,	// V6_veqh
    354U,	// V6_veqh_and
    354U,	// V6_veqh_or
    354U,	// V6_veqh_xor
    2756U,	// V6_veqw
    2786U,	// V6_veqw_and
    2786U,	// V6_veqw_or
    2786U,	// V6_veqw_xor
    8192U,	// V6_vgathermh
    0U,	// V6_vgathermh_pseudo
    0U,	// V6_vgathermhq
    0U,	// V6_vgathermhq_pseudo
    12288U,	// V6_vgathermhw
    0U,	// V6_vgathermhw_pseudo
    0U,	// V6_vgathermhwq
    0U,	// V6_vgathermhwq_pseudo
    16384U,	// V6_vgathermw
    0U,	// V6_vgathermw_pseudo
    0U,	// V6_vgathermwq
    0U,	// V6_vgathermwq_pseudo
    3140U,	// V6_vgtb
    3170U,	// V6_vgtb_and
    3170U,	// V6_vgtb_or
    3170U,	// V6_vgtb_xor
    324U,	// V6_vgth
    354U,	// V6_vgth_and
    354U,	// V6_vgth_or
    354U,	// V6_vgth_xor
    2500U,	// V6_vgtub
    2530U,	// V6_vgtub_and
    2530U,	// V6_vgtub_or
    2530U,	// V6_vgtub_xor
    2564U,	// V6_vgtuh
    2594U,	// V6_vgtuh_and
    2594U,	// V6_vgtuh_or
    2594U,	// V6_vgtuh_xor
    2628U,	// V6_vgtuw
    2658U,	// V6_vgtuw_and
    2658U,	// V6_vgtuw_or
    2658U,	// V6_vgtuw_xor
    2756U,	// V6_vgtw
    2786U,	// V6_vgtw_and
    2786U,	// V6_vgtw_or
    2786U,	// V6_vgtw_xor
    0U,	// V6_vhist
    0U,	// V6_vhistq
    0U,	// V6_vinsertwr
    610U,	// V6_vlalignb
    610U,	// V6_vlalignbi
    0U,	// V6_vlsrb
    0U,	// V6_vlsrh
    580U,	// V6_vlsrh_alt
    0U,	// V6_vlsrhv
    580U,	// V6_vlsrhv_alt
    0U,	// V6_vlsrw
    580U,	// V6_vlsrw_alt
    0U,	// V6_vlsrwv
    580U,	// V6_vlsrwv_alt
    0U,	// V6_vlut4
    610U,	// V6_vlutvvb
    3234U,	// V6_vlutvvb_nm
    584U,	// V6_vlutvvb_oracc
    584U,	// V6_vlutvvb_oracci
    610U,	// V6_vlutvvbi
    610U,	// V6_vlutvwh
    3234U,	// V6_vlutvwh_nm
    584U,	// V6_vlutvwh_oracc
    584U,	// V6_vlutvwh_oracci
    610U,	// V6_vlutvwhi
    0U,	// V6_vmaxb
    0U,	// V6_vmaxb_alt
    0U,	// V6_vmaxh
    0U,	// V6_vmaxh_alt
    0U,	// V6_vmaxub
    0U,	// V6_vmaxub_alt
    0U,	// V6_vmaxuh
    0U,	// V6_vmaxuh_alt
    0U,	// V6_vmaxw
    0U,	// V6_vmaxw_alt
    0U,	// V6_vminb
    0U,	// V6_vminb_alt
    0U,	// V6_vminh
    0U,	// V6_vminh_alt
    0U,	// V6_vminub
    0U,	// V6_vminub_alt
    0U,	// V6_vminuh
    0U,	// V6_vminuh_alt
    0U,	// V6_vminw
    0U,	// V6_vminw_alt
    3140U,	// V6_vmpabus
    0U,	// V6_vmpabus_acc
    0U,	// V6_vmpabus_acc_alt
    0U,	// V6_vmpabus_alt
    3140U,	// V6_vmpabusv
    0U,	// V6_vmpabusv_alt
    2500U,	// V6_vmpabuu
    0U,	// V6_vmpabuu_acc
    0U,	// V6_vmpabuu_acc_alt
    0U,	// V6_vmpabuu_alt
    2500U,	// V6_vmpabuuv
    0U,	// V6_vmpabuuv_alt
    3140U,	// V6_vmpahb
    3170U,	// V6_vmpahb_acc
    0U,	// V6_vmpahb_acc_alt
    0U,	// V6_vmpahb_alt
    23364U,	// V6_vmpahhsat
    3140U,	// V6_vmpauhb
    3170U,	// V6_vmpauhb_acc
    0U,	// V6_vmpauhb_acc_alt
    0U,	// V6_vmpauhb_alt
    27524U,	// V6_vmpauhuhsat
    0U,	// V6_vmpsuhuhsat
    3140U,	// V6_vmpybus
    3170U,	// V6_vmpybus_acc
    0U,	// V6_vmpybus_acc_alt
    0U,	// V6_vmpybus_alt
    3140U,	// V6_vmpybusv
    3170U,	// V6_vmpybusv_acc
    0U,	// V6_vmpybusv_acc_alt
    0U,	// V6_vmpybusv_alt
    3140U,	// V6_vmpybv
    3170U,	// V6_vmpybv_acc
    0U,	// V6_vmpybv_acc_alt
    0U,	// V6_vmpybv_alt
    0U,	// V6_vmpyewuh
    0U,	// V6_vmpyewuh_64
    0U,	// V6_vmpyewuh_alt
    0U,	// V6_vmpyh
    0U,	// V6_vmpyh_acc
    0U,	// V6_vmpyh_acc_alt
    0U,	// V6_vmpyh_alt
    0U,	// V6_vmpyhsat_acc
    0U,	// V6_vmpyhsat_acc_alt
    1284U,	// V6_vmpyhsrs
    0U,	// V6_vmpyhsrs_alt
    1348U,	// V6_vmpyhss
    0U,	// V6_vmpyhss_alt
    0U,	// V6_vmpyhus
    0U,	// V6_vmpyhus_acc
    0U,	// V6_vmpyhus_acc_alt
    0U,	// V6_vmpyhus_alt
    0U,	// V6_vmpyhv
    0U,	// V6_vmpyhv_acc
    0U,	// V6_vmpyhv_acc_alt
    0U,	// V6_vmpyhv_alt
    1284U,	// V6_vmpyhvsrs
    0U,	// V6_vmpyhvsrs_alt
    0U,	// V6_vmpyieoh
    0U,	// V6_vmpyiewh_acc
    0U,	// V6_vmpyiewh_acc_alt
    0U,	// V6_vmpyiewuh
    0U,	// V6_vmpyiewuh_acc
    0U,	// V6_vmpyiewuh_acc_alt
    0U,	// V6_vmpyiewuh_alt
    0U,	// V6_vmpyih
    0U,	// V6_vmpyih_acc
    0U,	// V6_vmpyih_acc_alt
    0U,	// V6_vmpyih_alt
    0U,	// V6_vmpyihb
    0U,	// V6_vmpyihb_acc
    0U,	// V6_vmpyihb_acc_alt
    0U,	// V6_vmpyihb_alt
    0U,	// V6_vmpyiowh
    0U,	// V6_vmpyiowh_alt
    0U,	// V6_vmpyiwb
    0U,	// V6_vmpyiwb_acc
    0U,	// V6_vmpyiwb_acc_alt
    0U,	// V6_vmpyiwb_alt
    0U,	// V6_vmpyiwh
    0U,	// V6_vmpyiwh_acc
    0U,	// V6_vmpyiwh_acc_alt
    0U,	// V6_vmpyiwh_alt
    0U,	// V6_vmpyiwub
    0U,	// V6_vmpyiwub_acc
    0U,	// V6_vmpyiwub_acc_alt
    0U,	// V6_vmpyiwub_alt
    0U,	// V6_vmpyowh
    0U,	// V6_vmpyowh_64_acc
    0U,	// V6_vmpyowh_alt
    0U,	// V6_vmpyowh_rnd
    0U,	// V6_vmpyowh_rnd_alt
    0U,	// V6_vmpyowh_rnd_sacc
    0U,	// V6_vmpyowh_rnd_sacc_alt
    0U,	// V6_vmpyowh_sacc
    0U,	// V6_vmpyowh_sacc_alt
    0U,	// V6_vmpyub
    0U,	// V6_vmpyub_acc
    0U,	// V6_vmpyub_acc_alt
    0U,	// V6_vmpyub_alt
    0U,	// V6_vmpyubv
    0U,	// V6_vmpyubv_acc
    0U,	// V6_vmpyubv_acc_alt
    0U,	// V6_vmpyubv_alt
    0U,	// V6_vmpyuh
    0U,	// V6_vmpyuh_acc
    0U,	// V6_vmpyuh_acc_alt
    0U,	// V6_vmpyuh_alt
    0U,	// V6_vmpyuhe
    0U,	// V6_vmpyuhe_acc
    0U,	// V6_vmpyuhv
    0U,	// V6_vmpyuhv_acc
    0U,	// V6_vmpyuhv_acc_alt
    0U,	// V6_vmpyuhv_alt
    0U,	// V6_vmux
    3140U,	// V6_vnavgb
    0U,	// V6_vnavgb_alt
    0U,	// V6_vnavgh
    0U,	// V6_vnavgh_alt
    2500U,	// V6_vnavgub
    0U,	// V6_vnavgub_alt
    0U,	// V6_vnavgw
    0U,	// V6_vnavgw_alt
    0U,	// V6_vnccombine
    0U,	// V6_vncmov
    0U,	// V6_vnormamth
    0U,	// V6_vnormamth_alt
    0U,	// V6_vnormamtw
    0U,	// V6_vnormamtw_alt
    0U,	// V6_vnot
    0U,	// V6_vor
    0U,	// V6_vpackeb
    0U,	// V6_vpackeb_alt
    0U,	// V6_vpackeh
    0U,	// V6_vpackeh_alt
    0U,	// V6_vpackhb_sat
    0U,	// V6_vpackhb_sat_alt
    0U,	// V6_vpackhub_sat
    0U,	// V6_vpackhub_sat_alt
    0U,	// V6_vpackob
    0U,	// V6_vpackob_alt
    0U,	// V6_vpackoh
    0U,	// V6_vpackoh_alt
    0U,	// V6_vpackwh_sat
    0U,	// V6_vpackwh_sat_alt
    0U,	// V6_vpackwuh_sat
    0U,	// V6_vpackwuh_sat_alt
    0U,	// V6_vpopcounth
    0U,	// V6_vpopcounth_alt
    0U,	// V6_vprefixqb
    0U,	// V6_vprefixqh
    0U,	// V6_vprefixqw
    0U,	// V6_vrdelta
    2500U,	// V6_vrmpybub_rtt
    2530U,	// V6_vrmpybub_rtt_acc
    2530U,	// V6_vrmpybub_rtt_acc_alt
    2500U,	// V6_vrmpybub_rtt_alt
    3140U,	// V6_vrmpybus
    3170U,	// V6_vrmpybus_acc
    0U,	// V6_vrmpybus_acc_alt
    0U,	// V6_vrmpybus_alt
    23748U,	// V6_vrmpybusi
    40162U,	// V6_vrmpybusi_acc
    584U,	// V6_vrmpybusi_acc_alt
    610U,	// V6_vrmpybusi_alt
    3140U,	// V6_vrmpybusv
    3170U,	// V6_vrmpybusv_acc
    0U,	// V6_vrmpybusv_acc_alt
    0U,	// V6_vrmpybusv_alt
    3140U,	// V6_vrmpybv
    3170U,	// V6_vrmpybv_acc
    0U,	// V6_vrmpybv_acc_alt
    0U,	// V6_vrmpybv_alt
    0U,	// V6_vrmpyub
    0U,	// V6_vrmpyub_acc
    0U,	// V6_vrmpyub_acc_alt
    0U,	// V6_vrmpyub_alt
    0U,	// V6_vrmpyub_rtt
    0U,	// V6_vrmpyub_rtt_acc
    0U,	// V6_vrmpyub_rtt_acc_alt
    0U,	// V6_vrmpyub_rtt_alt
    610U,	// V6_vrmpyubi
    584U,	// V6_vrmpyubi_acc
    584U,	// V6_vrmpyubi_acc_alt
    610U,	// V6_vrmpyubi_alt
    0U,	// V6_vrmpyubv
    0U,	// V6_vrmpyubv_acc
    0U,	// V6_vrmpyubv_acc_alt
    0U,	// V6_vrmpyubv_alt
    0U,	// V6_vror
    0U,	// V6_vroundhb
    0U,	// V6_vroundhb_alt
    452U,	// V6_vroundhub
    0U,	// V6_vroundhub_alt
    3332U,	// V6_vrounduhub
    0U,	// V6_vrounduhub_alt
    3396U,	// V6_vrounduwuh
    0U,	// V6_vrounduwuh_alt
    0U,	// V6_vroundwh
    0U,	// V6_vroundwh_alt
    3460U,	// V6_vroundwuh
    0U,	// V6_vroundwuh_alt
    0U,	// V6_vrsadubi
    0U,	// V6_vrsadubi_acc
    584U,	// V6_vrsadubi_acc_alt
    610U,	// V6_vrsadubi_alt
    0U,	// V6_vsathub
    580U,	// V6_vsathub_alt
    0U,	// V6_vsatuwuh
    0U,	// V6_vsatuwuh_alt
    0U,	// V6_vsatwh
    580U,	// V6_vsatwh_alt
    0U,	// V6_vsb
    0U,	// V6_vsb_alt
    28672U,	// V6_vscattermh
    32768U,	// V6_vscattermh_add
    36864U,	// V6_vscattermh_add_alt
    40960U,	// V6_vscattermh_alt
    0U,	// V6_vscattermhq
    0U,	// V6_vscattermhq_alt
    45056U,	// V6_vscattermhw
    49152U,	// V6_vscattermhw_add
    0U,	// V6_vscattermhwq
    53248U,	// V6_vscattermw
    57344U,	// V6_vscattermw_add
    61440U,	// V6_vscattermw_add_alt
    0U,	// V6_vscattermw_alt
    61440U,	// V6_vscattermwh_add_alt
    0U,	// V6_vscattermwh_alt
    40U,	// V6_vscattermwhq_alt
    0U,	// V6_vscattermwq
    50U,	// V6_vscattermwq_alt
    0U,	// V6_vsh
    0U,	// V6_vsh_alt
    324U,	// V6_vshufeh
    0U,	// V6_vshufeh_alt
    960U,	// V6_vshuff
    0U,	// V6_vshuffb
    0U,	// V6_vshuffb_alt
    3140U,	// V6_vshuffeb
    0U,	// V6_vshuffeb_alt
    0U,	// V6_vshuffh
    0U,	// V6_vshuffh_alt
    0U,	// V6_vshuffob
    0U,	// V6_vshuffob_alt
    0U,	// V6_vshuffvdd
    0U,	// V6_vshufoeb
    0U,	// V6_vshufoeb_alt
    0U,	// V6_vshufoeh
    0U,	// V6_vshufoeh_alt
    0U,	// V6_vshufoh
    0U,	// V6_vshufoh_alt
    0U,	// V6_vsubb
    0U,	// V6_vsubb_alt
    0U,	// V6_vsubb_dv
    0U,	// V6_vsubb_dv_alt
    0U,	// V6_vsubbnq
    0U,	// V6_vsubbnq_alt
    0U,	// V6_vsubbq
    0U,	// V6_vsubbq_alt
    0U,	// V6_vsubbsat
    0U,	// V6_vsubbsat_alt
    0U,	// V6_vsubbsat_dv
    0U,	// V6_vsubbsat_dv_alt
    58032U,	// V6_vsubcarry
    324U,	// V6_vsubh
    0U,	// V6_vsubh_alt
    324U,	// V6_vsubh_dv
    0U,	// V6_vsubh_dv_alt
    0U,	// V6_vsubhnq
    0U,	// V6_vsubhnq_alt
    0U,	// V6_vsubhq
    0U,	// V6_vsubhq_alt
    452U,	// V6_vsubhsat
    0U,	// V6_vsubhsat_alt
    452U,	// V6_vsubhsat_dv
    0U,	// V6_vsubhsat_dv_alt
    321U,	// V6_vsubhw
    0U,	// V6_vsubhw_alt
    2500U,	// V6_vsububh
    0U,	// V6_vsububh_alt
    0U,	// V6_vsububsat
    0U,	// V6_vsububsat_alt
    0U,	// V6_vsububsat_dv
    0U,	// V6_vsububsat_dv_alt
    0U,	// V6_vsubububb_sat
    0U,	// V6_vsubuhsat
    0U,	// V6_vsubuhsat_alt
    0U,	// V6_vsubuhsat_dv
    0U,	// V6_vsubuhsat_dv_alt
    49U,	// V6_vsubuhw
    0U,	// V6_vsubuhw_alt
    0U,	// V6_vsubuwsat
    0U,	// V6_vsubuwsat_alt
    0U,	// V6_vsubuwsat_dv
    0U,	// V6_vsubuwsat_dv_alt
    61488U,	// V6_vsubw
    0U,	// V6_vsubw_alt
    61488U,	// V6_vsubw_dv
    0U,	// V6_vsubw_dv_alt
    0U,	// V6_vsubwnq
    0U,	// V6_vsubwnq_alt
    0U,	// V6_vsubwq
    0U,	// V6_vsubwq_alt
    48U,	// V6_vsubwsat
    0U,	// V6_vsubwsat_alt
    48U,	// V6_vsubwsat_dv
    0U,	// V6_vsubwsat_dv_alt
    0U,	// V6_vswap
    3140U,	// V6_vtmpyb
    3170U,	// V6_vtmpyb_acc
    0U,	// V6_vtmpyb_acc_alt
    0U,	// V6_vtmpyb_alt
    3140U,	// V6_vtmpybus
    3170U,	// V6_vtmpybus_acc
    0U,	// V6_vtmpybus_acc_alt
    0U,	// V6_vtmpybus_alt
    0U,	// V6_vtmpyhb
    0U,	// V6_vtmpyhb_acc
    0U,	// V6_vtmpyhb_acc_alt
    0U,	// V6_vtmpyhb_alt
    960U,	// V6_vtran2x2_map
    0U,	// V6_vunpackb
    0U,	// V6_vunpackb_alt
    0U,	// V6_vunpackh
    0U,	// V6_vunpackh_alt
    0U,	// V6_vunpackob
    0U,	// V6_vunpackob_alt
    0U,	// V6_vunpackoh
    0U,	// V6_vunpackoh_alt
    0U,	// V6_vunpackub
    0U,	// V6_vunpackub_alt
    0U,	// V6_vunpackuh
    0U,	// V6_vunpackuh_alt
    0U,	// V6_vwhist128
    0U,	// V6_vwhist128m
    0U,	// V6_vwhist128q
    11U,	// V6_vwhist128qm
    0U,	// V6_vwhist256
    0U,	// V6_vwhist256_sat
    0U,	// V6_vwhist256q
    0U,	// V6_vwhist256q_sat
    0U,	// V6_vxor
    0U,	// V6_vzb
    0U,	// V6_vzb_alt
    0U,	// V6_vzh
    0U,	// V6_vzh_alt
    0U,	// Y2_barrier
    0U,	// Y2_break
    0U,	// Y2_dccleana
    0U,	// Y2_dccleaninva
    0U,	// Y2_dcfetch
    0U,	// Y2_dcfetchbo
    0U,	// Y2_dcinva
    0U,	// Y2_dczeroa
    0U,	// Y2_icinva
    0U,	// Y2_isync
    0U,	// Y2_syncht
    11U,	// Y4_l2fetch
    0U,	// Y4_trace
    11U,	// Y5_l2fetch
    4096U,	// dep_A2_addsat
    4096U,	// dep_A2_subsat
    0U,	// dep_S2_packhl
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// A2_abs
    0U,	// A2_absp
    0U,	// A2_abssat
    0U,	// A2_add
    0U,	// A2_addh_h16_hh
    0U,	// A2_addh_h16_hl
    0U,	// A2_addh_h16_lh
    0U,	// A2_addh_h16_ll
    0U,	// A2_addh_h16_sat_hh
    0U,	// A2_addh_h16_sat_hl
    0U,	// A2_addh_h16_sat_lh
    0U,	// A2_addh_h16_sat_ll
    0U,	// A2_addh_l16_hl
    0U,	// A2_addh_l16_ll
    0U,	// A2_addh_l16_sat_hl
    0U,	// A2_addh_l16_sat_ll
    0U,	// A2_addi
    0U,	// A2_addp
    0U,	// A2_addpsat
    0U,	// A2_addsat
    0U,	// A2_addsp
    0U,	// A2_addsph
    0U,	// A2_addspl
    0U,	// A2_and
    0U,	// A2_andir
    0U,	// A2_andp
    0U,	// A2_aslh
    0U,	// A2_asrh
    0U,	// A2_combine_hh
    0U,	// A2_combine_hl
    0U,	// A2_combine_lh
    0U,	// A2_combine_ll
    0U,	// A2_combineii
    0U,	// A2_combinew
    0U,	// A2_iconst
    0U,	// A2_max
    0U,	// A2_maxp
    0U,	// A2_maxu
    0U,	// A2_maxup
    0U,	// A2_min
    0U,	// A2_minp
    0U,	// A2_minu
    0U,	// A2_minup
    0U,	// A2_neg
    0U,	// A2_negp
    0U,	// A2_negsat
    0U,	// A2_nop
    0U,	// A2_not
    0U,	// A2_notp
    0U,	// A2_or
    0U,	// A2_orir
    0U,	// A2_orp
    0U,	// A2_paddf
    0U,	// A2_paddfnew
    0U,	// A2_paddif
    0U,	// A2_paddifnew
    0U,	// A2_paddit
    0U,	// A2_padditnew
    0U,	// A2_paddt
    0U,	// A2_paddtnew
    0U,	// A2_pandf
    0U,	// A2_pandfnew
    0U,	// A2_pandt
    0U,	// A2_pandtnew
    0U,	// A2_porf
    0U,	// A2_porfnew
    0U,	// A2_port
    0U,	// A2_portnew
    0U,	// A2_psubf
    0U,	// A2_psubfnew
    0U,	// A2_psubt
    0U,	// A2_psubtnew
    0U,	// A2_pxorf
    0U,	// A2_pxorfnew
    0U,	// A2_pxort
    0U,	// A2_pxortnew
    0U,	// A2_roundsat
    0U,	// A2_sat
    0U,	// A2_satb
    0U,	// A2_sath
    0U,	// A2_satub
    0U,	// A2_satuh
    0U,	// A2_sub
    0U,	// A2_subh_h16_hh
    0U,	// A2_subh_h16_hl
    0U,	// A2_subh_h16_lh
    0U,	// A2_subh_h16_ll
    0U,	// A2_subh_h16_sat_hh
    0U,	// A2_subh_h16_sat_hl
    0U,	// A2_subh_h16_sat_lh
    0U,	// A2_subh_h16_sat_ll
    0U,	// A2_subh_l16_hl
    0U,	// A2_subh_l16_ll
    0U,	// A2_subh_l16_sat_hl
    0U,	// A2_subh_l16_sat_ll
    0U,	// A2_subp
    0U,	// A2_subri
    0U,	// A2_subsat
    0U,	// A2_svaddh
    0U,	// A2_svaddhs
    0U,	// A2_svadduhs
    0U,	// A2_svavgh
    0U,	// A2_svavghs
    0U,	// A2_svnavgh
    0U,	// A2_svsubh
    0U,	// A2_svsubhs
    0U,	// A2_svsubuhs
    0U,	// A2_swiz
    0U,	// A2_sxtb
    0U,	// A2_sxth
    0U,	// A2_sxtw
    0U,	// A2_tfr
    0U,	// A2_tfrcrr
    0U,	// A2_tfrf
    0U,	// A2_tfrfnew
    0U,	// A2_tfrih
    0U,	// A2_tfril
    0U,	// A2_tfrp
    0U,	// A2_tfrpf
    0U,	// A2_tfrpfnew
    0U,	// A2_tfrpi
    0U,	// A2_tfrpt
    0U,	// A2_tfrptnew
    0U,	// A2_tfrrcr
    0U,	// A2_tfrsi
    0U,	// A2_tfrt
    0U,	// A2_tfrtnew
    0U,	// A2_vabsh
    0U,	// A2_vabshsat
    0U,	// A2_vabsw
    0U,	// A2_vabswsat
    0U,	// A2_vaddb_map
    0U,	// A2_vaddh
    0U,	// A2_vaddhs
    0U,	// A2_vaddub
    0U,	// A2_vaddubs
    0U,	// A2_vadduhs
    0U,	// A2_vaddw
    0U,	// A2_vaddws
    0U,	// A2_vavgh
    0U,	// A2_vavghcr
    0U,	// A2_vavghr
    0U,	// A2_vavgub
    0U,	// A2_vavgubr
    0U,	// A2_vavguh
    0U,	// A2_vavguhr
    0U,	// A2_vavguw
    0U,	// A2_vavguwr
    0U,	// A2_vavgw
    0U,	// A2_vavgwcr
    0U,	// A2_vavgwr
    0U,	// A2_vcmpbeq
    0U,	// A2_vcmpbgtu
    0U,	// A2_vcmpheq
    0U,	// A2_vcmphgt
    0U,	// A2_vcmphgtu
    0U,	// A2_vcmpweq
    0U,	// A2_vcmpwgt
    0U,	// A2_vcmpwgtu
    0U,	// A2_vconj
    0U,	// A2_vmaxb
    0U,	// A2_vmaxh
    0U,	// A2_vmaxub
    0U,	// A2_vmaxuh
    0U,	// A2_vmaxuw
    0U,	// A2_vmaxw
    0U,	// A2_vminb
    0U,	// A2_vminh
    0U,	// A2_vminub
    0U,	// A2_vminuh
    0U,	// A2_vminuw
    0U,	// A2_vminw
    0U,	// A2_vnavgh
    0U,	// A2_vnavghcr
    0U,	// A2_vnavghr
    0U,	// A2_vnavgw
    0U,	// A2_vnavgwcr
    0U,	// A2_vnavgwr
    0U,	// A2_vraddub
    0U,	// A2_vraddub_acc
    0U,	// A2_vrsadub
    0U,	// A2_vrsadub_acc
    0U,	// A2_vsubb_map
    0U,	// A2_vsubh
    0U,	// A2_vsubhs
    0U,	// A2_vsubub
    0U,	// A2_vsububs
    0U,	// A2_vsubuhs
    0U,	// A2_vsubw
    0U,	// A2_vsubws
    0U,	// A2_xor
    0U,	// A2_xorp
    0U,	// A2_zxtb
    0U,	// A2_zxth
    0U,	// A4_addp_c
    0U,	// A4_andn
    0U,	// A4_andnp
    0U,	// A4_bitsplit
    0U,	// A4_bitspliti
    0U,	// A4_boundscheck
    0U,	// A4_boundscheck_hi
    0U,	// A4_boundscheck_lo
    0U,	// A4_cmpbeq
    0U,	// A4_cmpbeqi
    0U,	// A4_cmpbgt
    0U,	// A4_cmpbgti
    0U,	// A4_cmpbgtu
    0U,	// A4_cmpbgtui
    0U,	// A4_cmpheq
    0U,	// A4_cmpheqi
    0U,	// A4_cmphgt
    0U,	// A4_cmphgti
    0U,	// A4_cmphgtu
    0U,	// A4_cmphgtui
    0U,	// A4_combineii
    0U,	// A4_combineir
    0U,	// A4_combineri
    0U,	// A4_cround_ri
    0U,	// A4_cround_rr
    0U,	// A4_ext
    0U,	// A4_modwrapu
    0U,	// A4_orn
    0U,	// A4_ornp
    0U,	// A4_paslhf
    0U,	// A4_paslhfnew
    0U,	// A4_paslht
    0U,	// A4_paslhtnew
    0U,	// A4_pasrhf
    0U,	// A4_pasrhfnew
    0U,	// A4_pasrht
    0U,	// A4_pasrhtnew
    0U,	// A4_psxtbf
    0U,	// A4_psxtbfnew
    0U,	// A4_psxtbt
    0U,	// A4_psxtbtnew
    0U,	// A4_psxthf
    0U,	// A4_psxthfnew
    0U,	// A4_psxtht
    0U,	// A4_psxthtnew
    0U,	// A4_pzxtbf
    0U,	// A4_pzxtbfnew
    0U,	// A4_pzxtbt
    0U,	// A4_pzxtbtnew
    0U,	// A4_pzxthf
    0U,	// A4_pzxthfnew
    0U,	// A4_pzxtht
    0U,	// A4_pzxthtnew
    0U,	// A4_rcmpeq
    0U,	// A4_rcmpeqi
    0U,	// A4_rcmpneq
    0U,	// A4_rcmpneqi
    0U,	// A4_round_ri
    0U,	// A4_round_ri_sat
    0U,	// A4_round_rr
    0U,	// A4_round_rr_sat
    0U,	// A4_subp_c
    0U,	// A4_tfrcpp
    0U,	// A4_tfrpcp
    0U,	// A4_tlbmatch
    0U,	// A4_vcmpbeq_any
    0U,	// A4_vcmpbeqi
    0U,	// A4_vcmpbgt
    0U,	// A4_vcmpbgti
    0U,	// A4_vcmpbgtui
    0U,	// A4_vcmpheqi
    0U,	// A4_vcmphgti
    0U,	// A4_vcmphgtui
    0U,	// A4_vcmpweqi
    0U,	// A4_vcmpwgti
    0U,	// A4_vcmpwgtui
    0U,	// A4_vrmaxh
    0U,	// A4_vrmaxuh
    0U,	// A4_vrmaxuw
    0U,	// A4_vrmaxw
    0U,	// A4_vrminh
    0U,	// A4_vrminuh
    0U,	// A4_vrminuw
    0U,	// A4_vrminw
    0U,	// A5_ACS
    0U,	// A5_vaddhubs
    0U,	// A6_vcmpbeq_notany
    0U,	// A6_vminub_RdP
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// C2_all8
    0U,	// C2_and
    0U,	// C2_andn
    0U,	// C2_any8
    0U,	// C2_bitsclr
    0U,	// C2_bitsclri
    0U,	// C2_bitsset
    0U,	// C2_ccombinewf
    0U,	// C2_ccombinewnewf
    0U,	// C2_ccombinewnewt
    0U,	// C2_ccombinewt
    0U,	// C2_cmoveif
    0U,	// C2_cmoveit
    0U,	// C2_cmovenewif
    0U,	// C2_cmovenewit
    0U,	// C2_cmpeq
    0U,	// C2_cmpeqi
    0U,	// C2_cmpeqp
    0U,	// C2_cmpgei
    0U,	// C2_cmpgeui
    0U,	// C2_cmpgt
    0U,	// C2_cmpgti
    0U,	// C2_cmpgtp
    0U,	// C2_cmpgtu
    0U,	// C2_cmpgtui
    0U,	// C2_cmpgtup
    0U,	// C2_cmplt
    0U,	// C2_cmpltu
    0U,	// C2_mask
    0U,	// C2_mux
    0U,	// C2_muxii
    0U,	// C2_muxir
    0U,	// C2_muxri
    0U,	// C2_not
    0U,	// C2_or
    0U,	// C2_orn
    0U,	// C2_pxfer_map
    0U,	// C2_tfrpr
    0U,	// C2_tfrrp
    0U,	// C2_vitpack
    0U,	// C2_vmux
    0U,	// C2_xor
    0U,	// C4_addipc
    0U,	// C4_and_and
    0U,	// C4_and_andn
    0U,	// C4_and_or
    0U,	// C4_and_orn
    0U,	// C4_cmplte
    0U,	// C4_cmpltei
    0U,	// C4_cmplteu
    0U,	// C4_cmplteui
    0U,	// C4_cmpneq
    0U,	// C4_cmpneqi
    0U,	// C4_fastcorner9
    0U,	// C4_fastcorner9_not
    0U,	// C4_nbitsclr
    0U,	// C4_nbitsclri
    0U,	// C4_nbitsset
    0U,	// C4_or_and
    0U,	// C4_or_andn
    0U,	// C4_or_or
    0U,	// C4_or_orn
    0U,	// CALLProfile
    0U,	// CONST32
    0U,	// CONST64
    0U,	// DUPLEX_Pseudo
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    0U,	// EH_RETURN_JMPR
    0U,	// ENDLOOP0
    0U,	// ENDLOOP1
    0U,	// F2_conv_d2df
    0U,	// F2_conv_d2sf
    0U,	// F2_conv_df2d
    0U,	// F2_conv_df2d_chop
    0U,	// F2_conv_df2sf
    0U,	// F2_conv_df2ud
    0U,	// F2_conv_df2ud_chop
    0U,	// F2_conv_df2uw
    0U,	// F2_conv_df2uw_chop
    0U,	// F2_conv_df2w
    0U,	// F2_conv_df2w_chop
    0U,	// F2_conv_sf2d
    0U,	// F2_conv_sf2d_chop
    0U,	// F2_conv_sf2df
    0U,	// F2_conv_sf2ud
    0U,	// F2_conv_sf2ud_chop
    0U,	// F2_conv_sf2uw
    0U,	// F2_conv_sf2uw_chop
    0U,	// F2_conv_sf2w
    0U,	// F2_conv_sf2w_chop
    0U,	// F2_conv_ud2df
    0U,	// F2_conv_ud2sf
    0U,	// F2_conv_uw2df
    0U,	// F2_conv_uw2sf
    0U,	// F2_conv_w2df
    0U,	// F2_conv_w2sf
    0U,	// F2_dfclass
    0U,	// F2_dfcmpeq
    0U,	// F2_dfcmpge
    0U,	// F2_dfcmpgt
    0U,	// F2_dfcmpuo
    0U,	// F2_dfimm_n
    0U,	// F2_dfimm_p
    0U,	// F2_sfadd
    0U,	// F2_sfclass
    0U,	// F2_sfcmpeq
    0U,	// F2_sfcmpge
    0U,	// F2_sfcmpgt
    0U,	// F2_sfcmpuo
    0U,	// F2_sffixupd
    0U,	// F2_sffixupn
    0U,	// F2_sffixupr
    0U,	// F2_sffma
    0U,	// F2_sffma_lib
    0U,	// F2_sffma_sc
    0U,	// F2_sffms
    0U,	// F2_sffms_lib
    0U,	// F2_sfimm_n
    0U,	// F2_sfimm_p
    0U,	// F2_sfinvsqrta
    0U,	// F2_sfmax
    0U,	// F2_sfmin
    0U,	// F2_sfmpy
    0U,	// F2_sfrecipa
    0U,	// F2_sfsub
    0U,	// HI
    0U,	// J2_call
    0U,	// J2_callf
    0U,	// J2_callr
    0U,	// J2_callrf
    0U,	// J2_callrt
    0U,	// J2_callt
    0U,	// J2_endloop0
    0U,	// J2_endloop01
    0U,	// J2_endloop1
    0U,	// J2_jump
    0U,	// J2_jumpf
    0U,	// J2_jumpf_nopred_map
    0U,	// J2_jumpfnew
    0U,	// J2_jumpfnewpt
    0U,	// J2_jumpfpt
    0U,	// J2_jumpr
    0U,	// J2_jumprf
    0U,	// J2_jumprf_nopred_map
    0U,	// J2_jumprfnew
    0U,	// J2_jumprfnewpt
    0U,	// J2_jumprfpt
    0U,	// J2_jumprgtez
    0U,	// J2_jumprgtezpt
    0U,	// J2_jumprltez
    0U,	// J2_jumprltezpt
    0U,	// J2_jumprnz
    0U,	// J2_jumprnzpt
    0U,	// J2_jumprt
    0U,	// J2_jumprt_nopred_map
    0U,	// J2_jumprtnew
    0U,	// J2_jumprtnewpt
    0U,	// J2_jumprtpt
    0U,	// J2_jumprz
    0U,	// J2_jumprzpt
    0U,	// J2_jumpt
    0U,	// J2_jumpt_nopred_map
    0U,	// J2_jumptnew
    0U,	// J2_jumptnewpt
    0U,	// J2_jumptpt
    0U,	// J2_loop0i
    0U,	// J2_loop0iext
    0U,	// J2_loop0r
    0U,	// J2_loop0rext
    0U,	// J2_loop1i
    0U,	// J2_loop1iext
    0U,	// J2_loop1r
    0U,	// J2_loop1rext
    0U,	// J2_pause
    0U,	// J2_ploop1si
    0U,	// J2_ploop1sr
    0U,	// J2_ploop2si
    0U,	// J2_ploop2sr
    0U,	// J2_ploop3si
    0U,	// J2_ploop3sr
    0U,	// J2_trap0
    0U,	// J4_cmpeq_f_jumpnv_nt
    0U,	// J4_cmpeq_f_jumpnv_t
    0U,	// J4_cmpeq_fp0_jump_nt
    0U,	// J4_cmpeq_fp0_jump_t
    0U,	// J4_cmpeq_fp1_jump_nt
    0U,	// J4_cmpeq_fp1_jump_t
    0U,	// J4_cmpeq_t_jumpnv_nt
    0U,	// J4_cmpeq_t_jumpnv_t
    0U,	// J4_cmpeq_tp0_jump_nt
    0U,	// J4_cmpeq_tp0_jump_t
    0U,	// J4_cmpeq_tp1_jump_nt
    0U,	// J4_cmpeq_tp1_jump_t
    0U,	// J4_cmpeqi_f_jumpnv_nt
    0U,	// J4_cmpeqi_f_jumpnv_t
    0U,	// J4_cmpeqi_fp0_jump_nt
    0U,	// J4_cmpeqi_fp0_jump_t
    0U,	// J4_cmpeqi_fp1_jump_nt
    0U,	// J4_cmpeqi_fp1_jump_t
    0U,	// J4_cmpeqi_t_jumpnv_nt
    0U,	// J4_cmpeqi_t_jumpnv_t
    0U,	// J4_cmpeqi_tp0_jump_nt
    0U,	// J4_cmpeqi_tp0_jump_t
    0U,	// J4_cmpeqi_tp1_jump_nt
    0U,	// J4_cmpeqi_tp1_jump_t
    0U,	// J4_cmpeqn1_f_jumpnv_nt
    0U,	// J4_cmpeqn1_f_jumpnv_t
    0U,	// J4_cmpeqn1_fp0_jump_nt
    0U,	// J4_cmpeqn1_fp0_jump_t
    0U,	// J4_cmpeqn1_fp1_jump_nt
    0U,	// J4_cmpeqn1_fp1_jump_t
    0U,	// J4_cmpeqn1_t_jumpnv_nt
    0U,	// J4_cmpeqn1_t_jumpnv_t
    0U,	// J4_cmpeqn1_tp0_jump_nt
    0U,	// J4_cmpeqn1_tp0_jump_t
    0U,	// J4_cmpeqn1_tp1_jump_nt
    0U,	// J4_cmpeqn1_tp1_jump_t
    0U,	// J4_cmpgt_f_jumpnv_nt
    0U,	// J4_cmpgt_f_jumpnv_t
    0U,	// J4_cmpgt_fp0_jump_nt
    0U,	// J4_cmpgt_fp0_jump_t
    0U,	// J4_cmpgt_fp1_jump_nt
    0U,	// J4_cmpgt_fp1_jump_t
    0U,	// J4_cmpgt_t_jumpnv_nt
    0U,	// J4_cmpgt_t_jumpnv_t
    0U,	// J4_cmpgt_tp0_jump_nt
    0U,	// J4_cmpgt_tp0_jump_t
    0U,	// J4_cmpgt_tp1_jump_nt
    0U,	// J4_cmpgt_tp1_jump_t
    0U,	// J4_cmpgti_f_jumpnv_nt
    0U,	// J4_cmpgti_f_jumpnv_t
    0U,	// J4_cmpgti_fp0_jump_nt
    0U,	// J4_cmpgti_fp0_jump_t
    0U,	// J4_cmpgti_fp1_jump_nt
    0U,	// J4_cmpgti_fp1_jump_t
    0U,	// J4_cmpgti_t_jumpnv_nt
    0U,	// J4_cmpgti_t_jumpnv_t
    0U,	// J4_cmpgti_tp0_jump_nt
    0U,	// J4_cmpgti_tp0_jump_t
    0U,	// J4_cmpgti_tp1_jump_nt
    0U,	// J4_cmpgti_tp1_jump_t
    0U,	// J4_cmpgtn1_f_jumpnv_nt
    0U,	// J4_cmpgtn1_f_jumpnv_t
    0U,	// J4_cmpgtn1_fp0_jump_nt
    0U,	// J4_cmpgtn1_fp0_jump_t
    0U,	// J4_cmpgtn1_fp1_jump_nt
    0U,	// J4_cmpgtn1_fp1_jump_t
    0U,	// J4_cmpgtn1_t_jumpnv_nt
    0U,	// J4_cmpgtn1_t_jumpnv_t
    0U,	// J4_cmpgtn1_tp0_jump_nt
    0U,	// J4_cmpgtn1_tp0_jump_t
    0U,	// J4_cmpgtn1_tp1_jump_nt
    0U,	// J4_cmpgtn1_tp1_jump_t
    0U,	// J4_cmpgtu_f_jumpnv_nt
    0U,	// J4_cmpgtu_f_jumpnv_t
    0U,	// J4_cmpgtu_fp0_jump_nt
    0U,	// J4_cmpgtu_fp0_jump_t
    0U,	// J4_cmpgtu_fp1_jump_nt
    0U,	// J4_cmpgtu_fp1_jump_t
    0U,	// J4_cmpgtu_t_jumpnv_nt
    0U,	// J4_cmpgtu_t_jumpnv_t
    0U,	// J4_cmpgtu_tp0_jump_nt
    0U,	// J4_cmpgtu_tp0_jump_t
    0U,	// J4_cmpgtu_tp1_jump_nt
    0U,	// J4_cmpgtu_tp1_jump_t
    0U,	// J4_cmpgtui_f_jumpnv_nt
    0U,	// J4_cmpgtui_f_jumpnv_t
    0U,	// J4_cmpgtui_fp0_jump_nt
    0U,	// J4_cmpgtui_fp0_jump_t
    0U,	// J4_cmpgtui_fp1_jump_nt
    0U,	// J4_cmpgtui_fp1_jump_t
    0U,	// J4_cmpgtui_t_jumpnv_nt
    0U,	// J4_cmpgtui_t_jumpnv_t
    0U,	// J4_cmpgtui_tp0_jump_nt
    0U,	// J4_cmpgtui_tp0_jump_t
    0U,	// J4_cmpgtui_tp1_jump_nt
    0U,	// J4_cmpgtui_tp1_jump_t
    0U,	// J4_cmplt_f_jumpnv_nt
    0U,	// J4_cmplt_f_jumpnv_t
    0U,	// J4_cmplt_t_jumpnv_nt
    0U,	// J4_cmplt_t_jumpnv_t
    0U,	// J4_cmpltu_f_jumpnv_nt
    0U,	// J4_cmpltu_f_jumpnv_t
    0U,	// J4_cmpltu_t_jumpnv_nt
    0U,	// J4_cmpltu_t_jumpnv_t
    0U,	// J4_hintjumpr
    0U,	// J4_jumpseti
    0U,	// J4_jumpsetr
    0U,	// J4_tstbit0_f_jumpnv_nt
    0U,	// J4_tstbit0_f_jumpnv_t
    0U,	// J4_tstbit0_fp0_jump_nt
    0U,	// J4_tstbit0_fp0_jump_t
    0U,	// J4_tstbit0_fp1_jump_nt
    0U,	// J4_tstbit0_fp1_jump_t
    0U,	// J4_tstbit0_t_jumpnv_nt
    0U,	// J4_tstbit0_t_jumpnv_t
    0U,	// J4_tstbit0_tp0_jump_nt
    0U,	// J4_tstbit0_tp0_jump_t
    0U,	// J4_tstbit0_tp1_jump_nt
    0U,	// J4_tstbit0_tp1_jump_t
    0U,	// L2_deallocframe
    0U,	// L2_loadalignb_io
    0U,	// L2_loadalignb_pbr
    0U,	// L2_loadalignb_pci
    0U,	// L2_loadalignb_pcr
    0U,	// L2_loadalignb_pi
    0U,	// L2_loadalignb_pr
    0U,	// L2_loadalignb_zomap
    0U,	// L2_loadalignh_io
    0U,	// L2_loadalignh_pbr
    0U,	// L2_loadalignh_pci
    0U,	// L2_loadalignh_pcr
    0U,	// L2_loadalignh_pi
    0U,	// L2_loadalignh_pr
    0U,	// L2_loadalignh_zomap
    0U,	// L2_loadbsw2_io
    0U,	// L2_loadbsw2_pbr
    0U,	// L2_loadbsw2_pci
    0U,	// L2_loadbsw2_pcr
    0U,	// L2_loadbsw2_pi
    0U,	// L2_loadbsw2_pr
    0U,	// L2_loadbsw2_zomap
    0U,	// L2_loadbsw4_io
    0U,	// L2_loadbsw4_pbr
    0U,	// L2_loadbsw4_pci
    0U,	// L2_loadbsw4_pcr
    0U,	// L2_loadbsw4_pi
    0U,	// L2_loadbsw4_pr
    0U,	// L2_loadbsw4_zomap
    0U,	// L2_loadbzw2_io
    0U,	// L2_loadbzw2_pbr
    0U,	// L2_loadbzw2_pci
    0U,	// L2_loadbzw2_pcr
    0U,	// L2_loadbzw2_pi
    0U,	// L2_loadbzw2_pr
    0U,	// L2_loadbzw2_zomap
    0U,	// L2_loadbzw4_io
    0U,	// L2_loadbzw4_pbr
    0U,	// L2_loadbzw4_pci
    0U,	// L2_loadbzw4_pcr
    0U,	// L2_loadbzw4_pi
    0U,	// L2_loadbzw4_pr
    0U,	// L2_loadbzw4_zomap
    0U,	// L2_loadrb_io
    0U,	// L2_loadrb_pbr
    0U,	// L2_loadrb_pci
    0U,	// L2_loadrb_pcr
    0U,	// L2_loadrb_pi
    0U,	// L2_loadrb_pr
    0U,	// L2_loadrb_zomap
    0U,	// L2_loadrbgp
    0U,	// L2_loadrd_io
    0U,	// L2_loadrd_pbr
    0U,	// L2_loadrd_pci
    0U,	// L2_loadrd_pcr
    0U,	// L2_loadrd_pi
    0U,	// L2_loadrd_pr
    0U,	// L2_loadrd_zomap
    0U,	// L2_loadrdgp
    0U,	// L2_loadrh_io
    0U,	// L2_loadrh_pbr
    0U,	// L2_loadrh_pci
    0U,	// L2_loadrh_pcr
    0U,	// L2_loadrh_pi
    0U,	// L2_loadrh_pr
    0U,	// L2_loadrh_zomap
    0U,	// L2_loadrhgp
    0U,	// L2_loadri_io
    0U,	// L2_loadri_pbr
    0U,	// L2_loadri_pci
    0U,	// L2_loadri_pcr
    0U,	// L2_loadri_pi
    0U,	// L2_loadri_pr
    0U,	// L2_loadri_zomap
    0U,	// L2_loadrigp
    0U,	// L2_loadrub_io
    0U,	// L2_loadrub_pbr
    0U,	// L2_loadrub_pci
    0U,	// L2_loadrub_pcr
    0U,	// L2_loadrub_pi
    0U,	// L2_loadrub_pr
    0U,	// L2_loadrub_zomap
    0U,	// L2_loadrubgp
    0U,	// L2_loadruh_io
    0U,	// L2_loadruh_pbr
    0U,	// L2_loadruh_pci
    0U,	// L2_loadruh_pcr
    0U,	// L2_loadruh_pi
    0U,	// L2_loadruh_pr
    0U,	// L2_loadruh_zomap
    0U,	// L2_loadruhgp
    0U,	// L2_loadw_locked
    0U,	// L2_ploadrbf_io
    0U,	// L2_ploadrbf_pi
    0U,	// L2_ploadrbf_zomap
    0U,	// L2_ploadrbfnew_io
    0U,	// L2_ploadrbfnew_pi
    0U,	// L2_ploadrbfnew_zomap
    0U,	// L2_ploadrbt_io
    0U,	// L2_ploadrbt_pi
    0U,	// L2_ploadrbt_zomap
    0U,	// L2_ploadrbtnew_io
    0U,	// L2_ploadrbtnew_pi
    0U,	// L2_ploadrbtnew_zomap
    0U,	// L2_ploadrdf_io
    0U,	// L2_ploadrdf_pi
    0U,	// L2_ploadrdf_zomap
    0U,	// L2_ploadrdfnew_io
    0U,	// L2_ploadrdfnew_pi
    0U,	// L2_ploadrdfnew_zomap
    0U,	// L2_ploadrdt_io
    0U,	// L2_ploadrdt_pi
    0U,	// L2_ploadrdt_zomap
    0U,	// L2_ploadrdtnew_io
    0U,	// L2_ploadrdtnew_pi
    0U,	// L2_ploadrdtnew_zomap
    0U,	// L2_ploadrhf_io
    0U,	// L2_ploadrhf_pi
    0U,	// L2_ploadrhf_zomap
    0U,	// L2_ploadrhfnew_io
    0U,	// L2_ploadrhfnew_pi
    0U,	// L2_ploadrhfnew_zomap
    0U,	// L2_ploadrht_io
    0U,	// L2_ploadrht_pi
    0U,	// L2_ploadrht_zomap
    0U,	// L2_ploadrhtnew_io
    0U,	// L2_ploadrhtnew_pi
    0U,	// L2_ploadrhtnew_zomap
    0U,	// L2_ploadrif_io
    0U,	// L2_ploadrif_pi
    0U,	// L2_ploadrif_zomap
    0U,	// L2_ploadrifnew_io
    0U,	// L2_ploadrifnew_pi
    0U,	// L2_ploadrifnew_zomap
    0U,	// L2_ploadrit_io
    0U,	// L2_ploadrit_pi
    0U,	// L2_ploadrit_zomap
    0U,	// L2_ploadritnew_io
    0U,	// L2_ploadritnew_pi
    0U,	// L2_ploadritnew_zomap
    0U,	// L2_ploadrubf_io
    0U,	// L2_ploadrubf_pi
    0U,	// L2_ploadrubf_zomap
    0U,	// L2_ploadrubfnew_io
    0U,	// L2_ploadrubfnew_pi
    0U,	// L2_ploadrubfnew_zomap
    0U,	// L2_ploadrubt_io
    0U,	// L2_ploadrubt_pi
    0U,	// L2_ploadrubt_zomap
    0U,	// L2_ploadrubtnew_io
    0U,	// L2_ploadrubtnew_pi
    0U,	// L2_ploadrubtnew_zomap
    0U,	// L2_ploadruhf_io
    0U,	// L2_ploadruhf_pi
    0U,	// L2_ploadruhf_zomap
    0U,	// L2_ploadruhfnew_io
    0U,	// L2_ploadruhfnew_pi
    0U,	// L2_ploadruhfnew_zomap
    0U,	// L2_ploadruht_io
    0U,	// L2_ploadruht_pi
    0U,	// L2_ploadruht_zomap
    0U,	// L2_ploadruhtnew_io
    0U,	// L2_ploadruhtnew_pi
    0U,	// L2_ploadruhtnew_zomap
    0U,	// L4_add_memopb_io
    0U,	// L4_add_memopb_zomap
    0U,	// L4_add_memoph_io
    0U,	// L4_add_memoph_zomap
    0U,	// L4_add_memopw_io
    0U,	// L4_add_memopw_zomap
    0U,	// L4_and_memopb_io
    0U,	// L4_and_memopb_zomap
    0U,	// L4_and_memoph_io
    0U,	// L4_and_memoph_zomap
    0U,	// L4_and_memopw_io
    0U,	// L4_and_memopw_zomap
    0U,	// L4_iadd_memopb_io
    0U,	// L4_iadd_memopb_zomap
    0U,	// L4_iadd_memoph_io
    0U,	// L4_iadd_memoph_zomap
    0U,	// L4_iadd_memopw_io
    0U,	// L4_iadd_memopw_zomap
    0U,	// L4_iand_memopb_io
    0U,	// L4_iand_memopb_zomap
    0U,	// L4_iand_memoph_io
    0U,	// L4_iand_memoph_zomap
    0U,	// L4_iand_memopw_io
    0U,	// L4_iand_memopw_zomap
    0U,	// L4_ior_memopb_io
    0U,	// L4_ior_memopb_zomap
    0U,	// L4_ior_memoph_io
    0U,	// L4_ior_memoph_zomap
    0U,	// L4_ior_memopw_io
    0U,	// L4_ior_memopw_zomap
    0U,	// L4_isub_memopb_io
    0U,	// L4_isub_memopb_zomap
    0U,	// L4_isub_memoph_io
    0U,	// L4_isub_memoph_zomap
    0U,	// L4_isub_memopw_io
    0U,	// L4_isub_memopw_zomap
    0U,	// L4_loadalignb_ap
    0U,	// L4_loadalignb_ur
    0U,	// L4_loadalignh_ap
    0U,	// L4_loadalignh_ur
    0U,	// L4_loadbsw2_ap
    0U,	// L4_loadbsw2_ur
    0U,	// L4_loadbsw4_ap
    0U,	// L4_loadbsw4_ur
    0U,	// L4_loadbzw2_ap
    0U,	// L4_loadbzw2_ur
    0U,	// L4_loadbzw4_ap
    0U,	// L4_loadbzw4_ur
    0U,	// L4_loadd_locked
    0U,	// L4_loadrb_ap
    0U,	// L4_loadrb_rr
    0U,	// L4_loadrb_ur
    0U,	// L4_loadrd_ap
    0U,	// L4_loadrd_rr
    0U,	// L4_loadrd_ur
    0U,	// L4_loadrh_ap
    0U,	// L4_loadrh_rr
    0U,	// L4_loadrh_ur
    0U,	// L4_loadri_ap
    0U,	// L4_loadri_rr
    0U,	// L4_loadri_ur
    0U,	// L4_loadrub_ap
    0U,	// L4_loadrub_rr
    0U,	// L4_loadrub_ur
    0U,	// L4_loadruh_ap
    0U,	// L4_loadruh_rr
    0U,	// L4_loadruh_ur
    0U,	// L4_or_memopb_io
    0U,	// L4_or_memopb_zomap
    0U,	// L4_or_memoph_io
    0U,	// L4_or_memoph_zomap
    0U,	// L4_or_memopw_io
    0U,	// L4_or_memopw_zomap
    0U,	// L4_ploadrbf_abs
    0U,	// L4_ploadrbf_rr
    0U,	// L4_ploadrbfnew_abs
    0U,	// L4_ploadrbfnew_rr
    0U,	// L4_ploadrbt_abs
    0U,	// L4_ploadrbt_rr
    0U,	// L4_ploadrbtnew_abs
    0U,	// L4_ploadrbtnew_rr
    0U,	// L4_ploadrdf_abs
    0U,	// L4_ploadrdf_rr
    0U,	// L4_ploadrdfnew_abs
    0U,	// L4_ploadrdfnew_rr
    0U,	// L4_ploadrdt_abs
    0U,	// L4_ploadrdt_rr
    0U,	// L4_ploadrdtnew_abs
    0U,	// L4_ploadrdtnew_rr
    0U,	// L4_ploadrhf_abs
    0U,	// L4_ploadrhf_rr
    0U,	// L4_ploadrhfnew_abs
    0U,	// L4_ploadrhfnew_rr
    0U,	// L4_ploadrht_abs
    0U,	// L4_ploadrht_rr
    0U,	// L4_ploadrhtnew_abs
    0U,	// L4_ploadrhtnew_rr
    0U,	// L4_ploadrif_abs
    0U,	// L4_ploadrif_rr
    0U,	// L4_ploadrifnew_abs
    0U,	// L4_ploadrifnew_rr
    0U,	// L4_ploadrit_abs
    0U,	// L4_ploadrit_rr
    0U,	// L4_ploadritnew_abs
    0U,	// L4_ploadritnew_rr
    0U,	// L4_ploadrubf_abs
    0U,	// L4_ploadrubf_rr
    0U,	// L4_ploadrubfnew_abs
    0U,	// L4_ploadrubfnew_rr
    0U,	// L4_ploadrubt_abs
    0U,	// L4_ploadrubt_rr
    0U,	// L4_ploadrubtnew_abs
    0U,	// L4_ploadrubtnew_rr
    0U,	// L4_ploadruhf_abs
    0U,	// L4_ploadruhf_rr
    0U,	// L4_ploadruhfnew_abs
    0U,	// L4_ploadruhfnew_rr
    0U,	// L4_ploadruht_abs
    0U,	// L4_ploadruht_rr
    0U,	// L4_ploadruhtnew_abs
    0U,	// L4_ploadruhtnew_rr
    0U,	// L4_return
    0U,	// L4_return_f
    0U,	// L4_return_fnew_pnt
    0U,	// L4_return_fnew_pt
    0U,	// L4_return_map_to_raw_f
    0U,	// L4_return_map_to_raw_fnew_pnt
    0U,	// L4_return_map_to_raw_fnew_pt
    0U,	// L4_return_map_to_raw_t
    0U,	// L4_return_map_to_raw_tnew_pnt
    0U,	// L4_return_map_to_raw_tnew_pt
    0U,	// L4_return_t
    0U,	// L4_return_tnew_pnt
    0U,	// L4_return_tnew_pt
    0U,	// L4_sub_memopb_io
    0U,	// L4_sub_memopb_zomap
    0U,	// L4_sub_memoph_io
    0U,	// L4_sub_memoph_zomap
    0U,	// L4_sub_memopw_io
    0U,	// L4_sub_memopw_zomap
    0U,	// L6_deallocframe_map_to_raw
    0U,	// L6_return_map_to_raw
    0U,	// LDriw_mod
    0U,	// LDriw_pred
    0U,	// LO
    0U,	// M2_acci
    0U,	// M2_accii
    0U,	// M2_cmaci_s0
    0U,	// M2_cmacr_s0
    0U,	// M2_cmacs_s0
    0U,	// M2_cmacs_s1
    0U,	// M2_cmacsc_s0
    0U,	// M2_cmacsc_s1
    0U,	// M2_cmpyi_s0
    0U,	// M2_cmpyr_s0
    0U,	// M2_cmpyrs_s0
    0U,	// M2_cmpyrs_s1
    0U,	// M2_cmpyrsc_s0
    0U,	// M2_cmpyrsc_s1
    0U,	// M2_cmpys_s0
    0U,	// M2_cmpys_s1
    0U,	// M2_cmpysc_s0
    0U,	// M2_cmpysc_s1
    0U,	// M2_cnacs_s0
    0U,	// M2_cnacs_s1
    0U,	// M2_cnacsc_s0
    0U,	// M2_cnacsc_s1
    0U,	// M2_dpmpyss_acc_s0
    0U,	// M2_dpmpyss_nac_s0
    0U,	// M2_dpmpyss_rnd_s0
    0U,	// M2_dpmpyss_s0
    0U,	// M2_dpmpyuu_acc_s0
    0U,	// M2_dpmpyuu_nac_s0
    0U,	// M2_dpmpyuu_s0
    0U,	// M2_hmmpyh_rs1
    0U,	// M2_hmmpyh_s1
    0U,	// M2_hmmpyl_rs1
    0U,	// M2_hmmpyl_s1
    0U,	// M2_maci
    0U,	// M2_macsin
    0U,	// M2_macsip
    0U,	// M2_mmachs_rs0
    0U,	// M2_mmachs_rs1
    0U,	// M2_mmachs_s0
    0U,	// M2_mmachs_s1
    0U,	// M2_mmacls_rs0
    0U,	// M2_mmacls_rs1
    0U,	// M2_mmacls_s0
    0U,	// M2_mmacls_s1
    0U,	// M2_mmacuhs_rs0
    0U,	// M2_mmacuhs_rs1
    0U,	// M2_mmacuhs_s0
    0U,	// M2_mmacuhs_s1
    0U,	// M2_mmaculs_rs0
    0U,	// M2_mmaculs_rs1
    0U,	// M2_mmaculs_s0
    0U,	// M2_mmaculs_s1
    0U,	// M2_mmpyh_rs0
    0U,	// M2_mmpyh_rs1
    0U,	// M2_mmpyh_s0
    0U,	// M2_mmpyh_s1
    0U,	// M2_mmpyl_rs0
    0U,	// M2_mmpyl_rs1
    0U,	// M2_mmpyl_s0
    0U,	// M2_mmpyl_s1
    0U,	// M2_mmpyuh_rs0
    0U,	// M2_mmpyuh_rs1
    0U,	// M2_mmpyuh_s0
    0U,	// M2_mmpyuh_s1
    0U,	// M2_mmpyul_rs0
    0U,	// M2_mmpyul_rs1
    0U,	// M2_mmpyul_s0
    0U,	// M2_mmpyul_s1
    0U,	// M2_mpy_acc_hh_s0
    0U,	// M2_mpy_acc_hh_s1
    0U,	// M2_mpy_acc_hl_s0
    0U,	// M2_mpy_acc_hl_s1
    0U,	// M2_mpy_acc_lh_s0
    0U,	// M2_mpy_acc_lh_s1
    0U,	// M2_mpy_acc_ll_s0
    0U,	// M2_mpy_acc_ll_s1
    0U,	// M2_mpy_acc_sat_hh_s0
    0U,	// M2_mpy_acc_sat_hh_s1
    0U,	// M2_mpy_acc_sat_hl_s0
    0U,	// M2_mpy_acc_sat_hl_s1
    0U,	// M2_mpy_acc_sat_lh_s0
    0U,	// M2_mpy_acc_sat_lh_s1
    0U,	// M2_mpy_acc_sat_ll_s0
    0U,	// M2_mpy_acc_sat_ll_s1
    0U,	// M2_mpy_hh_s0
    0U,	// M2_mpy_hh_s1
    0U,	// M2_mpy_hl_s0
    0U,	// M2_mpy_hl_s1
    0U,	// M2_mpy_lh_s0
    0U,	// M2_mpy_lh_s1
    0U,	// M2_mpy_ll_s0
    0U,	// M2_mpy_ll_s1
    0U,	// M2_mpy_nac_hh_s0
    0U,	// M2_mpy_nac_hh_s1
    0U,	// M2_mpy_nac_hl_s0
    0U,	// M2_mpy_nac_hl_s1
    0U,	// M2_mpy_nac_lh_s0
    0U,	// M2_mpy_nac_lh_s1
    0U,	// M2_mpy_nac_ll_s0
    0U,	// M2_mpy_nac_ll_s1
    0U,	// M2_mpy_nac_sat_hh_s0
    0U,	// M2_mpy_nac_sat_hh_s1
    0U,	// M2_mpy_nac_sat_hl_s0
    0U,	// M2_mpy_nac_sat_hl_s1
    0U,	// M2_mpy_nac_sat_lh_s0
    0U,	// M2_mpy_nac_sat_lh_s1
    0U,	// M2_mpy_nac_sat_ll_s0
    0U,	// M2_mpy_nac_sat_ll_s1
    0U,	// M2_mpy_rnd_hh_s0
    0U,	// M2_mpy_rnd_hh_s1
    0U,	// M2_mpy_rnd_hl_s0
    0U,	// M2_mpy_rnd_hl_s1
    0U,	// M2_mpy_rnd_lh_s0
    0U,	// M2_mpy_rnd_lh_s1
    0U,	// M2_mpy_rnd_ll_s0
    0U,	// M2_mpy_rnd_ll_s1
    0U,	// M2_mpy_sat_hh_s0
    0U,	// M2_mpy_sat_hh_s1
    0U,	// M2_mpy_sat_hl_s0
    0U,	// M2_mpy_sat_hl_s1
    0U,	// M2_mpy_sat_lh_s0
    0U,	// M2_mpy_sat_lh_s1
    0U,	// M2_mpy_sat_ll_s0
    0U,	// M2_mpy_sat_ll_s1
    0U,	// M2_mpy_sat_rnd_hh_s0
    0U,	// M2_mpy_sat_rnd_hh_s1
    0U,	// M2_mpy_sat_rnd_hl_s0
    0U,	// M2_mpy_sat_rnd_hl_s1
    0U,	// M2_mpy_sat_rnd_lh_s0
    0U,	// M2_mpy_sat_rnd_lh_s1
    0U,	// M2_mpy_sat_rnd_ll_s0
    0U,	// M2_mpy_sat_rnd_ll_s1
    0U,	// M2_mpy_up
    0U,	// M2_mpy_up_s1
    0U,	// M2_mpy_up_s1_sat
    0U,	// M2_mpyd_acc_hh_s0
    0U,	// M2_mpyd_acc_hh_s1
    0U,	// M2_mpyd_acc_hl_s0
    0U,	// M2_mpyd_acc_hl_s1
    0U,	// M2_mpyd_acc_lh_s0
    0U,	// M2_mpyd_acc_lh_s1
    0U,	// M2_mpyd_acc_ll_s0
    0U,	// M2_mpyd_acc_ll_s1
    0U,	// M2_mpyd_hh_s0
    0U,	// M2_mpyd_hh_s1
    0U,	// M2_mpyd_hl_s0
    0U,	// M2_mpyd_hl_s1
    0U,	// M2_mpyd_lh_s0
    0U,	// M2_mpyd_lh_s1
    0U,	// M2_mpyd_ll_s0
    0U,	// M2_mpyd_ll_s1
    0U,	// M2_mpyd_nac_hh_s0
    0U,	// M2_mpyd_nac_hh_s1
    0U,	// M2_mpyd_nac_hl_s0
    0U,	// M2_mpyd_nac_hl_s1
    0U,	// M2_mpyd_nac_lh_s0
    0U,	// M2_mpyd_nac_lh_s1
    0U,	// M2_mpyd_nac_ll_s0
    0U,	// M2_mpyd_nac_ll_s1
    0U,	// M2_mpyd_rnd_hh_s0
    0U,	// M2_mpyd_rnd_hh_s1
    0U,	// M2_mpyd_rnd_hl_s0
    0U,	// M2_mpyd_rnd_hl_s1
    0U,	// M2_mpyd_rnd_lh_s0
    0U,	// M2_mpyd_rnd_lh_s1
    0U,	// M2_mpyd_rnd_ll_s0
    0U,	// M2_mpyd_rnd_ll_s1
    0U,	// M2_mpyi
    0U,	// M2_mpysin
    0U,	// M2_mpysip
    0U,	// M2_mpysmi
    0U,	// M2_mpysu_up
    0U,	// M2_mpyu_acc_hh_s0
    0U,	// M2_mpyu_acc_hh_s1
    0U,	// M2_mpyu_acc_hl_s0
    0U,	// M2_mpyu_acc_hl_s1
    0U,	// M2_mpyu_acc_lh_s0
    0U,	// M2_mpyu_acc_lh_s1
    0U,	// M2_mpyu_acc_ll_s0
    0U,	// M2_mpyu_acc_ll_s1
    0U,	// M2_mpyu_hh_s0
    0U,	// M2_mpyu_hh_s1
    0U,	// M2_mpyu_hl_s0
    0U,	// M2_mpyu_hl_s1
    0U,	// M2_mpyu_lh_s0
    0U,	// M2_mpyu_lh_s1
    0U,	// M2_mpyu_ll_s0
    0U,	// M2_mpyu_ll_s1
    0U,	// M2_mpyu_nac_hh_s0
    0U,	// M2_mpyu_nac_hh_s1
    0U,	// M2_mpyu_nac_hl_s0
    0U,	// M2_mpyu_nac_hl_s1
    0U,	// M2_mpyu_nac_lh_s0
    0U,	// M2_mpyu_nac_lh_s1
    0U,	// M2_mpyu_nac_ll_s0
    0U,	// M2_mpyu_nac_ll_s1
    0U,	// M2_mpyu_up
    0U,	// M2_mpyud_acc_hh_s0
    0U,	// M2_mpyud_acc_hh_s1
    0U,	// M2_mpyud_acc_hl_s0
    0U,	// M2_mpyud_acc_hl_s1
    0U,	// M2_mpyud_acc_lh_s0
    0U,	// M2_mpyud_acc_lh_s1
    0U,	// M2_mpyud_acc_ll_s0
    0U,	// M2_mpyud_acc_ll_s1
    0U,	// M2_mpyud_hh_s0
    0U,	// M2_mpyud_hh_s1
    0U,	// M2_mpyud_hl_s0
    0U,	// M2_mpyud_hl_s1
    0U,	// M2_mpyud_lh_s0
    0U,	// M2_mpyud_lh_s1
    0U,	// M2_mpyud_ll_s0
    0U,	// M2_mpyud_ll_s1
    0U,	// M2_mpyud_nac_hh_s0
    0U,	// M2_mpyud_nac_hh_s1
    0U,	// M2_mpyud_nac_hl_s0
    0U,	// M2_mpyud_nac_hl_s1
    0U,	// M2_mpyud_nac_lh_s0
    0U,	// M2_mpyud_nac_lh_s1
    0U,	// M2_mpyud_nac_ll_s0
    0U,	// M2_mpyud_nac_ll_s1
    0U,	// M2_mpyui
    0U,	// M2_nacci
    0U,	// M2_naccii
    0U,	// M2_subacc
    0U,	// M2_vabsdiffh
    0U,	// M2_vabsdiffw
    0U,	// M2_vcmac_s0_sat_i
    0U,	// M2_vcmac_s0_sat_r
    0U,	// M2_vcmpy_s0_sat_i
    0U,	// M2_vcmpy_s0_sat_r
    0U,	// M2_vcmpy_s1_sat_i
    0U,	// M2_vcmpy_s1_sat_r
    0U,	// M2_vdmacs_s0
    0U,	// M2_vdmacs_s1
    0U,	// M2_vdmpyrs_s0
    0U,	// M2_vdmpyrs_s1
    0U,	// M2_vdmpys_s0
    0U,	// M2_vdmpys_s1
    0U,	// M2_vmac2
    0U,	// M2_vmac2es
    0U,	// M2_vmac2es_s0
    0U,	// M2_vmac2es_s1
    0U,	// M2_vmac2s_s0
    0U,	// M2_vmac2s_s1
    0U,	// M2_vmac2su_s0
    0U,	// M2_vmac2su_s1
    0U,	// M2_vmpy2es_s0
    0U,	// M2_vmpy2es_s1
    0U,	// M2_vmpy2s_s0
    0U,	// M2_vmpy2s_s0pack
    0U,	// M2_vmpy2s_s1
    0U,	// M2_vmpy2s_s1pack
    0U,	// M2_vmpy2su_s0
    0U,	// M2_vmpy2su_s1
    0U,	// M2_vraddh
    0U,	// M2_vradduh
    0U,	// M2_vrcmaci_s0
    0U,	// M2_vrcmaci_s0c
    0U,	// M2_vrcmacr_s0
    0U,	// M2_vrcmacr_s0c
    0U,	// M2_vrcmpyi_s0
    0U,	// M2_vrcmpyi_s0c
    0U,	// M2_vrcmpyr_s0
    0U,	// M2_vrcmpyr_s0c
    0U,	// M2_vrcmpys_acc_s1
    0U,	// M2_vrcmpys_acc_s1_h
    0U,	// M2_vrcmpys_acc_s1_l
    0U,	// M2_vrcmpys_s1
    0U,	// M2_vrcmpys_s1_h
    0U,	// M2_vrcmpys_s1_l
    0U,	// M2_vrcmpys_s1rp
    0U,	// M2_vrcmpys_s1rp_h
    0U,	// M2_vrcmpys_s1rp_l
    0U,	// M2_vrmac_s0
    0U,	// M2_vrmpy_s0
    0U,	// M2_xor_xacc
    0U,	// M4_and_and
    0U,	// M4_and_andn
    0U,	// M4_and_or
    0U,	// M4_and_xor
    0U,	// M4_cmpyi_wh
    0U,	// M4_cmpyi_whc
    0U,	// M4_cmpyr_wh
    0U,	// M4_cmpyr_whc
    0U,	// M4_mac_up_s1_sat
    0U,	// M4_mpyri_addi
    4U,	// M4_mpyri_addr
    0U,	// M4_mpyri_addr_u2
    0U,	// M4_mpyrr_addi
    0U,	// M4_mpyrr_addr
    0U,	// M4_nac_up_s1_sat
    0U,	// M4_or_and
    0U,	// M4_or_andn
    0U,	// M4_or_or
    0U,	// M4_or_xor
    0U,	// M4_pmpyw
    0U,	// M4_pmpyw_acc
    0U,	// M4_vpmpyh
    0U,	// M4_vpmpyh_acc
    0U,	// M4_vrmpyeh_acc_s0
    0U,	// M4_vrmpyeh_acc_s1
    0U,	// M4_vrmpyeh_s0
    0U,	// M4_vrmpyeh_s1
    0U,	// M4_vrmpyoh_acc_s0
    0U,	// M4_vrmpyoh_acc_s1
    0U,	// M4_vrmpyoh_s0
    0U,	// M4_vrmpyoh_s1
    0U,	// M4_xor_and
    0U,	// M4_xor_andn
    0U,	// M4_xor_or
    0U,	// M4_xor_xacc
    0U,	// M5_vdmacbsu
    0U,	// M5_vdmpybsu
    0U,	// M5_vmacbsu
    0U,	// M5_vmacbuu
    0U,	// M5_vmpybsu
    0U,	// M5_vmpybuu
    0U,	// M5_vrmacbsu
    0U,	// M5_vrmacbuu
    0U,	// M5_vrmpybsu
    0U,	// M5_vrmpybuu
    0U,	// M6_vabsdiffb
    0U,	// M6_vabsdiffub
    0U,	// PS_aligna
    0U,	// PS_alloca
    0U,	// PS_call_nr
    0U,	// PS_call_stk
    0U,	// PS_callr_nr
    0U,	// PS_false
    0U,	// PS_fi
    0U,	// PS_fia
    0U,	// PS_jmpret
    0U,	// PS_jmpretf
    0U,	// PS_jmpretfnew
    0U,	// PS_jmpretfnewpt
    0U,	// PS_jmprett
    0U,	// PS_jmprettnew
    0U,	// PS_jmprettnewpt
    0U,	// PS_loadrbabs
    0U,	// PS_loadrdabs
    0U,	// PS_loadrhabs
    0U,	// PS_loadriabs
    0U,	// PS_loadrubabs
    0U,	// PS_loadruhabs
    0U,	// PS_pselect
    0U,	// PS_storerbabs
    0U,	// PS_storerbnewabs
    0U,	// PS_storerdabs
    0U,	// PS_storerfabs
    0U,	// PS_storerhabs
    0U,	// PS_storerhnewabs
    0U,	// PS_storeriabs
    0U,	// PS_storerinewabs
    0U,	// PS_tailcall_i
    0U,	// PS_tailcall_r
    0U,	// PS_true
    0U,	// PS_vloadrq_ai
    0U,	// PS_vloadrw_ai
    0U,	// PS_vloadrw_nt_ai
    0U,	// PS_vloadrwu_ai
    0U,	// PS_vmulw
    0U,	// PS_vmulw_acc
    0U,	// PS_vselect
    0U,	// PS_vstorerq_ai
    0U,	// PS_vstorerw_ai
    0U,	// PS_vstorerw_nt_ai
    0U,	// PS_vstorerwu_ai
    0U,	// PS_wselect
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_EXT_PIC
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4_PIC
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_EXT_PIC
    0U,	// RESTORE_DEALLOC_RET_JMP_V4_PIC
    0U,	// S2_addasl_rrri
    0U,	// S2_allocframe
    0U,	// S2_asl_i_p
    0U,	// S2_asl_i_p_acc
    0U,	// S2_asl_i_p_and
    0U,	// S2_asl_i_p_nac
    0U,	// S2_asl_i_p_or
    0U,	// S2_asl_i_p_xacc
    0U,	// S2_asl_i_r
    0U,	// S2_asl_i_r_acc
    0U,	// S2_asl_i_r_and
    0U,	// S2_asl_i_r_nac
    0U,	// S2_asl_i_r_or
    0U,	// S2_asl_i_r_sat
    0U,	// S2_asl_i_r_xacc
    0U,	// S2_asl_i_vh
    0U,	// S2_asl_i_vw
    0U,	// S2_asl_r_p
    0U,	// S2_asl_r_p_acc
    0U,	// S2_asl_r_p_and
    0U,	// S2_asl_r_p_nac
    0U,	// S2_asl_r_p_or
    0U,	// S2_asl_r_p_xor
    0U,	// S2_asl_r_r
    0U,	// S2_asl_r_r_acc
    0U,	// S2_asl_r_r_and
    0U,	// S2_asl_r_r_nac
    0U,	// S2_asl_r_r_or
    0U,	// S2_asl_r_r_sat
    0U,	// S2_asl_r_vh
    0U,	// S2_asl_r_vw
    0U,	// S2_asr_i_p
    0U,	// S2_asr_i_p_acc
    0U,	// S2_asr_i_p_and
    0U,	// S2_asr_i_p_nac
    0U,	// S2_asr_i_p_or
    0U,	// S2_asr_i_p_rnd
    0U,	// S2_asr_i_p_rnd_goodsyntax
    0U,	// S2_asr_i_r
    0U,	// S2_asr_i_r_acc
    0U,	// S2_asr_i_r_and
    0U,	// S2_asr_i_r_nac
    0U,	// S2_asr_i_r_or
    0U,	// S2_asr_i_r_rnd
    0U,	// S2_asr_i_r_rnd_goodsyntax
    0U,	// S2_asr_i_svw_trun
    0U,	// S2_asr_i_vh
    0U,	// S2_asr_i_vw
    0U,	// S2_asr_r_p
    0U,	// S2_asr_r_p_acc
    0U,	// S2_asr_r_p_and
    0U,	// S2_asr_r_p_nac
    0U,	// S2_asr_r_p_or
    0U,	// S2_asr_r_p_xor
    0U,	// S2_asr_r_r
    0U,	// S2_asr_r_r_acc
    0U,	// S2_asr_r_r_and
    0U,	// S2_asr_r_r_nac
    0U,	// S2_asr_r_r_or
    0U,	// S2_asr_r_r_sat
    0U,	// S2_asr_r_svw_trun
    0U,	// S2_asr_r_vh
    0U,	// S2_asr_r_vw
    0U,	// S2_brev
    0U,	// S2_brevp
    0U,	// S2_cabacdecbin
    0U,	// S2_cl0
    0U,	// S2_cl0p
    0U,	// S2_cl1
    0U,	// S2_cl1p
    0U,	// S2_clb
    0U,	// S2_clbnorm
    0U,	// S2_clbp
    0U,	// S2_clrbit_i
    0U,	// S2_clrbit_r
    0U,	// S2_ct0
    0U,	// S2_ct0p
    0U,	// S2_ct1
    0U,	// S2_ct1p
    0U,	// S2_deinterleave
    0U,	// S2_extractu
    0U,	// S2_extractu_rp
    0U,	// S2_extractup
    0U,	// S2_extractup_rp
    0U,	// S2_insert
    0U,	// S2_insert_rp
    0U,	// S2_insertp
    0U,	// S2_insertp_rp
    0U,	// S2_interleave
    0U,	// S2_lfsp
    0U,	// S2_lsl_r_p
    0U,	// S2_lsl_r_p_acc
    0U,	// S2_lsl_r_p_and
    0U,	// S2_lsl_r_p_nac
    0U,	// S2_lsl_r_p_or
    0U,	// S2_lsl_r_p_xor
    0U,	// S2_lsl_r_r
    0U,	// S2_lsl_r_r_acc
    0U,	// S2_lsl_r_r_and
    0U,	// S2_lsl_r_r_nac
    0U,	// S2_lsl_r_r_or
    0U,	// S2_lsl_r_vh
    0U,	// S2_lsl_r_vw
    0U,	// S2_lsr_i_p
    0U,	// S2_lsr_i_p_acc
    0U,	// S2_lsr_i_p_and
    0U,	// S2_lsr_i_p_nac
    0U,	// S2_lsr_i_p_or
    0U,	// S2_lsr_i_p_xacc
    0U,	// S2_lsr_i_r
    0U,	// S2_lsr_i_r_acc
    0U,	// S2_lsr_i_r_and
    0U,	// S2_lsr_i_r_nac
    0U,	// S2_lsr_i_r_or
    0U,	// S2_lsr_i_r_xacc
    0U,	// S2_lsr_i_vh
    0U,	// S2_lsr_i_vw
    0U,	// S2_lsr_r_p
    0U,	// S2_lsr_r_p_acc
    0U,	// S2_lsr_r_p_and
    0U,	// S2_lsr_r_p_nac
    0U,	// S2_lsr_r_p_or
    0U,	// S2_lsr_r_p_xor
    0U,	// S2_lsr_r_r
    0U,	// S2_lsr_r_r_acc
    0U,	// S2_lsr_r_r_and
    0U,	// S2_lsr_r_r_nac
    0U,	// S2_lsr_r_r_or
    0U,	// S2_lsr_r_vh
    0U,	// S2_lsr_r_vw
    0U,	// S2_packhl
    0U,	// S2_parityp
    8U,	// S2_pstorerbf_io
    12U,	// S2_pstorerbf_pi
    0U,	// S2_pstorerbf_zomap
    12U,	// S2_pstorerbfnew_pi
    40U,	// S2_pstorerbnewf_io
    44U,	// S2_pstorerbnewf_pi
    0U,	// S2_pstorerbnewf_zomap
    44U,	// S2_pstorerbnewfnew_pi
    40U,	// S2_pstorerbnewt_io
    44U,	// S2_pstorerbnewt_pi
    0U,	// S2_pstorerbnewt_zomap
    44U,	// S2_pstorerbnewtnew_pi
    8U,	// S2_pstorerbt_io
    12U,	// S2_pstorerbt_pi
    0U,	// S2_pstorerbt_zomap
    12U,	// S2_pstorerbtnew_pi
    8U,	// S2_pstorerdf_io
    12U,	// S2_pstorerdf_pi
    0U,	// S2_pstorerdf_zomap
    12U,	// S2_pstorerdfnew_pi
    8U,	// S2_pstorerdt_io
    12U,	// S2_pstorerdt_pi
    0U,	// S2_pstorerdt_zomap
    12U,	// S2_pstorerdtnew_pi
    72U,	// S2_pstorerff_io
    76U,	// S2_pstorerff_pi
    0U,	// S2_pstorerff_zomap
    76U,	// S2_pstorerffnew_pi
    72U,	// S2_pstorerft_io
    76U,	// S2_pstorerft_pi
    0U,	// S2_pstorerft_zomap
    76U,	// S2_pstorerftnew_pi
    8U,	// S2_pstorerhf_io
    12U,	// S2_pstorerhf_pi
    0U,	// S2_pstorerhf_zomap
    12U,	// S2_pstorerhfnew_pi
    40U,	// S2_pstorerhnewf_io
    44U,	// S2_pstorerhnewf_pi
    0U,	// S2_pstorerhnewf_zomap
    44U,	// S2_pstorerhnewfnew_pi
    40U,	// S2_pstorerhnewt_io
    44U,	// S2_pstorerhnewt_pi
    0U,	// S2_pstorerhnewt_zomap
    44U,	// S2_pstorerhnewtnew_pi
    8U,	// S2_pstorerht_io
    12U,	// S2_pstorerht_pi
    0U,	// S2_pstorerht_zomap
    12U,	// S2_pstorerhtnew_pi
    8U,	// S2_pstorerif_io
    12U,	// S2_pstorerif_pi
    0U,	// S2_pstorerif_zomap
    12U,	// S2_pstorerifnew_pi
    40U,	// S2_pstorerinewf_io
    44U,	// S2_pstorerinewf_pi
    0U,	// S2_pstorerinewf_zomap
    44U,	// S2_pstorerinewfnew_pi
    40U,	// S2_pstorerinewt_io
    44U,	// S2_pstorerinewt_pi
    0U,	// S2_pstorerinewt_zomap
    44U,	// S2_pstorerinewtnew_pi
    8U,	// S2_pstorerit_io
    12U,	// S2_pstorerit_pi
    0U,	// S2_pstorerit_zomap
    12U,	// S2_pstoreritnew_pi
    0U,	// S2_setbit_i
    0U,	// S2_setbit_r
    0U,	// S2_shuffeb
    0U,	// S2_shuffeh
    0U,	// S2_shuffob
    0U,	// S2_shuffoh
    0U,	// S2_storerb_io
    0U,	// S2_storerb_pbr
    0U,	// S2_storerb_pci
    0U,	// S2_storerb_pcr
    0U,	// S2_storerb_pi
    0U,	// S2_storerb_pr
    0U,	// S2_storerb_zomap
    0U,	// S2_storerbgp
    0U,	// S2_storerbnew_io
    0U,	// S2_storerbnew_pbr
    0U,	// S2_storerbnew_pci
    0U,	// S2_storerbnew_pcr
    0U,	// S2_storerbnew_pi
    0U,	// S2_storerbnew_pr
    0U,	// S2_storerbnew_zomap
    0U,	// S2_storerbnewgp
    0U,	// S2_storerd_io
    0U,	// S2_storerd_pbr
    0U,	// S2_storerd_pci
    0U,	// S2_storerd_pcr
    0U,	// S2_storerd_pi
    0U,	// S2_storerd_pr
    0U,	// S2_storerd_zomap
    0U,	// S2_storerdgp
    0U,	// S2_storerf_io
    0U,	// S2_storerf_pbr
    0U,	// S2_storerf_pci
    0U,	// S2_storerf_pcr
    0U,	// S2_storerf_pi
    0U,	// S2_storerf_pr
    0U,	// S2_storerf_zomap
    0U,	// S2_storerfgp
    0U,	// S2_storerh_io
    0U,	// S2_storerh_pbr
    0U,	// S2_storerh_pci
    0U,	// S2_storerh_pcr
    0U,	// S2_storerh_pi
    0U,	// S2_storerh_pr
    0U,	// S2_storerh_zomap
    0U,	// S2_storerhgp
    0U,	// S2_storerhnew_io
    0U,	// S2_storerhnew_pbr
    0U,	// S2_storerhnew_pci
    0U,	// S2_storerhnew_pcr
    0U,	// S2_storerhnew_pi
    0U,	// S2_storerhnew_pr
    0U,	// S2_storerhnew_zomap
    0U,	// S2_storerhnewgp
    0U,	// S2_storeri_io
    0U,	// S2_storeri_pbr
    0U,	// S2_storeri_pci
    0U,	// S2_storeri_pcr
    0U,	// S2_storeri_pi
    0U,	// S2_storeri_pr
    0U,	// S2_storeri_zomap
    0U,	// S2_storerigp
    0U,	// S2_storerinew_io
    0U,	// S2_storerinew_pbr
    0U,	// S2_storerinew_pci
    0U,	// S2_storerinew_pcr
    0U,	// S2_storerinew_pi
    0U,	// S2_storerinew_pr
    0U,	// S2_storerinew_zomap
    0U,	// S2_storerinewgp
    0U,	// S2_storew_locked
    0U,	// S2_svsathb
    0U,	// S2_svsathub
    0U,	// S2_tableidxb
    0U,	// S2_tableidxb_goodsyntax
    0U,	// S2_tableidxd
    0U,	// S2_tableidxd_goodsyntax
    0U,	// S2_tableidxh
    0U,	// S2_tableidxh_goodsyntax
    0U,	// S2_tableidxw
    0U,	// S2_tableidxw_goodsyntax
    0U,	// S2_togglebit_i
    0U,	// S2_togglebit_r
    0U,	// S2_tstbit_i
    0U,	// S2_tstbit_r
    0U,	// S2_valignib
    0U,	// S2_valignrb
    0U,	// S2_vcnegh
    0U,	// S2_vcrotate
    0U,	// S2_vrcnegh
    0U,	// S2_vrndpackwh
    0U,	// S2_vrndpackwhs
    0U,	// S2_vsathb
    0U,	// S2_vsathb_nopack
    0U,	// S2_vsathub
    0U,	// S2_vsathub_nopack
    0U,	// S2_vsatwh
    0U,	// S2_vsatwh_nopack
    0U,	// S2_vsatwuh
    0U,	// S2_vsatwuh_nopack
    0U,	// S2_vsplatrb
    0U,	// S2_vsplatrh
    0U,	// S2_vspliceib
    0U,	// S2_vsplicerb
    0U,	// S2_vsxtbh
    0U,	// S2_vsxthw
    0U,	// S2_vtrunehb
    0U,	// S2_vtrunewh
    0U,	// S2_vtrunohb
    0U,	// S2_vtrunowh
    0U,	// S2_vzxtbh
    0U,	// S2_vzxthw
    0U,	// S4_addaddi
    0U,	// S4_addi_asl_ri
    0U,	// S4_addi_lsr_ri
    0U,	// S4_andi_asl_ri
    0U,	// S4_andi_lsr_ri
    0U,	// S4_clbaddi
    0U,	// S4_clbpaddi
    0U,	// S4_clbpnorm
    0U,	// S4_extract
    0U,	// S4_extract_rp
    0U,	// S4_extractp
    0U,	// S4_extractp_rp
    0U,	// S4_lsli
    0U,	// S4_ntstbit_i
    0U,	// S4_ntstbit_r
    0U,	// S4_or_andi
    0U,	// S4_or_andix
    0U,	// S4_or_ori
    0U,	// S4_ori_asl_ri
    0U,	// S4_ori_lsr_ri
    0U,	// S4_parity
    0U,	// S4_pstorerbf_abs
    0U,	// S4_pstorerbf_rr
    0U,	// S4_pstorerbfnew_abs
    8U,	// S4_pstorerbfnew_io
    0U,	// S4_pstorerbfnew_rr
    0U,	// S4_pstorerbfnew_zomap
    0U,	// S4_pstorerbnewf_abs
    0U,	// S4_pstorerbnewf_rr
    0U,	// S4_pstorerbnewfnew_abs
    40U,	// S4_pstorerbnewfnew_io
    0U,	// S4_pstorerbnewfnew_rr
    0U,	// S4_pstorerbnewfnew_zomap
    0U,	// S4_pstorerbnewt_abs
    0U,	// S4_pstorerbnewt_rr
    0U,	// S4_pstorerbnewtnew_abs
    40U,	// S4_pstorerbnewtnew_io
    0U,	// S4_pstorerbnewtnew_rr
    0U,	// S4_pstorerbnewtnew_zomap
    0U,	// S4_pstorerbt_abs
    0U,	// S4_pstorerbt_rr
    0U,	// S4_pstorerbtnew_abs
    8U,	// S4_pstorerbtnew_io
    0U,	// S4_pstorerbtnew_rr
    0U,	// S4_pstorerbtnew_zomap
    0U,	// S4_pstorerdf_abs
    0U,	// S4_pstorerdf_rr
    0U,	// S4_pstorerdfnew_abs
    8U,	// S4_pstorerdfnew_io
    0U,	// S4_pstorerdfnew_rr
    0U,	// S4_pstorerdfnew_zomap
    0U,	// S4_pstorerdt_abs
    0U,	// S4_pstorerdt_rr
    0U,	// S4_pstorerdtnew_abs
    8U,	// S4_pstorerdtnew_io
    0U,	// S4_pstorerdtnew_rr
    0U,	// S4_pstorerdtnew_zomap
    0U,	// S4_pstorerff_abs
    0U,	// S4_pstorerff_rr
    0U,	// S4_pstorerffnew_abs
    72U,	// S4_pstorerffnew_io
    0U,	// S4_pstorerffnew_rr
    0U,	// S4_pstorerffnew_zomap
    0U,	// S4_pstorerft_abs
    0U,	// S4_pstorerft_rr
    0U,	// S4_pstorerftnew_abs
    72U,	// S4_pstorerftnew_io
    0U,	// S4_pstorerftnew_rr
    0U,	// S4_pstorerftnew_zomap
    0U,	// S4_pstorerhf_abs
    0U,	// S4_pstorerhf_rr
    0U,	// S4_pstorerhfnew_abs
    8U,	// S4_pstorerhfnew_io
    0U,	// S4_pstorerhfnew_rr
    0U,	// S4_pstorerhfnew_zomap
    0U,	// S4_pstorerhnewf_abs
    0U,	// S4_pstorerhnewf_rr
    0U,	// S4_pstorerhnewfnew_abs
    40U,	// S4_pstorerhnewfnew_io
    0U,	// S4_pstorerhnewfnew_rr
    0U,	// S4_pstorerhnewfnew_zomap
    0U,	// S4_pstorerhnewt_abs
    0U,	// S4_pstorerhnewt_rr
    0U,	// S4_pstorerhnewtnew_abs
    40U,	// S4_pstorerhnewtnew_io
    0U,	// S4_pstorerhnewtnew_rr
    0U,	// S4_pstorerhnewtnew_zomap
    0U,	// S4_pstorerht_abs
    0U,	// S4_pstorerht_rr
    0U,	// S4_pstorerhtnew_abs
    8U,	// S4_pstorerhtnew_io
    0U,	// S4_pstorerhtnew_rr
    0U,	// S4_pstorerhtnew_zomap
    0U,	// S4_pstorerif_abs
    0U,	// S4_pstorerif_rr
    0U,	// S4_pstorerifnew_abs
    8U,	// S4_pstorerifnew_io
    0U,	// S4_pstorerifnew_rr
    0U,	// S4_pstorerifnew_zomap
    0U,	// S4_pstorerinewf_abs
    0U,	// S4_pstorerinewf_rr
    0U,	// S4_pstorerinewfnew_abs
    40U,	// S4_pstorerinewfnew_io
    0U,	// S4_pstorerinewfnew_rr
    0U,	// S4_pstorerinewfnew_zomap
    0U,	// S4_pstorerinewt_abs
    0U,	// S4_pstorerinewt_rr
    0U,	// S4_pstorerinewtnew_abs
    40U,	// S4_pstorerinewtnew_io
    0U,	// S4_pstorerinewtnew_rr
    0U,	// S4_pstorerinewtnew_zomap
    0U,	// S4_pstorerit_abs
    0U,	// S4_pstorerit_rr
    0U,	// S4_pstoreritnew_abs
    8U,	// S4_pstoreritnew_io
    0U,	// S4_pstoreritnew_rr
    0U,	// S4_pstoreritnew_zomap
    0U,	// S4_stored_locked
    0U,	// S4_storeirb_io
    0U,	// S4_storeirb_zomap
    0U,	// S4_storeirbf_io
    0U,	// S4_storeirbf_zomap
    0U,	// S4_storeirbfnew_io
    0U,	// S4_storeirbfnew_zomap
    0U,	// S4_storeirbt_io
    0U,	// S4_storeirbt_zomap
    0U,	// S4_storeirbtnew_io
    0U,	// S4_storeirbtnew_zomap
    0U,	// S4_storeirh_io
    0U,	// S4_storeirh_zomap
    0U,	// S4_storeirhf_io
    0U,	// S4_storeirhf_zomap
    0U,	// S4_storeirhfnew_io
    0U,	// S4_storeirhfnew_zomap
    0U,	// S4_storeirht_io
    0U,	// S4_storeirht_zomap
    0U,	// S4_storeirhtnew_io
    0U,	// S4_storeirhtnew_zomap
    0U,	// S4_storeiri_io
    0U,	// S4_storeiri_zomap
    0U,	// S4_storeirif_io
    0U,	// S4_storeirif_zomap
    0U,	// S4_storeirifnew_io
    0U,	// S4_storeirifnew_zomap
    0U,	// S4_storeirit_io
    0U,	// S4_storeirit_zomap
    0U,	// S4_storeiritnew_io
    0U,	// S4_storeiritnew_zomap
    0U,	// S4_storerb_ap
    0U,	// S4_storerb_rr
    0U,	// S4_storerb_ur
    0U,	// S4_storerbnew_ap
    0U,	// S4_storerbnew_rr
    0U,	// S4_storerbnew_ur
    0U,	// S4_storerd_ap
    0U,	// S4_storerd_rr
    0U,	// S4_storerd_ur
    0U,	// S4_storerf_ap
    0U,	// S4_storerf_rr
    0U,	// S4_storerf_ur
    0U,	// S4_storerh_ap
    0U,	// S4_storerh_rr
    0U,	// S4_storerh_ur
    0U,	// S4_storerhnew_ap
    0U,	// S4_storerhnew_rr
    0U,	// S4_storerhnew_ur
    0U,	// S4_storeri_ap
    0U,	// S4_storeri_rr
    0U,	// S4_storeri_ur
    0U,	// S4_storerinew_ap
    0U,	// S4_storerinew_rr
    0U,	// S4_storerinew_ur
    0U,	// S4_subaddi
    0U,	// S4_subi_asl_ri
    0U,	// S4_subi_lsr_ri
    0U,	// S4_vrcrotate
    0U,	// S4_vrcrotate_acc
    0U,	// S4_vxaddsubh
    0U,	// S4_vxaddsubhr
    0U,	// S4_vxaddsubw
    0U,	// S4_vxsubaddh
    0U,	// S4_vxsubaddhr
    0U,	// S4_vxsubaddw
    0U,	// S5_asrhub_rnd_sat
    0U,	// S5_asrhub_rnd_sat_goodsyntax
    0U,	// S5_asrhub_sat
    0U,	// S5_popcountp
    0U,	// S5_vasrhrnd
    0U,	// S5_vasrhrnd_goodsyntax
    0U,	// S6_allocframe_to_raw
    0U,	// S6_rol_i_p
    0U,	// S6_rol_i_p_acc
    0U,	// S6_rol_i_p_and
    0U,	// S6_rol_i_p_nac
    0U,	// S6_rol_i_p_or
    0U,	// S6_rol_i_p_xacc
    0U,	// S6_rol_i_r
    0U,	// S6_rol_i_r_acc
    0U,	// S6_rol_i_r_and
    0U,	// S6_rol_i_r_nac
    0U,	// S6_rol_i_r_or
    0U,	// S6_rol_i_r_xacc
    0U,	// S6_vsplatrbp
    0U,	// S6_vtrunehb_ppp
    0U,	// S6_vtrunohb_ppp
    0U,	// SA1_addi
    0U,	// SA1_addrx
    0U,	// SA1_addsp
    0U,	// SA1_and1
    0U,	// SA1_clrf
    0U,	// SA1_clrfnew
    0U,	// SA1_clrt
    0U,	// SA1_clrtnew
    0U,	// SA1_cmpeqi
    0U,	// SA1_combine0i
    0U,	// SA1_combine1i
    0U,	// SA1_combine2i
    0U,	// SA1_combine3i
    0U,	// SA1_combinerz
    0U,	// SA1_combinezr
    0U,	// SA1_dec
    0U,	// SA1_inc
    0U,	// SA1_seti
    0U,	// SA1_setin1
    0U,	// SA1_sxtb
    0U,	// SA1_sxth
    0U,	// SA1_tfr
    0U,	// SA1_zxtb
    0U,	// SA1_zxth
    0U,	// SAVE_REGISTERS_CALL_V4
    0U,	// SAVE_REGISTERS_CALL_V4STK
    0U,	// SAVE_REGISTERS_CALL_V4STK_EXT
    0U,	// SAVE_REGISTERS_CALL_V4STK_EXT_PIC
    0U,	// SAVE_REGISTERS_CALL_V4STK_PIC
    0U,	// SAVE_REGISTERS_CALL_V4_EXT
    0U,	// SAVE_REGISTERS_CALL_V4_EXT_PIC
    0U,	// SAVE_REGISTERS_CALL_V4_PIC
    0U,	// SL1_loadri_io
    0U,	// SL1_loadrub_io
    0U,	// SL2_deallocframe
    0U,	// SL2_jumpr31
    0U,	// SL2_jumpr31_f
    0U,	// SL2_jumpr31_fnew
    0U,	// SL2_jumpr31_t
    0U,	// SL2_jumpr31_tnew
    0U,	// SL2_loadrb_io
    0U,	// SL2_loadrd_sp
    0U,	// SL2_loadrh_io
    0U,	// SL2_loadri_sp
    0U,	// SL2_loadruh_io
    0U,	// SL2_return
    0U,	// SL2_return_f
    0U,	// SL2_return_fnew
    0U,	// SL2_return_t
    0U,	// SL2_return_tnew
    0U,	// SS1_storeb_io
    0U,	// SS1_storew_io
    0U,	// SS2_allocframe
    0U,	// SS2_storebi0
    0U,	// SS2_storebi1
    0U,	// SS2_stored_sp
    0U,	// SS2_storeh_io
    0U,	// SS2_storew_sp
    0U,	// SS2_storewi0
    0U,	// SS2_storewi1
    0U,	// STriw_mod
    0U,	// STriw_pred
    0U,	// TFRI64_V2_ext
    0U,	// TFRI64_V4
    0U,	// V6_MAP_equb
    0U,	// V6_MAP_equb_and
    0U,	// V6_MAP_equb_ior
    0U,	// V6_MAP_equb_xor
    0U,	// V6_MAP_equh
    0U,	// V6_MAP_equh_and
    0U,	// V6_MAP_equh_ior
    0U,	// V6_MAP_equh_xor
    0U,	// V6_MAP_equw
    0U,	// V6_MAP_equw_and
    0U,	// V6_MAP_equw_ior
    0U,	// V6_MAP_equw_xor
    0U,	// V6_extractw
    0U,	// V6_extractw_alt
    0U,	// V6_hi
    0U,	// V6_ld0
    0U,	// V6_ldcnp0
    0U,	// V6_ldcnpnt0
    0U,	// V6_ldcp0
    0U,	// V6_ldcpnt0
    0U,	// V6_ldnp0
    0U,	// V6_ldnpnt0
    0U,	// V6_ldnt0
    0U,	// V6_ldntnt0
    0U,	// V6_ldp0
    0U,	// V6_ldpnt0
    0U,	// V6_ldtnp0
    0U,	// V6_ldtnpnt0
    0U,	// V6_ldtp0
    0U,	// V6_ldtpnt0
    0U,	// V6_ldu0
    0U,	// V6_lo
    0U,	// V6_lvsplatb
    0U,	// V6_lvsplath
    0U,	// V6_lvsplatw
    0U,	// V6_pred_and
    0U,	// V6_pred_and_n
    0U,	// V6_pred_not
    0U,	// V6_pred_or
    0U,	// V6_pred_or_n
    0U,	// V6_pred_scalar2
    0U,	// V6_pred_scalar2v2
    0U,	// V6_pred_xor
    0U,	// V6_shuffeqh
    0U,	// V6_shuffeqw
    0U,	// V6_st0
    0U,	// V6_stn0
    0U,	// V6_stnnt0
    0U,	// V6_stnp0
    0U,	// V6_stnpnt0
    0U,	// V6_stnq0
    0U,	// V6_stnqnt0
    0U,	// V6_stnt0
    0U,	// V6_stp0
    0U,	// V6_stpnt0
    0U,	// V6_stq0
    0U,	// V6_stqnt0
    0U,	// V6_stu0
    0U,	// V6_stunp0
    0U,	// V6_stup0
    0U,	// V6_vL32Ub_ai
    0U,	// V6_vL32Ub_pi
    0U,	// V6_vL32Ub_ppu
    0U,	// V6_vL32b_ai
    0U,	// V6_vL32b_cur_ai
    0U,	// V6_vL32b_cur_npred_ai
    0U,	// V6_vL32b_cur_npred_pi
    0U,	// V6_vL32b_cur_npred_ppu
    0U,	// V6_vL32b_cur_pi
    0U,	// V6_vL32b_cur_ppu
    0U,	// V6_vL32b_cur_pred_ai
    0U,	// V6_vL32b_cur_pred_pi
    0U,	// V6_vL32b_cur_pred_ppu
    0U,	// V6_vL32b_npred_ai
    0U,	// V6_vL32b_npred_pi
    0U,	// V6_vL32b_npred_ppu
    0U,	// V6_vL32b_nt_ai
    0U,	// V6_vL32b_nt_cur_ai
    0U,	// V6_vL32b_nt_cur_npred_ai
    0U,	// V6_vL32b_nt_cur_npred_pi
    0U,	// V6_vL32b_nt_cur_npred_ppu
    0U,	// V6_vL32b_nt_cur_pi
    0U,	// V6_vL32b_nt_cur_ppu
    0U,	// V6_vL32b_nt_cur_pred_ai
    0U,	// V6_vL32b_nt_cur_pred_pi
    0U,	// V6_vL32b_nt_cur_pred_ppu
    0U,	// V6_vL32b_nt_npred_ai
    0U,	// V6_vL32b_nt_npred_pi
    0U,	// V6_vL32b_nt_npred_ppu
    0U,	// V6_vL32b_nt_pi
    0U,	// V6_vL32b_nt_ppu
    0U,	// V6_vL32b_nt_pred_ai
    0U,	// V6_vL32b_nt_pred_pi
    0U,	// V6_vL32b_nt_pred_ppu
    0U,	// V6_vL32b_nt_tmp_ai
    0U,	// V6_vL32b_nt_tmp_npred_ai
    0U,	// V6_vL32b_nt_tmp_npred_pi
    0U,	// V6_vL32b_nt_tmp_npred_ppu
    0U,	// V6_vL32b_nt_tmp_pi
    0U,	// V6_vL32b_nt_tmp_ppu
    0U,	// V6_vL32b_nt_tmp_pred_ai
    0U,	// V6_vL32b_nt_tmp_pred_pi
    0U,	// V6_vL32b_nt_tmp_pred_ppu
    0U,	// V6_vL32b_pi
    0U,	// V6_vL32b_ppu
    0U,	// V6_vL32b_pred_ai
    0U,	// V6_vL32b_pred_pi
    0U,	// V6_vL32b_pred_ppu
    0U,	// V6_vL32b_tmp_ai
    0U,	// V6_vL32b_tmp_npred_ai
    0U,	// V6_vL32b_tmp_npred_pi
    0U,	// V6_vL32b_tmp_npred_ppu
    0U,	// V6_vL32b_tmp_pi
    0U,	// V6_vL32b_tmp_ppu
    0U,	// V6_vL32b_tmp_pred_ai
    0U,	// V6_vL32b_tmp_pred_pi
    0U,	// V6_vL32b_tmp_pred_ppu
    0U,	// V6_vS32Ub_ai
    8U,	// V6_vS32Ub_npred_ai
    12U,	// V6_vS32Ub_npred_pi
    12U,	// V6_vS32Ub_npred_ppu
    0U,	// V6_vS32Ub_pi
    0U,	// V6_vS32Ub_ppu
    8U,	// V6_vS32Ub_pred_ai
    12U,	// V6_vS32Ub_pred_pi
    12U,	// V6_vS32Ub_pred_ppu
    0U,	// V6_vS32b_ai
    0U,	// V6_vS32b_new_ai
    40U,	// V6_vS32b_new_npred_ai
    44U,	// V6_vS32b_new_npred_pi
    44U,	// V6_vS32b_new_npred_ppu
    0U,	// V6_vS32b_new_pi
    0U,	// V6_vS32b_new_ppu
    40U,	// V6_vS32b_new_pred_ai
    44U,	// V6_vS32b_new_pred_pi
    44U,	// V6_vS32b_new_pred_ppu
    8U,	// V6_vS32b_npred_ai
    12U,	// V6_vS32b_npred_pi
    12U,	// V6_vS32b_npred_ppu
    8U,	// V6_vS32b_nqpred_ai
    12U,	// V6_vS32b_nqpred_pi
    12U,	// V6_vS32b_nqpred_ppu
    0U,	// V6_vS32b_nt_ai
    0U,	// V6_vS32b_nt_new_ai
    40U,	// V6_vS32b_nt_new_npred_ai
    44U,	// V6_vS32b_nt_new_npred_pi
    44U,	// V6_vS32b_nt_new_npred_ppu
    0U,	// V6_vS32b_nt_new_pi
    0U,	// V6_vS32b_nt_new_ppu
    40U,	// V6_vS32b_nt_new_pred_ai
    44U,	// V6_vS32b_nt_new_pred_pi
    44U,	// V6_vS32b_nt_new_pred_ppu
    8U,	// V6_vS32b_nt_npred_ai
    12U,	// V6_vS32b_nt_npred_pi
    12U,	// V6_vS32b_nt_npred_ppu
    8U,	// V6_vS32b_nt_nqpred_ai
    12U,	// V6_vS32b_nt_nqpred_pi
    12U,	// V6_vS32b_nt_nqpred_ppu
    0U,	// V6_vS32b_nt_pi
    0U,	// V6_vS32b_nt_ppu
    8U,	// V6_vS32b_nt_pred_ai
    12U,	// V6_vS32b_nt_pred_pi
    12U,	// V6_vS32b_nt_pred_ppu
    8U,	// V6_vS32b_nt_qpred_ai
    12U,	// V6_vS32b_nt_qpred_pi
    12U,	// V6_vS32b_nt_qpred_ppu
    0U,	// V6_vS32b_pi
    0U,	// V6_vS32b_ppu
    8U,	// V6_vS32b_pred_ai
    12U,	// V6_vS32b_pred_pi
    12U,	// V6_vS32b_pred_ppu
    8U,	// V6_vS32b_qpred_ai
    12U,	// V6_vS32b_qpred_pi
    12U,	// V6_vS32b_qpred_ppu
    0U,	// V6_vS32b_srls_ai
    0U,	// V6_vS32b_srls_pi
    0U,	// V6_vS32b_srls_ppu
    0U,	// V6_vabsb
    0U,	// V6_vabsb_alt
    0U,	// V6_vabsb_sat
    0U,	// V6_vabsb_sat_alt
    0U,	// V6_vabsdiffh
    0U,	// V6_vabsdiffh_alt
    0U,	// V6_vabsdiffub
    0U,	// V6_vabsdiffub_alt
    0U,	// V6_vabsdiffuh
    0U,	// V6_vabsdiffuh_alt
    0U,	// V6_vabsdiffw
    0U,	// V6_vabsdiffw_alt
    0U,	// V6_vabsh
    0U,	// V6_vabsh_alt
    0U,	// V6_vabsh_sat
    0U,	// V6_vabsh_sat_alt
    0U,	// V6_vabsub_alt
    0U,	// V6_vabsuh_alt
    0U,	// V6_vabsuw_alt
    0U,	// V6_vabsw
    0U,	// V6_vabsw_alt
    0U,	// V6_vabsw_sat
    0U,	// V6_vabsw_sat_alt
    0U,	// V6_vaddb
    0U,	// V6_vaddb_alt
    0U,	// V6_vaddb_dv
    0U,	// V6_vaddb_dv_alt
    0U,	// V6_vaddbnq
    0U,	// V6_vaddbnq_alt
    0U,	// V6_vaddbq
    0U,	// V6_vaddbq_alt
    0U,	// V6_vaddbsat
    0U,	// V6_vaddbsat_alt
    0U,	// V6_vaddbsat_dv
    0U,	// V6_vaddbsat_dv_alt
    0U,	// V6_vaddcarry
    0U,	// V6_vaddclbh
    0U,	// V6_vaddclbw
    0U,	// V6_vaddh
    0U,	// V6_vaddh_alt
    0U,	// V6_vaddh_dv
    0U,	// V6_vaddh_dv_alt
    0U,	// V6_vaddhnq
    0U,	// V6_vaddhnq_alt
    0U,	// V6_vaddhq
    0U,	// V6_vaddhq_alt
    0U,	// V6_vaddhsat
    0U,	// V6_vaddhsat_alt
    0U,	// V6_vaddhsat_dv
    0U,	// V6_vaddhsat_dv_alt
    0U,	// V6_vaddhw
    0U,	// V6_vaddhw_acc
    0U,	// V6_vaddhw_acc_alt
    0U,	// V6_vaddhw_alt
    0U,	// V6_vaddubh
    0U,	// V6_vaddubh_acc
    0U,	// V6_vaddubh_acc_alt
    0U,	// V6_vaddubh_alt
    0U,	// V6_vaddubsat
    0U,	// V6_vaddubsat_alt
    0U,	// V6_vaddubsat_dv
    0U,	// V6_vaddubsat_dv_alt
    0U,	// V6_vaddububb_sat
    0U,	// V6_vadduhsat
    0U,	// V6_vadduhsat_alt
    0U,	// V6_vadduhsat_dv
    0U,	// V6_vadduhsat_dv_alt
    0U,	// V6_vadduhw
    0U,	// V6_vadduhw_acc
    0U,	// V6_vadduhw_acc_alt
    0U,	// V6_vadduhw_alt
    0U,	// V6_vadduwsat
    0U,	// V6_vadduwsat_alt
    0U,	// V6_vadduwsat_dv
    0U,	// V6_vadduwsat_dv_alt
    0U,	// V6_vaddw
    0U,	// V6_vaddw_alt
    0U,	// V6_vaddw_dv
    0U,	// V6_vaddw_dv_alt
    0U,	// V6_vaddwnq
    0U,	// V6_vaddwnq_alt
    0U,	// V6_vaddwq
    0U,	// V6_vaddwq_alt
    1U,	// V6_vaddwsat
    0U,	// V6_vaddwsat_alt
    1U,	// V6_vaddwsat_dv
    0U,	// V6_vaddwsat_dv_alt
    0U,	// V6_valignb
    0U,	// V6_valignbi
    0U,	// V6_vand
    0U,	// V6_vandnqrt
    0U,	// V6_vandnqrt_acc
    0U,	// V6_vandnqrt_acc_alt
    0U,	// V6_vandnqrt_alt
    0U,	// V6_vandqrt
    0U,	// V6_vandqrt_acc
    0U,	// V6_vandqrt_acc_alt
    0U,	// V6_vandqrt_alt
    0U,	// V6_vandvnqv
    0U,	// V6_vandvqv
    0U,	// V6_vandvrt
    0U,	// V6_vandvrt_acc
    0U,	// V6_vandvrt_acc_alt
    0U,	// V6_vandvrt_alt
    0U,	// V6_vaslh
    0U,	// V6_vaslh_acc
    0U,	// V6_vaslh_acc_alt
    0U,	// V6_vaslh_alt
    0U,	// V6_vaslhv
    0U,	// V6_vaslhv_alt
    0U,	// V6_vaslw
    0U,	// V6_vaslw_acc
    0U,	// V6_vaslw_acc_alt
    0U,	// V6_vaslw_alt
    0U,	// V6_vaslwv
    0U,	// V6_vaslwv_alt
    0U,	// V6_vasrh
    0U,	// V6_vasrh_acc
    0U,	// V6_vasrh_acc_alt
    0U,	// V6_vasrh_alt
    0U,	// V6_vasrhbrndsat
    0U,	// V6_vasrhbrndsat_alt
    0U,	// V6_vasrhbsat
    1U,	// V6_vasrhubrndsat
    1U,	// V6_vasrhubrndsat_alt
    0U,	// V6_vasrhubsat
    0U,	// V6_vasrhubsat_alt
    0U,	// V6_vasrhv
    0U,	// V6_vasrhv_alt
    1U,	// V6_vasruhubrndsat
    0U,	// V6_vasruhubsat
    1U,	// V6_vasruwuhrndsat
    0U,	// V6_vasruwuhsat
    0U,	// V6_vasrw
    0U,	// V6_vasrw_acc
    0U,	// V6_vasrw_acc_alt
    0U,	// V6_vasrw_alt
    0U,	// V6_vasrwh
    0U,	// V6_vasrwh_alt
    1U,	// V6_vasrwhrndsat
    0U,	// V6_vasrwhrndsat_alt
    0U,	// V6_vasrwhsat
    0U,	// V6_vasrwhsat_alt
    1U,	// V6_vasrwuhrndsat
    0U,	// V6_vasrwuhsat
    0U,	// V6_vasrwuhsat_alt
    0U,	// V6_vasrwv
    0U,	// V6_vasrwv_alt
    0U,	// V6_vassign
    0U,	// V6_vassignp
    0U,	// V6_vavgb
    0U,	// V6_vavgb_alt
    0U,	// V6_vavgbrnd
    0U,	// V6_vavgbrnd_alt
    0U,	// V6_vavgh
    0U,	// V6_vavgh_alt
    0U,	// V6_vavghrnd
    0U,	// V6_vavghrnd_alt
    0U,	// V6_vavgub
    0U,	// V6_vavgub_alt
    0U,	// V6_vavgubrnd
    0U,	// V6_vavgubrnd_alt
    0U,	// V6_vavguh
    0U,	// V6_vavguh_alt
    0U,	// V6_vavguhrnd
    0U,	// V6_vavguhrnd_alt
    0U,	// V6_vavguw
    0U,	// V6_vavguw_alt
    0U,	// V6_vavguwrnd
    0U,	// V6_vavguwrnd_alt
    0U,	// V6_vavgw
    0U,	// V6_vavgw_alt
    0U,	// V6_vavgwrnd
    0U,	// V6_vavgwrnd_alt
    0U,	// V6_vccombine
    0U,	// V6_vcl0h
    0U,	// V6_vcl0h_alt
    0U,	// V6_vcl0w
    0U,	// V6_vcl0w_alt
    0U,	// V6_vcmov
    0U,	// V6_vcombine
    0U,	// V6_vd0
    0U,	// V6_vdd0
    0U,	// V6_vdeal
    0U,	// V6_vdealb
    0U,	// V6_vdealb4w
    0U,	// V6_vdealb4w_alt
    0U,	// V6_vdealb_alt
    0U,	// V6_vdealh
    0U,	// V6_vdealh_alt
    0U,	// V6_vdealvdd
    0U,	// V6_vdelta
    0U,	// V6_vdmpybus
    0U,	// V6_vdmpybus_acc
    0U,	// V6_vdmpybus_acc_alt
    0U,	// V6_vdmpybus_alt
    0U,	// V6_vdmpybus_dv
    0U,	// V6_vdmpybus_dv_acc
    0U,	// V6_vdmpybus_dv_acc_alt
    0U,	// V6_vdmpybus_dv_alt
    0U,	// V6_vdmpyhb
    0U,	// V6_vdmpyhb_acc
    0U,	// V6_vdmpyhb_acc_alt
    0U,	// V6_vdmpyhb_alt
    0U,	// V6_vdmpyhb_dv
    0U,	// V6_vdmpyhb_dv_acc
    0U,	// V6_vdmpyhb_dv_acc_alt
    0U,	// V6_vdmpyhb_dv_alt
    0U,	// V6_vdmpyhisat
    0U,	// V6_vdmpyhisat_acc
    0U,	// V6_vdmpyhisat_acc_alt
    0U,	// V6_vdmpyhisat_alt
    0U,	// V6_vdmpyhsat
    0U,	// V6_vdmpyhsat_acc
    0U,	// V6_vdmpyhsat_acc_alt
    0U,	// V6_vdmpyhsat_alt
    0U,	// V6_vdmpyhsuisat
    0U,	// V6_vdmpyhsuisat_acc
    0U,	// V6_vdmpyhsuisat_acc_alt
    0U,	// V6_vdmpyhsuisat_alt
    0U,	// V6_vdmpyhsusat
    0U,	// V6_vdmpyhsusat_acc
    0U,	// V6_vdmpyhsusat_acc_alt
    0U,	// V6_vdmpyhsusat_alt
    0U,	// V6_vdmpyhvsat
    0U,	// V6_vdmpyhvsat_acc
    0U,	// V6_vdmpyhvsat_acc_alt
    0U,	// V6_vdmpyhvsat_alt
    0U,	// V6_vdsaduh
    0U,	// V6_vdsaduh_acc
    0U,	// V6_vdsaduh_acc_alt
    0U,	// V6_vdsaduh_alt
    0U,	// V6_veqb
    0U,	// V6_veqb_and
    0U,	// V6_veqb_or
    0U,	// V6_veqb_xor
    0U,	// V6_veqh
    0U,	// V6_veqh_and
    0U,	// V6_veqh_or
    0U,	// V6_veqh_xor
    0U,	// V6_veqw
    0U,	// V6_veqw_and
    0U,	// V6_veqw_or
    0U,	// V6_veqw_xor
    1U,	// V6_vgathermh
    0U,	// V6_vgathermh_pseudo
    0U,	// V6_vgathermhq
    0U,	// V6_vgathermhq_pseudo
    1U,	// V6_vgathermhw
    0U,	// V6_vgathermhw_pseudo
    0U,	// V6_vgathermhwq
    0U,	// V6_vgathermhwq_pseudo
    1U,	// V6_vgathermw
    0U,	// V6_vgathermw_pseudo
    0U,	// V6_vgathermwq
    0U,	// V6_vgathermwq_pseudo
    0U,	// V6_vgtb
    0U,	// V6_vgtb_and
    0U,	// V6_vgtb_or
    0U,	// V6_vgtb_xor
    0U,	// V6_vgth
    0U,	// V6_vgth_and
    0U,	// V6_vgth_or
    0U,	// V6_vgth_xor
    0U,	// V6_vgtub
    0U,	// V6_vgtub_and
    0U,	// V6_vgtub_or
    0U,	// V6_vgtub_xor
    0U,	// V6_vgtuh
    0U,	// V6_vgtuh_and
    0U,	// V6_vgtuh_or
    0U,	// V6_vgtuh_xor
    0U,	// V6_vgtuw
    0U,	// V6_vgtuw_and
    0U,	// V6_vgtuw_or
    0U,	// V6_vgtuw_xor
    0U,	// V6_vgtw
    0U,	// V6_vgtw_and
    0U,	// V6_vgtw_or
    0U,	// V6_vgtw_xor
    0U,	// V6_vhist
    0U,	// V6_vhistq
    0U,	// V6_vinsertwr
    0U,	// V6_vlalignb
    0U,	// V6_vlalignbi
    0U,	// V6_vlsrb
    0U,	// V6_vlsrh
    0U,	// V6_vlsrh_alt
    0U,	// V6_vlsrhv
    0U,	// V6_vlsrhv_alt
    0U,	// V6_vlsrw
    0U,	// V6_vlsrw_alt
    0U,	// V6_vlsrwv
    0U,	// V6_vlsrwv_alt
    0U,	// V6_vlut4
    0U,	// V6_vlutvvb
    0U,	// V6_vlutvvb_nm
    0U,	// V6_vlutvvb_oracc
    0U,	// V6_vlutvvb_oracci
    0U,	// V6_vlutvvbi
    0U,	// V6_vlutvwh
    0U,	// V6_vlutvwh_nm
    0U,	// V6_vlutvwh_oracc
    0U,	// V6_vlutvwh_oracci
    0U,	// V6_vlutvwhi
    0U,	// V6_vmaxb
    0U,	// V6_vmaxb_alt
    0U,	// V6_vmaxh
    0U,	// V6_vmaxh_alt
    0U,	// V6_vmaxub
    0U,	// V6_vmaxub_alt
    0U,	// V6_vmaxuh
    0U,	// V6_vmaxuh_alt
    0U,	// V6_vmaxw
    0U,	// V6_vmaxw_alt
    0U,	// V6_vminb
    0U,	// V6_vminb_alt
    0U,	// V6_vminh
    0U,	// V6_vminh_alt
    0U,	// V6_vminub
    0U,	// V6_vminub_alt
    0U,	// V6_vminuh
    0U,	// V6_vminuh_alt
    0U,	// V6_vminw
    0U,	// V6_vminw_alt
    0U,	// V6_vmpabus
    0U,	// V6_vmpabus_acc
    0U,	// V6_vmpabus_acc_alt
    0U,	// V6_vmpabus_alt
    0U,	// V6_vmpabusv
    0U,	// V6_vmpabusv_alt
    0U,	// V6_vmpabuu
    0U,	// V6_vmpabuu_acc
    0U,	// V6_vmpabuu_acc_alt
    0U,	// V6_vmpabuu_alt
    0U,	// V6_vmpabuuv
    0U,	// V6_vmpabuuv_alt
    0U,	// V6_vmpahb
    0U,	// V6_vmpahb_acc
    0U,	// V6_vmpahb_acc_alt
    0U,	// V6_vmpahb_alt
    1U,	// V6_vmpahhsat
    0U,	// V6_vmpauhb
    0U,	// V6_vmpauhb_acc
    0U,	// V6_vmpauhb_acc_alt
    0U,	// V6_vmpauhb_alt
    1U,	// V6_vmpauhuhsat
    0U,	// V6_vmpsuhuhsat
    0U,	// V6_vmpybus
    0U,	// V6_vmpybus_acc
    0U,	// V6_vmpybus_acc_alt
    0U,	// V6_vmpybus_alt
    0U,	// V6_vmpybusv
    0U,	// V6_vmpybusv_acc
    0U,	// V6_vmpybusv_acc_alt
    0U,	// V6_vmpybusv_alt
    0U,	// V6_vmpybv
    0U,	// V6_vmpybv_acc
    0U,	// V6_vmpybv_acc_alt
    0U,	// V6_vmpybv_alt
    0U,	// V6_vmpyewuh
    0U,	// V6_vmpyewuh_64
    0U,	// V6_vmpyewuh_alt
    0U,	// V6_vmpyh
    0U,	// V6_vmpyh_acc
    0U,	// V6_vmpyh_acc_alt
    0U,	// V6_vmpyh_alt
    0U,	// V6_vmpyhsat_acc
    0U,	// V6_vmpyhsat_acc_alt
    0U,	// V6_vmpyhsrs
    0U,	// V6_vmpyhsrs_alt
    0U,	// V6_vmpyhss
    0U,	// V6_vmpyhss_alt
    0U,	// V6_vmpyhus
    0U,	// V6_vmpyhus_acc
    0U,	// V6_vmpyhus_acc_alt
    0U,	// V6_vmpyhus_alt
    0U,	// V6_vmpyhv
    0U,	// V6_vmpyhv_acc
    0U,	// V6_vmpyhv_acc_alt
    0U,	// V6_vmpyhv_alt
    0U,	// V6_vmpyhvsrs
    0U,	// V6_vmpyhvsrs_alt
    0U,	// V6_vmpyieoh
    0U,	// V6_vmpyiewh_acc
    0U,	// V6_vmpyiewh_acc_alt
    0U,	// V6_vmpyiewuh
    0U,	// V6_vmpyiewuh_acc
    0U,	// V6_vmpyiewuh_acc_alt
    0U,	// V6_vmpyiewuh_alt
    0U,	// V6_vmpyih
    0U,	// V6_vmpyih_acc
    0U,	// V6_vmpyih_acc_alt
    0U,	// V6_vmpyih_alt
    0U,	// V6_vmpyihb
    0U,	// V6_vmpyihb_acc
    0U,	// V6_vmpyihb_acc_alt
    0U,	// V6_vmpyihb_alt
    0U,	// V6_vmpyiowh
    0U,	// V6_vmpyiowh_alt
    0U,	// V6_vmpyiwb
    0U,	// V6_vmpyiwb_acc
    0U,	// V6_vmpyiwb_acc_alt
    0U,	// V6_vmpyiwb_alt
    0U,	// V6_vmpyiwh
    0U,	// V6_vmpyiwh_acc
    0U,	// V6_vmpyiwh_acc_alt
    0U,	// V6_vmpyiwh_alt
    0U,	// V6_vmpyiwub
    0U,	// V6_vmpyiwub_acc
    0U,	// V6_vmpyiwub_acc_alt
    0U,	// V6_vmpyiwub_alt
    0U,	// V6_vmpyowh
    0U,	// V6_vmpyowh_64_acc
    0U,	// V6_vmpyowh_alt
    0U,	// V6_vmpyowh_rnd
    0U,	// V6_vmpyowh_rnd_alt
    0U,	// V6_vmpyowh_rnd_sacc
    0U,	// V6_vmpyowh_rnd_sacc_alt
    0U,	// V6_vmpyowh_sacc
    0U,	// V6_vmpyowh_sacc_alt
    0U,	// V6_vmpyub
    0U,	// V6_vmpyub_acc
    0U,	// V6_vmpyub_acc_alt
    0U,	// V6_vmpyub_alt
    0U,	// V6_vmpyubv
    0U,	// V6_vmpyubv_acc
    0U,	// V6_vmpyubv_acc_alt
    0U,	// V6_vmpyubv_alt
    0U,	// V6_vmpyuh
    0U,	// V6_vmpyuh_acc
    0U,	// V6_vmpyuh_acc_alt
    0U,	// V6_vmpyuh_alt
    0U,	// V6_vmpyuhe
    0U,	// V6_vmpyuhe_acc
    0U,	// V6_vmpyuhv
    0U,	// V6_vmpyuhv_acc
    0U,	// V6_vmpyuhv_acc_alt
    0U,	// V6_vmpyuhv_alt
    0U,	// V6_vmux
    0U,	// V6_vnavgb
    0U,	// V6_vnavgb_alt
    0U,	// V6_vnavgh
    0U,	// V6_vnavgh_alt
    0U,	// V6_vnavgub
    0U,	// V6_vnavgub_alt
    0U,	// V6_vnavgw
    0U,	// V6_vnavgw_alt
    0U,	// V6_vnccombine
    0U,	// V6_vncmov
    0U,	// V6_vnormamth
    0U,	// V6_vnormamth_alt
    0U,	// V6_vnormamtw
    0U,	// V6_vnormamtw_alt
    0U,	// V6_vnot
    0U,	// V6_vor
    0U,	// V6_vpackeb
    0U,	// V6_vpackeb_alt
    0U,	// V6_vpackeh
    0U,	// V6_vpackeh_alt
    0U,	// V6_vpackhb_sat
    0U,	// V6_vpackhb_sat_alt
    0U,	// V6_vpackhub_sat
    0U,	// V6_vpackhub_sat_alt
    0U,	// V6_vpackob
    0U,	// V6_vpackob_alt
    0U,	// V6_vpackoh
    0U,	// V6_vpackoh_alt
    0U,	// V6_vpackwh_sat
    0U,	// V6_vpackwh_sat_alt
    0U,	// V6_vpackwuh_sat
    0U,	// V6_vpackwuh_sat_alt
    0U,	// V6_vpopcounth
    0U,	// V6_vpopcounth_alt
    0U,	// V6_vprefixqb
    0U,	// V6_vprefixqh
    0U,	// V6_vprefixqw
    0U,	// V6_vrdelta
    0U,	// V6_vrmpybub_rtt
    0U,	// V6_vrmpybub_rtt_acc
    0U,	// V6_vrmpybub_rtt_acc_alt
    0U,	// V6_vrmpybub_rtt_alt
    0U,	// V6_vrmpybus
    0U,	// V6_vrmpybus_acc
    0U,	// V6_vrmpybus_acc_alt
    0U,	// V6_vrmpybus_alt
    0U,	// V6_vrmpybusi
    0U,	// V6_vrmpybusi_acc
    0U,	// V6_vrmpybusi_acc_alt
    0U,	// V6_vrmpybusi_alt
    0U,	// V6_vrmpybusv
    0U,	// V6_vrmpybusv_acc
    0U,	// V6_vrmpybusv_acc_alt
    0U,	// V6_vrmpybusv_alt
    0U,	// V6_vrmpybv
    0U,	// V6_vrmpybv_acc
    0U,	// V6_vrmpybv_acc_alt
    0U,	// V6_vrmpybv_alt
    0U,	// V6_vrmpyub
    0U,	// V6_vrmpyub_acc
    0U,	// V6_vrmpyub_acc_alt
    0U,	// V6_vrmpyub_alt
    0U,	// V6_vrmpyub_rtt
    0U,	// V6_vrmpyub_rtt_acc
    0U,	// V6_vrmpyub_rtt_acc_alt
    0U,	// V6_vrmpyub_rtt_alt
    0U,	// V6_vrmpyubi
    0U,	// V6_vrmpyubi_acc
    0U,	// V6_vrmpyubi_acc_alt
    0U,	// V6_vrmpyubi_alt
    0U,	// V6_vrmpyubv
    0U,	// V6_vrmpyubv_acc
    0U,	// V6_vrmpyubv_acc_alt
    0U,	// V6_vrmpyubv_alt
    0U,	// V6_vror
    0U,	// V6_vroundhb
    0U,	// V6_vroundhb_alt
    0U,	// V6_vroundhub
    0U,	// V6_vroundhub_alt
    0U,	// V6_vrounduhub
    0U,	// V6_vrounduhub_alt
    0U,	// V6_vrounduwuh
    0U,	// V6_vrounduwuh_alt
    0U,	// V6_vroundwh
    0U,	// V6_vroundwh_alt
    0U,	// V6_vroundwuh
    0U,	// V6_vroundwuh_alt
    0U,	// V6_vrsadubi
    0U,	// V6_vrsadubi_acc
    0U,	// V6_vrsadubi_acc_alt
    0U,	// V6_vrsadubi_alt
    0U,	// V6_vsathub
    0U,	// V6_vsathub_alt
    0U,	// V6_vsatuwuh
    0U,	// V6_vsatuwuh_alt
    0U,	// V6_vsatwh
    0U,	// V6_vsatwh_alt
    0U,	// V6_vsb
    0U,	// V6_vsb_alt
    1U,	// V6_vscattermh
    1U,	// V6_vscattermh_add
    1U,	// V6_vscattermh_add_alt
    1U,	// V6_vscattermh_alt
    0U,	// V6_vscattermhq
    0U,	// V6_vscattermhq_alt
    1U,	// V6_vscattermhw
    1U,	// V6_vscattermhw_add
    0U,	// V6_vscattermhwq
    1U,	// V6_vscattermw
    1U,	// V6_vscattermw_add
    17U,	// V6_vscattermw_add_alt
    18U,	// V6_vscattermw_alt
    21U,	// V6_vscattermwh_add_alt
    22U,	// V6_vscattermwh_alt
    0U,	// V6_vscattermwhq_alt
    0U,	// V6_vscattermwq
    0U,	// V6_vscattermwq_alt
    0U,	// V6_vsh
    0U,	// V6_vsh_alt
    0U,	// V6_vshufeh
    0U,	// V6_vshufeh_alt
    0U,	// V6_vshuff
    0U,	// V6_vshuffb
    0U,	// V6_vshuffb_alt
    0U,	// V6_vshuffeb
    0U,	// V6_vshuffeb_alt
    0U,	// V6_vshuffh
    0U,	// V6_vshuffh_alt
    0U,	// V6_vshuffob
    0U,	// V6_vshuffob_alt
    0U,	// V6_vshuffvdd
    0U,	// V6_vshufoeb
    0U,	// V6_vshufoeb_alt
    0U,	// V6_vshufoeh
    0U,	// V6_vshufoeh_alt
    0U,	// V6_vshufoh
    0U,	// V6_vshufoh_alt
    0U,	// V6_vsubb
    0U,	// V6_vsubb_alt
    0U,	// V6_vsubb_dv
    0U,	// V6_vsubb_dv_alt
    0U,	// V6_vsubbnq
    0U,	// V6_vsubbnq_alt
    0U,	// V6_vsubbq
    0U,	// V6_vsubbq_alt
    0U,	// V6_vsubbsat
    0U,	// V6_vsubbsat_alt
    0U,	// V6_vsubbsat_dv
    0U,	// V6_vsubbsat_dv_alt
    0U,	// V6_vsubcarry
    0U,	// V6_vsubh
    0U,	// V6_vsubh_alt
    0U,	// V6_vsubh_dv
    0U,	// V6_vsubh_dv_alt
    0U,	// V6_vsubhnq
    0U,	// V6_vsubhnq_alt
    0U,	// V6_vsubhq
    0U,	// V6_vsubhq_alt
    0U,	// V6_vsubhsat
    0U,	// V6_vsubhsat_alt
    0U,	// V6_vsubhsat_dv
    0U,	// V6_vsubhsat_dv_alt
    0U,	// V6_vsubhw
    0U,	// V6_vsubhw_alt
    0U,	// V6_vsububh
    0U,	// V6_vsububh_alt
    0U,	// V6_vsububsat
    0U,	// V6_vsububsat_alt
    0U,	// V6_vsububsat_dv
    0U,	// V6_vsububsat_dv_alt
    0U,	// V6_vsubububb_sat
    0U,	// V6_vsubuhsat
    0U,	// V6_vsubuhsat_alt
    0U,	// V6_vsubuhsat_dv
    0U,	// V6_vsubuhsat_dv_alt
    0U,	// V6_vsubuhw
    0U,	// V6_vsubuhw_alt
    0U,	// V6_vsubuwsat
    0U,	// V6_vsubuwsat_alt
    0U,	// V6_vsubuwsat_dv
    0U,	// V6_vsubuwsat_dv_alt
    0U,	// V6_vsubw
    0U,	// V6_vsubw_alt
    0U,	// V6_vsubw_dv
    0U,	// V6_vsubw_dv_alt
    0U,	// V6_vsubwnq
    0U,	// V6_vsubwnq_alt
    0U,	// V6_vsubwq
    0U,	// V6_vsubwq_alt
    1U,	// V6_vsubwsat
    0U,	// V6_vsubwsat_alt
    1U,	// V6_vsubwsat_dv
    0U,	// V6_vsubwsat_dv_alt
    0U,	// V6_vswap
    0U,	// V6_vtmpyb
    0U,	// V6_vtmpyb_acc
    0U,	// V6_vtmpyb_acc_alt
    0U,	// V6_vtmpyb_alt
    0U,	// V6_vtmpybus
    0U,	// V6_vtmpybus_acc
    0U,	// V6_vtmpybus_acc_alt
    0U,	// V6_vtmpybus_alt
    0U,	// V6_vtmpyhb
    0U,	// V6_vtmpyhb_acc
    0U,	// V6_vtmpyhb_acc_alt
    0U,	// V6_vtmpyhb_alt
    0U,	// V6_vtran2x2_map
    0U,	// V6_vunpackb
    0U,	// V6_vunpackb_alt
    0U,	// V6_vunpackh
    0U,	// V6_vunpackh_alt
    0U,	// V6_vunpackob
    0U,	// V6_vunpackob_alt
    0U,	// V6_vunpackoh
    0U,	// V6_vunpackoh_alt
    0U,	// V6_vunpackub
    0U,	// V6_vunpackub_alt
    0U,	// V6_vunpackuh
    0U,	// V6_vunpackuh_alt
    0U,	// V6_vwhist128
    0U,	// V6_vwhist128m
    0U,	// V6_vwhist128q
    0U,	// V6_vwhist128qm
    0U,	// V6_vwhist256
    0U,	// V6_vwhist256_sat
    0U,	// V6_vwhist256q
    0U,	// V6_vwhist256q_sat
    0U,	// V6_vxor
    0U,	// V6_vzb
    0U,	// V6_vzb_alt
    0U,	// V6_vzh
    0U,	// V6_vzh_alt
    0U,	// Y2_barrier
    0U,	// Y2_break
    0U,	// Y2_dccleana
    0U,	// Y2_dccleaninva
    0U,	// Y2_dcfetch
    0U,	// Y2_dcfetchbo
    0U,	// Y2_dcinva
    0U,	// Y2_dczeroa
    0U,	// Y2_icinva
    0U,	// Y2_isync
    0U,	// Y2_syncht
    0U,	// Y4_l2fetch
    0U,	// Y4_trace
    0U,	// Y5_l2fetch
    2U,	// dep_A2_addsat
    2U,	// dep_A2_subsat
    0U,	// dep_S2_packhl
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 11) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // A2_abs, A2_absp, A2_abssat, A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2...
    printOperand(MI, 0, O);
    break;
  case 2:
    // A2_paddf, A2_paddfnew, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    printOperand(MI, 1, O);
    break;
  case 3:
    // CALLProfile, J2_call, J2_jump, J2_loop0i, J2_loop0iext, J2_loop0r, J2_...
    printBrtarget(MI, 0, O);
    break;
  case 4:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    printOperand(MI, 2, O);
    break;
  }


  // Fragment 1 encoded into 10 bits for 786 unique commands.
  switch ((Bits >> 14) & 1023) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_abssat
    O << " = abs(";
    printOperand(MI, 1, O);
    break;
  case 1:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    O << " = add(";
    break;
  case 2:
    // A2_and, A2_andir, A2_andp, A4_andn, A4_andnp, C2_and, C2_andn, C4_and_...
    O << " = and(";
    printOperand(MI, 1, O);
    break;
  case 3:
    // A2_aslh
    O << " = aslh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 4:
    // A2_asrh
    O << " = asrh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 5:
    // A2_combine_hh, A2_combine_hl, A2_combine_lh, A2_combine_ll, A2_combine...
    O << " = combine(";
    printOperand(MI, 1, O);
    break;
  case 6:
    // A2_combineii, A4_combineii, A4_combineir
    O << " = combine(#";
    printOperand(MI, 1, O);
    break;
  case 7:
    // A2_iconst
    O << "=iconst(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 8:
    // A2_max, A2_maxp
    O << " = max(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 9:
    // A2_maxu, A2_maxup
    O << " = maxu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 10:
    // A2_min, A2_minp
    O << " = min(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 11:
    // A2_minu, A2_minup
    O << " = minu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 12:
    // A2_neg, A2_negp, A2_negsat
    O << " = neg(";
    printOperand(MI, 1, O);
    break;
  case 13:
    // A2_not, A2_notp, C2_not, V6_pred_not
    O << " = not(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 14:
    // A2_or, A2_orir, A2_orp, A4_orn, A4_ornp, C2_or, C2_orn, C4_or_and, C4_...
    O << " = or(";
    printOperand(MI, 1, O);
    break;
  case 15:
    // A2_paddf, A2_paddif, A2_paddit, A2_paddt, A2_pandf, A2_pandt, A2_porf,...
    O << ") ";
    printOperand(MI, 0, O);
    break;
  case 16:
    // A2_paddfnew, A2_paddifnew, A2_padditnew, A2_paddtnew, A2_pandfnew, A2_...
    O << ".new) ";
    printOperand(MI, 0, O);
    break;
  case 17:
    // A2_roundsat, A4_round_ri, A4_round_ri_sat, A4_round_rr, A4_round_rr_sa...
    O << " = round(";
    printOperand(MI, 1, O);
    break;
  case 18:
    // A2_sat
    O << " = sat(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 19:
    // A2_satb
    O << " = satb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 20:
    // A2_sath
    O << " = sath(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 21:
    // A2_satub
    O << " = satub(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 22:
    // A2_satuh
    O << " = satuh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 23:
    // A2_sub, A2_subh_h16_hh, A2_subh_h16_hl, A2_subh_h16_lh, A2_subh_h16_ll...
    O << " = sub(";
    break;
  case 24:
    // A2_subri, S4_subi_asl_ri, S4_subi_lsr_ri
    O << " = sub(#";
    printOperand(MI, 1, O);
    break;
  case 25:
    // A2_svaddh, A2_svaddhs, A2_vaddh, A2_vaddhs, V6_vaddh_alt, V6_vaddh_dv_...
    O << " = vaddh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 26:
    // A2_svadduhs, A2_vadduhs, V6_vadduhsat_alt, V6_vadduhsat_dv_alt, V6_vad...
    O << " = vadduh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 27:
    // A2_svavgh, A2_svavghs, A2_vavgh, A2_vavghcr, A2_vavghr, V6_vavgh_alt, ...
    O << " = vavgh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 28:
    // A2_svnavgh, A2_vnavgh, A2_vnavghcr, A2_vnavghr, V6_vnavgh_alt
    O << " = vnavgh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 29:
    // A2_svsubh, A2_svsubhs, A2_vsubh, A2_vsubhs, V6_vsubh_alt, V6_vsubh_dv_...
    O << " = vsubh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 30:
    // A2_svsubuhs, A2_vsubuhs, V6_vsubuhsat_alt, V6_vsubuhsat_dv_alt, V6_vsu...
    O << " = vsubuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 31:
    // A2_swiz
    O << " = swiz(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 32:
    // A2_sxtb, SA1_sxtb
    O << " = sxtb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 33:
    // A2_sxth, SA1_sxth
    O << " = sxth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 34:
    // A2_sxtw
    O << " = sxtw(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 35:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrrcr, A4_tfrcpp, A4_tfrpcp, C2_pxfer_...
    O << " = ";
    printOperand(MI, 1, O);
    break;
  case 36:
    // A2_tfrih
    O << ".h = #";
    printOperand(MI, 2, O);
    return;
    break;
  case 37:
    // A2_tfril
    O << ".l = #";
    printOperand(MI, 2, O);
    return;
    break;
  case 38:
    // A2_tfrpi, A2_tfrsi, J4_jumpseti, SA1_seti, SA1_setin1, TFRI64_V4
    O << " = #";
    printOperand(MI, 1, O);
    break;
  case 39:
    // A2_vabsh, A2_vabshsat, V6_vabsh_alt, V6_vabsh_sat_alt
    O << " = vabsh(";
    printOperand(MI, 1, O);
    break;
  case 40:
    // A2_vabsw, A2_vabswsat, V6_vabsw_alt, V6_vabsw_sat_alt
    O << " = vabsw(";
    printOperand(MI, 1, O);
    break;
  case 41:
    // A2_vaddb_map, V6_vaddb_alt, V6_vaddb_dv_alt, V6_vaddbsat_alt, V6_vaddb...
    O << " = vaddb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 42:
    // A2_vaddub, A2_vaddubs, V6_vaddubh_alt, V6_vaddubsat_alt, V6_vaddubsat_...
    O << " = vaddub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 43:
    // A2_vaddw, A2_vaddws, V6_vaddw_alt, V6_vaddw_dv_alt, V6_vaddwsat_alt, V...
    O << " = vaddw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 44:
    // A2_vavgub, A2_vavgubr, V6_vavgub_alt, V6_vavgubrnd_alt
    O << " = vavgub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 45:
    // A2_vavguh, A2_vavguhr, V6_vavguh_alt, V6_vavguhrnd_alt
    O << " = vavguh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 46:
    // A2_vavguw, A2_vavguwr, V6_vavguw_alt, V6_vavguwrnd_alt
    O << " = vavguw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 47:
    // A2_vavgw, A2_vavgwcr, A2_vavgwr, V6_vavgw_alt, V6_vavgwrnd_alt
    O << " = vavgw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 48:
    // A2_vcmpbeq, A4_vcmpbeqi
    O << " = vcmpb.eq(";
    printOperand(MI, 1, O);
    break;
  case 49:
    // A2_vcmpbgtu, A4_vcmpbgtui
    O << " = vcmpb.gtu(";
    printOperand(MI, 1, O);
    break;
  case 50:
    // A2_vcmpheq, A4_vcmpheqi
    O << " = vcmph.eq(";
    printOperand(MI, 1, O);
    break;
  case 51:
    // A2_vcmphgt, A4_vcmphgti
    O << " = vcmph.gt(";
    printOperand(MI, 1, O);
    break;
  case 52:
    // A2_vcmphgtu, A4_vcmphgtui
    O << " = vcmph.gtu(";
    printOperand(MI, 1, O);
    break;
  case 53:
    // A2_vcmpweq, A4_vcmpweqi
    O << " = vcmpw.eq(";
    printOperand(MI, 1, O);
    break;
  case 54:
    // A2_vcmpwgt, A4_vcmpwgti
    O << " = vcmpw.gt(";
    printOperand(MI, 1, O);
    break;
  case 55:
    // A2_vcmpwgtu, A4_vcmpwgtui
    O << " = vcmpw.gtu(";
    printOperand(MI, 1, O);
    break;
  case 56:
    // A2_vconj
    O << " = vconj(";
    printOperand(MI, 1, O);
    O << "):sat";
    return;
    break;
  case 57:
    // A2_vmaxb, V6_vmaxb_alt
    O << " = vmaxb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 58:
    // A2_vmaxh, V6_vmaxh_alt
    O << " = vmaxh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 59:
    // A2_vmaxub, V6_vmaxub_alt
    O << " = vmaxub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 60:
    // A2_vmaxuh, V6_vmaxuh_alt
    O << " = vmaxuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 61:
    // A2_vmaxuw
    O << " = vmaxuw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 62:
    // A2_vmaxw, V6_vmaxw_alt
    O << " = vmaxw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 63:
    // A2_vminb, V6_vminb_alt
    O << " = vminb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 64:
    // A2_vminh, V6_vminh_alt
    O << " = vminh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 65:
    // A2_vminub, V6_vminub_alt
    O << " = vminub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 66:
    // A2_vminuh, V6_vminuh_alt
    O << " = vminuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 67:
    // A2_vminuw
    O << " = vminuw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 68:
    // A2_vminw, V6_vminw_alt
    O << " = vminw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 69:
    // A2_vnavgw, A2_vnavgwcr, A2_vnavgwr, V6_vnavgw_alt
    O << " = vnavgw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 70:
    // A2_vraddub
    O << " = vraddub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 71:
    // A2_vraddub_acc
    O << " += vraddub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 72:
    // A2_vrsadub, V6_vrsadubi_alt
    O << " = vrsadub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 73:
    // A2_vrsadub_acc, V6_vrsadubi_acc_alt
    O << " += vrsadub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 74:
    // A2_vsubb_map, V6_vsubb_alt, V6_vsubb_dv_alt, V6_vsubbsat_alt, V6_vsubb...
    O << " = vsubb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 75:
    // A2_vsubub, A2_vsububs, V6_vsububh_alt, V6_vsububsat_alt, V6_vsububsat_...
    O << " = vsubub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 76:
    // A2_vsubw, A2_vsubws, V6_vsubw_alt, V6_vsubw_dv_alt, V6_vsubwsat_alt, V...
    O << " = vsubw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 77:
    // A2_xor, A2_xorp, C2_xor, V6_pred_xor
    O << " = xor(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 78:
    // A2_zxtb
    O << " = zxtb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 79:
    // A2_zxth, SA1_zxth
    O << " = zxth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 80:
    // A4_bitsplit, A4_bitspliti
    O << " = bitsplit(";
    printOperand(MI, 1, O);
    break;
  case 81:
    // A4_boundscheck, A4_boundscheck_hi, A4_boundscheck_lo
    O << " = boundscheck(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 82:
    // A4_cmpbeq, A4_cmpbeqi
    O << " = cmpb.eq(";
    printOperand(MI, 1, O);
    break;
  case 83:
    // A4_cmpbgt, A4_cmpbgti
    O << " = cmpb.gt(";
    printOperand(MI, 1, O);
    break;
  case 84:
    // A4_cmpbgtu, A4_cmpbgtui
    O << " = cmpb.gtu(";
    printOperand(MI, 1, O);
    break;
  case 85:
    // A4_cmpheq, A4_cmpheqi
    O << " = cmph.eq(";
    printOperand(MI, 1, O);
    break;
  case 86:
    // A4_cmphgt, A4_cmphgti
    O << " = cmph.gt(";
    printOperand(MI, 1, O);
    break;
  case 87:
    // A4_cmphgtu, A4_cmphgtui
    O << " = cmph.gtu(";
    printOperand(MI, 1, O);
    break;
  case 88:
    // A4_cround_ri, A4_cround_rr
    O << " = cround(";
    printOperand(MI, 1, O);
    break;
  case 89:
    // A4_ext, J2_pause, J2_trap0, J4_hintjumpr, S6_allocframe_to_raw, SS2_al...
    O << ')';
    return;
    break;
  case 90:
    // A4_modwrapu
    O << " = modwrap(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 91:
    // A4_rcmpeq, A4_rcmpeqi, C2_cmpeq, C2_cmpeqi, C2_cmpeqp
    O << " = cmp.eq(";
    printOperand(MI, 1, O);
    break;
  case 92:
    // A4_rcmpneq, A4_rcmpneqi, C4_cmpneq, C4_cmpneqi
    O << " = !cmp.eq(";
    printOperand(MI, 1, O);
    break;
  case 93:
    // A4_tlbmatch
    O << " = tlbmatch(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 94:
    // A4_vcmpbeq_any
    O << " = any8(vcmpb.eq(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "))";
    return;
    break;
  case 95:
    // A4_vcmpbgt, A4_vcmpbgti
    O << " = vcmpb.gt(";
    printOperand(MI, 1, O);
    break;
  case 96:
    // A4_vrmaxh
    O << " = vrmaxh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 97:
    // A4_vrmaxuh
    O << " = vrmaxuh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 98:
    // A4_vrmaxuw
    O << " = vrmaxuw(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 99:
    // A4_vrmaxw
    O << " = vrmaxw(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 100:
    // A4_vrminh
    O << " = vrminh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 101:
    // A4_vrminuh
    O << " = vrminuh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 102:
    // A4_vrminuw
    O << " = vrminuw(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 103:
    // A4_vrminw
    O << " = vrminw(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 104:
    // A5_ACS, A6_vminub_RdP, F2_sfinvsqrta, F2_sfrecipa, J2_loop0r, J2_loop0...
    O << ',';
    break;
  case 105:
    // A5_vaddhubs
    O << " = vaddhub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 106:
    // A6_vcmpbeq_notany
    O << " = !any8(vcmpb.eq(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "))";
    return;
    break;
  case 107:
    // C2_all8
    O << " = all8(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 108:
    // C2_any8
    O << " = any8(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 109:
    // C2_bitsclr, C2_bitsclri
    O << " = bitsclr(";
    printOperand(MI, 1, O);
    break;
  case 110:
    // C2_bitsset
    O << " = bitsset(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 111:
    // C2_cmpgei
    O << " = cmp.ge(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 112:
    // C2_cmpgeui
    O << " = cmp.geu(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 113:
    // C2_cmpgt, C2_cmpgti, C2_cmpgtp
    O << " = cmp.gt(";
    printOperand(MI, 1, O);
    break;
  case 114:
    // C2_cmpgtu, C2_cmpgtui, C2_cmpgtup
    O << " = cmp.gtu(";
    printOperand(MI, 1, O);
    break;
  case 115:
    // C2_cmplt
    O << " = cmp.lt(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 116:
    // C2_cmpltu
    O << " = cmp.ltu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 117:
    // C2_mask
    O << " = mask(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 118:
    // C2_mux, C2_muxii, C2_muxir, C2_muxri
    O << " = mux(";
    printOperand(MI, 1, O);
    break;
  case 119:
    // C2_vitpack
    O << " = vitpack(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 120:
    // C2_vmux, V6_vmux
    O << " = vmux(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 121:
    // C4_addipc
    O << " = add(pc,#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 122:
    // C4_cmplte, C4_cmpltei
    O << " = !cmp.gt(";
    printOperand(MI, 1, O);
    break;
  case 123:
    // C4_cmplteu, C4_cmplteui
    O << " = !cmp.gtu(";
    printOperand(MI, 1, O);
    break;
  case 124:
    // C4_fastcorner9
    O << " = fastcorner9(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 125:
    // C4_fastcorner9_not
    O << " = !fastcorner9(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 126:
    // C4_nbitsclr, C4_nbitsclri
    O << " = !bitsclr(";
    printOperand(MI, 1, O);
    break;
  case 127:
    // C4_nbitsset
    O << " = !bitsset(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 128:
    // CALLProfile, EH_RETURN_JMPR, J2_call, J2_callr, J2_jump, J2_jumpr, PS_...
    return;
    break;
  case 129:
    // CONST32
    O << " = CONST32(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 130:
    // CONST64
    O << " = CONST64(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 131:
    // F2_conv_d2df
    O << " = convert_d2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 132:
    // F2_conv_d2sf
    O << " = convert_d2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 133:
    // F2_conv_df2d, F2_conv_df2d_chop
    O << " = convert_df2d(";
    printOperand(MI, 1, O);
    break;
  case 134:
    // F2_conv_df2sf
    O << " = convert_df2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 135:
    // F2_conv_df2ud, F2_conv_df2ud_chop
    O << " = convert_df2ud(";
    printOperand(MI, 1, O);
    break;
  case 136:
    // F2_conv_df2uw, F2_conv_df2uw_chop
    O << " = convert_df2uw(";
    printOperand(MI, 1, O);
    break;
  case 137:
    // F2_conv_df2w, F2_conv_df2w_chop
    O << " = convert_df2w(";
    printOperand(MI, 1, O);
    break;
  case 138:
    // F2_conv_sf2d, F2_conv_sf2d_chop
    O << " = convert_sf2d(";
    printOperand(MI, 1, O);
    break;
  case 139:
    // F2_conv_sf2df
    O << " = convert_sf2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 140:
    // F2_conv_sf2ud, F2_conv_sf2ud_chop
    O << " = convert_sf2ud(";
    printOperand(MI, 1, O);
    break;
  case 141:
    // F2_conv_sf2uw, F2_conv_sf2uw_chop
    O << " = convert_sf2uw(";
    printOperand(MI, 1, O);
    break;
  case 142:
    // F2_conv_sf2w, F2_conv_sf2w_chop
    O << " = convert_sf2w(";
    printOperand(MI, 1, O);
    break;
  case 143:
    // F2_conv_ud2df
    O << " = convert_ud2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 144:
    // F2_conv_ud2sf
    O << " = convert_ud2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 145:
    // F2_conv_uw2df
    O << " = convert_uw2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 146:
    // F2_conv_uw2sf
    O << " = convert_uw2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 147:
    // F2_conv_w2df
    O << " = convert_w2df(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 148:
    // F2_conv_w2sf
    O << " = convert_w2sf(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 149:
    // F2_dfclass
    O << " = dfclass(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 150:
    // F2_dfcmpeq
    O << " = dfcmp.eq(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 151:
    // F2_dfcmpge
    O << " = dfcmp.ge(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 152:
    // F2_dfcmpgt
    O << " = dfcmp.gt(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 153:
    // F2_dfcmpuo
    O << " = dfcmp.uo(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 154:
    // F2_dfimm_n, F2_dfimm_p
    O << " = dfmake(#";
    printOperand(MI, 1, O);
    break;
  case 155:
    // F2_sfadd
    O << " = sfadd(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 156:
    // F2_sfclass
    O << " = sfclass(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 157:
    // F2_sfcmpeq
    O << " = sfcmp.eq(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 158:
    // F2_sfcmpge
    O << " = sfcmp.ge(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 159:
    // F2_sfcmpgt
    O << " = sfcmp.gt(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 160:
    // F2_sfcmpuo
    O << " = sfcmp.uo(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 161:
    // F2_sffixupd
    O << " = sffixupd(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 162:
    // F2_sffixupn
    O << " = sffixupn(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 163:
    // F2_sffixupr
    O << " = sffixupr(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 164:
    // F2_sffma, F2_sffma_lib, F2_sffma_sc
    O << " += sfmpy(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 165:
    // F2_sffms, F2_sffms_lib
    O << " -= sfmpy(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 166:
    // F2_sfimm_n, F2_sfimm_p
    O << " = sfmake(#";
    printOperand(MI, 1, O);
    break;
  case 167:
    // F2_sfmax
    O << " = sfmax(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 168:
    // F2_sfmin
    O << " = sfmin(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 169:
    // F2_sfmpy
    O << " = sfmpy(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 170:
    // F2_sfsub
    O << " = sfsub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 171:
    // HI
    O << ".h=#";
    printOperand(MI, 1, O);
    return;
    break;
  case 172:
    // J2_callf, J2_callt
    O << ") call ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 173:
    // J2_callrf, J2_callrt
    O << ") callr ";
    printOperand(MI, 1, O);
    return;
    break;
  case 174:
    // J2_jumpf, J2_jumpt
    O << ") jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 175:
    // J2_jumpf_nopred_map, J2_jumpt_nopred_map
    O << ") jump ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 176:
    // J2_jumpfnew, J2_jumptnew
    O << ".new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 177:
    // J2_jumpfnewpt, J2_jumptnewpt
    O << ".new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 178:
    // J2_jumpfpt, J2_jumptpt
    O << ") jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 179:
    // J2_jumprf, J2_jumprt, PS_jmpretf, PS_jmprett
    O << ") jumpr:nt ";
    printOperand(MI, 1, O);
    return;
    break;
  case 180:
    // J2_jumprf_nopred_map, J2_jumprt_nopred_map
    O << ") jumpr ";
    printOperand(MI, 1, O);
    return;
    break;
  case 181:
    // J2_jumprfnew, J2_jumprtnew, PS_jmpretfnew, PS_jmprettnew
    O << ".new) jumpr:nt ";
    printOperand(MI, 1, O);
    return;
    break;
  case 182:
    // J2_jumprfnewpt, J2_jumprtnewpt, PS_jmpretfnewpt, PS_jmprettnewpt
    O << ".new) jumpr:t ";
    printOperand(MI, 1, O);
    return;
    break;
  case 183:
    // J2_jumprfpt, J2_jumprtpt
    O << ") jumpr:t ";
    printOperand(MI, 1, O);
    return;
    break;
  case 184:
    // J2_jumprgtez
    O << ">=#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 185:
    // J2_jumprgtezpt
    O << ">=#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 186:
    // J2_jumprltez
    O << "<=#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 187:
    // J2_jumprltezpt
    O << "<=#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 188:
    // J2_jumprnz
    O << "==#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 189:
    // J2_jumprnzpt
    O << "==#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 190:
    // J2_jumprz
    O << "!=#0) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 191:
    // J2_jumprzpt
    O << "!=#0) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 192:
    // J2_loop0i, J2_loop0iext, J2_loop1i, J2_loop1iext, J2_ploop1si, J2_ploo...
    O << ",#";
    break;
  case 193:
    // J4_cmpeq_f_jumpnv_nt, J4_cmpeq_f_jumpnv_t, J4_cmpeq_t_jumpnv_nt, J4_cm...
    O << ".new,";
    printOperand(MI, 1, O);
    break;
  case 194:
    // J4_cmpeqi_f_jumpnv_nt, J4_cmpeqi_f_jumpnv_t, J4_cmpeqi_t_jumpnv_nt, J4...
    O << ".new,#";
    printOperand(MI, 1, O);
    break;
  case 195:
    // J4_tstbit0_f_jumpnv_nt, J4_tstbit0_t_jumpnv_nt
    O << ".new,#0)) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 196:
    // J4_tstbit0_f_jumpnv_t, J4_tstbit0_t_jumpnv_t
    O << ".new,#0)) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 197:
    // J4_tstbit0_fp0_jump_nt
    O << ",#0); if (!p0.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 198:
    // J4_tstbit0_fp0_jump_t
    O << ",#0); if (!p0.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 199:
    // J4_tstbit0_fp1_jump_nt
    O << ",#0); if (!p1.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 200:
    // J4_tstbit0_fp1_jump_t
    O << ",#0); if (!p1.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 201:
    // J4_tstbit0_tp0_jump_nt
    O << ",#0); if (p0.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 202:
    // J4_tstbit0_tp0_jump_t
    O << ",#0); if (p0.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 203:
    // J4_tstbit0_tp1_jump_nt
    O << ",#0); if (p1.new) jump:nt ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 204:
    // J4_tstbit0_tp1_jump_t
    O << ",#0); if (p1.new) jump:t ";
    printBrtarget(MI, 1, O);
    return;
    break;
  case 205:
    // L2_deallocframe
    O << " = deallocframe(";
    printOperand(MI, 1, O);
    O << "):raw";
    return;
    break;
  case 206:
    // L2_loadalignb_io, L2_loadalignb_pbr, L2_loadalignb_pci, L2_loadalignb_...
    O << " = memb_fifo(";
    break;
  case 207:
    // L2_loadalignh_io, L2_loadalignh_pbr, L2_loadalignh_pci, L2_loadalignh_...
    O << " = memh_fifo(";
    break;
  case 208:
    // L2_loadbsw2_io, L2_loadbsw2_pbr, L2_loadbsw2_pci, L2_loadbsw2_pcr, L2_...
    O << " = membh(";
    printOperand(MI, 1, O);
    break;
  case 209:
    // L2_loadbzw2_io, L2_loadbzw2_pbr, L2_loadbzw2_pci, L2_loadbzw2_pcr, L2_...
    O << " = memubh(";
    printOperand(MI, 1, O);
    break;
  case 210:
    // L2_loadrb_io, L2_loadrb_pbr, L2_loadrb_pci, L2_loadrb_pcr, L2_loadrb_p...
    O << " = memb(";
    printOperand(MI, 1, O);
    break;
  case 211:
    // L2_loadrbgp
    O << " = memb(gp+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 212:
    // L2_loadrd_io, L2_loadrd_pbr, L2_loadrd_pci, L2_loadrd_pcr, L2_loadrd_p...
    O << " = memd(";
    printOperand(MI, 1, O);
    break;
  case 213:
    // L2_loadrdgp
    O << " = memd(gp+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 214:
    // L2_loadrh_io, L2_loadrh_pbr, L2_loadrh_pci, L2_loadrh_pcr, L2_loadrh_p...
    O << " = memh(";
    printOperand(MI, 1, O);
    break;
  case 215:
    // L2_loadrhgp
    O << " = memh(gp+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 216:
    // L2_loadri_io, L2_loadri_pbr, L2_loadri_pci, L2_loadri_pcr, L2_loadri_p...
    O << " = memw(";
    printOperand(MI, 1, O);
    break;
  case 217:
    // L2_loadrigp
    O << " = memw(gp+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 218:
    // L2_loadrub_io, L2_loadrub_pbr, L2_loadrub_pci, L2_loadrub_pcr, L2_load...
    O << " = memub(";
    printOperand(MI, 1, O);
    break;
  case 219:
    // L2_loadrubgp
    O << " = memub(gp+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 220:
    // L2_loadruh_io, L2_loadruh_pbr, L2_loadruh_pci, L2_loadruh_pcr, L2_load...
    O << " = memuh(";
    printOperand(MI, 1, O);
    break;
  case 221:
    // L2_loadruhgp
    O << " = memuh(gp+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 222:
    // L2_loadw_locked
    O << " = memw_locked(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 223:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io, L4_and_memopb_io...
    O << "+#";
    printOperand(MI, 1, O);
    break;
  case 224:
    // L4_add_memopb_zomap, L4_add_memoph_zomap, L4_add_memopw_zomap
    O << ") += ";
    printOperand(MI, 1, O);
    return;
    break;
  case 225:
    // L4_and_memopb_zomap, L4_and_memoph_zomap, L4_and_memopw_zomap
    O << ") &= ";
    printOperand(MI, 1, O);
    return;
    break;
  case 226:
    // L4_iadd_memopb_zomap, L4_iadd_memoph_zomap, L4_iadd_memopw_zomap
    O << ") += #";
    printOperand(MI, 1, O);
    return;
    break;
  case 227:
    // L4_iand_memopb_zomap, L4_iand_memoph_zomap, L4_iand_memopw_zomap
    O << ") = clrbit(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 228:
    // L4_ior_memopb_zomap, L4_ior_memoph_zomap, L4_ior_memopw_zomap
    O << ") = setbit(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 229:
    // L4_isub_memopb_zomap, L4_isub_memoph_zomap, L4_isub_memopw_zomap
    O << ") -= #";
    printOperand(MI, 1, O);
    return;
    break;
  case 230:
    // L4_loadd_locked
    O << " = memd_locked(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 231:
    // L4_or_memopb_zomap, L4_or_memoph_zomap, L4_or_memopw_zomap
    O << ") |= ";
    printOperand(MI, 1, O);
    return;
    break;
  case 232:
    // L4_return
    O << " = dealloc_return(";
    printOperand(MI, 1, O);
    O << "):raw";
    return;
    break;
  case 233:
    // L4_return_map_to_raw_f, L4_return_map_to_raw_t
    O << ") dealloc_return";
    return;
    break;
  case 234:
    // L4_return_map_to_raw_fnew_pnt, L4_return_map_to_raw_tnew_pnt
    O << ".new) dealloc_return:nt";
    return;
    break;
  case 235:
    // L4_return_map_to_raw_fnew_pt, L4_return_map_to_raw_tnew_pt
    O << ".new) dealloc_return:t";
    return;
    break;
  case 236:
    // L4_sub_memopb_zomap, L4_sub_memoph_zomap, L4_sub_memopw_zomap
    O << ") -= ";
    printOperand(MI, 1, O);
    return;
    break;
  case 237:
    // LO
    O << ".l=#";
    printOperand(MI, 1, O);
    return;
    break;
  case 238:
    // M2_acci, M2_accii
    O << " += add(";
    printOperand(MI, 2, O);
    break;
  case 239:
    // M2_cmaci_s0
    O << " += cmpyi(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 240:
    // M2_cmacr_s0
    O << " += cmpyr(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 241:
    // M2_cmacs_s0, M2_cmacs_s1, M2_cmacsc_s0, M2_cmacsc_s1
    O << " += cmpy(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 242:
    // M2_cmpyi_s0
    O << " = cmpyi(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 243:
    // M2_cmpyr_s0
    O << " = cmpyr(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 244:
    // M2_cmpyrs_s0, M2_cmpyrs_s1, M2_cmpyrsc_s0, M2_cmpyrsc_s1, M2_cmpys_s0,...
    O << " = cmpy(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 245:
    // M2_cnacs_s0, M2_cnacs_s1, M2_cnacsc_s0, M2_cnacsc_s1
    O << " -= cmpy(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 246:
    // M2_dpmpyss_acc_s0, M2_mpy_acc_hh_s0, M2_mpy_acc_hh_s1, M2_mpy_acc_hl_s...
    O << " += mpy(";
    printOperand(MI, 2, O);
    break;
  case 247:
    // M2_dpmpyss_nac_s0, M2_mpy_nac_hh_s0, M2_mpy_nac_hh_s1, M2_mpy_nac_hl_s...
    O << " -= mpy(";
    printOperand(MI, 2, O);
    break;
  case 248:
    // M2_dpmpyss_rnd_s0, M2_dpmpyss_s0, M2_hmmpyh_rs1, M2_hmmpyh_s1, M2_hmmp...
    O << " = mpy(";
    printOperand(MI, 1, O);
    break;
  case 249:
    // M2_dpmpyuu_acc_s0, M2_mpyu_acc_hh_s0, M2_mpyu_acc_hh_s1, M2_mpyu_acc_h...
    O << " += mpyu(";
    printOperand(MI, 2, O);
    break;
  case 250:
    // M2_dpmpyuu_nac_s0, M2_mpyu_nac_hh_s0, M2_mpyu_nac_hh_s1, M2_mpyu_nac_h...
    O << " -= mpyu(";
    printOperand(MI, 2, O);
    break;
  case 251:
    // M2_dpmpyuu_s0, M2_mpyu_hh_s0, M2_mpyu_hh_s1, M2_mpyu_hl_s0, M2_mpyu_hl...
    O << " = mpyu(";
    printOperand(MI, 1, O);
    break;
  case 252:
    // M2_maci, M2_macsip
    O << " += mpyi(";
    printOperand(MI, 2, O);
    break;
  case 253:
    // M2_macsin
    O << " -= mpyi(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 254:
    // M2_mmachs_rs0, M2_mmachs_rs1, M2_mmachs_s0, M2_mmachs_s1
    O << " += vmpywoh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 255:
    // M2_mmacls_rs0, M2_mmacls_rs1, M2_mmacls_s0, M2_mmacls_s1
    O << " += vmpyweh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 256:
    // M2_mmacuhs_rs0, M2_mmacuhs_rs1, M2_mmacuhs_s0, M2_mmacuhs_s1
    O << " += vmpywouh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 257:
    // M2_mmaculs_rs0, M2_mmaculs_rs1, M2_mmaculs_s0, M2_mmaculs_s1
    O << " += vmpyweuh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 258:
    // M2_mmpyh_rs0, M2_mmpyh_rs1, M2_mmpyh_s0, M2_mmpyh_s1
    O << " = vmpywoh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 259:
    // M2_mmpyl_rs0, M2_mmpyl_rs1, M2_mmpyl_s0, M2_mmpyl_s1
    O << " = vmpyweh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 260:
    // M2_mmpyuh_rs0, M2_mmpyuh_rs1, M2_mmpyuh_s0, M2_mmpyuh_s1
    O << " = vmpywouh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 261:
    // M2_mmpyul_rs0, M2_mmpyul_rs1, M2_mmpyul_s0, M2_mmpyul_s1
    O << " = vmpyweuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 262:
    // M2_mpyi, M2_mpysmi
    O << " = mpyi(";
    printOperand(MI, 1, O);
    break;
  case 263:
    // M2_mpysin
    O << " = -mpyi(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 264:
    // M2_mpysip
    O << " = +mpyi(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 265:
    // M2_mpysu_up
    O << " = mpysu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 266:
    // M2_mpyui
    O << " = mpyui(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 267:
    // M2_nacci, M2_naccii
    O << " -= add(";
    printOperand(MI, 2, O);
    break;
  case 268:
    // M2_subacc
    O << " += sub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 269:
    // M2_vabsdiffh, V6_vabsdiffh_alt
    O << " = vabsdiffh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 270:
    // M2_vabsdiffw, V6_vabsdiffw_alt
    O << " = vabsdiffw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 271:
    // M2_vcmac_s0_sat_i
    O << " += vcmpyi(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 272:
    // M2_vcmac_s0_sat_r
    O << " += vcmpyr(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 273:
    // M2_vcmpy_s0_sat_i, M2_vcmpy_s1_sat_i
    O << " = vcmpyi(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 274:
    // M2_vcmpy_s0_sat_r, M2_vcmpy_s1_sat_r
    O << " = vcmpyr(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 275:
    // M2_vdmacs_s0, M2_vdmacs_s1
    O << " += vdmpy(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 276:
    // M2_vdmpyrs_s0, M2_vdmpyrs_s1, M2_vdmpys_s0, M2_vdmpys_s1
    O << " = vdmpy(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 277:
    // M2_vmac2, M2_vmac2s_s0, M2_vmac2s_s1, V6_vmpyh_acc_alt, V6_vmpyhsat_ac...
    O << " += vmpyh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 278:
    // M2_vmac2es, M2_vmac2es_s0, M2_vmac2es_s1
    O << " += vmpyeh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 279:
    // M2_vmac2su_s0, M2_vmac2su_s1
    O << " += vmpyhsu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 280:
    // M2_vmpy2es_s0, M2_vmpy2es_s1
    O << " = vmpyeh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 281:
    // M2_vmpy2s_s0, M2_vmpy2s_s0pack, M2_vmpy2s_s1, M2_vmpy2s_s1pack, V6_vmp...
    O << " = vmpyh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 282:
    // M2_vmpy2su_s0, M2_vmpy2su_s1
    O << " = vmpyhsu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 283:
    // M2_vraddh
    O << " = vraddh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 284:
    // M2_vradduh
    O << " = vradduh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 285:
    // M2_vrcmaci_s0, M2_vrcmaci_s0c
    O << " += vrcmpyi(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 286:
    // M2_vrcmacr_s0, M2_vrcmacr_s0c
    O << " += vrcmpyr(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 287:
    // M2_vrcmpyi_s0, M2_vrcmpyi_s0c
    O << " = vrcmpyi(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 288:
    // M2_vrcmpyr_s0, M2_vrcmpyr_s0c
    O << " = vrcmpyr(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 289:
    // M2_vrcmpys_acc_s1, M2_vrcmpys_acc_s1_h, M2_vrcmpys_acc_s1_l
    O << " += vrcmpys(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 290:
    // M2_vrcmpys_s1, M2_vrcmpys_s1_h, M2_vrcmpys_s1_l, M2_vrcmpys_s1rp, M2_v...
    O << " = vrcmpys(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 291:
    // M2_vrmac_s0
    O << " += vrmpyh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 292:
    // M2_vrmpy_s0
    O << " = vrmpyh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 293:
    // M2_xor_xacc, M4_xor_xacc
    O << " ^= xor(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 294:
    // M4_and_and, M4_and_andn
    O << " &= and(";
    printOperand(MI, 2, O);
    break;
  case 295:
    // M4_and_or
    O << " &= or(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 296:
    // M4_and_xor
    O << " &= xor(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 297:
    // M4_cmpyi_wh, M4_cmpyi_whc
    O << " = cmpyiwh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 298:
    // M4_cmpyr_wh, M4_cmpyr_whc
    O << " = cmpyrwh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 299:
    // M4_mpyri_addi, M4_mpyrr_addi, S4_addi_asl_ri, S4_addi_lsr_ri
    O << " = add(#";
    printOperand(MI, 1, O);
    break;
  case 300:
    // M4_or_and, M4_or_andn, S4_or_andi
    O << " |= and(";
    printOperand(MI, 2, O);
    break;
  case 301:
    // M4_or_or, S4_or_ori
    O << " |= or(";
    printOperand(MI, 2, O);
    break;
  case 302:
    // M4_or_xor
    O << " |= xor(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 303:
    // M4_pmpyw
    O << " = pmpyw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 304:
    // M4_pmpyw_acc
    O << " ^= pmpyw(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 305:
    // M4_vpmpyh
    O << " = vpmpyh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 306:
    // M4_vpmpyh_acc
    O << " ^= vpmpyh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 307:
    // M4_vrmpyeh_acc_s0, M4_vrmpyeh_acc_s1
    O << " += vrmpyweh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 308:
    // M4_vrmpyeh_s0, M4_vrmpyeh_s1
    O << " = vrmpyweh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 309:
    // M4_vrmpyoh_acc_s0, M4_vrmpyoh_acc_s1
    O << " += vrmpywoh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 310:
    // M4_vrmpyoh_s0, M4_vrmpyoh_s1
    O << " = vrmpywoh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 311:
    // M4_xor_and, M4_xor_andn
    O << " ^= and(";
    printOperand(MI, 2, O);
    break;
  case 312:
    // M4_xor_or
    O << " ^= or(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 313:
    // M5_vdmacbsu
    O << " += vdmpybsu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 314:
    // M5_vdmpybsu
    O << " = vdmpybsu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 315:
    // M5_vmacbsu
    O << " += vmpybsu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 316:
    // M5_vmacbuu
    O << " += vmpybu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 317:
    // M5_vmpybsu
    O << " = vmpybsu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 318:
    // M5_vmpybuu
    O << " = vmpybu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 319:
    // M5_vrmacbsu
    O << " += vrmpybsu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 320:
    // M5_vrmacbuu
    O << " += vrmpybu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 321:
    // M5_vrmpybsu
    O << " = vrmpybsu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 322:
    // M5_vrmpybuu
    O << " = vrmpybu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 323:
    // M6_vabsdiffb
    O << " = vabsdiffb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 324:
    // M6_vabsdiffub, V6_vabsdiffub_alt
    O << " = vabsdiffub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 325:
    // PS_loadrbabs
    O << " = memb(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 326:
    // PS_loadrdabs
    O << " = memd(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 327:
    // PS_loadrhabs
    O << " = memh(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 328:
    // PS_loadriabs
    O << " = memw(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 329:
    // PS_loadrubabs
    O << " = memub(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 330:
    // PS_loadruhabs
    O << " = memuh(#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 331:
    // PS_storerbabs, PS_storerbnewabs, PS_storerdabs, PS_storerfabs, PS_stor...
    O << ") = ";
    printOperand(MI, 1, O);
    break;
  case 332:
    // S2_addasl_rrri
    O << " = addasl(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 333:
    // S2_asl_i_p, S2_asl_i_r, S2_asl_i_r_sat, S2_asl_r_p, S2_asl_r_r, S2_asl...
    O << " = asl(";
    printOperand(MI, 1, O);
    break;
  case 334:
    // S2_asl_i_p_acc, S2_asl_i_r_acc, S2_asl_r_p_acc, S2_asl_r_r_acc
    O << " += asl(";
    printOperand(MI, 2, O);
    break;
  case 335:
    // S2_asl_i_p_and, S2_asl_i_r_and, S2_asl_r_p_and, S2_asl_r_r_and
    O << " &= asl(";
    printOperand(MI, 2, O);
    break;
  case 336:
    // S2_asl_i_p_nac, S2_asl_i_r_nac, S2_asl_r_p_nac, S2_asl_r_r_nac
    O << " -= asl(";
    printOperand(MI, 2, O);
    break;
  case 337:
    // S2_asl_i_p_or, S2_asl_i_r_or, S2_asl_r_p_or, S2_asl_r_r_or
    O << " |= asl(";
    printOperand(MI, 2, O);
    break;
  case 338:
    // S2_asl_i_p_xacc, S2_asl_i_r_xacc, S2_asl_r_p_xor
    O << " ^= asl(";
    printOperand(MI, 2, O);
    break;
  case 339:
    // S2_asl_i_vh, S2_asl_r_vh, V6_vaslh_alt, V6_vaslhv_alt
    O << " = vaslh(";
    printOperand(MI, 1, O);
    break;
  case 340:
    // S2_asl_i_vw, S2_asl_r_vw, V6_vaslw_alt, V6_vaslwv_alt
    O << " = vaslw(";
    printOperand(MI, 1, O);
    break;
  case 341:
    // S2_asr_i_p, S2_asr_i_p_rnd, S2_asr_i_r, S2_asr_i_r_rnd, S2_asr_r_p, S2...
    O << " = asr(";
    printOperand(MI, 1, O);
    break;
  case 342:
    // S2_asr_i_p_acc, S2_asr_i_r_acc, S2_asr_r_p_acc, S2_asr_r_r_acc
    O << " += asr(";
    printOperand(MI, 2, O);
    break;
  case 343:
    // S2_asr_i_p_and, S2_asr_i_r_and, S2_asr_r_p_and, S2_asr_r_r_and
    O << " &= asr(";
    printOperand(MI, 2, O);
    break;
  case 344:
    // S2_asr_i_p_nac, S2_asr_i_r_nac, S2_asr_r_p_nac, S2_asr_r_r_nac
    O << " -= asr(";
    printOperand(MI, 2, O);
    break;
  case 345:
    // S2_asr_i_p_or, S2_asr_i_r_or, S2_asr_r_p_or, S2_asr_r_r_or
    O << " |= asr(";
    printOperand(MI, 2, O);
    break;
  case 346:
    // S2_asr_i_p_rnd_goodsyntax, S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 347:
    // S2_asr_i_svw_trun, S2_asr_i_vw, S2_asr_r_svw_trun, S2_asr_r_vw, V6_vas...
    O << " = vasrw(";
    printOperand(MI, 1, O);
    break;
  case 348:
    // S2_asr_i_vh, S2_asr_r_vh, S5_vasrhrnd, S5_vasrhrnd_goodsyntax, V6_vasr...
    O << " = vasrh(";
    printOperand(MI, 1, O);
    break;
  case 349:
    // S2_asr_r_p_xor
    O << " ^= asr(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 350:
    // S2_brev, S2_brevp
    O << " = brev(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 351:
    // S2_cabacdecbin
    O << " = decbin(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 352:
    // S2_cl0, S2_cl0p
    O << " = cl0(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 353:
    // S2_cl1, S2_cl1p
    O << " = cl1(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 354:
    // S2_clb, S2_clbp
    O << " = clb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 355:
    // S2_clbnorm, S4_clbpnorm
    O << " = normamt(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 356:
    // S2_clrbit_i, S2_clrbit_r
    O << " = clrbit(";
    printOperand(MI, 1, O);
    break;
  case 357:
    // S2_ct0, S2_ct0p
    O << " = ct0(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 358:
    // S2_ct1, S2_ct1p
    O << " = ct1(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 359:
    // S2_deinterleave
    O << " = deinterleave(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 360:
    // S2_extractu, S2_extractu_rp, S2_extractup, S2_extractup_rp
    O << " = extractu(";
    printOperand(MI, 1, O);
    break;
  case 361:
    // S2_insert, S2_insert_rp, S2_insertp, S2_insertp_rp
    O << " = insert(";
    printOperand(MI, 2, O);
    break;
  case 362:
    // S2_interleave
    O << " = interleave(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 363:
    // S2_lfsp
    O << " = lfs(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 364:
    // S2_lsl_r_p, S2_lsl_r_r
    O << " = lsl(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 365:
    // S2_lsl_r_p_acc, S2_lsl_r_r_acc
    O << " += lsl(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 366:
    // S2_lsl_r_p_and, S2_lsl_r_r_and
    O << " &= lsl(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 367:
    // S2_lsl_r_p_nac, S2_lsl_r_r_nac
    O << " -= lsl(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 368:
    // S2_lsl_r_p_or, S2_lsl_r_r_or
    O << " |= lsl(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 369:
    // S2_lsl_r_p_xor
    O << " ^= lsl(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 370:
    // S2_lsl_r_vh
    O << " = vlslh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 371:
    // S2_lsl_r_vw
    O << " = vlslw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 372:
    // S2_lsr_i_p, S2_lsr_i_r, S2_lsr_r_p, S2_lsr_r_r
    O << " = lsr(";
    printOperand(MI, 1, O);
    break;
  case 373:
    // S2_lsr_i_p_acc, S2_lsr_i_r_acc, S2_lsr_r_p_acc, S2_lsr_r_r_acc
    O << " += lsr(";
    printOperand(MI, 2, O);
    break;
  case 374:
    // S2_lsr_i_p_and, S2_lsr_i_r_and, S2_lsr_r_p_and, S2_lsr_r_r_and
    O << " &= lsr(";
    printOperand(MI, 2, O);
    break;
  case 375:
    // S2_lsr_i_p_nac, S2_lsr_i_r_nac, S2_lsr_r_p_nac, S2_lsr_r_r_nac
    O << " -= lsr(";
    printOperand(MI, 2, O);
    break;
  case 376:
    // S2_lsr_i_p_or, S2_lsr_i_r_or, S2_lsr_r_p_or, S2_lsr_r_r_or
    O << " |= lsr(";
    printOperand(MI, 2, O);
    break;
  case 377:
    // S2_lsr_i_p_xacc, S2_lsr_i_r_xacc, S2_lsr_r_p_xor
    O << " ^= lsr(";
    printOperand(MI, 2, O);
    break;
  case 378:
    // S2_lsr_i_vh, S2_lsr_r_vh, V6_vlsrh_alt, V6_vlsrhv_alt
    O << " = vlsrh(";
    printOperand(MI, 1, O);
    break;
  case 379:
    // S2_lsr_i_vw, S2_lsr_r_vw, V6_vlsrw_alt, V6_vlsrwv_alt
    O << " = vlsrw(";
    printOperand(MI, 1, O);
    break;
  case 380:
    // S2_packhl, dep_S2_packhl
    O << " = packhl(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 381:
    // S2_parityp, S4_parity
    O << " = parity(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 382:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbf_zomap, S2_pstorerbnewf_...
    O << ") memb(";
    break;
  case 383:
    // S2_pstorerbfnew_pi, S2_pstorerbnewfnew_pi, S2_pstorerbnewtnew_pi, S2_p...
    O << ".new) memb(";
    break;
  case 384:
    // S2_pstorerdf_io, S2_pstorerdf_pi, S2_pstorerdf_zomap, S2_pstorerdt_io,...
    O << ") memd(";
    break;
  case 385:
    // S2_pstorerdfnew_pi, S2_pstorerdtnew_pi, S4_pstorerdfnew_io, S4_pstorer...
    O << ".new) memd(";
    break;
  case 386:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerff_zomap, S2_pstorerft_io,...
    O << ") memh(";
    break;
  case 387:
    // S2_pstorerffnew_pi, S2_pstorerftnew_pi, S2_pstorerhfnew_pi, S2_pstorer...
    O << ".new) memh(";
    break;
  case 388:
    // S2_pstorerif_io, S2_pstorerif_pi, S2_pstorerif_zomap, S2_pstorerinewf_...
    O << ") memw(";
    break;
  case 389:
    // S2_pstorerifnew_pi, S2_pstorerinewfnew_pi, S2_pstorerinewtnew_pi, S2_p...
    O << ".new) memw(";
    break;
  case 390:
    // S2_setbit_i, S2_setbit_r
    O << " = setbit(";
    printOperand(MI, 1, O);
    break;
  case 391:
    // S2_shuffeb
    O << " = shuffeb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 392:
    // S2_shuffeh
    O << " = shuffeh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 393:
    // S2_shuffob
    O << " = shuffob(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 394:
    // S2_shuffoh
    O << " = shuffoh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 395:
    // S2_storerb_pbr, S2_storerb_pr, S2_storerbnew_pbr, S2_storerbnew_pr, S2...
    O << "++";
    printOperand(MI, 2, O);
    break;
  case 396:
    // S2_storerb_pci, S2_storerb_pi, S2_storerbnew_pci, S2_storerbnew_pi, S2...
    O << "++#";
    printOperand(MI, 2, O);
    break;
  case 397:
    // S2_storerb_pcr, S2_storerbnew_pcr, S2_storerd_pcr, S2_storerf_pcr, S2_...
    O << "++I:circ(";
    printOperand(MI, 2, O);
    O << ")) = ";
    printOperand(MI, 3, O);
    break;
  case 398:
    // S2_svsathb, S2_vsathb, S2_vsathb_nopack
    O << " = vsathb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 399:
    // S2_svsathub, S2_vsathub, S2_vsathub_nopack, V6_vsathub_alt
    O << " = vsathub(";
    printOperand(MI, 1, O);
    break;
  case 400:
    // S2_tableidxb, S2_tableidxb_goodsyntax
    O << " = tableidxb(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ",#";
    printOperand(MI, 4, O);
    break;
  case 401:
    // S2_tableidxd, S2_tableidxd_goodsyntax
    O << " = tableidxd(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ",#";
    printOperand(MI, 4, O);
    break;
  case 402:
    // S2_tableidxh, S2_tableidxh_goodsyntax
    O << " = tableidxh(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ",#";
    printOperand(MI, 4, O);
    break;
  case 403:
    // S2_tableidxw, S2_tableidxw_goodsyntax
    O << " = tableidxw(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ",#";
    printOperand(MI, 4, O);
    break;
  case 404:
    // S2_togglebit_i, S2_togglebit_r
    O << " = togglebit(";
    printOperand(MI, 1, O);
    break;
  case 405:
    // S2_tstbit_i, S2_tstbit_r
    O << " = tstbit(";
    printOperand(MI, 1, O);
    break;
  case 406:
    // S2_valignib, S2_valignrb
    O << " = valignb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 407:
    // S2_vcnegh
    O << " = vcnegh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 408:
    // S2_vcrotate
    O << " = vcrotate(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 409:
    // S2_vrcnegh
    O << " += vrcnegh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 410:
    // S2_vrndpackwh, S2_vrndpackwhs
    O << " = vrndwh(";
    printOperand(MI, 1, O);
    break;
  case 411:
    // S2_vsatwh, S2_vsatwh_nopack, V6_vsatwh_alt
    O << " = vsatwh(";
    printOperand(MI, 1, O);
    break;
  case 412:
    // S2_vsatwuh, S2_vsatwuh_nopack
    O << " = vsatwuh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 413:
    // S2_vsplatrb, S6_vsplatrbp
    O << " = vsplatb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 414:
    // S2_vsplatrh
    O << " = vsplath(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 415:
    // S2_vspliceib, S2_vsplicerb
    O << " = vspliceb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 416:
    // S2_vsxtbh
    O << " = vsxtbh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 417:
    // S2_vsxthw
    O << " = vsxthw(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 418:
    // S2_vtrunehb, S6_vtrunehb_ppp
    O << " = vtrunehb(";
    printOperand(MI, 1, O);
    break;
  case 419:
    // S2_vtrunewh
    O << " = vtrunewh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 420:
    // S2_vtrunohb, S6_vtrunohb_ppp
    O << " = vtrunohb(";
    printOperand(MI, 1, O);
    break;
  case 421:
    // S2_vtrunowh
    O << " = vtrunowh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 422:
    // S2_vzxtbh
    O << " = vzxtbh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 423:
    // S2_vzxthw
    O << " = vzxthw(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 424:
    // S4_andi_asl_ri, S4_andi_lsr_ri
    O << " = and(#";
    printOperand(MI, 1, O);
    break;
  case 425:
    // S4_clbaddi, S4_clbpaddi
    O << " = add(clb(";
    printOperand(MI, 1, O);
    O << "),#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 426:
    // S4_extract, S4_extract_rp, S4_extractp, S4_extractp_rp
    O << " = extract(";
    printOperand(MI, 1, O);
    break;
  case 427:
    // S4_lsli
    O << " = lsl(#";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 428:
    // S4_ntstbit_i, S4_ntstbit_r
    O << " = !tstbit(";
    printOperand(MI, 1, O);
    break;
  case 429:
    // S4_ori_asl_ri, S4_ori_lsr_ri
    O << " = or(#";
    printOperand(MI, 1, O);
    break;
  case 430:
    // S4_pstorerbf_abs, S4_pstorerbnewf_abs, S4_pstorerbnewt_abs, S4_pstorer...
    O << ") memb(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 431:
    // S4_pstorerbfnew_abs, S4_pstorerbnewfnew_abs, S4_pstorerbnewtnew_abs, S...
    O << ".new) memb(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 432:
    // S4_pstorerdf_abs, S4_pstorerdt_abs
    O << ") memd(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 433:
    // S4_pstorerdfnew_abs, S4_pstorerdtnew_abs
    O << ".new) memd(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 434:
    // S4_pstorerff_abs, S4_pstorerft_abs, S4_pstorerhf_abs, S4_pstorerhnewf_...
    O << ") memh(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 435:
    // S4_pstorerffnew_abs, S4_pstorerftnew_abs, S4_pstorerhfnew_abs, S4_psto...
    O << ".new) memh(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 436:
    // S4_pstorerif_abs, S4_pstorerinewf_abs, S4_pstorerinewt_abs, S4_pstorer...
    O << ") memw(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 437:
    // S4_pstorerifnew_abs, S4_pstorerinewfnew_abs, S4_pstorerinewtnew_abs, S...
    O << ".new) memw(#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 438:
    // S4_storeirb_zomap, S4_storeirh_zomap, S4_storeiri_zomap
    O << ") = #";
    printOperand(MI, 1, O);
    return;
    break;
  case 439:
    // S4_storerb_ap, S4_storerbnew_ap, S4_storerd_ap, S4_storerf_ap, S4_stor...
    O << "=#";
    printOperand(MI, 1, O);
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 440:
    // S4_storerb_rr, S4_storerbnew_rr, S4_storerd_rr, S4_storerf_rr, S4_stor...
    O << '+';
    printOperand(MI, 1, O);
    O << "<<#";
    printOperand(MI, 2, O);
    O << ") = ";
    printOperand(MI, 3, O);
    break;
  case 441:
    // S4_storerb_ur, S4_storerbnew_ur, S4_storerd_ur, S4_storerf_ur, S4_stor...
    O << "<<#";
    printOperand(MI, 1, O);
    O << "+#";
    printOperand(MI, 2, O);
    O << ") = ";
    printOperand(MI, 3, O);
    break;
  case 442:
    // S4_vrcrotate
    O << " = vrcrotate(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 443:
    // S4_vrcrotate_acc
    O << " += vrcrotate(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ",#";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 444:
    // S4_vxaddsubh, S4_vxaddsubhr
    O << " = vxaddsubh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 445:
    // S4_vxaddsubw
    O << " = vxaddsubw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 446:
    // S4_vxsubaddh, S4_vxsubaddhr
    O << " = vxsubaddh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 447:
    // S4_vxsubaddw
    O << " = vxsubaddw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 448:
    // S5_asrhub_rnd_sat, S5_asrhub_rnd_sat_goodsyntax, S5_asrhub_sat, V6_vas...
    O << " = vasrhub(";
    printOperand(MI, 1, O);
    break;
  case 449:
    // S5_popcountp
    O << " = popcount(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 450:
    // S6_rol_i_p, S6_rol_i_r
    O << " = rol(";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 451:
    // S6_rol_i_p_acc, S6_rol_i_r_acc
    O << " += rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 452:
    // S6_rol_i_p_and, S6_rol_i_r_and
    O << " &= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 453:
    // S6_rol_i_p_nac, S6_rol_i_r_nac
    O << " -= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 454:
    // S6_rol_i_p_or, S6_rol_i_r_or
    O << " |= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 455:
    // S6_rol_i_p_xacc, S6_rol_i_r_xacc
    O << " ^= rol(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 456:
    // SA1_addsp
    O << " = add(r29,#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 457:
    // SA1_clrf, SA1_clrfnew, SA1_clrt, SA1_clrtnew, V6_vd0, V6_vdd0
    O << " = #0";
    return;
    break;
  case 458:
    // SA1_combine0i
    O << " = combine(#0,#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 459:
    // SA1_combine1i
    O << " = combine(#1,#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 460:
    // SA1_combine2i
    O << " = combine(#2,#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 461:
    // SA1_combine3i
    O << " = combine(#3,#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 462:
    // SA1_combinezr
    O << " = combine(#0,";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 463:
    // SL2_loadrd_sp
    O << " = memd(r29+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 464:
    // SL2_loadri_sp
    O << " = memw(r29+#";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 465:
    // TFRI64_V2_ext
    O << "=combine(#";
    printOperand(MI, 1, O);
    O << ",#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 466:
    // V6_MAP_equb, V6_MAP_equh, V6_MAP_equw, V6_veqb, V6_veqh, V6_veqw
    O << " = vcmp.eq(";
    printOperand(MI, 1, O);
    break;
  case 467:
    // V6_MAP_equb_and, V6_MAP_equh_and, V6_MAP_equw_and, V6_veqb_and, V6_veq...
    O << " &= vcmp.eq(";
    printOperand(MI, 2, O);
    break;
  case 468:
    // V6_MAP_equb_ior, V6_MAP_equh_ior, V6_MAP_equw_ior, V6_veqb_or, V6_veqh...
    O << " |= vcmp.eq(";
    printOperand(MI, 2, O);
    break;
  case 469:
    // V6_MAP_equb_xor, V6_MAP_equh_xor, V6_MAP_equw_xor, V6_veqb_xor, V6_veq...
    O << " ^= vcmp.eq(";
    printOperand(MI, 2, O);
    break;
  case 470:
    // V6_extractw
    O << " = vextract(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 471:
    // V6_extractw_alt
    O << ".w = vextract(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 472:
    // V6_hi
    O << " = hi(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 473:
    // V6_ld0, V6_ldnt0, V6_ldntnt0, V6_vL32b_ai, V6_vL32b_nt_ai, V6_vL32b_nt...
    O << " = vmem(";
    printOperand(MI, 1, O);
    break;
  case 474:
    // V6_ldu0, V6_vL32Ub_ai, V6_vL32Ub_pi, V6_vL32Ub_ppu
    O << " = vmemu(";
    printOperand(MI, 1, O);
    break;
  case 475:
    // V6_lo
    O << " = lo(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 476:
    // V6_lvsplatb
    O << ".b = vsplat(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 477:
    // V6_lvsplath
    O << ".h = vsplat(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 478:
    // V6_lvsplatw
    O << " = vsplat(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 479:
    // V6_pred_scalar2
    O << " = vsetq(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 480:
    // V6_pred_scalar2v2
    O << " = vsetq2(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 481:
    // V6_shuffeqh, V6_vshuffeb
    O << ".b = vshuffe(";
    printOperand(MI, 1, O);
    break;
  case 482:
    // V6_shuffeqw, V6_vshufeh
    O << ".h = vshuffe(";
    printOperand(MI, 1, O);
    break;
  case 483:
    // V6_stnnt0, V6_stnt0
    O << "):nt = ";
    printOperand(MI, 1, O);
    break;
  case 484:
    // V6_stnp0, V6_stnpnt0, V6_stnq0, V6_stnqnt0, V6_stp0, V6_stpnt0, V6_stq...
    O << ") vmem(";
    break;
  case 485:
    // V6_stunp0, V6_stup0, V6_vS32Ub_npred_ai, V6_vS32Ub_npred_pi, V6_vS32Ub...
    O << ") vmemu(";
    break;
  case 486:
    // V6_vL32b_cur_ai, V6_vL32b_cur_pi, V6_vL32b_cur_ppu, V6_vL32b_nt_cur_ai...
    O << ".cur = vmem(";
    printOperand(MI, 1, O);
    break;
  case 487:
    // V6_vL32b_nt_tmp_ai, V6_vL32b_nt_tmp_pi, V6_vL32b_nt_tmp_ppu, V6_vL32b_...
    O << ".tmp = vmem(";
    printOperand(MI, 1, O);
    break;
  case 488:
    // V6_vabsb, V6_vabsb_sat
    O << ".b = vabs(";
    printOperand(MI, 1, O);
    break;
  case 489:
    // V6_vabsb_alt, V6_vabsb_sat_alt
    O << " = vabsb(";
    printOperand(MI, 1, O);
    break;
  case 490:
    // V6_vabsdiffh, V6_vabsdiffuh
    O << ".uh = vabsdiff(";
    printOperand(MI, 1, O);
    break;
  case 491:
    // V6_vabsdiffub
    O << ".ub = vabsdiff(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 492:
    // V6_vabsdiffuh_alt
    O << " = vabsdiffuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 493:
    // V6_vabsdiffw
    O << ".uw = vabsdiff(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 494:
    // V6_vabsh, V6_vabsh_sat
    O << ".h = vabs(";
    printOperand(MI, 1, O);
    break;
  case 495:
    // V6_vabsub_alt
    O << ".ub = vabs(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 496:
    // V6_vabsuh_alt
    O << ".uh = vabs(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 497:
    // V6_vabsuw_alt
    O << ".uw = vabs(";
    printOperand(MI, 1, O);
    O << ".w)";
    return;
    break;
  case 498:
    // V6_vabsw, V6_vabsw_sat
    O << ".w = vabs(";
    printOperand(MI, 1, O);
    break;
  case 499:
    // V6_vaddb, V6_vaddb_dv, V6_vaddbsat, V6_vaddbsat_dv
    O << ".b = vadd(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    break;
  case 500:
    // V6_vaddbnq_alt, V6_vaddbq_alt, V6_vsubbnq_alt, V6_vsubbq_alt
    O << ".b) ";
    printOperand(MI, 0, O);
    break;
  case 501:
    // V6_vaddcarry, V6_vaddhw, V6_vadduhw, V6_vaddw, V6_vaddw_dv, V6_vaddwsa...
    O << ".w = vadd(";
    break;
  case 502:
    // V6_vaddclbh
    O << ".h = vadd(vclb(";
    printOperand(MI, 1, O);
    O << ".h),";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 503:
    // V6_vaddclbw
    O << ".w = vadd(vclb(";
    printOperand(MI, 1, O);
    O << ".w),";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 504:
    // V6_vaddh, V6_vaddh_dv, V6_vaddhsat, V6_vaddhsat_dv, V6_vaddubh
    O << ".h = vadd(";
    printOperand(MI, 1, O);
    break;
  case 505:
    // V6_vaddhnq_alt, V6_vaddhq_alt, V6_vsubhnq_alt, V6_vsubhq_alt
    O << ".h) ";
    printOperand(MI, 0, O);
    break;
  case 506:
    // V6_vaddhw_acc, V6_vadduhw_acc
    O << ".w += vadd(";
    printOperand(MI, 2, O);
    break;
  case 507:
    // V6_vaddhw_acc_alt
    O << " += vaddh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 508:
    // V6_vaddubh_acc
    O << ".h += vadd(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".ub)";
    return;
    break;
  case 509:
    // V6_vaddubh_acc_alt
    O << " += vaddub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 510:
    // V6_vaddubsat, V6_vaddubsat_dv, V6_vaddububb_sat
    O << ".ub = vadd(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    break;
  case 511:
    // V6_vadduhsat, V6_vadduhsat_dv
    O << ".uh = vadd(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh):sat";
    return;
    break;
  case 512:
    // V6_vadduhw_acc_alt
    O << " += vadduh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 513:
    // V6_vadduwsat, V6_vadduwsat_dv
    O << ".uw = vadd(";
    printOperand(MI, 1, O);
    O << ".uw,";
    printOperand(MI, 2, O);
    O << ".uw):sat";
    return;
    break;
  case 514:
    // V6_vadduwsat_alt, V6_vadduwsat_dv_alt
    O << " = vadduw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 515:
    // V6_vaddwnq_alt, V6_vaddwq_alt, V6_vsubwnq_alt, V6_vsubwq_alt
    O << ".w) ";
    printOperand(MI, 0, O);
    break;
  case 516:
    // V6_valignb, V6_valignbi
    O << " = valign(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 517:
    // V6_vand, V6_vandqrt, V6_vandvqv, V6_vandvrt
    O << " = vand(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 518:
    // V6_vandnqrt, V6_vandvnqv
    O << " = vand(!";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 519:
    // V6_vandnqrt_acc
    O << " |= vand(!";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 520:
    // V6_vandnqrt_acc_alt
    O << ".ub |= vand(!";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".ub)";
    return;
    break;
  case 521:
    // V6_vandnqrt_alt
    O << ".ub = vand(!";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 522:
    // V6_vandqrt_acc, V6_vandvrt_acc
    O << " |= vand(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 523:
    // V6_vandqrt_acc_alt, V6_vandvrt_acc_alt
    O << ".ub |= vand(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".ub)";
    return;
    break;
  case 524:
    // V6_vandqrt_alt, V6_vandvrt_alt
    O << ".ub = vand(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 525:
    // V6_vaslh, V6_vaslhv
    O << ".h = vasl(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 526:
    // V6_vaslh_acc
    O << ".h += vasl(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 527:
    // V6_vaslh_acc_alt
    O << " += vaslh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 528:
    // V6_vaslw, V6_vaslwv
    O << ".w = vasl(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 529:
    // V6_vaslw_acc
    O << ".w += vasl(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 530:
    // V6_vaslw_acc_alt
    O << " += vaslw(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 531:
    // V6_vasrh, V6_vasrhv, V6_vasrwh, V6_vasrwhrndsat, V6_vasrwhsat
    O << ".h = vasr(";
    printOperand(MI, 1, O);
    break;
  case 532:
    // V6_vasrh_acc
    O << ".h += vasr(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 533:
    // V6_vasrh_acc_alt
    O << " += vasrh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 534:
    // V6_vasrhbrndsat, V6_vasrhbsat
    O << ".b = vasr(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 535:
    // V6_vasrhbrndsat_alt
    O << " = vasrhb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "):rnd:sat";
    return;
    break;
  case 536:
    // V6_vasrhubrndsat, V6_vasrhubsat, V6_vasruhubrndsat, V6_vasruhubsat
    O << ".ub = vasr(";
    printOperand(MI, 1, O);
    break;
  case 537:
    // V6_vasruwuhrndsat, V6_vasruwuhsat, V6_vasrwuhrndsat, V6_vasrwuhsat
    O << ".uh = vasr(";
    printOperand(MI, 1, O);
    break;
  case 538:
    // V6_vasrw, V6_vasrwv
    O << ".w = vasr(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 539:
    // V6_vasrw_acc
    O << ".w += vasr(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 540:
    // V6_vasrw_acc_alt
    O << " += vasrw(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 541:
    // V6_vasrwh_alt, V6_vasrwhrndsat_alt, V6_vasrwhsat_alt
    O << " = vasrwh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 542:
    // V6_vasrwuhsat_alt
    O << " = vasrwuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 543:
    // V6_vavgb, V6_vavgbrnd
    O << ".b = vavg(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    break;
  case 544:
    // V6_vavgb_alt, V6_vavgbrnd_alt
    O << " = vavgb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 545:
    // V6_vavgh, V6_vavghrnd
    O << ".h = vavg(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 546:
    // V6_vavgub, V6_vavgubrnd
    O << ".ub = vavg(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    break;
  case 547:
    // V6_vavguh, V6_vavguhrnd
    O << ".uh = vavg(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    break;
  case 548:
    // V6_vavguw, V6_vavguwrnd
    O << ".uw = vavg(";
    printOperand(MI, 1, O);
    O << ".uw,";
    printOperand(MI, 2, O);
    break;
  case 549:
    // V6_vavgw, V6_vavgwrnd
    O << ".w = vavg(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 550:
    // V6_vcl0h
    O << ".uh = vcl0(";
    printOperand(MI, 1, O);
    O << ".uh)";
    return;
    break;
  case 551:
    // V6_vcl0h_alt
    O << " = vcl0h(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 552:
    // V6_vcl0w
    O << ".uw = vcl0(";
    printOperand(MI, 1, O);
    O << ".uw)";
    return;
    break;
  case 553:
    // V6_vcl0w_alt
    O << " = vcl0w(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 554:
    // V6_vcombine
    O << " = vcombine(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 555:
    // V6_vdealb
    O << ".b = vdeal(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 556:
    // V6_vdealb4w
    O << ".b = vdeale(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 557:
    // V6_vdealb4w_alt
    O << " = vdealb4w(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 558:
    // V6_vdealb_alt
    O << " = vdealb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 559:
    // V6_vdealh
    O << ".h = vdeal(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 560:
    // V6_vdealh_alt
    O << " = vdealh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 561:
    // V6_vdealvdd
    O << " = vdeal(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 562:
    // V6_vdelta
    O << " = vdelta(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 563:
    // V6_vdmpybus, V6_vdmpybus_dv
    O << ".h = vdmpy(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 564:
    // V6_vdmpybus_acc, V6_vdmpybus_dv_acc
    O << ".h += vdmpy(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".b)";
    return;
    break;
  case 565:
    // V6_vdmpybus_acc_alt, V6_vdmpybus_dv_acc_alt
    O << " += vdmpybus(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 566:
    // V6_vdmpybus_alt, V6_vdmpybus_dv_alt
    O << " = vdmpybus(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 567:
    // V6_vdmpyhb, V6_vdmpyhb_dv, V6_vdmpyhisat, V6_vdmpyhsat, V6_vdmpyhsuisa...
    O << ".w = vdmpy(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 568:
    // V6_vdmpyhb_acc, V6_vdmpyhb_dv_acc, V6_vdmpyhisat_acc, V6_vdmpyhsat_acc...
    O << ".w += vdmpy(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 569:
    // V6_vdmpyhb_acc_alt, V6_vdmpyhb_dv_acc_alt
    O << " += vdmpyhb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 570:
    // V6_vdmpyhb_alt, V6_vdmpyhb_dv_alt
    O << " = vdmpyhb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 571:
    // V6_vdmpyhisat_acc_alt, V6_vdmpyhsat_acc_alt, V6_vdmpyhvsat_acc_alt
    O << " += vdmpyh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "):sat";
    return;
    break;
  case 572:
    // V6_vdmpyhisat_alt, V6_vdmpyhsat_alt, V6_vdmpyhvsat_alt
    O << " = vdmpyh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 573:
    // V6_vdmpyhsuisat_acc_alt, V6_vdmpyhsusat_acc_alt
    O << " += vdmpyhsu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 574:
    // V6_vdmpyhsuisat_alt, V6_vdmpyhsusat_alt
    O << " = vdmpyhsu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 575:
    // V6_vdsaduh
    O << ".uw = vdsad(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 576:
    // V6_vdsaduh_acc
    O << ".uw += vdsad(";
    printOperand(MI, 2, O);
    O << ".uh,";
    printOperand(MI, 3, O);
    O << ".uh)";
    return;
    break;
  case 577:
    // V6_vdsaduh_acc_alt
    O << " += vdsaduh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 578:
    // V6_vdsaduh_alt
    O << " = vdsaduh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 579:
    // V6_vgathermhq, V6_vgathermhwq
    O << ") vtmp.h = vgather(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 580:
    // V6_vgathermwq
    O << ") vtmp.w = vgather(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ".w).w";
    return;
    break;
  case 581:
    // V6_vgtb, V6_vgth, V6_vgtub, V6_vgtuh, V6_vgtuw, V6_vgtw
    O << " = vcmp.gt(";
    printOperand(MI, 1, O);
    break;
  case 582:
    // V6_vgtb_and, V6_vgth_and, V6_vgtub_and, V6_vgtuh_and, V6_vgtuw_and, V6...
    O << " &= vcmp.gt(";
    printOperand(MI, 2, O);
    break;
  case 583:
    // V6_vgtb_or, V6_vgth_or, V6_vgtub_or, V6_vgtuh_or, V6_vgtuw_or, V6_vgtw...
    O << " |= vcmp.gt(";
    printOperand(MI, 2, O);
    break;
  case 584:
    // V6_vgtb_xor, V6_vgth_xor, V6_vgtub_xor, V6_vgtuh_xor, V6_vgtuw_xor, V6...
    O << " ^= vcmp.gt(";
    printOperand(MI, 2, O);
    break;
  case 585:
    // V6_vinsertwr
    O << ".w = vinsert(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 586:
    // V6_vlalignb, V6_vlalignbi
    O << " = vlalign(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 587:
    // V6_vlsrb
    O << ".ub = vlsr(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 588:
    // V6_vlsrh
    O << ".uh = vlsr(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 589:
    // V6_vlsrhv
    O << ".h = vlsr(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 590:
    // V6_vlsrw
    O << ".uw = vlsr(";
    printOperand(MI, 1, O);
    O << ".uw,";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 591:
    // V6_vlsrwv
    O << ".w = vlsr(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 592:
    // V6_vlut4
    O << ".h = vlut4(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 593:
    // V6_vlutvvb, V6_vlutvvb_nm, V6_vlutvvbi
    O << ".b = vlut32(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    break;
  case 594:
    // V6_vlutvvb_oracc, V6_vlutvvb_oracci
    O << ".b |= vlut32(";
    printOperand(MI, 2, O);
    O << ".b,";
    printOperand(MI, 3, O);
    break;
  case 595:
    // V6_vlutvwh, V6_vlutvwh_nm, V6_vlutvwhi
    O << ".h = vlut16(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    break;
  case 596:
    // V6_vlutvwh_oracc, V6_vlutvwh_oracci
    O << ".h |= vlut16(";
    printOperand(MI, 2, O);
    O << ".b,";
    printOperand(MI, 3, O);
    break;
  case 597:
    // V6_vmaxb
    O << ".b = vmax(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 598:
    // V6_vmaxh
    O << ".h = vmax(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 599:
    // V6_vmaxub
    O << ".ub = vmax(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 600:
    // V6_vmaxuh
    O << ".uh = vmax(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 601:
    // V6_vmaxw
    O << ".w = vmax(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 602:
    // V6_vminb
    O << ".b = vmin(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 603:
    // V6_vminh
    O << ".h = vmin(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 604:
    // V6_vminub
    O << ".ub = vmin(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 605:
    // V6_vminuh
    O << ".uh = vmin(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 606:
    // V6_vminw
    O << ".w = vmin(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 607:
    // V6_vmpabus, V6_vmpabusv, V6_vmpabuu, V6_vmpabuuv, V6_vmpahhsat, V6_vmp...
    O << ".h = vmpa(";
    printOperand(MI, 1, O);
    break;
  case 608:
    // V6_vmpabus_acc, V6_vmpabuu_acc
    O << ".h += vmpa(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    break;
  case 609:
    // V6_vmpabus_acc_alt
    O << " += vmpabus(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 610:
    // V6_vmpabus_alt, V6_vmpabusv_alt
    O << " = vmpabus(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 611:
    // V6_vmpabuu_acc_alt
    O << " += vmpabuu(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 612:
    // V6_vmpabuu_alt, V6_vmpabuuv_alt
    O << " = vmpabuu(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 613:
    // V6_vmpahb, V6_vmpauhb
    O << ".w = vmpa(";
    printOperand(MI, 1, O);
    break;
  case 614:
    // V6_vmpahb_acc, V6_vmpauhb_acc
    O << ".w += vmpa(";
    printOperand(MI, 2, O);
    break;
  case 615:
    // V6_vmpahb_acc_alt
    O << " += vmpahb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 616:
    // V6_vmpahb_alt
    O << " = vmpahb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 617:
    // V6_vmpauhb_acc_alt
    O << " += vmpauhb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 618:
    // V6_vmpauhb_alt
    O << " = vmpauhb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 619:
    // V6_vmpsuhuhsat
    O << ".h = vmps(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".uh,";
    printOperand(MI, 3, O);
    O << ".uh):sat";
    return;
    break;
  case 620:
    // V6_vmpybus, V6_vmpybusv, V6_vmpybv, V6_vmpyhsrs, V6_vmpyhss, V6_vmpyhv...
    O << ".h = vmpy(";
    printOperand(MI, 1, O);
    break;
  case 621:
    // V6_vmpybus_acc, V6_vmpybusv_acc, V6_vmpybv_acc
    O << ".h += vmpy(";
    printOperand(MI, 2, O);
    break;
  case 622:
    // V6_vmpybus_acc_alt, V6_vmpybusv_acc_alt
    O << " += vmpybus(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 623:
    // V6_vmpybus_alt, V6_vmpybusv_alt
    O << " = vmpybus(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 624:
    // V6_vmpybv_acc_alt
    O << " += vmpyb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 625:
    // V6_vmpybv_alt
    O << " = vmpyb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 626:
    // V6_vmpyewuh
    O << ".w = vmpye(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 627:
    // V6_vmpyewuh_64
    O << " = vmpye(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 628:
    // V6_vmpyewuh_alt
    O << " = vmpyewuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 629:
    // V6_vmpyh, V6_vmpyhus, V6_vmpyhv
    O << ".w = vmpy(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 630:
    // V6_vmpyh_acc, V6_vmpyhsat_acc, V6_vmpyhus_acc, V6_vmpyhv_acc
    O << ".w += vmpy(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 631:
    // V6_vmpyhus_acc_alt
    O << " += vmpyhus(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 632:
    // V6_vmpyhus_alt
    O << " = vmpyhus(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 633:
    // V6_vmpyieoh
    O << ".w = vmpyieo(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 634:
    // V6_vmpyiewh_acc, V6_vmpyiewuh_acc
    O << ".w += vmpyie(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 635:
    // V6_vmpyiewh_acc_alt
    O << " += vmpyiewh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 636:
    // V6_vmpyiewuh
    O << ".w = vmpyie(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 637:
    // V6_vmpyiewuh_acc_alt
    O << " += vmpyiewuh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 638:
    // V6_vmpyiewuh_alt
    O << " = vmpyiewuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 639:
    // V6_vmpyih, V6_vmpyihb
    O << ".h = vmpyi(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 640:
    // V6_vmpyih_acc, V6_vmpyihb_acc
    O << ".h += vmpyi(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 641:
    // V6_vmpyih_acc_alt
    O << " += vmpyih(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 642:
    // V6_vmpyih_alt
    O << " = vmpyih(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 643:
    // V6_vmpyihb_acc_alt
    O << " += vmpyihb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 644:
    // V6_vmpyihb_alt
    O << " = vmpyihb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 645:
    // V6_vmpyiowh
    O << ".w = vmpyio(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 646:
    // V6_vmpyiowh_alt
    O << " = vmpyiowh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 647:
    // V6_vmpyiwb, V6_vmpyiwh, V6_vmpyiwub
    O << ".w = vmpyi(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 648:
    // V6_vmpyiwb_acc, V6_vmpyiwh_acc, V6_vmpyiwub_acc
    O << ".w += vmpyi(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 649:
    // V6_vmpyiwb_acc_alt
    O << " += vmpyiwb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 650:
    // V6_vmpyiwb_alt
    O << " = vmpyiwb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 651:
    // V6_vmpyiwh_acc_alt
    O << " += vmpyiwh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 652:
    // V6_vmpyiwh_alt
    O << " = vmpyiwh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 653:
    // V6_vmpyiwub_acc_alt
    O << " += vmpyiwub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 654:
    // V6_vmpyiwub_alt
    O << " = vmpyiwub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 655:
    // V6_vmpyowh, V6_vmpyowh_rnd
    O << ".w = vmpyo(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    break;
  case 656:
    // V6_vmpyowh_64_acc
    O << " += vmpyo(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    O << ".h)";
    return;
    break;
  case 657:
    // V6_vmpyowh_alt, V6_vmpyowh_rnd_alt
    O << " = vmpyowh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 658:
    // V6_vmpyowh_rnd_sacc, V6_vmpyowh_sacc
    O << ".w += vmpyo(";
    printOperand(MI, 2, O);
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 659:
    // V6_vmpyowh_rnd_sacc_alt, V6_vmpyowh_sacc_alt
    O << " += vmpyowh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 660:
    // V6_vmpyub, V6_vmpyubv
    O << ".uh = vmpy(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub)";
    return;
    break;
  case 661:
    // V6_vmpyub_acc, V6_vmpyubv_acc
    O << ".uh += vmpy(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".ub)";
    return;
    break;
  case 662:
    // V6_vmpyub_acc_alt, V6_vmpyubv_acc_alt
    O << " += vmpyub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 663:
    // V6_vmpyub_alt, V6_vmpyubv_alt
    O << " = vmpyub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 664:
    // V6_vmpyuh, V6_vmpyuhv
    O << ".uw = vmpy(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 665:
    // V6_vmpyuh_acc, V6_vmpyuhv_acc
    O << ".uw += vmpy(";
    printOperand(MI, 2, O);
    O << ".uh,";
    printOperand(MI, 3, O);
    O << ".uh)";
    return;
    break;
  case 666:
    // V6_vmpyuh_acc_alt, V6_vmpyuhv_acc_alt
    O << " += vmpyuh(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 667:
    // V6_vmpyuh_alt, V6_vmpyuhv_alt
    O << " = vmpyuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 668:
    // V6_vmpyuhe
    O << ".uw = vmpye(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 669:
    // V6_vmpyuhe_acc
    O << ".uw += vmpye(";
    printOperand(MI, 2, O);
    O << ".uh,";
    printOperand(MI, 3, O);
    O << ".uh)";
    return;
    break;
  case 670:
    // V6_vnavgb, V6_vnavgub
    O << ".b = vnavg(";
    printOperand(MI, 1, O);
    break;
  case 671:
    // V6_vnavgb_alt
    O << " = vnavgb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 672:
    // V6_vnavgh
    O << ".h = vnavg(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 673:
    // V6_vnavgub_alt
    O << " = vnavgub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 674:
    // V6_vnavgw
    O << ".w = vnavg(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 675:
    // V6_vnormamth
    O << ".h = vnormamt(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 676:
    // V6_vnormamth_alt
    O << " = vnormamth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 677:
    // V6_vnormamtw
    O << ".w = vnormamt(";
    printOperand(MI, 1, O);
    O << ".w)";
    return;
    break;
  case 678:
    // V6_vnormamtw_alt
    O << " = vnormamtw(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 679:
    // V6_vnot
    O << " = vnot(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 680:
    // V6_vor
    O << " = vor(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 681:
    // V6_vpackeb
    O << ".b = vpacke(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 682:
    // V6_vpackeb_alt
    O << " = vpackeb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 683:
    // V6_vpackeh
    O << ".h = vpacke(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 684:
    // V6_vpackeh_alt
    O << " = vpackeh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 685:
    // V6_vpackhb_sat
    O << ".b = vpack(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h):sat";
    return;
    break;
  case 686:
    // V6_vpackhb_sat_alt
    O << " = vpackhb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 687:
    // V6_vpackhub_sat
    O << ".ub = vpack(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h):sat";
    return;
    break;
  case 688:
    // V6_vpackhub_sat_alt
    O << " = vpackhub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 689:
    // V6_vpackob
    O << ".b = vpacko(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 690:
    // V6_vpackob_alt
    O << " = vpackob(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 691:
    // V6_vpackoh
    O << ".h = vpacko(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 692:
    // V6_vpackoh_alt
    O << " = vpackoh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 693:
    // V6_vpackwh_sat
    O << ".h = vpack(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w):sat";
    return;
    break;
  case 694:
    // V6_vpackwh_sat_alt
    O << " = vpackwh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 695:
    // V6_vpackwuh_sat
    O << ".uh = vpack(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w):sat";
    return;
    break;
  case 696:
    // V6_vpackwuh_sat_alt
    O << " = vpackwuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 697:
    // V6_vpopcounth
    O << ".h = vpopcount(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 698:
    // V6_vpopcounth_alt
    O << " = vpopcounth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 699:
    // V6_vprefixqb
    O << ".b = prefixsum(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 700:
    // V6_vprefixqh
    O << ".h = prefixsum(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 701:
    // V6_vprefixqw
    O << ".w = prefixsum(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 702:
    // V6_vrdelta
    O << " = vrdelta(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 703:
    // V6_vrmpybub_rtt, V6_vrmpybub_rtt_alt, V6_vrmpybus, V6_vrmpybusi, V6_vr...
    O << ".w = vrmpy(";
    printOperand(MI, 1, O);
    break;
  case 704:
    // V6_vrmpybub_rtt_acc, V6_vrmpybub_rtt_acc_alt, V6_vrmpybus_acc, V6_vrmp...
    O << ".w += vrmpy(";
    printOperand(MI, 2, O);
    break;
  case 705:
    // V6_vrmpybus_acc_alt, V6_vrmpybusi_acc_alt, V6_vrmpybusv_acc_alt
    O << " += vrmpybus(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 706:
    // V6_vrmpybus_alt, V6_vrmpybusi_alt, V6_vrmpybusv_alt
    O << " = vrmpybus(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 707:
    // V6_vrmpybv_acc_alt
    O << " += vrmpyb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 708:
    // V6_vrmpybv_alt
    O << " = vrmpyb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 709:
    // V6_vrmpyub, V6_vrmpyub_rtt, V6_vrmpyub_rtt_alt, V6_vrmpyubi, V6_vrmpyu...
    O << ".uw = vrmpy(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    break;
  case 710:
    // V6_vrmpyub_acc, V6_vrmpyub_rtt_acc, V6_vrmpyub_rtt_acc_alt, V6_vrmpyub...
    O << ".uw += vrmpy(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    break;
  case 711:
    // V6_vrmpyub_acc_alt, V6_vrmpyubi_acc_alt, V6_vrmpyubv_acc_alt
    O << " += vrmpyub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 712:
    // V6_vrmpyub_alt, V6_vrmpyubi_alt, V6_vrmpyubv_alt
    O << " = vrmpyub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    break;
  case 713:
    // V6_vror
    O << " = vror(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 714:
    // V6_vroundhb
    O << ".b = vround(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h):sat";
    return;
    break;
  case 715:
    // V6_vroundhb_alt
    O << " = vroundhb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 716:
    // V6_vroundhub, V6_vrounduhub
    O << ".ub = vround(";
    printOperand(MI, 1, O);
    break;
  case 717:
    // V6_vroundhub_alt
    O << " = vroundhub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 718:
    // V6_vrounduhub_alt
    O << " = vrounduhub(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 719:
    // V6_vrounduwuh, V6_vroundwuh
    O << ".uh = vround(";
    printOperand(MI, 1, O);
    break;
  case 720:
    // V6_vrounduwuh_alt
    O << " = vrounduwuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 721:
    // V6_vroundwh
    O << ".h = vround(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w):sat";
    return;
    break;
  case 722:
    // V6_vroundwh_alt
    O << " = vroundwh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 723:
    // V6_vroundwuh_alt
    O << " = vroundwuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 724:
    // V6_vrsadubi
    O << ".uw = vrsad(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    O << ".ub,#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 725:
    // V6_vrsadubi_acc
    O << ".uw += vrsad(";
    printOperand(MI, 2, O);
    O << ".ub,";
    printOperand(MI, 3, O);
    O << ".ub,#";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 726:
    // V6_vsathub
    O << ".ub = vsat(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 727:
    // V6_vsatuwuh
    O << ".uh = vsat(";
    printOperand(MI, 1, O);
    O << ".uw,";
    printOperand(MI, 2, O);
    O << ".uw)";
    return;
    break;
  case 728:
    // V6_vsatuwuh_alt
    O << " = vsatuwuh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 729:
    // V6_vsatwh
    O << ".h = vsat(";
    printOperand(MI, 1, O);
    O << ".w,";
    printOperand(MI, 2, O);
    O << ".w)";
    return;
    break;
  case 730:
    // V6_vsb
    O << ".h = vsxt(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 731:
    // V6_vsb_alt
    O << " = vsxtb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 732:
    // V6_vscattermhq, V6_vscattermhq_alt, V6_vscattermhwq, V6_vscattermwhq_a...
    O << ") vscatter(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 733:
    // V6_vsh
    O << ".w = vsxt(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 734:
    // V6_vsh_alt
    O << " = vsxth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 735:
    // V6_vshufeh_alt
    O << " = vshuffeh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 736:
    // V6_vshuffb
    O << ".b = vshuff(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 737:
    // V6_vshuffb_alt
    O << " = vshuffb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 738:
    // V6_vshuffeb_alt
    O << " = vshuffeb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 739:
    // V6_vshuffh
    O << ".h = vshuff(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 740:
    // V6_vshuffh_alt
    O << " = vshuffh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 741:
    // V6_vshuffob
    O << ".b = vshuffo(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 742:
    // V6_vshuffob_alt
    O << " = vshuffob(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 743:
    // V6_vshuffvdd
    O << " = vshuff(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 744:
    // V6_vshufoeb
    O << ".b = vshuffoe(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 745:
    // V6_vshufoeb_alt
    O << " = vshuffoeb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 746:
    // V6_vshufoeh
    O << ".h = vshuffoe(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 747:
    // V6_vshufoeh_alt
    O << " = vshuffoeh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 748:
    // V6_vshufoh
    O << ".h = vshuffo(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 749:
    // V6_vshufoh_alt
    O << " = vshuffoh(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 750:
    // V6_vsubb, V6_vsubb_dv, V6_vsubbsat, V6_vsubbsat_dv
    O << ".b = vsub(";
    printOperand(MI, 1, O);
    O << ".b,";
    printOperand(MI, 2, O);
    break;
  case 751:
    // V6_vsubcarry, V6_vsubhw, V6_vsubuhw, V6_vsubw, V6_vsubw_dv, V6_vsubwsa...
    O << ".w = vsub(";
    break;
  case 752:
    // V6_vsubh, V6_vsubh_dv, V6_vsubhsat, V6_vsubhsat_dv, V6_vsububh
    O << ".h = vsub(";
    printOperand(MI, 1, O);
    break;
  case 753:
    // V6_vsububsat, V6_vsububsat_dv, V6_vsubububb_sat
    O << ".ub = vsub(";
    printOperand(MI, 1, O);
    O << ".ub,";
    printOperand(MI, 2, O);
    break;
  case 754:
    // V6_vsubuhsat, V6_vsubuhsat_dv
    O << ".uh = vsub(";
    printOperand(MI, 1, O);
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh):sat";
    return;
    break;
  case 755:
    // V6_vsubuwsat, V6_vsubuwsat_dv
    O << ".uw = vsub(";
    printOperand(MI, 1, O);
    O << ".uw,";
    printOperand(MI, 2, O);
    O << ".uw):sat";
    return;
    break;
  case 756:
    // V6_vsubuwsat_alt, V6_vsubuwsat_dv_alt
    O << " = vsubuw(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << "):sat";
    return;
    break;
  case 757:
    // V6_vswap
    O << " = vswap(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 758:
    // V6_vtmpyb, V6_vtmpybus
    O << ".h = vtmpy(";
    printOperand(MI, 1, O);
    break;
  case 759:
    // V6_vtmpyb_acc, V6_vtmpybus_acc
    O << ".h += vtmpy(";
    printOperand(MI, 2, O);
    break;
  case 760:
    // V6_vtmpyb_acc_alt
    O << " += vtmpyb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 761:
    // V6_vtmpyb_alt
    O << " = vtmpyb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 762:
    // V6_vtmpybus_acc_alt
    O << " += vtmpybus(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 763:
    // V6_vtmpybus_alt
    O << " = vtmpybus(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 764:
    // V6_vtmpyhb
    O << ".w = vtmpy(";
    printOperand(MI, 1, O);
    O << ".h,";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 765:
    // V6_vtmpyhb_acc
    O << ".w += vtmpy(";
    printOperand(MI, 2, O);
    O << ".h,";
    printOperand(MI, 3, O);
    O << ".b)";
    return;
    break;
  case 766:
    // V6_vtmpyhb_acc_alt
    O << " += vtmpyhb(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 767:
    // V6_vtmpyhb_alt
    O << " = vtmpyhb(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 768:
    // V6_vunpackb
    O << ".h = vunpack(";
    printOperand(MI, 1, O);
    O << ".b)";
    return;
    break;
  case 769:
    // V6_vunpackb_alt
    O << " = vunpackb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 770:
    // V6_vunpackh
    O << ".w = vunpack(";
    printOperand(MI, 1, O);
    O << ".h)";
    return;
    break;
  case 771:
    // V6_vunpackh_alt
    O << " = vunpackh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 772:
    // V6_vunpackob
    O << ".h |= vunpacko(";
    printOperand(MI, 2, O);
    O << ".b)";
    return;
    break;
  case 773:
    // V6_vunpackob_alt
    O << " |= vunpackob(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 774:
    // V6_vunpackoh
    O << ".w |= vunpacko(";
    printOperand(MI, 2, O);
    O << ".h)";
    return;
    break;
  case 775:
    // V6_vunpackoh_alt
    O << " |= vunpackoh(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 776:
    // V6_vunpackub
    O << ".uh = vunpack(";
    printOperand(MI, 1, O);
    O << ".ub)";
    return;
    break;
  case 777:
    // V6_vunpackub_alt
    O << " = vunpackub(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 778:
    // V6_vunpackuh
    O << ".uw = vunpack(";
    printOperand(MI, 1, O);
    O << ".uh)";
    return;
    break;
  case 779:
    // V6_vunpackuh_alt
    O << " = vunpackuh(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 780:
    // V6_vwhist256q_sat
    O << "):sat";
    return;
    break;
  case 781:
    // V6_vxor
    O << " = vxor(";
    printOperand(MI, 1, O);
    O << ',';
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 782:
    // V6_vzb
    O << ".uh = vzxt(";
    printOperand(MI, 1, O);
    O << ".ub)";
    return;
    break;
  case 783:
    // V6_vzb_alt
    O << " = vzxtb(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 784:
    // V6_vzh
    O << ".uw = vzxt(";
    printOperand(MI, 1, O);
    O << ".uh)";
    return;
    break;
  case 785:
    // V6_vzh_alt
    O << " = vzxth(";
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  }


  // Fragment 2 encoded into 8 bits for 151 unique commands.
  switch ((Bits >> 24) & 255) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_neg, A2_negp, A2_svaddh, A2_svavgh, A2_svnavgh, A2...
    O << ')';
    return;
    break;
  case 1:
    // A2_abssat, A2_negsat, A2_roundsat, A2_svaddhs, A2_svadduhs, A2_svsubhs...
    O << "):sat";
    return;
    break;
  case 2:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    printOperand(MI, 1, O);
    break;
  case 3:
    // A2_and, A2_andp, A2_combinew, A2_or, A2_orp, A2_subri, A2_vcmpbeq, A2_...
    O << ',';
    break;
  case 4:
    // A2_andir, A2_combineii, A2_orir, A4_bitspliti, A4_cmpbeqi, A4_cmpbgti,...
    O << ",#";
    break;
  case 5:
    // A2_combine_hh, A2_combine_hl, M2_mpy_acc_hh_s0, M2_mpy_acc_hh_s1, M2_m...
    O << ".h,";
    break;
  case 6:
    // A2_combine_lh, A2_combine_ll, M2_mpy_acc_lh_s0, M2_mpy_acc_lh_s1, M2_m...
    O << ".l,";
    break;
  case 7:
    // A2_paddf, A2_paddfnew, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    O << " = add(";
    printOperand(MI, 2, O);
    break;
  case 8:
    // A2_pandf, A2_pandfnew, A2_pandt, A2_pandtnew
    O << " = and(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 9:
    // A2_porf, A2_porfnew, A2_port, A2_portnew
    O << " = or(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 10:
    // A2_psubf, A2_psubfnew, A2_psubt, A2_psubtnew
    O << " = sub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 11:
    // A2_pxorf, A2_pxorfnew, A2_pxort, A2_pxortnew
    O << " = xor(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 12:
    // A2_svavghs, A2_vavghr, A2_vavgubr, A2_vavguhr, A2_vavguwr, A2_vavgwr, ...
    O << "):rnd";
    return;
    break;
  case 13:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrpi, A2_tfrrcr, A2_tfrsi, A4_tfrcpp, ...
    return;
    break;
  case 14:
    // A2_tfrf, A2_tfrfnew, A2_tfrpf, A2_tfrpfnew, A2_tfrpt, A2_tfrptnew, A2_...
    O << " = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 15:
    // A2_vavghcr, A2_vavgwcr
    O << "):crnd";
    return;
    break;
  case 16:
    // A2_vnavghcr, A2_vnavgwcr
    O << "):crnd:sat";
    return;
    break;
  case 17:
    // A2_vnavghr, A2_vnavgwr, M2_cmpyrs_s0, M2_mmachs_rs0, M2_mmacls_rs0, M2...
    O << "):rnd:sat";
    return;
    break;
  case 18:
    // A4_addp_c, A4_subp_c, L2_loadalignb_io, L2_loadalignb_zomap, L2_loadal...
    printOperand(MI, 2, O);
    break;
  case 19:
    // A4_andn, A4_andnp, A4_orn, A4_ornp, M4_and_andn, M4_or_andn, M4_xor_an...
    O << ",~";
    break;
  case 20:
    // A4_boundscheck_hi
    O << "):raw:hi";
    return;
    break;
  case 21:
    // A4_boundscheck_lo
    O << "):raw:lo";
    return;
    break;
  case 22:
    // A4_paslhf, A4_paslhfnew, A4_paslht, A4_paslhtnew
    O << " = aslh(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 23:
    // A4_pasrhf, A4_pasrhfnew, A4_pasrht, A4_pasrhtnew
    O << " = asrh(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 24:
    // A4_psxtbf, A4_psxtbfnew, A4_psxtbt, A4_psxtbtnew
    O << " = sxtb(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 25:
    // A4_psxthf, A4_psxthfnew, A4_psxtht, A4_psxthtnew
    O << " = sxth(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 26:
    // A4_pzxtbf, A4_pzxtbfnew, A4_pzxtbt, A4_pzxtbtnew
    O << " = zxtb(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 27:
    // A4_pzxthf, A4_pzxthfnew, A4_pzxtht, A4_pzxthtnew
    O << " = zxth(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 28:
    // C2_andn, C2_orn, V6_pred_and_n, V6_pred_or_n
    O << ",!";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 29:
    // C2_ccombinewf, C2_ccombinewnewf, C2_ccombinewnewt, C2_ccombinewt
    O << " = combine(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 30:
    // C2_cmoveif, C2_cmoveit, C2_cmovenewif, C2_cmovenewit
    O << " = #";
    printOperand(MI, 2, O);
    return;
    break;
  case 31:
    // C4_and_and, C4_and_andn, C4_or_and, C4_or_andn, S4_or_andix
    O << ",and(";
    printOperand(MI, 2, O);
    break;
  case 32:
    // C4_and_or, C4_and_orn, C4_or_or, C4_or_orn
    O << ",or(";
    printOperand(MI, 2, O);
    break;
  case 33:
    // F2_conv_df2d_chop, F2_conv_df2ud_chop, F2_conv_df2uw_chop, F2_conv_df2...
    O << "):chop";
    return;
    break;
  case 34:
    // F2_dfimm_n, F2_sfimm_n
    O << "):neg";
    return;
    break;
  case 35:
    // F2_dfimm_p, F2_sfimm_p
    O << "):pos";
    return;
    break;
  case 36:
    // F2_sffma_lib, F2_sffms_lib
    O << "):lib";
    return;
    break;
  case 37:
    // J4_cmpeq_f_jumpnv_nt, J4_cmpeq_t_jumpnv_nt, J4_cmpeqi_f_jumpnv_nt, J4_...
    O << ")) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 38:
    // J4_cmpeq_f_jumpnv_t, J4_cmpeq_t_jumpnv_t, J4_cmpeqi_f_jumpnv_t, J4_cmp...
    O << ")) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 39:
    // J4_jumpseti, J4_jumpsetr
    O << " ; jump ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 40:
    // L2_loadbsw2_io, L2_loadbsw4_io, L2_loadbzw2_io, L2_loadbzw4_io, L2_loa...
    O << "+#";
    printOperand(MI, 2, O);
    break;
  case 41:
    // L2_loadbsw2_pbr, L2_loadbsw2_pr, L2_loadbsw4_pbr, L2_loadbsw4_pr, L2_l...
    O << "++";
    printOperand(MI, 3, O);
    break;
  case 42:
    // L2_loadbsw2_pci, L2_loadbsw2_pi, L2_loadbsw4_pci, L2_loadbsw4_pi, L2_l...
    O << "++#";
    printOperand(MI, 3, O);
    break;
  case 43:
    // L2_loadbsw2_pcr, L2_loadbsw4_pcr, L2_loadbzw2_pcr, L2_loadbzw4_pcr, L2...
    O << "++I:circ(";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 44:
    // L2_ploadrbf_io, L2_ploadrbf_pi, L2_ploadrbf_zomap, L2_ploadrbfnew_io, ...
    O << " = memb(";
    break;
  case 45:
    // L2_ploadrdf_io, L2_ploadrdf_pi, L2_ploadrdf_zomap, L2_ploadrdfnew_io, ...
    O << " = memd(";
    break;
  case 46:
    // L2_ploadrhf_io, L2_ploadrhf_pi, L2_ploadrhf_zomap, L2_ploadrhfnew_io, ...
    O << " = memh(";
    break;
  case 47:
    // L2_ploadrif_io, L2_ploadrif_pi, L2_ploadrif_zomap, L2_ploadrifnew_io, ...
    O << " = memw(";
    break;
  case 48:
    // L2_ploadrubf_io, L2_ploadrubf_pi, L2_ploadrubf_zomap, L2_ploadrubfnew_...
    O << " = memub(";
    break;
  case 49:
    // L2_ploadruhf_io, L2_ploadruhf_pi, L2_ploadruhf_zomap, L2_ploadruhfnew_...
    O << " = memuh(";
    break;
  case 50:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io
    O << ") += ";
    printOperand(MI, 2, O);
    return;
    break;
  case 51:
    // L4_and_memopb_io, L4_and_memoph_io, L4_and_memopw_io
    O << ") &= ";
    printOperand(MI, 2, O);
    return;
    break;
  case 52:
    // L4_iadd_memopb_io, L4_iadd_memoph_io, L4_iadd_memopw_io
    O << ") += #";
    printOperand(MI, 2, O);
    return;
    break;
  case 53:
    // L4_iand_memopb_io, L4_iand_memoph_io, L4_iand_memopw_io
    O << ") = clrbit(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 54:
    // L4_ior_memopb_io, L4_ior_memoph_io, L4_ior_memopw_io
    O << ") = setbit(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 55:
    // L4_isub_memopb_io, L4_isub_memoph_io, L4_isub_memopw_io
    O << ") -= #";
    printOperand(MI, 2, O);
    return;
    break;
  case 56:
    // L4_loadbsw2_ap, L4_loadbsw4_ap, L4_loadbzw2_ap, L4_loadbzw4_ap, L4_loa...
    O << "=#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 57:
    // L4_loadbsw2_ur, L4_loadbsw4_ur, L4_loadbzw2_ur, L4_loadbzw4_ur, L4_loa...
    O << "<<#";
    printOperand(MI, 2, O);
    O << "+#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 58:
    // L4_loadrb_rr, L4_loadrd_rr, L4_loadrh_rr, L4_loadri_rr, L4_loadrub_rr,...
    O << '+';
    printOperand(MI, 2, O);
    O << "<<#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 59:
    // L4_or_memopb_io, L4_or_memoph_io, L4_or_memopw_io
    O << ") |= ";
    printOperand(MI, 2, O);
    return;
    break;
  case 60:
    // L4_ploadrbf_abs, L4_ploadrbfnew_abs, L4_ploadrbt_abs, L4_ploadrbtnew_a...
    O << " = memb(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 61:
    // L4_ploadrdf_abs, L4_ploadrdfnew_abs, L4_ploadrdt_abs, L4_ploadrdtnew_a...
    O << " = memd(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 62:
    // L4_ploadrhf_abs, L4_ploadrhfnew_abs, L4_ploadrht_abs, L4_ploadrhtnew_a...
    O << " = memh(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 63:
    // L4_ploadrif_abs, L4_ploadrifnew_abs, L4_ploadrit_abs, L4_ploadritnew_a...
    O << " = memw(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 64:
    // L4_ploadrubf_abs, L4_ploadrubfnew_abs, L4_ploadrubt_abs, L4_ploadrubtn...
    O << " = memub(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 65:
    // L4_ploadruhf_abs, L4_ploadruhfnew_abs, L4_ploadruht_abs, L4_ploadruhtn...
    O << " = memuh(#";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 66:
    // L4_return_f, L4_return_fnew_pnt, L4_return_fnew_pt, L4_return_t, L4_re...
    O << " = dealloc_return(";
    printOperand(MI, 2, O);
    break;
  case 67:
    // L4_sub_memopb_io, L4_sub_memoph_io, L4_sub_memopw_io
    O << ") -= ";
    printOperand(MI, 2, O);
    return;
    break;
  case 68:
    // M2_cmacs_s1, M2_cmpys_s1, M2_cnacs_s1, M2_mmachs_s1, M2_mmacls_s1, M2_...
    O << "):<<1:sat";
    return;
    break;
  case 69:
    // M2_cmacsc_s0, M2_cmpysc_s0, M2_cnacsc_s0
    O << "*):sat";
    return;
    break;
  case 70:
    // M2_cmacsc_s1, M2_cmpysc_s1, M2_cnacsc_s1
    O << "*):<<1:sat";
    return;
    break;
  case 71:
    // M2_cmpyrs_s1, M2_mmachs_rs1, M2_mmacls_rs1, M2_mmacuhs_rs1, M2_mmaculs...
    O << "):<<1:rnd:sat";
    return;
    break;
  case 72:
    // M2_cmpyrsc_s0
    O << "*):rnd:sat";
    return;
    break;
  case 73:
    // M2_cmpyrsc_s1, M4_cmpyi_whc, M4_cmpyr_whc
    O << "*):<<1:rnd:sat";
    return;
    break;
  case 74:
    // M2_vrcmaci_s0c, M2_vrcmacr_s0c, M2_vrcmpyi_s0c, M2_vrcmpyr_s0c
    O << "*)";
    return;
    break;
  case 75:
    // M2_vrcmpys_acc_s1_h, M2_vrcmpys_s1_h
    O << "):<<1:sat:raw:hi";
    return;
    break;
  case 76:
    // M2_vrcmpys_acc_s1_l, M2_vrcmpys_s1_l
    O << "):<<1:sat:raw:lo";
    return;
    break;
  case 77:
    // M2_vrcmpys_s1rp_h
    O << "):<<1:rnd:sat:raw:hi";
    return;
    break;
  case 78:
    // M2_vrcmpys_s1rp_l
    O << "):<<1:rnd:sat:raw:lo";
    return;
    break;
  case 79:
    // M4_mpyri_addi, M4_mpyrr_addi
    O << ",mpyi(";
    printOperand(MI, 2, O);
    break;
  case 80:
    // M4_vrmpyeh_acc_s1, M4_vrmpyeh_s1, M4_vrmpyoh_acc_s1, M4_vrmpyoh_s1
    O << "):<<1";
    return;
    break;
  case 81:
    // PS_storerbnewabs, PS_storerhnewabs, PS_storerinewabs, S2_storerbnew_pc...
    O << ".new";
    return;
    break;
  case 82:
    // PS_storerfabs, S2_storerf_pcr, S2_storerf_zomap, S2_storerfgp, S4_psto...
    O << ".h";
    return;
    break;
  case 83:
    // S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_pi, S2_pstorerbne...
    printOperand(MI, 0, O);
    break;
  case 84:
    // S2_storerb_io, S2_storerb_pi, S2_storerb_pr, S2_storerbnew_io, S2_stor...
    O << ") = ";
    break;
  case 85:
    // S2_storerb_pbr, S2_storerbnew_pbr, S2_storerd_pbr, S2_storerf_pbr, S2_...
    O << ":brev) = ";
    printOperand(MI, 3, O);
    break;
  case 86:
    // S2_storerb_pci, S2_storerbnew_pci, S2_storerd_pci, S2_storerf_pci, S2_...
    O << ":circ(";
    printOperand(MI, 3, O);
    O << ")) = ";
    printOperand(MI, 4, O);
    break;
  case 87:
    // S2_tableidxb, S2_tableidxd, S2_tableidxh, S2_tableidxw
    O << "):raw";
    return;
    break;
  case 88:
    // S4_addi_asl_ri, S4_andi_asl_ri, S4_ori_asl_ri, S4_subi_asl_ri
    O << ",asl(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 89:
    // S4_addi_lsr_ri, S4_andi_lsr_ri, S4_ori_lsr_ri, S4_subi_lsr_ri
    O << ",lsr(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 90:
    // S4_storeirb_io, S4_storeirh_io, S4_storeiri_io
    O << ") = #";
    printOperand(MI, 2, O);
    return;
    break;
  case 91:
    // S4_vxaddsubhr, S4_vxsubaddhr
    O << "):rnd:>>1:sat";
    return;
    break;
  case 92:
    // SA1_and1
    O << ",#1)";
    return;
    break;
  case 93:
    // SA1_combinerz
    O << ",#0)";
    return;
    break;
  case 94:
    // SA1_zxtb
    O << ",#255)";
    return;
    break;
  case 95:
    // SS2_storebi0, SS2_storewi0
    O << ") = #0";
    return;
    break;
  case 96:
    // SS2_storebi1, SS2_storewi1
    O << ") = #1";
    return;
    break;
  case 97:
    // V6_MAP_equb, V6_MAP_equb_and, V6_MAP_equb_ior, V6_MAP_equb_xor, V6_vad...
    O << ".ub,";
    break;
  case 98:
    // V6_MAP_equh, V6_MAP_equh_and, V6_MAP_equh_ior, V6_MAP_equh_xor, V6_vab...
    O << ".uh,";
    break;
  case 99:
    // V6_MAP_equw, V6_MAP_equw_and, V6_MAP_equw_ior, V6_MAP_equw_xor, V6_vas...
    O << ".uw,";
    break;
  case 100:
    // V6_ldcnp0, V6_ldcnpnt0, V6_ldcp0, V6_ldcpnt0, V6_vL32b_cur_npred_ai, V...
    O << ".cur = vmem(";
    break;
  case 101:
    // V6_ldnp0, V6_ldnpnt0, V6_ldp0, V6_ldpnt0, V6_vL32b_npred_ai, V6_vL32b_...
    O << " = vmem(";
    break;
  case 102:
    // V6_ldnt0, V6_ldntnt0
    O << "):nt";
    return;
    break;
  case 103:
    // V6_ldtnp0, V6_ldtnpnt0, V6_ldtp0, V6_ldtpnt0, V6_vL32b_nt_tmp_npred_ai...
    O << ".tmp = vmem(";
    break;
  case 104:
    // V6_shuffeqw, V6_vasrwh, V6_vasrwhrndsat, V6_vasrwhsat, V6_vasrwuhrndsa...
    O << ".w,";
    break;
  case 105:
    // V6_vS32b_nt_ai, V6_vS32b_nt_new_ai, V6_vS32b_nt_new_pi, V6_vS32b_nt_ne...
    O << "):nt = ";
    break;
  case 106:
    // V6_vS32b_srls_ai, V6_vS32b_srls_pi, V6_vS32b_srls_ppu
    O << "):scatter_release";
    return;
    break;
  case 107:
    // V6_vabsb, V6_vaddb, V6_vaddb_dv, V6_vavgb, V6_vdmpyhb, V6_vdmpyhb_acc,...
    O << ".b)";
    return;
    break;
  case 108:
    // V6_vabsb_sat, V6_vaddbsat, V6_vaddbsat_dv, V6_vaddububb_sat, V6_vsubbs...
    O << ".b):sat";
    return;
    break;
  case 109:
    // V6_vabsh, V6_vaslhv, V6_vavgh, V6_vmpyh, V6_vmpyh_acc, V6_vmpyhv, V6_v...
    O << ".h)";
    return;
    break;
  case 110:
    // V6_vabsh_sat, V6_vdmpyhisat, V6_vdmpyhisat_acc, V6_vdmpyhsat, V6_vdmpy...
    O << ".h):sat";
    return;
    break;
  case 111:
    // V6_vabsw, V6_vaslwv, V6_vasrwv, V6_vavgw
    O << ".w)";
    return;
    break;
  case 112:
    // V6_vabsw_sat
    O << ".w):sat";
    return;
    break;
  case 113:
    // V6_vaddbnq, V6_vaddbnq_alt, V6_vaddbq, V6_vaddbq_alt
    O << ".b += ";
    printOperand(MI, 3, O);
    O << ".b";
    return;
    break;
  case 114:
    // V6_vaddhnq, V6_vaddhnq_alt, V6_vaddhq, V6_vaddhq_alt
    O << ".h += ";
    printOperand(MI, 3, O);
    O << ".h";
    return;
    break;
  case 115:
    // V6_vaddubsat, V6_vaddubsat_dv, V6_vsububsat, V6_vsububsat_dv
    O << ".ub):sat";
    return;
    break;
  case 116:
    // V6_vaddwnq, V6_vaddwnq_alt, V6_vaddwq, V6_vaddwq_alt
    O << ".w += ";
    printOperand(MI, 3, O);
    O << ".w";
    return;
    break;
  case 117:
    // V6_vavgbrnd
    O << ".b):rnd";
    return;
    break;
  case 118:
    // V6_vavghrnd
    O << ".h):rnd";
    return;
    break;
  case 119:
    // V6_vavgub, V6_vmpabuu_acc, V6_vmpyiwub, V6_vmpyiwub_acc, V6_vrmpyub, V...
    O << ".ub)";
    return;
    break;
  case 120:
    // V6_vavgubrnd
    O << ".ub):rnd";
    return;
    break;
  case 121:
    // V6_vavguh, V6_vmpyhus, V6_vmpyhus_acc, V6_vmpyiewuh_acc
    O << ".uh)";
    return;
    break;
  case 122:
    // V6_vavguhrnd
    O << ".uh):rnd";
    return;
    break;
  case 123:
    // V6_vavguw
    O << ".uw)";
    return;
    break;
  case 124:
    // V6_vavguwrnd
    O << ".uw):rnd";
    return;
    break;
  case 125:
    // V6_vavgwrnd
    O << ".w):rnd";
    return;
    break;
  case 126:
    // V6_vccombine, V6_vnccombine
    O << " = vcombine(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 127:
    // V6_vdmpyhsuisat, V6_vdmpyhsuisat_acc
    O << ".uh,#1):sat";
    return;
    break;
  case 128:
    // V6_vdmpyhsuisat_acc_alt, V6_vdmpyhsuisat_alt
    O << ",#1):sat";
    return;
    break;
  case 129:
    // V6_vdmpyhsusat, V6_vdmpyhsusat_acc
    O << ".uh):sat";
    return;
    break;
  case 130:
    // V6_veqb, V6_veqb_and, V6_veqb_or, V6_veqb_xor, V6_vgtb, V6_vgtb_and, V...
    O << ".b,";
    break;
  case 131:
    // V6_vgathermhq
    O << ".h).h";
    return;
    break;
  case 132:
    // V6_vgathermhwq
    O << ".w).h";
    return;
    break;
  case 133:
    // V6_vlutvvb_oracci, V6_vlutvvbi
    O << ".b,#";
    break;
  case 134:
    // V6_vlutvwh_oracci, V6_vlutvwhi
    O << ".h,#";
    break;
  case 135:
    // V6_vmpyowh
    O << ".h):<<1:sat";
    return;
    break;
  case 136:
    // V6_vmpyowh_rnd
    O << ".h):<<1:rnd:sat";
    return;
    break;
  case 137:
    // V6_vmpyowh_rnd_sacc
    O << ".h):<<1:rnd:sat:shift";
    return;
    break;
  case 138:
    // V6_vmpyowh_rnd_sacc_alt
    O << "):<<1:rnd:sat:shift";
    return;
    break;
  case 139:
    // V6_vmpyowh_sacc
    O << ".h):<<1:sat:shift";
    return;
    break;
  case 140:
    // V6_vmpyowh_sacc_alt
    O << "):<<1:sat:shift";
    return;
    break;
  case 141:
    // V6_vrmpyubi, V6_vrmpyubi_acc
    O << ".ub,#";
    break;
  case 142:
    // V6_vscattermhq
    O << ".h).h = ";
    printOperand(MI, 4, O);
    return;
    break;
  case 143:
    // V6_vscattermhq_alt
    O << ".h) = ";
    printOperand(MI, 4, O);
    O << ".h";
    return;
    break;
  case 144:
    // V6_vscattermhwq
    O << ".w).h = ";
    printOperand(MI, 4, O);
    return;
    break;
  case 145:
    // V6_vscattermwhq_alt, V6_vscattermwq_alt
    O << ".w) = ";
    printOperand(MI, 4, O);
    break;
  case 146:
    // V6_vscattermwq
    O << ".w).w = ";
    printOperand(MI, 4, O);
    return;
    break;
  case 147:
    // V6_vsubbnq, V6_vsubbnq_alt, V6_vsubbq, V6_vsubbq_alt
    O << ".b -= ";
    printOperand(MI, 3, O);
    O << ".b";
    return;
    break;
  case 148:
    // V6_vsubhnq, V6_vsubhnq_alt, V6_vsubhq, V6_vsubhq_alt
    O << ".h -= ";
    printOperand(MI, 3, O);
    O << ".h";
    return;
    break;
  case 149:
    // V6_vsubwnq, V6_vsubwnq_alt, V6_vsubwq, V6_vsubwq_alt
    O << ".w -= ";
    printOperand(MI, 3, O);
    O << ".w";
    return;
    break;
  case 150:
    // dep_S2_packhl
    O << "):deprecated";
    return;
    break;
  }


  // Fragment 3 encoded into 6 bits for 51 unique commands.
  switch ((Bits >> 32) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, A2_addspl...
    O << ',';
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_sat_hh, A2_addh_h16_sat_hl...
    O << ".h,";
    printOperand(MI, 2, O);
    break;
  case 2:
    // A2_addh_h16_lh, A2_addh_h16_ll, A2_addh_h16_sat_lh, A2_addh_h16_sat_ll...
    O << ".l,";
    printOperand(MI, 2, O);
    break;
  case 3:
    // A2_addi, A2_paddif, A2_paddifnew, A2_paddit, A2_padditnew, M4_mpyri_ad...
    O << ",#";
    break;
  case 4:
    // A2_and, A2_andir, A2_andp, A2_combine_hh, A2_combine_hl, A2_combine_lh...
    printOperand(MI, 2, O);
    break;
  case 5:
    // A5_ACS
    O << " = vacsh(";
    printOperand(MI, 3, O);
    O << ',';
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 6:
    // A6_vminub_RdP
    O << " = vminub(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 7:
    // C4_and_andn, C4_and_orn, C4_or_andn, C4_or_orn
    O << ",!";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 8:
    // F2_sffma_sc, V6_vlutvvb_oracc, V6_vlutvvb_oracci, V6_vlutvwh_oracc, V6...
    printOperand(MI, 4, O);
    break;
  case 9:
    // F2_sfinvsqrta
    O << " = sfinvsqrta(";
    printOperand(MI, 2, O);
    O << ')';
    return;
    break;
  case 10:
    // F2_sfrecipa
    O << " = sfrecipa(";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 11:
    // J2_loop0i, J2_loop0iext, J2_loop0r, J2_loop0rext, J2_loop1i, J2_loop1i...
    O << ')';
    return;
    break;
  case 12:
    // J4_cmpeq_fp0_jump_nt, J4_cmpeqi_fp0_jump_nt, J4_cmpeqn1_fp0_jump_nt, J...
    O << "); if (!p0.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 13:
    // J4_cmpeq_fp0_jump_t, J4_cmpeqi_fp0_jump_t, J4_cmpeqn1_fp0_jump_t, J4_c...
    O << "); if (!p0.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 14:
    // J4_cmpeq_fp1_jump_nt, J4_cmpeqi_fp1_jump_nt, J4_cmpeqn1_fp1_jump_nt, J...
    O << "); if (!p1.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 15:
    // J4_cmpeq_fp1_jump_t, J4_cmpeqi_fp1_jump_t, J4_cmpeqn1_fp1_jump_t, J4_c...
    O << "); if (!p1.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 16:
    // J4_cmpeq_tp0_jump_nt, J4_cmpeqi_tp0_jump_nt, J4_cmpeqn1_tp0_jump_nt, J...
    O << "); if (p0.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 17:
    // J4_cmpeq_tp0_jump_t, J4_cmpeqi_tp0_jump_t, J4_cmpeqn1_tp0_jump_t, J4_c...
    O << "); if (p0.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 18:
    // J4_cmpeq_tp1_jump_nt, J4_cmpeqi_tp1_jump_nt, J4_cmpeqn1_tp1_jump_nt, J...
    O << "); if (p1.new) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 19:
    // J4_cmpeq_tp1_jump_t, J4_cmpeqi_tp1_jump_t, J4_cmpeqn1_tp1_jump_t, J4_c...
    O << "); if (p1.new) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 20:
    // J4_cmplt_f_jumpnv_nt, J4_cmplt_t_jumpnv_nt, J4_cmpltu_f_jumpnv_nt, J4_...
    O << ".new)) jump:nt ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 21:
    // J4_cmplt_f_jumpnv_t, J4_cmplt_t_jumpnv_t, J4_cmpltu_f_jumpnv_t, J4_cmp...
    O << ".new)) jump:t ";
    printBrtarget(MI, 2, O);
    return;
    break;
  case 22:
    // L2_loadalignb_io, L2_loadalignh_io, S2_pstorerbf_io, S2_pstorerbnewf_i...
    O << "+#";
    break;
  case 23:
    // L2_loadalignb_pbr, L2_loadalignb_pr, L2_loadalignh_pbr, L2_loadalignh_...
    O << "++";
    break;
  case 24:
    // L2_loadalignb_pci, L2_loadalignb_pi, L2_loadalignh_pci, L2_loadalignh_...
    O << "++#";
    break;
  case 25:
    // L2_loadalignb_pcr, L2_loadalignh_pcr
    O << "++I:circ(";
    printOperand(MI, 4, O);
    O << "))";
    return;
    break;
  case 26:
    // L2_loadbsw2_pbr, L2_loadbsw4_pbr, L2_loadbzw2_pbr, L2_loadbzw4_pbr, L2...
    O << ":brev)";
    return;
    break;
  case 27:
    // L2_loadbsw2_pci, L2_loadbsw4_pci, L2_loadbzw2_pci, L2_loadbzw4_pci, L2...
    O << ":circ(";
    printOperand(MI, 4, O);
    O << "))";
    return;
    break;
  case 28:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    printOperand(MI, 1, O);
    break;
  case 29:
    // L4_loadalignb_ap, L4_loadalignh_ap
    O << "=#";
    printOperand(MI, 3, O);
    O << ')';
    return;
    break;
  case 30:
    // L4_loadalignb_ur, L4_loadalignh_ur
    O << "<<#";
    printOperand(MI, 3, O);
    O << "+#";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 31:
    // L4_return_f, L4_return_t, S2_allocframe
    O << "):raw";
    return;
    break;
  case 32:
    // L4_return_fnew_pnt, L4_return_tnew_pnt
    O << "):nt:raw";
    return;
    break;
  case 33:
    // L4_return_fnew_pt, L4_return_tnew_pt
    O << "):t:raw";
    return;
    break;
  case 34:
    // M2_acci, M2_accii, M2_dpmpyss_acc_s0, M2_dpmpyss_nac_s0, M2_dpmpyuu_ac...
    printOperand(MI, 3, O);
    break;
  case 35:
    // M4_mpyri_addr, M4_mpyrr_addr
    O << ",mpyi(";
    printOperand(MI, 2, O);
    break;
  case 36:
    // M4_mpyri_addr_u2
    O << ",mpyi(#";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 37:
    // S2_pstorerbf_zomap, S2_pstorerbnewf_zomap, S2_pstorerbnewt_zomap, S2_p...
    O << ") = ";
    printOperand(MI, 2, O);
    break;
  case 38:
    // S2_storerb_pbr, S2_storerb_pci, S2_storerd_pbr, S2_storerd_pci, S2_sto...
    return;
    break;
  case 39:
    // S2_storerbnew_pbr, S2_storerbnew_pci, S2_storerhnew_pbr, S2_storerhnew...
    O << ".new";
    return;
    break;
  case 40:
    // S2_storerf_pbr, S2_storerf_pci, V6_vscattermwhq_alt
    O << ".h";
    return;
    break;
  case 41:
    // S4_addaddi
    O << ",add(";
    printOperand(MI, 2, O);
    O << ",#";
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 42:
    // S4_pstorerbf_rr, S4_pstorerbfnew_rr, S4_pstorerbnewf_rr, S4_pstorerbne...
    O << '+';
    printOperand(MI, 2, O);
    O << "<<#";
    printOperand(MI, 3, O);
    O << ") = ";
    printOperand(MI, 4, O);
    break;
  case 43:
    // S4_storeirbf_zomap, S4_storeirbfnew_zomap, S4_storeirbt_zomap, S4_stor...
    O << ") = #";
    printOperand(MI, 2, O);
    return;
    break;
  case 44:
    // S4_subaddi
    O << ",sub(#";
    printOperand(MI, 2, O);
    O << ',';
    printOperand(MI, 3, O);
    O << "))";
    return;
    break;
  case 45:
    // SA1_inc
    O << ",#1)";
    return;
    break;
  case 46:
    // V6_stnpnt0, V6_stnqnt0, V6_stpnt0, V6_stqnt0
    O << "):nt = ";
    printOperand(MI, 2, O);
    return;
    break;
  case 47:
    // V6_vL32b_nt_ai, V6_vL32b_nt_cur_ai, V6_vL32b_nt_cur_pi, V6_vL32b_nt_cu...
    O << "):nt";
    return;
    break;
  case 48:
    // V6_vaddcarry, V6_vaddw, V6_vaddw_dv, V6_vaddwsat, V6_vaddwsat_dv, V6_v...
    O << ".w,";
    break;
  case 49:
    // V6_vadduhw, V6_vsubuhw
    O << ".uh,";
    printOperand(MI, 2, O);
    O << ".uh)";
    return;
    break;
  case 50:
    // V6_vscattermwq_alt
    O << ".w";
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 55 unique commands.
  switch ((Bits >> 38) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addi, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_lh, A2_subh_h16_hh, A2_subh_h16_lh
    O << ".h):<<16";
    return;
    break;
  case 2:
    // A2_addh_h16_hl, A2_addh_h16_ll, A2_subh_h16_hl, A2_subh_h16_ll
    O << ".l):<<16";
    return;
    break;
  case 3:
    // A2_addh_h16_sat_hh, A2_addh_h16_sat_lh, A2_subh_h16_sat_hh, A2_subh_h1...
    O << ".h):sat:<<16";
    return;
    break;
  case 4:
    // A2_addh_h16_sat_hl, A2_addh_h16_sat_ll, A2_subh_h16_sat_hl, A2_subh_h1...
    O << ".l):sat:<<16";
    return;
    break;
  case 5:
    // A2_addh_l16_hl, A2_combine_hh, A2_combine_lh, A2_subh_l16_hl, M2_mpy_a...
    O << ".h)";
    return;
    break;
  case 6:
    // A2_addh_l16_ll, A2_combine_hl, A2_combine_ll, A2_subh_l16_ll, M2_mpy_a...
    O << ".l)";
    return;
    break;
  case 7:
    // A2_addh_l16_sat_hl, A2_subh_l16_sat_hl, M2_mpy_acc_sat_hh_s0, M2_mpy_a...
    O << ".h):sat";
    return;
    break;
  case 8:
    // A2_addh_l16_sat_ll, A2_subh_l16_sat_ll, M2_mpy_acc_sat_hl_s0, M2_mpy_a...
    O << ".l):sat";
    return;
    break;
  case 9:
    // A2_and, A2_andir, A2_andp, A2_combineii, A2_combinew, A2_or, A2_orir, ...
    O << ')';
    return;
    break;
  case 10:
    // A2_paddf, A2_paddfnew, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    printOperand(MI, 3, O);
    break;
  case 11:
    // A4_round_ri_sat, A4_round_rr_sat, S2_asl_i_r_sat, S2_asl_r_r_sat, S2_a...
    O << "):sat";
    return;
    break;
  case 12:
    // C2_mux, C2_muxri, M4_mpyrr_addr, V6_vasrhubrndsat_alt, V6_vasrhubsat_a...
    O << ',';
    printOperand(MI, 3, O);
    break;
  case 13:
    // C2_muxii, C2_muxir, M4_mpyri_addr, S2_extractu, S2_extractup, S2_inser...
    O << ",#";
    break;
  case 14:
    // F2_sffma_sc
    O << "):scale";
    return;
    break;
  case 15:
    // L2_loadalignb_pbr, L2_loadalignb_pci, L2_loadalignb_pi, L2_loadalignb_...
    printOperand(MI, 4, O);
    break;
  case 16:
    // L2_ploadrbf_io, L2_ploadrbfnew_io, L2_ploadrbt_io, L2_ploadrbtnew_io, ...
    O << "+#";
    printOperand(MI, 3, O);
    break;
  case 17:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    O << "++#";
    printOperand(MI, 4, O);
    break;
  case 18:
    // L4_ploadrbf_rr, L4_ploadrbfnew_rr, L4_ploadrbt_rr, L4_ploadrbtnew_rr, ...
    O << '+';
    printOperand(MI, 3, O);
    O << "<<#";
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 19:
    // M2_dpmpyss_rnd_s0, S2_asr_i_p_rnd, S2_asr_i_r_rnd, S5_vasrhrnd_goodsyn...
    O << "):rnd";
    return;
    break;
  case 20:
    // M2_hmmpyh_rs1, M2_mpy_sat_rnd_hh_s1, M2_mpy_sat_rnd_lh_s1, V6_vmpyhsrs...
    O << ".h):<<1:rnd:sat";
    return;
    break;
  case 21:
    // M2_hmmpyh_s1, M2_mpy_acc_sat_hh_s1, M2_mpy_acc_sat_lh_s1, M2_mpy_nac_s...
    O << ".h):<<1:sat";
    return;
    break;
  case 22:
    // M2_hmmpyl_rs1, M2_mpy_sat_rnd_hl_s1, M2_mpy_sat_rnd_ll_s1
    O << ".l):<<1:rnd:sat";
    return;
    break;
  case 23:
    // M2_hmmpyl_s1, M2_mpy_acc_sat_hl_s1, M2_mpy_acc_sat_ll_s1, M2_mpy_nac_s...
    O << ".l):<<1:sat";
    return;
    break;
  case 24:
    // M2_mpy_acc_hh_s1, M2_mpy_acc_lh_s1, M2_mpy_hh_s1, M2_mpy_lh_s1, M2_mpy...
    O << ".h):<<1";
    return;
    break;
  case 25:
    // M2_mpy_acc_hl_s1, M2_mpy_acc_ll_s1, M2_mpy_hl_s1, M2_mpy_ll_s1, M2_mpy...
    O << ".l):<<1";
    return;
    break;
  case 26:
    // M2_mpy_rnd_hh_s0, M2_mpy_rnd_lh_s0, M2_mpyd_rnd_hh_s0, M2_mpyd_rnd_lh_...
    O << ".h):rnd";
    return;
    break;
  case 27:
    // M2_mpy_rnd_hh_s1, M2_mpy_rnd_lh_s1, M2_mpyd_rnd_hh_s1, M2_mpyd_rnd_lh_...
    O << ".h):<<1:rnd";
    return;
    break;
  case 28:
    // M2_mpy_rnd_hl_s0, M2_mpy_rnd_ll_s0, M2_mpyd_rnd_hl_s0, M2_mpyd_rnd_ll_...
    O << ".l):rnd";
    return;
    break;
  case 29:
    // M2_mpy_rnd_hl_s1, M2_mpy_rnd_ll_s1, M2_mpyd_rnd_hl_s1, M2_mpyd_rnd_ll_...
    O << ".l):<<1:rnd";
    return;
    break;
  case 30:
    // M2_mpy_sat_rnd_hh_s0, M2_mpy_sat_rnd_lh_s0
    O << ".h):rnd:sat";
    return;
    break;
  case 31:
    // M2_mpy_sat_rnd_hl_s0, M2_mpy_sat_rnd_ll_s0
    O << ".l):rnd:sat";
    return;
    break;
  case 32:
    // M2_mpy_up_s1
    O << "):<<1";
    return;
    break;
  case 33:
    // M2_mpy_up_s1_sat, M4_mac_up_s1_sat, M4_nac_up_s1_sat
    O << "):<<1:sat";
    return;
    break;
  case 34:
    // S2_pstorerbf_zomap, S2_pstorerbt_zomap, S2_pstorerdf_zomap, S2_pstorer...
    return;
    break;
  case 35:
    // S2_pstorerbnewf_zomap, S2_pstorerbnewt_zomap, S2_pstorerhnewf_zomap, S...
    O << ".new";
    return;
    break;
  case 36:
    // S2_pstorerff_zomap, S2_pstorerft_zomap, S2_storerf_io, S2_storerf_pi, ...
    O << ".h";
    return;
    break;
  case 37:
    // S5_asrhub_rnd_sat, S5_vasrhrnd
    O << "):raw";
    return;
    break;
  case 38:
    // S5_asrhub_rnd_sat_goodsyntax
    O << "):rnd:sat";
    return;
    break;
  case 39:
    // V6_MAP_equb, V6_MAP_equb_and, V6_MAP_equb_ior, V6_MAP_equb_xor, V6_vad...
    O << ".ub)";
    return;
    break;
  case 40:
    // V6_MAP_equh, V6_MAP_equh_and, V6_MAP_equh_ior, V6_MAP_equh_xor, V6_vab...
    O << ".uh)";
    return;
    break;
  case 41:
    // V6_MAP_equw, V6_MAP_equw_and, V6_MAP_equw_ior, V6_MAP_equw_xor, V6_vgt...
    O << ".uw)";
    return;
    break;
  case 42:
    // V6_ldcnpnt0, V6_ldcpnt0, V6_ldnpnt0, V6_ldpnt0, V6_ldtnpnt0, V6_ldtpnt...
    O << "):nt";
    return;
    break;
  case 43:
    // V6_shuffeqw, V6_veqw, V6_veqw_and, V6_veqw_or, V6_veqw_xor, V6_vgtw, V...
    O << ".w)";
    return;
    break;
  case 44:
    // V6_vL32b_cur_npred_ppu, V6_vL32b_cur_pred_ppu, V6_vL32b_npred_ppu, V6_...
    O << "++";
    printOperand(MI, 4, O);
    break;
  case 45:
    // V6_vasrhubrndsat, V6_vasrhubsat, V6_vmpahhsat
    O << ".h,";
    printOperand(MI, 3, O);
    break;
  case 46:
    // V6_vasruhubrndsat, V6_vasruhubsat, V6_vmpauhuhsat
    O << ".uh,";
    printOperand(MI, 3, O);
    break;
  case 47:
    // V6_vasruwuhrndsat, V6_vasruwuhsat
    O << ".uw,";
    printOperand(MI, 3, O);
    break;
  case 48:
    // V6_vasrwh, V6_vasrwhrndsat, V6_vasrwhsat, V6_vasrwuhrndsat, V6_vasrwuh...
    O << ".w,";
    printOperand(MI, 3, O);
    break;
  case 49:
    // V6_veqb, V6_veqb_and, V6_veqb_or, V6_veqb_xor, V6_vgtb, V6_vgtb_and, V...
    O << ".b)";
    return;
    break;
  case 50:
    // V6_vlutvvb_nm, V6_vlutvwh_nm
    O << "):nomatch";
    return;
    break;
  case 51:
    // V6_vrmpybusi, V6_vrmpybusi_acc
    O << ".b,#";
    break;
  case 52:
    // V6_vrounduhub
    O << ".uh):sat";
    return;
    break;
  case 53:
    // V6_vrounduwuh
    O << ".uw):sat";
    return;
    break;
  case 54:
    // V6_vroundwuh
    O << ".w):sat";
    return;
    break;
  }


  // Fragment 5 encoded into 6 bits for 34 unique commands.
  switch ((Bits >> 44) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addi, A2_addp, A2_addsp, A2_paddf, A2_paddfnew, A2_paddif, ...
    O << ')';
    return;
    break;
  case 1:
    // A2_addpsat, A2_addsat, A2_subsat, V6_vasrhubsat, V6_vasrhubsat_alt, V6...
    O << "):sat";
    return;
    break;
  case 2:
    // A2_addsph
    O << "):raw:hi";
    return;
    break;
  case 3:
    // A2_addspl
    O << "):raw:lo";
    return;
    break;
  case 4:
    // A4_addp_c, A4_subp_c
    O << ',';
    printOperand(MI, 1, O);
    O << "):carry";
    return;
    break;
  case 5:
    // C2_muxii, C2_muxir, M4_mpyri_addr, S2_extractu, S2_extractup, S4_extra...
    printOperand(MI, 3, O);
    break;
  case 6:
    // C4_and_and, C4_and_or, C4_or_and, C4_or_or, M4_mpyri_addi, M4_mpyrr_ad...
    O << "))";
    return;
    break;
  case 7:
    // L2_loadalignb_pbr, L2_loadalignh_pbr
    O << ":brev)";
    return;
    break;
  case 8:
    // L2_loadalignb_pci, L2_loadalignh_pci
    O << ":circ(";
    printOperand(MI, 5, O);
    O << "))";
    return;
    break;
  case 9:
    // S2_insert, S2_insertp, V6_vrmpybusi_acc
    printOperand(MI, 4, O);
    O << ')';
    return;
    break;
  case 10:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_...
    O << ") = ";
    break;
  case 11:
    // S4_storeirbf_io, S4_storeirbfnew_io, S4_storeirbt_io, S4_storeirbtnew_...
    O << ") = #";
    printOperand(MI, 3, O);
    return;
    break;
  case 12:
    // V6_vL32b_nt_cur_npred_ai, V6_vL32b_nt_cur_npred_pi, V6_vL32b_nt_cur_np...
    O << "):nt";
    return;
    break;
  case 13:
    // V6_vS32b_nt_new_npred_ai, V6_vS32b_nt_new_npred_pi, V6_vS32b_nt_new_np...
    O << "):nt = ";
    break;
  case 14:
    // V6_vaddcarry, V6_vsubcarry
    O << ".w,";
    printOperand(MI, 1, O);
    O << "):carry";
    return;
    break;
  case 15:
    // V6_vaddw, V6_vaddw_dv, V6_vsubw, V6_vsubw_dv
    O << ".w)";
    return;
    break;
  case 16:
    // V6_vaddwsat, V6_vaddwsat_dv, V6_vsubwsat, V6_vsubwsat_dv
    O << ".w):sat";
    return;
    break;
  case 17:
    // V6_vasrhubrndsat, V6_vasrhubrndsat_alt, V6_vasruhubrndsat, V6_vasruwuh...
    O << "):rnd:sat";
    return;
    break;
  case 18:
    // V6_vgathermh
    O << ".h).h";
    return;
    break;
  case 19:
    // V6_vgathermhw
    O << ".w).h";
    return;
    break;
  case 20:
    // V6_vgathermw
    O << ".w).w";
    return;
    break;
  case 21:
    // V6_vmpahhsat
    O << ".h):sat";
    return;
    break;
  case 22:
    // V6_vmpauhuhsat
    O << ".uh):sat";
    return;
    break;
  case 23:
    // V6_vscattermh
    O << ".h).h = ";
    printOperand(MI, 3, O);
    return;
    break;
  case 24:
    // V6_vscattermh_add
    O << ".h).h += ";
    printOperand(MI, 3, O);
    return;
    break;
  case 25:
    // V6_vscattermh_add_alt
    O << ".h) += ";
    printOperand(MI, 3, O);
    O << ".h";
    return;
    break;
  case 26:
    // V6_vscattermh_alt
    O << ".h) = ";
    printOperand(MI, 3, O);
    O << ".h";
    return;
    break;
  case 27:
    // V6_vscattermhw
    O << ".w).h = ";
    printOperand(MI, 3, O);
    return;
    break;
  case 28:
    // V6_vscattermhw_add
    O << ".w).h += ";
    printOperand(MI, 3, O);
    return;
    break;
  case 29:
    // V6_vscattermw
    O << ".w).w = ";
    printOperand(MI, 3, O);
    return;
    break;
  case 30:
    // V6_vscattermw_add
    O << ".w).w += ";
    printOperand(MI, 3, O);
    return;
    break;
  case 31:
    // V6_vscattermw_add_alt, V6_vscattermwh_add_alt
    O << ".w) += ";
    printOperand(MI, 3, O);
    break;
  case 32:
    // V6_vscattermw_alt, V6_vscattermwh_alt
    O << ".w) = ";
    printOperand(MI, 3, O);
    break;
  case 33:
    // dep_A2_addsat, dep_A2_subsat
    O << "):sat:deprecated";
    return;
    break;
  }


  // Fragment 6 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 50) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // C2_muxii, C2_muxir, S2_extractu, S2_extractup, S4_extract, S4_extractp...
    O << ')';
    return;
    break;
  case 1:
    // M4_mpyri_addr
    O << "))";
    return;
    break;
  case 2:
    // S2_pstorerbf_io, S2_pstorerbnewf_io, S2_pstorerbnewt_io, S2_pstorerbt_...
    printOperand(MI, 3, O);
    break;
  case 3:
    // S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_pi, S2_pstorerbne...
    printOperand(MI, 4, O);
    break;
  case 4:
    // V6_vscattermw_add_alt, V6_vscattermw_alt
    O << ".w";
    return;
    break;
  case 5:
    // V6_vscattermwh_add_alt, V6_vscattermwh_alt
    O << ".h";
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 53) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbt_io,...
    return;
    break;
  case 1:
    // S2_pstorerbnewf_io, S2_pstorerbnewf_pi, S2_pstorerbnewfnew_pi, S2_psto...
    O << ".new";
    return;
    break;
  case 2:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerffnew_pi, S2_pstorerft_io,...
    O << ".h";
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 141 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'c', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 14 */ 'v', '1', '1', ':', '1', '0', 0,
  /* 21 */ 'r', '1', '0', 0,
  /* 25 */ 'v', '1', '0', 0,
  /* 29 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 36 */ 'v', '2', '1', ':', '2', '0', 0,
  /* 43 */ 'r', '2', '0', 0,
  /* 47 */ 'v', '2', '0', 0,
  /* 51 */ 'c', '3', '1', ':', '3', '0', 0,
  /* 58 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 65 */ 'v', '3', '1', ':', '3', '0', 0,
  /* 72 */ 'r', '3', '0', 0,
  /* 76 */ 'v', '3', '0', 0,
  /* 80 */ 'c', '1', ':', '0', 0,
  /* 85 */ 'r', '1', ':', '0', 0,
  /* 90 */ 'v', '1', ':', '0', 0,
  /* 95 */ 'p', '3', ':', '0', 0,
  /* 100 */ 's', 'a', '0', 0,
  /* 104 */ 'l', 'c', '0', 0,
  /* 108 */ 'm', '0', 0,
  /* 111 */ 'p', '0', 0,
  /* 114 */ 'q', '0', 0,
  /* 117 */ 'r', '0', 0,
  /* 120 */ 'c', 's', '0', 0,
  /* 124 */ 'v', '0', 0,
  /* 127 */ 'r', '1', '1', 0,
  /* 131 */ 'v', '1', '1', 0,
  /* 135 */ 'r', '2', '1', 0,
  /* 139 */ 'v', '2', '1', 0,
  /* 143 */ 'r', '3', '1', 0,
  /* 147 */ 'v', '3', '1', 0,
  /* 151 */ 's', 'a', '1', 0,
  /* 155 */ 'l', 'c', '1', 0,
  /* 159 */ 'm', '1', 0,
  /* 162 */ 'p', '1', 0,
  /* 165 */ 'q', '1', 0,
  /* 168 */ 'r', '1', 0,
  /* 171 */ 'c', 's', '1', 0,
  /* 175 */ 'v', '1', 0,
  /* 178 */ 'c', '1', '3', ':', '1', '2', 0,
  /* 185 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 192 */ 'v', '1', '3', ':', '1', '2', 0,
  /* 199 */ 'r', '1', '2', 0,
  /* 203 */ 'v', '1', '2', 0,
  /* 207 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 214 */ 'v', '2', '3', ':', '2', '2', 0,
  /* 221 */ 'r', '2', '2', 0,
  /* 225 */ 'v', '2', '2', 0,
  /* 229 */ 'c', '3', ':', '2', 0,
  /* 234 */ 'r', '3', ':', '2', 0,
  /* 239 */ 'v', '3', ':', '2', 0,
  /* 244 */ 'p', '2', 0,
  /* 247 */ 'q', '2', 0,
  /* 250 */ 'r', '2', 0,
  /* 253 */ 'v', '2', 0,
  /* 256 */ 'r', '1', '3', 0,
  /* 260 */ 'v', '1', '3', 0,
  /* 264 */ 'r', '2', '3', 0,
  /* 268 */ 'v', '2', '3', 0,
  /* 272 */ 'p', '3', 0,
  /* 275 */ 'q', '3', 0,
  /* 278 */ 'r', '3', 0,
  /* 281 */ 'v', '3', 0,
  /* 284 */ 'c', '1', '5', ':', '1', '4', 0,
  /* 291 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 298 */ 'v', '1', '5', ':', '1', '4', 0,
  /* 305 */ 'r', '1', '4', 0,
  /* 309 */ 'v', '1', '4', 0,
  /* 313 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 320 */ 'v', '2', '5', ':', '2', '4', 0,
  /* 327 */ 'r', '2', '4', 0,
  /* 331 */ 'v', '2', '4', 0,
  /* 335 */ 'c', '5', ':', '4', 0,
  /* 340 */ 'r', '5', ':', '4', 0,
  /* 345 */ 'v', '5', ':', '4', 0,
  /* 350 */ 'r', '4', 0,
  /* 353 */ 'v', '4', 0,
  /* 356 */ 'r', '1', '5', 0,
  /* 360 */ 'v', '1', '5', 0,
  /* 364 */ 'r', '2', '5', 0,
  /* 368 */ 'v', '2', '5', 0,
  /* 372 */ 'c', '5', 0,
  /* 375 */ 'r', '5', 0,
  /* 378 */ 'v', '5', 0,
  /* 381 */ 'c', '1', '7', ':', '1', '6', 0,
  /* 388 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 395 */ 'v', '1', '7', ':', '1', '6', 0,
  /* 402 */ 'r', '1', '6', 0,
  /* 406 */ 'v', '1', '6', 0,
  /* 410 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 417 */ 'v', '2', '7', ':', '2', '6', 0,
  /* 424 */ 'r', '2', '6', 0,
  /* 428 */ 'v', '2', '6', 0,
  /* 432 */ 'c', '7', ':', '6', 0,
  /* 437 */ 'r', '7', ':', '6', 0,
  /* 442 */ 'v', '7', ':', '6', 0,
  /* 447 */ 'r', '6', 0,
  /* 450 */ 'v', '6', 0,
  /* 453 */ 'r', '1', '7', 0,
  /* 457 */ 'v', '1', '7', 0,
  /* 461 */ 'r', '2', '7', 0,
  /* 465 */ 'v', '2', '7', 0,
  /* 469 */ 'r', '7', 0,
  /* 472 */ 'v', '7', 0,
  /* 475 */ 'c', '1', '9', ':', '1', '8', 0,
  /* 482 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 489 */ 'v', '1', '9', ':', '1', '8', 0,
  /* 496 */ 'r', '1', '8', 0,
  /* 500 */ 'v', '1', '8', 0,
  /* 504 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 511 */ 'v', '2', '9', ':', '2', '8', 0,
  /* 518 */ 'r', '2', '8', 0,
  /* 522 */ 'v', '2', '8', 0,
  /* 526 */ 'c', '9', ':', '8', 0,
  /* 531 */ 'r', '9', ':', '8', 0,
  /* 536 */ 'v', '9', ':', '8', 0,
  /* 541 */ 'c', '8', 0,
  /* 544 */ 'r', '8', 0,
  /* 547 */ 'v', '8', 0,
  /* 550 */ 'r', '1', '9', 0,
  /* 554 */ 'v', '1', '9', 0,
  /* 558 */ 'r', '2', '9', 0,
  /* 562 */ 'v', '2', '9', 0,
  /* 566 */ 'r', '9', 0,
  /* 569 */ 'v', '9', 0,
  /* 572 */ 'p', 'c', 0,
  /* 575 */ 'u', 's', 'r', '.', 'o', 'v', 'f', 0,
  /* 583 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'h', 'i', 0,
  /* 593 */ 'u', 't', 'i', 'm', 'e', 'r', 'h', 'i', 0,
  /* 602 */ 'p', 'k', 't', 'c', 'o', 'u', 'n', 't', 'h', 'i', 0,
  /* 613 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'l', 'o', 0,
  /* 623 */ 'u', 't', 'i', 'm', 'e', 'r', 'l', 'o', 0,
  /* 632 */ 'p', 'k', 't', 'c', 'o', 'u', 'n', 't', 'l', 'o', 0,
  /* 643 */ 'u', 'g', 'p', 0,
  /* 647 */ 'v', 't', 'm', 'p', 0,
  /* 652 */ 'u', 's', 'r', 0,
  /* 656 */ 'f', 'r', 'a', 'm', 'e', 'l', 'i', 'm', 'i', 't', 0,
  /* 667 */ 'f', 'r', 'a', 'm', 'e', 'k', 'e', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    178, 667, 656, 644, 572, 475, 602, 632, 643, 284, 583, 613, 652, 575, 
    51, 593, 623, 647, 372, 541, 120, 171, 85, 234, 340, 437, 531, 7, 
    185, 291, 388, 482, 29, 207, 313, 410, 504, 58, 104, 155, 108, 159, 
    111, 162, 244, 272, 114, 165, 247, 275, 117, 168, 250, 278, 350, 375, 
    447, 469, 544, 566, 21, 127, 199, 256, 305, 356, 402, 453, 496, 550, 
    43, 135, 221, 264, 327, 364, 424, 461, 518, 558, 72, 143, 100, 151, 
    124, 175, 253, 281, 353, 378, 450, 472, 547, 569, 25, 131, 203, 260, 
    309, 360, 406, 457, 500, 554, 47, 139, 225, 268, 331, 368, 428, 465, 
    522, 562, 76, 147, 90, 239, 345, 442, 536, 14, 192, 298, 395, 489, 
    36, 214, 320, 417, 511, 65, 80, 229, 335, 432, 526, 0, 381, 95, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Hexagon::A2_andir:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 255) {
      // (A2_andir IntRegs:$Rd32, IntRegs:$Rs32, 255)
      AsmString = "$\x01 = zxtb($\x02)";
      break;
    }
    return false;
  case Hexagon::A2_paddif:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (A2_paddif IntRegs:$Rd32, PredRegs:$Pu4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02) $\x01 = $\x03";
      break;
    }
    return false;
  case Hexagon::A2_paddifnew:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (A2_paddifnew IntRegs:$Rd32, PredRegs:$Pu4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02.new) $\x01 = $\x03";
      break;
    }
    return false;
  case Hexagon::A2_paddit:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (A2_paddit IntRegs:$Rd32, PredRegs:$Pu4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02) $\x01 = $\x03";
      break;
    }
    return false;
  case Hexagon::A2_padditnew:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (A2_padditnew IntRegs:$Rd32, PredRegs:$Pu4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02.new) $\x01 = $\x03";
      break;
    }
    return false;
  case Hexagon::A2_subri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (A2_subri IntRegs:$Rd32, 0, IntRegs:$Rs32)
      AsmString = "$\x01 = neg($\x03)";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == -1 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (A2_subri IntRegs:$Rd32, -1, IntRegs:$Rs32)
      AsmString = "$\x01 = not($\x03)";
      break;
    }
    return false;
  case Hexagon::A2_vaddub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (A2_vaddub DoubleRegs:$Rdd32, DoubleRegs:$Rss32, DoubleRegs:$Rtt32)
      AsmString = "$\x01 = vaddb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::A2_vsubub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (A2_vsubub DoubleRegs:$Rdd32, DoubleRegs:$Rss32, DoubleRegs:$Rtt32)
      AsmString = "$\x01 = vsubb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::C2_cmpgt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (C2_cmpgt PredRegs:$Pd4, IntRegs:$Rt32, IntRegs:$Rs32)
      AsmString = "$\x01 = cmp.lt($\x03,$\x02)";
      break;
    }
    return false;
  case Hexagon::C2_cmpgtu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (C2_cmpgtu PredRegs:$Pd4, IntRegs:$Rt32, IntRegs:$Rs32)
      AsmString = "$\x01 = cmp.ltu($\x03,$\x02)";
      break;
    }
    return false;
  case Hexagon::C2_or:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (C2_or PredRegs:$Pd4, PredRegs:$Ps4, PredRegs:$Ps4)
      AsmString = "$\x01 = $\x02";
      break;
    }
    return false;
  case Hexagon::J2_jumpf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (J2_jumpf PredRegs:$Pu4, b30_2Imm:$Ii)
      AsmString = "if (!$\x01) jump $\xFF\x02\x01";
      break;
    }
    return false;
  case Hexagon::J2_jumprf:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (J2_jumprf PredRegs:$Pu4, IntRegs:$Rs32)
      AsmString = "if (!$\x01) jumpr $\x02";
      break;
    }
    return false;
  case Hexagon::J2_jumprt:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (J2_jumprt PredRegs:$Pu4, IntRegs:$Rs32)
      AsmString = "if ($\x01) jumpr $\x02";
      break;
    }
    return false;
  case Hexagon::J2_jumpt:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg())) {
      // (J2_jumpt PredRegs:$Pu4, b30_2Imm:$Ii)
      AsmString = "if ($\x01) jump $\xFF\x02\x01";
      break;
    }
    return false;
  case Hexagon::L2_deallocframe:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).getReg() == Hexagon::R30) {
      // (L2_deallocframe D15, R30)
      AsmString = "deallocframe";
      break;
    }
    return false;
  case Hexagon::L2_loadalignb_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_loadalignb_io DoubleRegs:$Ryy32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memb_fifo($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_loadalignh_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_loadalignh_io DoubleRegs:$Ryy32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memh_fifo($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_loadbsw2_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadbsw2_io IntRegs:$Rd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = membh($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadbsw4_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadbsw4_io DoubleRegs:$Rdd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = membh($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadbzw2_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadbzw2_io IntRegs:$Rd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memubh($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadbzw4_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadbzw4_io DoubleRegs:$Rdd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memubh($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadrb_io IntRegs:$Rd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memb($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrd_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadrd_io DoubleRegs:$Rdd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memd($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrh_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadrh_io IntRegs:$Rd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memh($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadri_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadri_io IntRegs:$Rd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memw($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadrub_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadrub_io IntRegs:$Rd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memub($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_loadruh_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (L2_loadruh_io IntRegs:$Rd32, IntRegs:$Rs32, 0)
      AsmString = "$\x01 = memuh($\x02)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrbf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrbf_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02) $\x01 = memb($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrbfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrbfnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02.new) $\x01 = memb($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrbt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrbt_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02) $\x01 = memb($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrbtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrbtnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02.new) $\x01 = memb($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrdf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrdf_io DoubleRegs:$Rdd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02) $\x01 = memd($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrdfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrdfnew_io DoubleRegs:$Rdd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02.new) $\x01 = memd($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrdt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrdt_io DoubleRegs:$Rdd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02) $\x01 = memd($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrdtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrdtnew_io DoubleRegs:$Rdd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02.new) $\x01 = memd($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrhf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrhf_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02) $\x01 = memh($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrhfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrhfnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02.new) $\x01 = memh($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrht_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrht_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02) $\x01 = memh($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrhtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrhtnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02.new) $\x01 = memh($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrif_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrif_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02) $\x01 = memw($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrifnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrifnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02.new) $\x01 = memw($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrit_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrit_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02) $\x01 = memw($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadritnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadritnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02.new) $\x01 = memw($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrubf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrubf_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02) $\x01 = memub($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrubfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrubfnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02.new) $\x01 = memub($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrubt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrubt_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02) $\x01 = memub($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadrubtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadrubtnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02.new) $\x01 = memub($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadruhf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadruhf_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02) $\x01 = memuh($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadruhfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadruhfnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if (!$\x02.new) $\x01 = memuh($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadruht_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadruht_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02) $\x01 = memuh($\x03)";
      break;
    }
    return false;
  case Hexagon::L2_ploadruhtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (L2_ploadruhtnew_io IntRegs:$Rd32, PredRegs:$Pt4, IntRegs:$Rs32, 0)
      AsmString = "if ($\x02.new) $\x01 = memuh($\x03)";
      break;
    }
    return false;
  case Hexagon::L4_add_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_add_memopb_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memb($\x01) += $\x03";
      break;
    }
    return false;
  case Hexagon::L4_add_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_add_memoph_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memh($\x01) += $\x03";
      break;
    }
    return false;
  case Hexagon::L4_add_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_add_memopw_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memw($\x01) += $\x03";
      break;
    }
    return false;
  case Hexagon::L4_and_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_and_memopb_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memb($\x01) &= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_and_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_and_memoph_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memh($\x01) &= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_and_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_and_memopw_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memw($\x01) &= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_iadd_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_iadd_memopb_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memb($\x01) += #$\x03";
      break;
    }
    return false;
  case Hexagon::L4_iadd_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_iadd_memoph_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memh($\x01) += #$\x03";
      break;
    }
    return false;
  case Hexagon::L4_iadd_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_iadd_memopw_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memw($\x01) += #$\x03";
      break;
    }
    return false;
  case Hexagon::L4_iand_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_iand_memopb_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memb($\x01) = clrbit(#$\x03)";
      break;
    }
    return false;
  case Hexagon::L4_iand_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_iand_memoph_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memh($\x01) = clrbit(#$\x03)";
      break;
    }
    return false;
  case Hexagon::L4_iand_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_iand_memopw_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memw($\x01) = clrbit(#$\x03)";
      break;
    }
    return false;
  case Hexagon::L4_ior_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_ior_memopb_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memb($\x01) = setbit(#$\x03)";
      break;
    }
    return false;
  case Hexagon::L4_ior_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_ior_memoph_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memh($\x01) = setbit(#$\x03)";
      break;
    }
    return false;
  case Hexagon::L4_ior_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_ior_memopw_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memw($\x01) = setbit(#$\x03)";
      break;
    }
    return false;
  case Hexagon::L4_isub_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_isub_memopb_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memb($\x01) -= #$\x03";
      break;
    }
    return false;
  case Hexagon::L4_isub_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_isub_memoph_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memh($\x01) -= #$\x03";
      break;
    }
    return false;
  case Hexagon::L4_isub_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (L4_isub_memopw_io IntRegs:$Rs32, 0, u5_0Imm:$II)
      AsmString = "memw($\x01) -= #$\x03";
      break;
    }
    return false;
  case Hexagon::L4_or_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_or_memopb_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memb($\x01) |= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_or_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_or_memoph_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memh($\x01) |= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_or_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_or_memopw_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memw($\x01) |= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_return:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).getReg() == Hexagon::R30) {
      // (L4_return D15, R30)
      AsmString = "dealloc_return";
      break;
    }
    return false;
  case Hexagon::L4_return_f:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Hexagon::R30) {
      // (L4_return_f D15, PredRegs:$Pv4, R30)
      AsmString = "if (!$\x02) dealloc_return";
      break;
    }
    return false;
  case Hexagon::L4_return_fnew_pnt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Hexagon::R30) {
      // (L4_return_fnew_pnt D15, PredRegs:$Pv4, R30)
      AsmString = "if (!$\x02.new) dealloc_return:nt";
      break;
    }
    return false;
  case Hexagon::L4_return_fnew_pt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Hexagon::R30) {
      // (L4_return_fnew_pt D15, PredRegs:$Pv4, R30)
      AsmString = "if (!$\x02.new) dealloc_return:t";
      break;
    }
    return false;
  case Hexagon::L4_return_t:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Hexagon::R30) {
      // (L4_return_t D15, PredRegs:$Pv4, R30)
      AsmString = "if ($\x02) dealloc_return";
      break;
    }
    return false;
  case Hexagon::L4_return_tnew_pnt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Hexagon::R30) {
      // (L4_return_tnew_pnt D15, PredRegs:$Pv4, R30)
      AsmString = "if ($\x02.new) dealloc_return:nt";
      break;
    }
    return false;
  case Hexagon::L4_return_tnew_pt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Hexagon::D15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Hexagon::R30) {
      // (L4_return_tnew_pt D15, PredRegs:$Pv4, R30)
      AsmString = "if ($\x02.new) dealloc_return:t";
      break;
    }
    return false;
  case Hexagon::L4_sub_memopb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_sub_memopb_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memb($\x01) -= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_sub_memoph_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_sub_memoph_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memh($\x01) -= $\x03";
      break;
    }
    return false;
  case Hexagon::L4_sub_memopw_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (L4_sub_memopw_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memw($\x01) -= $\x03";
      break;
    }
    return false;
  case Hexagon::M2_mpyi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (M2_mpyi IntRegs:$Rd32, IntRegs:$Rs32, IntRegs:$Rt32)
      AsmString = "$\x01 = mpyui($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::S2_allocframe:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Hexagon::R29) {
      // (S2_allocframe R29, u11_3Imm:$Ii)
      AsmString = "allocframe(#$\x03)";
      break;
    }
    return false;
  case Hexagon::S2_pstorerbf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerbf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01) memb($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_pstorerbnewf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerbnewf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if (!$\x01) memb($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S2_pstorerbnewt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerbnewt_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if ($\x01) memb($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S2_pstorerbt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerbt_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01) memb($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_pstorerdf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerdf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, DoubleRegs:$Rtt32)
      AsmString = "if (!$\x01) memd($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_pstorerdt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerdt_io PredRegs:$Pv4, IntRegs:$Rs32, 0, DoubleRegs:$Rtt32)
      AsmString = "if ($\x01) memd($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_pstorerff_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerff_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01) memh($\x02) = $\x04.h";
      break;
    }
    return false;
  case Hexagon::S2_pstorerft_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerft_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01) memh($\x02) = $\x04.h";
      break;
    }
    return false;
  case Hexagon::S2_pstorerhf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerhf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01) memh($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_pstorerhnewf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerhnewf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if (!$\x01) memh($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S2_pstorerhnewt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerhnewt_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if ($\x01) memh($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S2_pstorerht_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerht_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01) memh($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_pstorerif_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerif_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01) memw($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_pstorerinewf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerinewf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if (!$\x01) memw($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S2_pstorerinewt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerinewt_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if ($\x01) memw($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S2_pstorerit_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S2_pstorerit_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01) memw($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S2_storerb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storerb_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memb($\x01) = $\x03";
      break;
    }
    return false;
  case Hexagon::S2_storerbnew_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storerbnew_io IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "memb($\x01) = $\x03.new";
      break;
    }
    return false;
  case Hexagon::S2_storerd_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storerd_io IntRegs:$Rs32, 0, DoubleRegs:$Rtt32)
      AsmString = "memd($\x01) = $\x03";
      break;
    }
    return false;
  case Hexagon::S2_storerf_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storerf_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memh($\x01) = $\x03.h";
      break;
    }
    return false;
  case Hexagon::S2_storerh_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storerh_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memh($\x01) = $\x03";
      break;
    }
    return false;
  case Hexagon::S2_storerhnew_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storerhnew_io IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "memh($\x01) = $\x03.new";
      break;
    }
    return false;
  case Hexagon::S2_storeri_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storeri_io IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "memw($\x01) = $\x03";
      break;
    }
    return false;
  case Hexagon::S2_storerinew_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_storerinew_io IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "memw($\x01) = $\x03.new";
      break;
    }
    return false;
  case Hexagon::S2_tableidxb:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (S2_tableidxb IntRegs:$Rx32, IntRegs:$Rs32, u4_0Imm:$Ii, u5_0Imm:$II)
      AsmString = "$\x01 = tableidxb($\x03,#$\x04,#$\x05)";
      break;
    }
    return false;
  case Hexagon::S4_pstorerbfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerbfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01.new) memb($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_pstorerbnewfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerbnewfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if (!$\x01.new) memb($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S4_pstorerbnewtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerbnewtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if ($\x01.new) memb($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S4_pstorerbtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerbtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01.new) memb($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_pstorerdfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerdfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, DoubleRegs:$Rtt32)
      AsmString = "if (!$\x01.new) memd($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_pstorerdtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerdtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, DoubleRegs:$Rtt32)
      AsmString = "if ($\x01.new) memd($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_pstorerffnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerffnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01.new) memh($\x02) = $\x04.h";
      break;
    }
    return false;
  case Hexagon::S4_pstorerftnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerftnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01.new) memh($\x02) = $\x04.h";
      break;
    }
    return false;
  case Hexagon::S4_pstorerhfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerhfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01.new) memh($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_pstorerhnewfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerhnewfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if (!$\x01.new) memh($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S4_pstorerhnewtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerhnewtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if ($\x01.new) memh($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S4_pstorerhtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerhtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01.new) memh($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_pstorerifnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerifnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if (!$\x01.new) memw($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_pstorerinewfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerinewfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if (!$\x01.new) memw($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S4_pstorerinewtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstorerinewtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Nt8)
      AsmString = "if ($\x01.new) memw($\x02) = $\x04.new";
      break;
    }
    return false;
  case Hexagon::S4_pstoreritnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (S4_pstoreritnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, IntRegs:$Rt32)
      AsmString = "if ($\x01.new) memw($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirb_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (S4_storeirb_io IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "memb($\x01) = #$\x03";
      break;
    }
    return false;
  case Hexagon::S4_storeirbf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirbf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if (!$\x01) memb($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirbfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirbfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if (!$\x01.new) memb($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirbt_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirbt_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if ($\x01) memb($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirbtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirbtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if ($\x01.new) memb($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirh_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (S4_storeirh_io IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "memh($\x01) = #$\x03";
      break;
    }
    return false;
  case Hexagon::S4_storeirhf_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirhf_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if (!$\x01) memh($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirhfnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirhfnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if (!$\x01.new) memh($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirht_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirht_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if ($\x01) memh($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirhtnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirhtnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if ($\x01.new) memh($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeiri_io:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (S4_storeiri_io IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "memw($\x01) = #$\x03";
      break;
    }
    return false;
  case Hexagon::S4_storeirif_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirif_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if (!$\x01) memw($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirifnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirifnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if (!$\x01.new) memw($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeirit_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeirit_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if ($\x01) memw($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::S4_storeiritnew_io:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (S4_storeiritnew_io PredRegs:$Pv4, IntRegs:$Rs32, 0, s32_0Imm:$II)
      AsmString = "if ($\x01.new) memw($\x02) = #$\x04";
      break;
    }
    return false;
  case Hexagon::V6_extractw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_extractw IntRegs:$Rd32, HvxVR:$Vu32, IntRegs:$Rs32)
      AsmString = "$\x01.w = vextract($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vL32Ub_ai:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (V6_vL32Ub_ai HvxVR:$Vd32, IntRegs:$Rt32, 0)
      AsmString = "$\x01 = vmemu($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_ai:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (V6_vL32b_ai HvxVR:$Vd32, IntRegs:$Rt32, 0)
      AsmString = "$\x01 = vmem($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_cur_npred_pi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (V6_vL32b_cur_npred_pi HvxVR:$Vd32, IntRegs:$Rt32, PredRegs:$Pv4, 0)
      AsmString = "if (!$\x03) $\x01.cur = vmem($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_cur_pred_pi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (V6_vL32b_cur_pred_pi HvxVR:$Vd32, IntRegs:$Rt32, PredRegs:$Pv4, 0)
      AsmString = "if ($\x03) $\x01.cur = vmem($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_npred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (V6_vL32b_npred_ai HvxVR:$Vd32, PredRegs:$Pv4, IntRegs:$Rt32, 0)
      AsmString = "if (!$\x02) $\x01.tmp = vmem($\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_npred_pi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (V6_vL32b_npred_pi HvxVR:$Vd32, IntRegs:$Rt32, PredRegs:$Pv4, 0)
      AsmString = "if (!$\x03) $\x01 = vmem($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_nt_cur_npred_pi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (V6_vL32b_nt_cur_npred_pi HvxVR:$Vd32, IntRegs:$Rt32, PredRegs:$Pv4, 0)
      AsmString = "if (!$\x03) $\x01.cur = vmem($\x02):nt";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_nt_cur_pred_pi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (V6_vL32b_nt_cur_pred_pi HvxVR:$Vd32, IntRegs:$Rt32, PredRegs:$Pv4, 0)
      AsmString = "if ($\x03) $\x01.cur = vmem($\x02):nt";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_nt_npred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (V6_vL32b_nt_npred_ai HvxVR:$Vd32, PredRegs:$Pv4, IntRegs:$Rt32, 0)
      AsmString = "if (!$\x02) $\x01.tmp = vmem($\x03):nt";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_nt_npred_pi:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (V6_vL32b_nt_npred_pi HvxVR:$Vd32, IntRegs:$Rt32, PredRegs:$Pv4, 0)
      AsmString = "if (!$\x03) $\x01 = vmem($\x02):nt";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_nt_pred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (V6_vL32b_nt_pred_ai HvxVR:$Vd32, PredRegs:$Pv4, IntRegs:$Rt32, 0)
      AsmString = "if ($\x02) $\x01 = vmem($\x03):nt";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_nt_tmp_pred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (V6_vL32b_nt_tmp_pred_ai HvxVR:$Vd32, PredRegs:$Pv4, IntRegs:$Rt32, 0)
      AsmString = "if ($\x02) $\x01.tmp = vmem($\x03):nt";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_pred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (V6_vL32b_pred_ai HvxVR:$Vd32, PredRegs:$Pv4, IntRegs:$Rt32, 0)
      AsmString = "if ($\x02) $\x01 = vmem($\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vL32b_tmp_pred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (V6_vL32b_tmp_pred_ai HvxVR:$Vd32, PredRegs:$Pv4, IntRegs:$Rt32, 0)
      AsmString = "if ($\x02) $\x01.tmp = vmem($\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vS32Ub_ai:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vS32Ub_ai IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "vmemu($\x01) = $\x03";
      break;
    }
    return false;
  case Hexagon::V6_vS32Ub_npred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32Ub_npred_ai PredRegs:$Pv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if (!$\x01) vmemu($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32Ub_pred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32Ub_pred_ai PredRegs:$Pv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if ($\x01) vmemu($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_ai:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vS32b_ai IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "vmem($\x01) = $\x03";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_new_ai:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vS32b_new_ai IntRegs:$Rt32, 0, HvxVR:$Os8)
      AsmString = "vmem($\x01) = $\x03.new";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_npred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_npred_ai PredRegs:$Pv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if (!$\x01) vmem($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_nqpred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_nqpred_ai HvxQR:$Qv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if (!$\x01) vmem($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_nt_ai:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vS32b_nt_ai IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "vmem($\x01):nt = $\x03";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_nt_new_ai:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vS32b_nt_new_ai IntRegs:$Rt32, 0, HvxVR:$Os8)
      AsmString = "vmem($\x01):nt = $\x03.new";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_nt_npred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_nt_npred_ai PredRegs:$Pv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if (!$\x01) vmem($\x02):nt = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_nt_nqpred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_nt_nqpred_ai HvxQR:$Qv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if (!$\x01) vmem($\x02):nt = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_nt_pred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_nt_pred_ai PredRegs:$Pv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if ($\x01) vmem($\x02):nt = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_nt_qpred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_nt_qpred_ai HvxQR:$Qv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if ($\x01) vmem($\x02):nt = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_pred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::PredRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_pred_ai PredRegs:$Pv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if ($\x01) vmem($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vS32b_qpred_ai:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vS32b_qpred_ai HvxQR:$Qv4, IntRegs:$Rt32, 0, HvxVR:$Vs32)
      AsmString = "if ($\x01) vmem($\x02) = $\x04";
      break;
    }
    return false;
  case Hexagon::V6_vabsb_sat:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vabsb_sat HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vabsb($\x02):sat";
      break;
    }
    return false;
  case Hexagon::V6_vabsdiffh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vabsdiffh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vabsdiffh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vabsdiffub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vabsdiffub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vabsdiffub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vabsdiffuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vabsdiffuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vabsdiffuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vabsdiffw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vabsdiffw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vabsdiffw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vabsh_sat:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vabsh_sat HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vabsh($\x02):sat";
      break;
    }
    return false;
  case Hexagon::V6_vabsw_sat:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vabsw_sat HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vabsw($\x02):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddb_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddb_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vaddb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddbnq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddbnq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if (!$\x02.b) $\x01.b += $\x04.b";
      break;
    }
    return false;
  case Hexagon::V6_vaddbq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddbq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if ($\x02.b) $\x01.b += $\x04.b";
      break;
    }
    return false;
  case Hexagon::V6_vaddbsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddbsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddb($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddbsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddbsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vaddb($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddh_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddh_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vaddh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddhnq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddhnq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if (!$\x02.h) $\x01.h += $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vaddhq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddhq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if ($\x02.h) $\x01.h += $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vaddhsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddhsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddhsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddhsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vaddh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddhw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddhw HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddhw_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddhw_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vaddh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vaddubh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddubh HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddubh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddubh_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vaddub($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vaddubsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddubsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddub($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddubsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddubsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vaddub($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vadduhsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vadduhsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vadduh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vadduhsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vadduhsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vadduh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vadduhw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vadduhw HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vadduh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vadduhw_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vadduhw_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vadduh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vadduwsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vadduwsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vadduw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vadduwsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vadduwsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vadduw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddw_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddw_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vaddw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaddwnq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddwnq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if (!$\x02.w) $\x01.w += $\x04.w";
      break;
    }
    return false;
  case Hexagon::V6_vaddwq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaddwq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if ($\x02.w) $\x01.w += $\x04.w";
      break;
    }
    return false;
  case Hexagon::V6_vaddwsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddwsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaddw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vaddwsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaddwsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vaddw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vandnqrt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vandnqrt HvxVR:$Vd32, HvxQR:$Qu4, IntRegs:$Rt32)
      AsmString = "$\x01.ub = vand(!$\x02.ub,$\x03.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vandnqrt_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vandnqrt_acc HvxVR:$Vx32, HvxQR:$Qu4, IntRegs:$Rt32)
      AsmString = "$\x01.ub |= vand(!$\x03.ub,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vandqrt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vandqrt HvxVR:$Vd32, HvxQR:$Qu4, IntRegs:$Rt32)
      AsmString = "$\x01.ub = vand($\x02.ub,$\x03.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vandqrt_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vandqrt_acc HvxVR:$Vx32, HvxQR:$Qu4, IntRegs:$Rt32)
      AsmString = "$\x01.ub |= vand($\x03.ub,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vandvrt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vandvrt HvxQR:$Qd4, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01.ub = vand($\x02.ub,$\x03.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vandvrt_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vandvrt_acc HvxQR:$Qx4, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01.ub |= vand($\x03.ub,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vaslh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaslh HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vaslh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaslh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaslh_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vaslh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vaslhv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaslhv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaslh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaslw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaslw HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vaslw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vaslw_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vaslw_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vaslw($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vaslwv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vaslwv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vaslw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vasrh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vasrh HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vasrh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vasrh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vasrh_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vasrh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vasrhbrndsat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsLow8RegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vasrhbrndsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32, IntRegsLow8:$Rt8)
      AsmString = "$\x01 = vasrhb($\x02,$\x03,$\x04):rnd:sat";
      break;
    }
    return false;
  case Hexagon::V6_vasrhubrndsat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsLow8RegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vasrhubrndsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32, IntRegsLow8:$Rt8)
      AsmString = "$\x01 = vasrhub($\x02,$\x03,$\x04):rnd:sat";
      break;
    }
    return false;
  case Hexagon::V6_vasrhubsat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsLow8RegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vasrhubsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32, IntRegsLow8:$Rt8)
      AsmString = "$\x01 = vasrhub($\x02,$\x03,$\x04):sat";
      break;
    }
    return false;
  case Hexagon::V6_vasrhv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vasrhv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vasrh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vasrw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vasrw HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vasrw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vasrw_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vasrw_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vasrw($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vasrwhrndsat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsLow8RegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vasrwhrndsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32, IntRegsLow8:$Rt8)
      AsmString = "$\x01 = vasrwh($\x02,$\x03,$\x04):rnd:sat";
      break;
    }
    return false;
  case Hexagon::V6_vasrwuhsat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsLow8RegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vasrwuhsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32, IntRegsLow8:$Rt8)
      AsmString = "$\x01 = vasrwuh($\x02,$\x03,$\x04):sat";
      break;
    }
    return false;
  case Hexagon::V6_vasrwv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vasrwv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vasrw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vavgb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavgb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vavgbrnd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavgbrnd HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgb($\x02,$\x03):rnd";
      break;
    }
    return false;
  case Hexagon::V6_vavgh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavgh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vavghrnd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavghrnd HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgh($\x02,$\x03):rnd";
      break;
    }
    return false;
  case Hexagon::V6_vavgub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavgub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vavgubrnd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavgubrnd HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgub($\x02,$\x03):rnd";
      break;
    }
    return false;
  case Hexagon::V6_vavguh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavguh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavguh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vavguhrnd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavguhrnd HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavguh($\x02,$\x03):rnd";
      break;
    }
    return false;
  case Hexagon::V6_vavguw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavguw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavguw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vavguwrnd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavguwrnd HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavguw($\x02,$\x03):rnd";
      break;
    }
    return false;
  case Hexagon::V6_vavgw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavgw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vavgwrnd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vavgwrnd HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vavgw($\x02,$\x03):rnd";
      break;
    }
    return false;
  case Hexagon::V6_vcl0h:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vcl0h HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vcl0h($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vcl0w:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vcl0w HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vcl0w($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vdealb:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vdealb HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vdealb($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vdealb4w:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdealb4w HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vdealb4w($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vdealh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vdealh HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vdealh($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpybus:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpybus HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpybus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpybus_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpybus_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpybus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpybus_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpybus_dv HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpybus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpybus_dv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpybus_dv_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpybus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpyhb HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpyhb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhb_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpyhb_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpyhb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhb_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpyhb_dv HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpyhb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhb_dv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpyhb_dv_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpyhb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhisat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpyhisat HvxVR:$Vd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpyh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhisat_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpyhisat_acc HvxVR:$Vx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpyh($\x03,$\x04):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpyhsat HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpyh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhsat_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpyhsat_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpyh($\x03,$\x04):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhsuisat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpyhsuisat HvxVR:$Vd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpyhsu($\x02,$\x03,#1):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhsuisat_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpyhsuisat_acc HvxVR:$Vx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpyhsu($\x03,$\x04,#1):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhsusat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpyhsusat HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdmpyhsu($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhsusat_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpyhsusat_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdmpyhsu($\x03,$\x04):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhvsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdmpyhvsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vdmpyh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdmpyhvsat_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdmpyhvsat_acc HvxVR:$Vx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vdmpyh($\x03,$\x04):sat";
      break;
    }
    return false;
  case Hexagon::V6_vdsaduh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vdsaduh HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vdsaduh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vdsaduh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vdsaduh_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vdsaduh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_veqb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_veqb HvxQR:$Qd4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vcmp.eq($\x02.ub,$\x03.ub)";
      break;
    }
    return false;
  case Hexagon::V6_veqb_and:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqb_and HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 &= vcmp.eq($\x03.ub,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_veqb_or:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqb_or HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 |= vcmp.eq($\x03.ub,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_veqb_xor:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqb_xor HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 ^= vcmp.eq($\x03.ub,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_veqh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_veqh HvxQR:$Qd4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vcmp.eq($\x02.uh,$\x03.uh)";
      break;
    }
    return false;
  case Hexagon::V6_veqh_and:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqh_and HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 &= vcmp.eq($\x03.uh,$\x04.uh)";
      break;
    }
    return false;
  case Hexagon::V6_veqh_or:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqh_or HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 |= vcmp.eq($\x03.uh,$\x04.uh)";
      break;
    }
    return false;
  case Hexagon::V6_veqh_xor:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqh_xor HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 ^= vcmp.eq($\x03.uh,$\x04.uh)";
      break;
    }
    return false;
  case Hexagon::V6_veqw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_veqw HvxQR:$Qd4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vcmp.eq($\x02.uw,$\x03.uw)";
      break;
    }
    return false;
  case Hexagon::V6_veqw_and:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqw_and HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 &= vcmp.eq($\x03.uw,$\x04.uw)";
      break;
    }
    return false;
  case Hexagon::V6_veqw_or:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqw_or HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 |= vcmp.eq($\x03.uw,$\x04.uw)";
      break;
    }
    return false;
  case Hexagon::V6_veqw_xor:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_veqw_xor HvxQR:$Qx4, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 ^= vcmp.eq($\x03.uw,$\x04.uw)";
      break;
    }
    return false;
  case Hexagon::V6_vlsrh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vlsrh HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vlsrh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vlsrhv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vlsrhv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vlsrh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vlsrw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vlsrw HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vlsrw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vlsrwv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vlsrwv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vlsrw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmaxb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmaxb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmaxb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmaxh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmaxh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmaxh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmaxub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmaxub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmaxub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmaxuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmaxuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmaxuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmaxw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmaxw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmaxw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vminb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vminb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vminb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vminh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vminh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vminh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vminub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vminub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vminub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vminuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vminuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vminuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vminw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vminw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vminw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpabus:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpabus HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpabus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpabus_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpabus_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpabus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpabusv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpabusv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vmpabus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpabuu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpabuu HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpabuu($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpabuu_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpabuu_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpabuu($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpabuuv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpabuuv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vmpabuu($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpahb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpahb HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpahb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpahb_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpahb_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpahb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpauhb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpauhb HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpauhb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpauhb_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpauhb_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpauhb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpybus:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpybus HvxWR:$Vdd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpybus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpybus_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpybus_acc HvxWR:$Vxx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpybus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpybusv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpybusv HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpybus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpybusv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpybusv_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpybus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpybv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpybv HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpybv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpybv_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyewuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyewuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyewuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyh HvxWR:$Vdd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyh_acc HvxWR:$Vxx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhsat_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyhsat_acc HvxWR:$Vxx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyh($\x03,$\x04):sat";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhsrs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyhsrs HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyh($\x02,$\x03):<<1:rnd:sat";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhss:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyhss HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyh($\x02,$\x03):<<1:sat";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhus:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyhus HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyhus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhus_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyhus_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyhus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyhv HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyhv_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyhvsrs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyhvsrs HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyh($\x02,$\x03):<<1:rnd:sat";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiewh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyiewh_acc HvxVR:$Vx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyiewh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiewuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyiewuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyiewuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiewuh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyiewuh_acc HvxVR:$Vx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyiewuh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyih:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyih HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyih($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyih_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyih_acc HvxVR:$Vx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyih($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyihb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyihb HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyihb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyihb_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyihb_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyihb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiowh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyiowh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyiowh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiwb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyiwb HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyiwb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiwb_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyiwb_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyiwb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiwh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyiwh HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyiwh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiwh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyiwh_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyiwh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiwub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyiwub HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyiwub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyiwub_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyiwub_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyiwub($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyowh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyowh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyowh($\x02,$\x03):<<1:sat";
      break;
    }
    return false;
  case Hexagon::V6_vmpyowh_rnd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyowh_rnd HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyowh($\x02,$\x03):<<1:rnd:sat";
      break;
    }
    return false;
  case Hexagon::V6_vmpyub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyub HvxWR:$Vdd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyub_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyub_acc HvxWR:$Vxx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyub($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyubv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyubv HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyubv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyubv_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyub($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyuh HvxWR:$Vdd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vmpyuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyuh_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyuh_acc HvxWR:$Vxx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vmpyuh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyuhv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vmpyuhv HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vmpyuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vmpyuhv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vmpyuhv_acc HvxWR:$Vxx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vmpyuh($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vnavgb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vnavgb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vnavgb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vnavgh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vnavgh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vnavgh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vnavgub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vnavgub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vnavgub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vnavgw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vnavgw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vnavgw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vnormamth:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vnormamth HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vnormamth($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vnormamtw:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vnormamtw HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vnormamtw($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vpackeb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackeb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackeb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vpackeh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackeh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackeh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vpackhb_sat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackhb_sat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackhb($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vpackhub_sat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackhub_sat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackhub($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vpackob:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackob HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackob($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vpackoh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackoh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackoh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vpackwh_sat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackwh_sat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackwh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vpackwuh_sat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vpackwuh_sat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vpackwuh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vpopcounth:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vpopcounth HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vpopcounth($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybub_rtt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpybub_rtt HvxWR:$Vdd32, HvxVR:$Vu32, DoubleRegs:$Rtt32)
      AsmString = "$\x01.w = vrmpy($\x02.b,$\x03.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybub_rtt_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpybub_rtt_acc HvxWR:$Vxx32, HvxVR:$Vu32, DoubleRegs:$Rtt32)
      AsmString = "$\x01.w += vrmpy($\x03.b,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybus:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpybus HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vrmpybus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybus_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpybus_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vrmpybus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybusi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpybusi HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32, u1_0Imm:$Ii)
      AsmString = "$\x01 = vrmpybus($\x02,$\x03,#$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybusi_acc:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpybusi_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32, u1_0Imm:$Ii)
      AsmString = "$\x01 += vrmpybus($\x03,$\x04,#$\x05)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybusv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpybusv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vrmpybus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybusv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpybusv_acc HvxVR:$Vx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vrmpybus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpybv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vrmpyb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpybv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpybv_acc HvxVR:$Vx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vrmpyb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpyub HvxVR:$Vd32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vrmpyub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyub_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpyub_acc HvxVR:$Vx32, HvxVR:$Vu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vrmpyub($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyub_rtt:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpyub_rtt HvxWR:$Vdd32, HvxVR:$Vu32, DoubleRegs:$Rtt32)
      AsmString = "$\x01.uw = vrmpy($\x02.ub,$\x03.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyub_rtt_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::DoubleRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpyub_rtt_acc HvxWR:$Vxx32, HvxVR:$Vu32, DoubleRegs:$Rtt32)
      AsmString = "$\x01.uw += vrmpy($\x03.ub,$\x04.ub)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyubi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpyubi HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32, u1_0Imm:$Ii)
      AsmString = "$\x01 = vrmpyub($\x02,$\x03,#$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyubi_acc:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpyubi_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32, u1_0Imm:$Ii)
      AsmString = "$\x01 += vrmpyub($\x03,$\x04,#$\x05)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyubv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrmpyubv HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vrmpyub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vrmpyubv_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrmpyubv_acc HvxVR:$Vx32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 += vrmpyub($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vroundhb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vroundhb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vroundhb($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vroundhub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vroundhub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vroundhub($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vrounduhub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrounduhub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vrounduhub($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vrounduwuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrounduwuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vrounduwuh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vroundwh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vroundwh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vroundwh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vroundwuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vroundwuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vroundwuh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vrsadubi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vrsadubi HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32, u1_0Imm:$Ii)
      AsmString = "$\x01 = vrsadub($\x02,$\x03,#$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vrsadubi_acc:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vrsadubi_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32, u1_0Imm:$Ii)
      AsmString = "$\x01 += vrsadub($\x03,$\x04,#$\x05)";
      break;
    }
    return false;
  case Hexagon::V6_vsathub:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsathub HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsathub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsatuwuh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsatuwuh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsatuwuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsatwh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsatwh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsatwh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsb:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vsb HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vsxtb($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vscattermh:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vscattermh IntRegs:$Rt32, ModRegs:$Mu2, HvxVR:$Vv32, HvxVR:$Vw32)
      AsmString = "vscatter($\x01,$\x02,$\x03.h) = $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vscattermh_add:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vscattermh_add IntRegs:$Rt32, ModRegs:$Mu2, HvxVR:$Vv32, HvxVR:$Vw32)
      AsmString = "vscatter($\x01,$\x02,$\x03.h) += $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vscattermhq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(4).getReg())) {
      // (V6_vscattermhq HvxQR:$Qs4, IntRegs:$Rt32, ModRegs:$Mu2, HvxVR:$Vv32, HvxVR:$Vw32)
      AsmString = "if ($\x01) vscatter($\x02,$\x03,$\x04.h) = $\x05.h";
      break;
    }
    return false;
  case Hexagon::V6_vscattermhw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vscattermhw IntRegs:$Rt32, ModRegs:$Mu2, HvxWR:$Vvv32, HvxVR:$Vw32)
      AsmString = "vscatter($\x01,$\x02,$\x03.w) = $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vscattermhw_add:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vscattermhw_add IntRegs:$Rt32, ModRegs:$Mu2, HvxWR:$Vvv32, HvxVR:$Vw32)
      AsmString = "vscatter($\x01,$\x02,$\x03.w) += $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vscattermhwq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(4).getReg())) {
      // (V6_vscattermhwq HvxQR:$Qs4, IntRegs:$Rt32, ModRegs:$Mu2, HvxWR:$Vvv32, HvxVR:$Vw32)
      AsmString = "if ($\x01) vscatter($\x02,$\x03,$\x04.w) = $\x05.h";
      break;
    }
    return false;
  case Hexagon::V6_vscattermw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vscattermw IntRegs:$Rt32, ModRegs:$Mu2, HvxVR:$Vv32, HvxVR:$Vw32)
      AsmString = "vscatter($\x01,$\x02,$\x03.w) = $\x04.w";
      break;
    }
    return false;
  case Hexagon::V6_vscattermw_add:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vscattermw_add IntRegs:$Rt32, ModRegs:$Mu2, HvxVR:$Vv32, HvxVR:$Vw32)
      AsmString = "vscatter($\x01,$\x02,$\x03.w) += $\x04.w";
      break;
    }
    return false;
  case Hexagon::V6_vscattermwq:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::ModRegsRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(4).getReg())) {
      // (V6_vscattermwq HvxQR:$Qs4, IntRegs:$Rt32, ModRegs:$Mu2, HvxVR:$Vv32, HvxVR:$Vw32)
      AsmString = "if ($\x01) vscatter($\x02,$\x03,$\x04.w) = $\x05.w";
      break;
    }
    return false;
  case Hexagon::V6_vsh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vsh HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vsxth($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vshufeh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vshufeh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vshuffeh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vshuff:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vshuff HvxVR:$Vy32, HvxVR:$Vx32, IntRegs:$Rt32)
      AsmString = "vtrans2x2($\x01,$\x02,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vshuffb:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vshuffb HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vshuffb($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vshuffeb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vshuffeb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vshuffeb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vshuffh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vshuffh HvxVR:$Vd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vshuffh($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vshuffob:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vshuffob HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vshuffob($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vshufoeb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vshufoeb HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vshuffoeb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vshufoeh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vshufoeh HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vshuffoeh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vshufoh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vshufoh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vshuffoh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubb HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubb_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubb_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubbnq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vsubbnq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if (!$\x02.b) $\x01.b -= $\x04.b";
      break;
    }
    return false;
  case Hexagon::V6_vsubbq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vsubbq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if ($\x02.b) $\x01.b -= $\x04.b";
      break;
    }
    return false;
  case Hexagon::V6_vsubbsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubbsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubb($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubbsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubbsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubb($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubh HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubh_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubh_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubhnq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vsubhnq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if (!$\x02.h) $\x01.h -= $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vsubhq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vsubhq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if ($\x02.h) $\x01.h -= $\x04.h";
      break;
    }
    return false;
  case Hexagon::V6_vsubhsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubhsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubhsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubhsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubhw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubhw HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsububh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsububh HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubub($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsububsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsububsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubub($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsububsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsububsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubub($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubuhsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubuhsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubuh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubuhsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubuhsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubuh($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubuhw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubuhw HvxWR:$Vdd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubuh($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubuwsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubuwsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubuw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubuwsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubuwsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubuw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubw HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubw_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Hexagon::W15 &&
        MI->getOperand(2).getReg() == Hexagon::W15) {
      // (V6_vsubw_dv HvxWR:$Vdd32, W15, W15)
      AsmString = "$\x01 = #0";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubw_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubw($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vsubwnq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vsubwnq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if (!$\x02.w) $\x01.w -= $\x04.w";
      break;
    }
    return false;
  case Hexagon::V6_vsubwq:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxQRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vsubwq HvxVR:$Vx32, HvxQR:$Qv4, HvxVR:$Vu32)
      AsmString = "if ($\x02.w) $\x01.w -= $\x04.w";
      break;
    }
    return false;
  case Hexagon::V6_vsubwsat:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubwsat HvxVR:$Vd32, HvxVR:$Vu32, HvxVR:$Vv32)
      AsmString = "$\x01 = vsubw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vsubwsat_dv:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vsubwsat_dv HvxWR:$Vdd32, HvxWR:$Vuu32, HvxWR:$Vvv32)
      AsmString = "$\x01 = vsubw($\x02,$\x03):sat";
      break;
    }
    return false;
  case Hexagon::V6_vtmpyb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vtmpyb HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vtmpyb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vtmpyb_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vtmpyb_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vtmpyb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vtmpybus:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vtmpybus HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vtmpybus($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vtmpybus_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vtmpybus_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vtmpybus($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vtmpyhb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vtmpyhb HvxWR:$Vdd32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 = vtmpyhb($\x02,$\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vtmpyhb_acc:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(3).getReg())) {
      // (V6_vtmpyhb_acc HvxWR:$Vxx32, HvxWR:$Vuu32, IntRegs:$Rt32)
      AsmString = "$\x01 += vtmpyhb($\x03,$\x04)";
      break;
    }
    return false;
  case Hexagon::V6_vunpackb:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vunpackb HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vunpackb($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vunpackh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vunpackh HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vunpackh($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vunpackoh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (V6_vunpackoh HvxWR:$Vxx32, HvxVR:$Vu32)
      AsmString = "$\x01 |= vunpackoh($\x03)";
      break;
    }
    return false;
  case Hexagon::V6_vunpackub:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vunpackub HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vunpackub($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vunpackuh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vunpackuh HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vunpackuh($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vxor:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (V6_vxor HvxVR:$Vd32, HvxVR:$Vd32, HvxVR:$Vd32)
      AsmString = "$\x01 = #0";
      break;
    }
    return false;
  case Hexagon::V6_vzb:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vzb HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vzxtb($\x02)";
      break;
    }
    return false;
  case Hexagon::V6_vzh:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::HvxWRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::HvxVRRegClassID).contains(MI->getOperand(1).getReg())) {
      // (V6_vzh HvxWR:$Vdd32, HvxVR:$Vu32)
      AsmString = "$\x01 = vzxth($\x02)";
      break;
    }
    return false;
  case Hexagon::Y2_dcfetchbo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (Y2_dcfetchbo IntRegs:$Rs32, 0)
      AsmString = "dcfetch($\x01)";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void HexagonInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBrtarget(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
