/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 7 */ 'm', 'f', 'h', 'c', '0', 9, 0,
  /* 14 */ 'm', 't', 'h', 'c', '0', 9, 0,
  /* 21 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 28 */ 'v', 'm', 'm', '0', 9, 0,
  /* 34 */ 'm', 't', 'm', '0', 9, 0,
  /* 40 */ 'm', 't', 'p', '0', 9, 0,
  /* 46 */ 'b', 'b', 'i', 't', '0', 9, 0,
  /* 53 */ 'l', 'd', 'c', '1', 9, 0,
  /* 59 */ 's', 'd', 'c', '1', 9, 0,
  /* 65 */ 'c', 'f', 'c', '1', 9, 0,
  /* 71 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 78 */ 'm', 'f', 'h', 'c', '1', 9, 0,
  /* 85 */ 'm', 't', 'h', 'c', '1', 9, 0,
  /* 92 */ 'c', 't', 'c', '1', 9, 0,
  /* 98 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 105 */ 'l', 'w', 'c', '1', 9, 0,
  /* 111 */ 's', 'w', 'c', '1', 9, 0,
  /* 117 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 124 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 131 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 138 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 145 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 152 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 159 */ 'm', 't', 'm', '1', 9, 0,
  /* 165 */ 'm', 't', 'p', '1', 9, 0,
  /* 171 */ 'b', 'b', 'i', 't', '1', 9, 0,
  /* 178 */ 'b', 'b', 'i', 't', '0', '3', '2', 9, 0,
  /* 187 */ 'b', 'b', 'i', 't', '1', '3', '2', 9, 0,
  /* 196 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 204 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 214 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 222 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 230 */ 'l', 'w', 'm', '3', '2', 9, 0,
  /* 237 */ 's', 'w', 'm', '3', '2', 9, 0,
  /* 244 */ 'd', 'r', 'o', 't', 'r', '3', '2', 9, 0,
  /* 253 */ 'c', 'i', 'n', 's', '3', '2', 9, 0,
  /* 261 */ 'e', 'x', 't', 's', '3', '2', 9, 0,
  /* 269 */ 'l', 'd', 'c', '2', 9, 0,
  /* 275 */ 's', 'd', 'c', '2', 9, 0,
  /* 281 */ 'c', 'f', 'c', '2', 9, 0,
  /* 287 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 294 */ 'm', 'f', 'h', 'c', '2', 9, 0,
  /* 301 */ 'm', 't', 'h', 'c', '2', 9, 0,
  /* 308 */ 'c', 't', 'c', '2', 9, 0,
  /* 314 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 321 */ 'l', 'w', 'c', '2', 9, 0,
  /* 327 */ 's', 'w', 'c', '2', 9, 0,
  /* 333 */ 'm', 't', 'm', '2', 9, 0,
  /* 339 */ 'm', 't', 'p', '2', 9, 0,
  /* 345 */ 'a', 'd', 'd', 'i', 'u', 'r', '2', 9, 0,
  /* 354 */ 'l', 'd', 'c', '3', 9, 0,
  /* 360 */ 's', 'd', 'c', '3', 9, 0,
  /* 366 */ 'l', 'w', 'c', '3', 9, 0,
  /* 372 */ 's', 'w', 'c', '3', 9, 0,
  /* 378 */ 'a', 'd', 'd', 'i', 'u', 's', '5', 9, 0,
  /* 387 */ 's', 'b', '1', '6', 9, 0,
  /* 393 */ 'b', 'c', '1', '6', 9, 0,
  /* 399 */ 'j', 'r', 'c', '1', '6', 9, 0,
  /* 406 */ 'b', 'n', 'e', 'z', 'c', '1', '6', 9, 0,
  /* 415 */ 'b', 'e', 'q', 'z', 'c', '1', '6', 9, 0,
  /* 424 */ 'a', 'n', 'd', '1', '6', 9, 0,
  /* 431 */ 'm', 'o', 'v', 'e', '1', '6', 9, 0,
  /* 439 */ 's', 'h', '1', '6', 9, 0,
  /* 445 */ 'a', 'n', 'd', 'i', '1', '6', 9, 0,
  /* 453 */ 'l', 'i', '1', '6', 9, 0,
  /* 459 */ 'b', 'r', 'e', 'a', 'k', '1', '6', 9, 0,
  /* 468 */ 's', 'l', 'l', '1', '6', 9, 0,
  /* 475 */ 's', 'r', 'l', '1', '6', 9, 0,
  /* 482 */ 'l', 'w', 'm', '1', '6', 9, 0,
  /* 489 */ 's', 'w', 'm', '1', '6', 9, 0,
  /* 496 */ 's', 'd', 'b', 'b', 'p', '1', '6', 9, 0,
  /* 505 */ 'j', 'r', '1', '6', 9, 0,
  /* 511 */ 'x', 'o', 'r', '1', '6', 9, 0,
  /* 518 */ 'j', 'a', 'l', 'r', 's', '1', '6', 9, 0,
  /* 527 */ 'n', 'o', 't', '1', '6', 9, 0,
  /* 534 */ 'l', 'b', 'u', '1', '6', 9, 0,
  /* 541 */ 's', 'u', 'b', 'u', '1', '6', 9, 0,
  /* 549 */ 'a', 'd', 'd', 'u', '1', '6', 9, 0,
  /* 557 */ 'l', 'h', 'u', '1', '6', 9, 0,
  /* 564 */ 'l', 'w', '1', '6', 9, 0,
  /* 570 */ 's', 'w', '1', '6', 9, 0,
  /* 576 */ 'b', 'n', 'e', 'z', '1', '6', 9, 0,
  /* 584 */ 'b', 'e', 'q', 'z', '1', '6', 9, 0,
  /* 592 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 608 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 625 */ 'd', 'l', 'a', 9, 0,
  /* 630 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 646 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 663 */ 'd', 's', 'r', 'a', 9, 0,
  /* 669 */ 'd', 'l', 's', 'a', 9, 0,
  /* 675 */ 'c', 'f', 'c', 'm', 's', 'a', 9, 0,
  /* 683 */ 'c', 't', 'c', 'm', 's', 'a', 9, 0,
  /* 691 */ 'a', 'd', 'd', '_', 'a', '.', 'b', 9, 0,
  /* 700 */ 'm', 'i', 'n', '_', 'a', '.', 'b', 9, 0,
  /* 709 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'b', 9, 0,
  /* 719 */ 'm', 'a', 'x', '_', 'a', '.', 'b', 9, 0,
  /* 728 */ 's', 'r', 'a', '.', 'b', 9, 0,
  /* 735 */ 'n', 'l', 'o', 'c', '.', 'b', 9, 0,
  /* 743 */ 'n', 'l', 'z', 'c', '.', 'b', 9, 0,
  /* 751 */ 's', 'l', 'd', '.', 'b', 9, 0,
  /* 758 */ 'p', 'c', 'k', 'o', 'd', '.', 'b', 9, 0,
  /* 767 */ 'i', 'l', 'v', 'o', 'd', '.', 'b', 9, 0,
  /* 776 */ 'i', 'n', 's', 'v', 'e', '.', 'b', 9, 0,
  /* 785 */ 'v', 's', 'h', 'f', '.', 'b', 9, 0,
  /* 793 */ 'b', 'n', 'e', 'g', '.', 'b', 9, 0,
  /* 801 */ 's', 'r', 'a', 'i', '.', 'b', 9, 0,
  /* 809 */ 's', 'l', 'd', 'i', '.', 'b', 9, 0,
  /* 817 */ 'a', 'n', 'd', 'i', '.', 'b', 9, 0,
  /* 825 */ 'b', 'n', 'e', 'g', 'i', '.', 'b', 9, 0,
  /* 834 */ 'b', 's', 'e', 'l', 'i', '.', 'b', 9, 0,
  /* 843 */ 's', 'l', 'l', 'i', '.', 'b', 9, 0,
  /* 851 */ 's', 'r', 'l', 'i', '.', 'b', 9, 0,
  /* 859 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'b', 9, 0,
  /* 869 */ 'c', 'e', 'q', 'i', '.', 'b', 9, 0,
  /* 877 */ 's', 'r', 'a', 'r', 'i', '.', 'b', 9, 0,
  /* 886 */ 'b', 'c', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 895 */ 's', 'r', 'l', 'r', 'i', '.', 'b', 9, 0,
  /* 904 */ 'n', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 912 */ 'x', 'o', 'r', 'i', '.', 'b', 9, 0,
  /* 920 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'b', 9, 0,
  /* 930 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'b', 9, 0,
  /* 940 */ 'b', 's', 'e', 't', 'i', '.', 'b', 9, 0,
  /* 949 */ 's', 'u', 'b', 'v', 'i', '.', 'b', 9, 0,
  /* 958 */ 'a', 'd', 'd', 'v', 'i', '.', 'b', 9, 0,
  /* 967 */ 'b', 'm', 'z', 'i', '.', 'b', 9, 0,
  /* 975 */ 'b', 'm', 'n', 'z', 'i', '.', 'b', 9, 0,
  /* 984 */ 'f', 'i', 'l', 'l', '.', 'b', 9, 0,
  /* 992 */ 's', 'l', 'l', '.', 'b', 9, 0,
  /* 999 */ 's', 'r', 'l', '.', 'b', 9, 0,
  /* 1006 */ 'b', 'i', 'n', 's', 'l', '.', 'b', 9, 0,
  /* 1015 */ 'i', 'l', 'v', 'l', '.', 'b', 9, 0,
  /* 1023 */ 'c', 'e', 'q', '.', 'b', 9, 0,
  /* 1030 */ 's', 'r', 'a', 'r', '.', 'b', 9, 0,
  /* 1038 */ 'b', 'c', 'l', 'r', '.', 'b', 9, 0,
  /* 1046 */ 's', 'r', 'l', 'r', '.', 'b', 9, 0,
  /* 1054 */ 'b', 'i', 'n', 's', 'r', '.', 'b', 9, 0,
  /* 1063 */ 'i', 'l', 'v', 'r', '.', 'b', 9, 0,
  /* 1071 */ 'a', 's', 'u', 'b', '_', 's', '.', 'b', 9, 0,
  /* 1081 */ 'm', 'o', 'd', '_', 's', '.', 'b', 9, 0,
  /* 1090 */ 'c', 'l', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1099 */ 'a', 'v', 'e', '_', 's', '.', 'b', 9, 0,
  /* 1108 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1118 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1128 */ 'c', 'l', 't', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1138 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'b', 9, 0,
  /* 1148 */ 'm', 'i', 'n', '_', 's', '.', 'b', 9, 0,
  /* 1157 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'b', 9, 0,
  /* 1167 */ 's', 'u', 'b', 's', '_', 's', '.', 'b', 9, 0,
  /* 1177 */ 'a', 'd', 'd', 's', '_', 's', '.', 'b', 9, 0,
  /* 1187 */ 's', 'a', 't', '_', 's', '.', 'b', 9, 0,
  /* 1196 */ 'c', 'l', 't', '_', 's', '.', 'b', 9, 0,
  /* 1205 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'b', 9, 0,
  /* 1217 */ 'd', 'i', 'v', '_', 's', '.', 'b', 9, 0,
  /* 1226 */ 'm', 'a', 'x', '_', 's', '.', 'b', 9, 0,
  /* 1235 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'b', 9, 0,
  /* 1245 */ 's', 'p', 'l', 'a', 't', '.', 'b', 9, 0,
  /* 1254 */ 'b', 's', 'e', 't', '.', 'b', 9, 0,
  /* 1262 */ 'p', 'c', 'n', 't', '.', 'b', 9, 0,
  /* 1270 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'b', 9, 0,
  /* 1280 */ 's', 't', '.', 'b', 9, 0,
  /* 1286 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'b', 9, 0,
  /* 1296 */ 'm', 'o', 'd', '_', 'u', '.', 'b', 9, 0,
  /* 1305 */ 'c', 'l', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1314 */ 'a', 'v', 'e', '_', 'u', '.', 'b', 9, 0,
  /* 1323 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1333 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1343 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1353 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'b', 9, 0,
  /* 1363 */ 'm', 'i', 'n', '_', 'u', '.', 'b', 9, 0,
  /* 1372 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'b', 9, 0,
  /* 1382 */ 's', 'u', 'b', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1392 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1402 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'b', 9, 0,
  /* 1414 */ 's', 'a', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1423 */ 'c', 'l', 't', '_', 'u', '.', 'b', 9, 0,
  /* 1432 */ 'd', 'i', 'v', '_', 'u', '.', 'b', 9, 0,
  /* 1441 */ 'm', 'a', 'x', '_', 'u', '.', 'b', 9, 0,
  /* 1450 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'b', 9, 0,
  /* 1460 */ 'm', 's', 'u', 'b', 'v', '.', 'b', 9, 0,
  /* 1469 */ 'm', 'a', 'd', 'd', 'v', '.', 'b', 9, 0,
  /* 1478 */ 'p', 'c', 'k', 'e', 'v', '.', 'b', 9, 0,
  /* 1487 */ 'i', 'l', 'v', 'e', 'v', '.', 'b', 9, 0,
  /* 1496 */ 'm', 'u', 'l', 'v', '.', 'b', 9, 0,
  /* 1504 */ 'b', 'z', '.', 'b', 9, 0,
  /* 1510 */ 'b', 'n', 'z', '.', 'b', 9, 0,
  /* 1517 */ 's', 'e', 'b', 9, 0,
  /* 1522 */ 'j', 'a', 'l', 'r', 'c', '.', 'h', 'b', 9, 0,
  /* 1532 */ 'j', 'r', '.', 'h', 'b', 9, 0,
  /* 1539 */ 'j', 'a', 'l', 'r', '.', 'h', 'b', 9, 0,
  /* 1548 */ 'l', 'b', 9, 0,
  /* 1552 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 1561 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1575 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1588 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 1600 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1610 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 1620 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 1629 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 1638 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 1647 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 1656 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1670 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1683 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 1695 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1706 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1718 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1730 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 1742 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1753 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1764 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 1775 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1789 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1802 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 1814 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 1823 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 1832 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 1842 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1852 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1862 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 1872 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 1884 */ 's', 'b', 9, 0,
  /* 1888 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 1896 */ 'm', 's', 'u', 'b', 9, 0,
  /* 1902 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 'c', 9, 0,
  /* 1913 */ 'b', 'c', 9, 0,
  /* 1917 */ 'b', 'g', 'e', 'c', 9, 0,
  /* 1923 */ 'b', 'n', 'e', 'c', 9, 0,
  /* 1929 */ 'j', 'i', 'c', 9, 0,
  /* 1934 */ 'b', 'a', 'l', 'c', 9, 0,
  /* 1940 */ 'j', 'i', 'a', 'l', 'c', 9, 0,
  /* 1947 */ 'b', 'g', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1956 */ 'b', 'l', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1965 */ 'b', 'n', 'e', 'z', 'a', 'l', 'c', 9, 0,
  /* 1974 */ 'b', 'e', 'q', 'z', 'a', 'l', 'c', 9, 0,
  /* 1983 */ 'b', 'g', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 1992 */ 'b', 'l', 't', 'z', 'a', 'l', 'c', 9, 0,
  /* 2001 */ 's', 'y', 'n', 'c', 9, 0,
  /* 2007 */ 'l', 'd', 'p', 'c', 9, 0,
  /* 2013 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 2020 */ 'a', 'l', 'u', 'i', 'p', 'c', 9, 0,
  /* 2028 */ 'a', 'd', 'd', 'i', 'u', 'p', 'c', 9, 0,
  /* 2037 */ 'l', 'w', 'u', 'p', 'c', 9, 0,
  /* 2044 */ 'l', 'w', 'p', 'c', 9, 0,
  /* 2050 */ 'b', 'e', 'q', 'c', 9, 0,
  /* 2056 */ 'j', 'r', 'c', 9, 0,
  /* 2061 */ 'j', 'a', 'l', 'r', 'c', 9, 0,
  /* 2068 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 2075 */ 'b', 'l', 't', 'c', 9, 0,
  /* 2081 */ 'b', 'g', 'e', 'u', 'c', 9, 0,
  /* 2088 */ 'b', 'l', 't', 'u', 'c', 9, 0,
  /* 2095 */ 'b', 'n', 'v', 'c', 9, 0,
  /* 2101 */ 'b', 'o', 'v', 'c', 9, 0,
  /* 2107 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 2114 */ 'b', 'g', 'e', 'z', 'c', 9, 0,
  /* 2121 */ 'b', 'l', 'e', 'z', 'c', 9, 0,
  /* 2128 */ 'b', 'c', '1', 'n', 'e', 'z', 'c', 9, 0,
  /* 2137 */ 'b', 'c', '2', 'n', 'e', 'z', 'c', 9, 0,
  /* 2146 */ 'b', 'n', 'e', 'z', 'c', 9, 0,
  /* 2153 */ 'b', 'c', '1', 'e', 'q', 'z', 'c', 9, 0,
  /* 2162 */ 'b', 'c', '2', 'e', 'q', 'z', 'c', 9, 0,
  /* 2171 */ 'b', 'e', 'q', 'z', 'c', 9, 0,
  /* 2178 */ 'b', 'g', 't', 'z', 'c', 9, 0,
  /* 2185 */ 'b', 'l', 't', 'z', 'c', 9, 0,
  /* 2192 */ 'f', 'l', 'o', 'g', '2', '.', 'd', 9, 0,
  /* 2201 */ 'f', 'e', 'x', 'p', '2', '.', 'd', 9, 0,
  /* 2210 */ 'a', 'd', 'd', '_', 'a', '.', 'd', 9, 0,
  /* 2219 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'd', 9, 0,
  /* 2229 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'd', 9, 0,
  /* 2239 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'd', 9, 0,
  /* 2249 */ 'm', 'i', 'n', 'a', '.', 'd', 9, 0,
  /* 2257 */ 's', 'r', 'a', '.', 'd', 9, 0,
  /* 2264 */ 'm', 'a', 'x', 'a', '.', 'd', 9, 0,
  /* 2272 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2280 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2289 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 2298 */ 'n', 'l', 'o', 'c', '.', 'd', 9, 0,
  /* 2306 */ 'n', 'l', 'z', 'c', '.', 'd', 9, 0,
  /* 2314 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2322 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2331 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 2340 */ 's', 'l', 'd', '.', 'd', 9, 0,
  /* 2347 */ 'p', 'c', 'k', 'o', 'd', '.', 'd', 9, 0,
  /* 2356 */ 'i', 'l', 'v', 'o', 'd', '.', 'd', 9, 0,
  /* 2365 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 2374 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2382 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 2392 */ 'f', 'c', 'l', 'e', '.', 'd', 9, 0,
  /* 2400 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 2410 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 2419 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2430 */ 'f', 's', 'l', 'e', '.', 'd', 9, 0,
  /* 2438 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2447 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2458 */ 'f', 'c', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2467 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2479 */ 'f', 's', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 2488 */ 'f', 'c', 'n', 'e', '.', 'd', 9, 0,
  /* 2496 */ 'f', 's', 'n', 'e', '.', 'd', 9, 0,
  /* 2504 */ 'f', 'c', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2513 */ 'f', 's', 'u', 'n', 'e', '.', 'd', 9, 0,
  /* 2522 */ 'i', 'n', 's', 'v', 'e', '.', 'd', 9, 0,
  /* 2531 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 2538 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 'd', 9, 0,
  /* 2548 */ 'f', 'c', 'a', 'f', '.', 'd', 9, 0,
  /* 2556 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2567 */ 'f', 's', 'a', 'f', '.', 'd', 9, 0,
  /* 2575 */ 'm', 's', 'u', 'b', 'f', '.', 'd', 9, 0,
  /* 2584 */ 'm', 'a', 'd', 'd', 'f', '.', 'd', 9, 0,
  /* 2593 */ 'v', 's', 'h', 'f', '.', 'd', 9, 0,
  /* 2601 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 2609 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 2617 */ 'b', 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 2625 */ 's', 'r', 'a', 'i', '.', 'd', 9, 0,
  /* 2633 */ 's', 'l', 'd', 'i', '.', 'd', 9, 0,
  /* 2641 */ 'b', 'n', 'e', 'g', 'i', '.', 'd', 9, 0,
  /* 2650 */ 's', 'l', 'l', 'i', '.', 'd', 9, 0,
  /* 2658 */ 's', 'r', 'l', 'i', '.', 'd', 9, 0,
  /* 2666 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'd', 9, 0,
  /* 2676 */ 'c', 'e', 'q', 'i', '.', 'd', 9, 0,
  /* 2684 */ 's', 'r', 'a', 'r', 'i', '.', 'd', 9, 0,
  /* 2693 */ 'b', 'c', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2702 */ 's', 'r', 'l', 'r', 'i', '.', 'd', 9, 0,
  /* 2711 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'd', 9, 0,
  /* 2721 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'd', 9, 0,
  /* 2731 */ 'b', 's', 'e', 't', 'i', '.', 'd', 9, 0,
  /* 2740 */ 's', 'u', 'b', 'v', 'i', '.', 'd', 9, 0,
  /* 2749 */ 'a', 'd', 'd', 'v', 'i', '.', 'd', 9, 0,
  /* 2758 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 2769 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 2780 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 2790 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 2801 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 2810 */ 's', 'e', 'l', '.', 'd', 9, 0,
  /* 2817 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 2826 */ 'f', 'i', 'l', 'l', '.', 'd', 9, 0,
  /* 2834 */ 's', 'l', 'l', '.', 'd', 9, 0,
  /* 2841 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'd', 9, 0,
  /* 2851 */ 'f', 'f', 'q', 'l', '.', 'd', 9, 0,
  /* 2859 */ 's', 'r', 'l', '.', 'd', 9, 0,
  /* 2866 */ 'b', 'i', 'n', 's', 'l', '.', 'd', 9, 0,
  /* 2875 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2883 */ 'i', 'l', 'v', 'l', '.', 'd', 9, 0,
  /* 2891 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 2899 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2907 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 2917 */ 'f', 'c', 'u', 'n', '.', 'd', 9, 0,
  /* 2925 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2936 */ 'f', 's', 'u', 'n', '.', 'd', 9, 0,
  /* 2944 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 2952 */ 'f', 'r', 'c', 'p', '.', 'd', 9, 0,
  /* 2960 */ 'r', 'e', 'c', 'i', 'p', '.', 'd', 9, 0,
  /* 2969 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2977 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 2987 */ 'f', 'c', 'e', 'q', '.', 'd', 9, 0,
  /* 2995 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3004 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3015 */ 'f', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 3023 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3032 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3043 */ 'f', 'c', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3052 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3064 */ 'f', 's', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 3073 */ 's', 'r', 'a', 'r', '.', 'd', 9, 0,
  /* 3081 */ 'b', 'c', 'l', 'r', '.', 'd', 9, 0,
  /* 3089 */ 's', 'r', 'l', 'r', '.', 'd', 9, 0,
  /* 3097 */ 'f', 'c', 'o', 'r', '.', 'd', 9, 0,
  /* 3105 */ 'f', 's', 'o', 'r', '.', 'd', 9, 0,
  /* 3113 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'd', 9, 0,
  /* 3123 */ 'f', 'f', 'q', 'r', '.', 'd', 9, 0,
  /* 3131 */ 'b', 'i', 'n', 's', 'r', '.', 'd', 9, 0,
  /* 3140 */ 'i', 'l', 'v', 'r', '.', 'd', 9, 0,
  /* 3148 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 3157 */ 'a', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3167 */ 'h', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3177 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'd', 9, 0,
  /* 3188 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'd', 9, 0,
  /* 3200 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3210 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3221 */ 'm', 'o', 'd', '_', 's', '.', 'd', 9, 0,
  /* 3230 */ 'c', 'l', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3239 */ 'a', 'v', 'e', '_', 's', '.', 'd', 9, 0,
  /* 3248 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3258 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3268 */ 'c', 'l', 't', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3278 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'd', 9, 0,
  /* 3288 */ 'm', 'i', 'n', '_', 's', '.', 'd', 9, 0,
  /* 3297 */ 'd', 'o', 't', 'p', '_', 's', '.', 'd', 9, 0,
  /* 3307 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'd', 9, 0,
  /* 3317 */ 's', 'u', 'b', 's', '_', 's', '.', 'd', 9, 0,
  /* 3327 */ 'a', 'd', 'd', 's', '_', 's', '.', 'd', 9, 0,
  /* 3337 */ 's', 'a', 't', '_', 's', '.', 'd', 9, 0,
  /* 3346 */ 'c', 'l', 't', '_', 's', '.', 'd', 9, 0,
  /* 3355 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3366 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'd', 9, 0,
  /* 3377 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'd', 9, 0,
  /* 3389 */ 'd', 'i', 'v', '_', 's', '.', 'd', 9, 0,
  /* 3398 */ 'm', 'a', 'x', '_', 's', '.', 'd', 9, 0,
  /* 3407 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'd', 9, 0,
  /* 3417 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 3424 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 3434 */ 's', 'p', 'l', 'a', 't', '.', 'd', 9, 0,
  /* 3443 */ 'b', 's', 'e', 't', '.', 'd', 9, 0,
  /* 3451 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 3460 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3468 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'd', 9, 0,
  /* 3478 */ 'f', 'c', 'l', 't', '.', 'd', 9, 0,
  /* 3486 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 3495 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3506 */ 'f', 's', 'l', 't', '.', 'd', 9, 0,
  /* 3514 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3523 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3534 */ 'f', 'c', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3543 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3555 */ 'f', 's', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 3564 */ 'p', 'c', 'n', 't', '.', 'd', 9, 0,
  /* 3572 */ 'f', 'r', 'i', 'n', 't', '.', 'd', 9, 0,
  /* 3581 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'd', 9, 0,
  /* 3591 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3600 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 3610 */ 's', 't', '.', 'd', 9, 0,
  /* 3616 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 3624 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3634 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3644 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'd', 9, 0,
  /* 3655 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'd', 9, 0,
  /* 3667 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3677 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3688 */ 'm', 'o', 'd', '_', 'u', '.', 'd', 9, 0,
  /* 3697 */ 'c', 'l', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3706 */ 'a', 'v', 'e', '_', 'u', '.', 'd', 9, 0,
  /* 3715 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3725 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3735 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3745 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'd', 9, 0,
  /* 3755 */ 'm', 'i', 'n', '_', 'u', '.', 'd', 9, 0,
  /* 3764 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'd', 9, 0,
  /* 3774 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'd', 9, 0,
  /* 3784 */ 's', 'u', 'b', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3794 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3804 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'd', 9, 0,
  /* 3816 */ 's', 'a', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3825 */ 'c', 'l', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3834 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3845 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'd', 9, 0,
  /* 3856 */ 'd', 'i', 'v', '_', 'u', '.', 'd', 9, 0,
  /* 3865 */ 'm', 'a', 'x', '_', 'u', '.', 'd', 9, 0,
  /* 3874 */ 'm', 's', 'u', 'b', 'v', '.', 'd', 9, 0,
  /* 3883 */ 'm', 'a', 'd', 'd', 'v', '.', 'd', 9, 0,
  /* 3892 */ 'p', 'c', 'k', 'e', 'v', '.', 'd', 9, 0,
  /* 3901 */ 'i', 'l', 'v', 'e', 'v', '.', 'd', 9, 0,
  /* 3910 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 3918 */ 'm', 'u', 'l', 'v', '.', 'd', 9, 0,
  /* 3926 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3933 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 3944 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 3955 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 3965 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 3976 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 3985 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 3993 */ 'b', 'z', '.', 'd', 9, 0,
  /* 3999 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 'd', 9, 0,
  /* 4009 */ 'b', 'n', 'z', '.', 'd', 9, 0,
  /* 4016 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 'd', 9, 0,
  /* 4026 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 4034 */ 's', 'c', 'd', 9, 0,
  /* 4039 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 4045 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 4051 */ 'd', 's', 'h', 'd', 9, 0,
  /* 4057 */ 'y', 'i', 'e', 'l', 'd', 9, 0,
  /* 4064 */ 'l', 'l', 'd', 9, 0,
  /* 4069 */ 'a', 'n', 'd', 9, 0,
  /* 4074 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 4083 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 4091 */ 'd', 'm', 'o', 'd', 9, 0,
  /* 4097 */ 's', 'd', 9, 0,
  /* 4101 */ 'l', 'b', 'e', 9, 0,
  /* 4106 */ 's', 'b', 'e', 9, 0,
  /* 4111 */ 's', 'c', 'e', 9, 0,
  /* 4116 */ 'c', 'a', 'c', 'h', 'e', 'e', 9, 0,
  /* 4124 */ 'p', 'r', 'e', 'f', 'e', 9, 0,
  /* 4131 */ 'b', 'g', 'e', 9, 0,
  /* 4136 */ 't', 'g', 'e', 9, 0,
  /* 4141 */ 'c', 'a', 'c', 'h', 'e', 9, 0,
  /* 4148 */ 'l', 'h', 'e', 9, 0,
  /* 4153 */ 's', 'h', 'e', 9, 0,
  /* 4158 */ 'b', 'l', 'e', 9, 0,
  /* 4163 */ 'l', 'l', 'e', 9, 0,
  /* 4168 */ 'l', 'w', 'l', 'e', 9, 0,
  /* 4174 */ 's', 'w', 'l', 'e', 9, 0,
  /* 4180 */ 'b', 'n', 'e', 9, 0,
  /* 4185 */ 's', 'n', 'e', 9, 0,
  /* 4190 */ 't', 'n', 'e', 9, 0,
  /* 4195 */ 'd', 'v', 'p', 'e', 9, 0,
  /* 4201 */ 'e', 'v', 'p', 'e', 9, 0,
  /* 4207 */ 'l', 'w', 'r', 'e', 9, 0,
  /* 4213 */ 's', 'w', 'r', 'e', 9, 0,
  /* 4219 */ 'l', 'b', 'u', 'e', 9, 0,
  /* 4225 */ 'l', 'h', 'u', 'e', 9, 0,
  /* 4231 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 4237 */ 'l', 'w', 'e', 9, 0,
  /* 4242 */ 's', 'w', 'e', 9, 0,
  /* 4247 */ 'b', 'c', '1', 'f', 9, 0,
  /* 4253 */ 'p', 'r', 'e', 'f', 9, 0,
  /* 4259 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 4265 */ 'n', 'e', 'g', 9, 0,
  /* 4270 */ 'a', 'd', 'd', '_', 'a', '.', 'h', 9, 0,
  /* 4279 */ 'm', 'i', 'n', '_', 'a', '.', 'h', 9, 0,
  /* 4288 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'h', 9, 0,
  /* 4298 */ 'm', 'a', 'x', '_', 'a', '.', 'h', 9, 0,
  /* 4307 */ 's', 'r', 'a', '.', 'h', 9, 0,
  /* 4314 */ 'n', 'l', 'o', 'c', '.', 'h', 9, 0,
  /* 4322 */ 'n', 'l', 'z', 'c', '.', 'h', 9, 0,
  /* 4330 */ 's', 'l', 'd', '.', 'h', 9, 0,
  /* 4337 */ 'p', 'c', 'k', 'o', 'd', '.', 'h', 9, 0,
  /* 4346 */ 'i', 'l', 'v', 'o', 'd', '.', 'h', 9, 0,
  /* 4355 */ 'i', 'n', 's', 'v', 'e', '.', 'h', 9, 0,
  /* 4364 */ 'v', 's', 'h', 'f', '.', 'h', 9, 0,
  /* 4372 */ 'b', 'n', 'e', 'g', '.', 'h', 9, 0,
  /* 4380 */ 's', 'r', 'a', 'i', '.', 'h', 9, 0,
  /* 4388 */ 's', 'l', 'd', 'i', '.', 'h', 9, 0,
  /* 4396 */ 'b', 'n', 'e', 'g', 'i', '.', 'h', 9, 0,
  /* 4405 */ 's', 'l', 'l', 'i', '.', 'h', 9, 0,
  /* 4413 */ 's', 'r', 'l', 'i', '.', 'h', 9, 0,
  /* 4421 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'h', 9, 0,
  /* 4431 */ 'c', 'e', 'q', 'i', '.', 'h', 9, 0,
  /* 4439 */ 's', 'r', 'a', 'r', 'i', '.', 'h', 9, 0,
  /* 4448 */ 'b', 'c', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4457 */ 's', 'r', 'l', 'r', 'i', '.', 'h', 9, 0,
  /* 4466 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'h', 9, 0,
  /* 4476 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'h', 9, 0,
  /* 4486 */ 'b', 's', 'e', 't', 'i', '.', 'h', 9, 0,
  /* 4495 */ 's', 'u', 'b', 'v', 'i', '.', 'h', 9, 0,
  /* 4504 */ 'a', 'd', 'd', 'v', 'i', '.', 'h', 9, 0,
  /* 4513 */ 'f', 'i', 'l', 'l', '.', 'h', 9, 0,
  /* 4521 */ 's', 'l', 'l', '.', 'h', 9, 0,
  /* 4528 */ 's', 'r', 'l', '.', 'h', 9, 0,
  /* 4535 */ 'b', 'i', 'n', 's', 'l', '.', 'h', 9, 0,
  /* 4544 */ 'i', 'l', 'v', 'l', '.', 'h', 9, 0,
  /* 4552 */ 'f', 'e', 'x', 'd', 'o', '.', 'h', 9, 0,
  /* 4561 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'h', 9, 0,
  /* 4571 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'h', 9, 0,
  /* 4581 */ 'm', 'u', 'l', '_', 'q', '.', 'h', 9, 0,
  /* 4590 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4601 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4612 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'h', 9, 0,
  /* 4622 */ 'c', 'e', 'q', '.', 'h', 9, 0,
  /* 4629 */ 'f', 't', 'q', '.', 'h', 9, 0,
  /* 4636 */ 's', 'r', 'a', 'r', '.', 'h', 9, 0,
  /* 4644 */ 'b', 'c', 'l', 'r', '.', 'h', 9, 0,
  /* 4652 */ 's', 'r', 'l', 'r', '.', 'h', 9, 0,
  /* 4660 */ 'b', 'i', 'n', 's', 'r', '.', 'h', 9, 0,
  /* 4669 */ 'i', 'l', 'v', 'r', '.', 'h', 9, 0,
  /* 4677 */ 'a', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4687 */ 'h', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4697 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'h', 9, 0,
  /* 4708 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4718 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4729 */ 'm', 'o', 'd', '_', 's', '.', 'h', 9, 0,
  /* 4738 */ 'c', 'l', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4747 */ 'a', 'v', 'e', '_', 's', '.', 'h', 9, 0,
  /* 4756 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4766 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4776 */ 'c', 'l', 't', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4786 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'h', 9, 0,
  /* 4796 */ 'm', 'i', 'n', '_', 's', '.', 'h', 9, 0,
  /* 4805 */ 'd', 'o', 't', 'p', '_', 's', '.', 'h', 9, 0,
  /* 4815 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4825 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 4835 */ 's', 'u', 'b', 's', '_', 's', '.', 'h', 9, 0,
  /* 4845 */ 'a', 'd', 'd', 's', '_', 's', '.', 'h', 9, 0,
  /* 4855 */ 's', 'a', 't', '_', 's', '.', 'h', 9, 0,
  /* 4864 */ 'c', 'l', 't', '_', 's', '.', 'h', 9, 0,
  /* 4873 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'h', 9, 0,
  /* 4885 */ 'd', 'i', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4894 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 4905 */ 'm', 'a', 'x', '_', 's', '.', 'h', 9, 0,
  /* 4914 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'h', 9, 0,
  /* 4924 */ 's', 'p', 'l', 'a', 't', '.', 'h', 9, 0,
  /* 4933 */ 'b', 's', 'e', 't', '.', 'h', 9, 0,
  /* 4941 */ 'p', 'c', 'n', 't', '.', 'h', 9, 0,
  /* 4949 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'h', 9, 0,
  /* 4959 */ 's', 't', '.', 'h', 9, 0,
  /* 4965 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4975 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4985 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'h', 9, 0,
  /* 4996 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5006 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5017 */ 'm', 'o', 'd', '_', 'u', '.', 'h', 9, 0,
  /* 5026 */ 'c', 'l', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5035 */ 'a', 'v', 'e', '_', 'u', '.', 'h', 9, 0,
  /* 5044 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5054 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5064 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5074 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'h', 9, 0,
  /* 5084 */ 'm', 'i', 'n', '_', 'u', '.', 'h', 9, 0,
  /* 5093 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'h', 9, 0,
  /* 5103 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'h', 9, 0,
  /* 5113 */ 's', 'u', 'b', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5123 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5133 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'h', 9, 0,
  /* 5145 */ 's', 'a', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5154 */ 'c', 'l', 't', '_', 'u', '.', 'h', 9, 0,
  /* 5163 */ 'd', 'i', 'v', '_', 'u', '.', 'h', 9, 0,
  /* 5172 */ 'm', 'a', 'x', '_', 'u', '.', 'h', 9, 0,
  /* 5181 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'h', 9, 0,
  /* 5191 */ 'm', 's', 'u', 'b', 'v', '.', 'h', 9, 0,
  /* 5200 */ 'm', 'a', 'd', 'd', 'v', '.', 'h', 9, 0,
  /* 5209 */ 'p', 'c', 'k', 'e', 'v', '.', 'h', 9, 0,
  /* 5218 */ 'i', 'l', 'v', 'e', 'v', '.', 'h', 9, 0,
  /* 5227 */ 'm', 'u', 'l', 'v', '.', 'h', 9, 0,
  /* 5235 */ 'b', 'z', '.', 'h', 9, 0,
  /* 5241 */ 'b', 'n', 'z', '.', 'h', 9, 0,
  /* 5248 */ 'd', 's', 'b', 'h', 9, 0,
  /* 5254 */ 'w', 's', 'b', 'h', 9, 0,
  /* 5260 */ 's', 'e', 'h', 9, 0,
  /* 5265 */ 'u', 'l', 'h', 9, 0,
  /* 5270 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 5279 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5293 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5306 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 5323 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 5334 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5344 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 5354 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 5363 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 5372 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 5381 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5390 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 5401 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 5409 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 5418 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 5427 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 5438 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5449 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5461 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5473 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 5485 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5496 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5506 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5517 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5528 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5539 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5550 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5561 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5572 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 5584 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 5596 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 5607 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 5616 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 5625 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 5635 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5645 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5655 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 5665 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5675 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5690 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5705 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5717 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5730 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5745 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5758 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5772 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5786 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5796 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5807 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 5818 */ 'u', 's', 'h', 9, 0,
  /* 5823 */ 'd', 'm', 'u', 'h', 9, 0,
  /* 5829 */ 's', 'y', 'n', 'c', 'i', 9, 0,
  /* 5836 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 5843 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 5849 */ 't', 'g', 'e', 'i', 9, 0,
  /* 5855 */ 's', 'n', 'e', 'i', 9, 0,
  /* 5861 */ 't', 'n', 'e', 'i', 9, 0,
  /* 5867 */ 'd', 'a', 'h', 'i', 9, 0,
  /* 5873 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 5879 */ 'm', 't', 'h', 'i', 9, 0,
  /* 5885 */ '.', 'a', 'l', 'i', 'g', 'n', 32, '2', 10, 9, 'l', 'i', 9, 0,
  /* 5899 */ 'd', 'l', 'i', 9, 0,
  /* 5904 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 5910 */ 's', 'e', 'q', 'i', 9, 0,
  /* 5916 */ 't', 'e', 'q', 'i', 9, 0,
  /* 5922 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 5928 */ 'd', 'a', 't', 'i', 9, 0,
  /* 5934 */ 's', 'l', 't', 'i', 9, 0,
  /* 5940 */ 't', 'l', 't', 'i', 9, 0,
  /* 5946 */ 'd', 'a', 'u', 'i', 9, 0,
  /* 5952 */ 'l', 'u', 'i', 9, 0,
  /* 5957 */ 'j', 9, 0,
  /* 5960 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 5967 */ 'f', 'o', 'r', 'k', 9, 0,
  /* 5973 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 5982 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 5991 */ 'b', 'a', 'l', 9, 0,
  /* 5996 */ 'j', 'a', 'l', 9, 0,
  /* 6001 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 6009 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 6017 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6029 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6041 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6057 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6072 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 6088 */ 'l', 'd', 'l', 9, 0,
  /* 6093 */ 's', 'd', 'l', 9, 0,
  /* 6098 */ 'b', 'g', 'e', 'l', 9, 0,
  /* 6104 */ 'b', 'l', 'e', 'l', 9, 0,
  /* 6110 */ 'b', 'n', 'e', 'l', 9, 0,
  /* 6116 */ 'b', 'c', '1', 'f', 'l', 9, 0,
  /* 6123 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6137 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6151 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6164 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 6179 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 6188 */ 'b', 'g', 'e', 'z', 'a', 'l', 'l', 9, 0,
  /* 6197 */ 'b', 'l', 't', 'z', 'a', 'l', 'l', 9, 0,
  /* 6206 */ 'd', 's', 'l', 'l', 9, 0,
  /* 6212 */ 'd', 'r', 'o', 'l', 9, 0,
  /* 6218 */ 'b', 'e', 'q', 'l', 9, 0,
  /* 6224 */ 'd', 's', 'r', 'l', 9, 0,
  /* 6230 */ 'b', 'c', '1', 't', 'l', 9, 0,
  /* 6237 */ 'b', 'g', 't', 'l', 9, 0,
  /* 6243 */ 'b', 'l', 't', 'l', 9, 0,
  /* 6249 */ 'b', 'g', 'e', 'u', 'l', 9, 0,
  /* 6256 */ 'b', 'l', 'e', 'u', 'l', 9, 0,
  /* 6263 */ 'd', 'm', 'u', 'l', 9, 0,
  /* 6269 */ 'b', 'g', 't', 'u', 'l', 9, 0,
  /* 6276 */ 'b', 'l', 't', 'u', 'l', 9, 0,
  /* 6283 */ 'l', 'w', 'l', 9, 0,
  /* 6288 */ 's', 'w', 'l', 9, 0,
  /* 6293 */ 'b', 'g', 'e', 'z', 'l', 9, 0,
  /* 6300 */ 'b', 'l', 'e', 'z', 'l', 9, 0,
  /* 6307 */ 'b', 'g', 't', 'z', 'l', 9, 0,
  /* 6314 */ 'b', 'l', 't', 'z', 'l', 9, 0,
  /* 6321 */ 'd', 'i', 'n', 's', 'm', 9, 0,
  /* 6328 */ 'd', 'e', 'x', 't', 'm', 9, 0,
  /* 6335 */ 'l', 'w', 'm', 9, 0,
  /* 6340 */ 's', 'w', 'm', 9, 0,
  /* 6345 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6353 */ 'd', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 6361 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 6367 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 6373 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 6379 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 6386 */ 'm', 't', 'l', 'o', 9, 0,
  /* 6392 */ 'd', 'm', 'u', 'l', 'o', 9, 0,
  /* 6399 */ 'd', 'b', 'i', 't', 's', 'w', 'a', 'p', 9, 0,
  /* 6409 */ 's', 'd', 'b', 'b', 'p', 9, 0,
  /* 6416 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 6424 */ 'm', 'o', 'v', 'e', 'p', 9, 0,
  /* 6431 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 6439 */ 'c', 'm', 'p', 9, 0,
  /* 6444 */ 'd', 'p', 'o', 'p', 9, 0,
  /* 6450 */ 'a', 'd', 'd', 'i', 'u', 'r', '1', 's', 'p', 9, 0,
  /* 6461 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6477 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 6494 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 6501 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 6508 */ 'j', 'r', 'c', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6520 */ 'j', 'r', 'a', 'd', 'd', 'i', 'u', 's', 'p', 9, 0,
  /* 6531 */ 'e', 'x', 't', 'p', 9, 0,
  /* 6537 */ 'd', 'v', 'p', 9, 0,
  /* 6542 */ 'e', 'v', 'p', 9, 0,
  /* 6547 */ 'l', 'w', 'p', 9, 0,
  /* 6552 */ 's', 'w', 'p', 9, 0,
  /* 6557 */ 'b', 'e', 'q', 9, 0,
  /* 6562 */ 's', 'e', 'q', 9, 0,
  /* 6567 */ 't', 'e', 'q', 9, 0,
  /* 6572 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6584 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6596 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6612 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6627 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 6643 */ 'l', 'd', 'r', 9, 0,
  /* 6648 */ 's', 'd', 'r', 9, 0,
  /* 6653 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6667 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6681 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6694 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 6709 */ 'j', 'r', 9, 0,
  /* 6713 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 6719 */ 'n', 'o', 'r', 9, 0,
  /* 6724 */ 'd', 'r', 'o', 'r', 9, 0,
  /* 6730 */ 'x', 'o', 'r', 9, 0,
  /* 6735 */ 'r', 'd', 'p', 'g', 'p', 'r', 9, 0,
  /* 6743 */ 'w', 'r', 'p', 'g', 'p', 'r', 9, 0,
  /* 6751 */ 'm', 'f', 't', 'r', 9, 0,
  /* 6757 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 6764 */ 'm', 't', 't', 'r', 9, 0,
  /* 6770 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 6777 */ 'l', 'w', 'r', 9, 0,
  /* 6782 */ 's', 'w', 'r', 9, 0,
  /* 6787 */ 'm', 'i', 'n', 'a', '.', 's', 9, 0,
  /* 6795 */ 'm', 'a', 'x', 'a', '.', 's', 9, 0,
  /* 6803 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 6812 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 6821 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 6830 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 6839 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6847 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 's', 9, 0,
  /* 6857 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 6867 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 6876 */ 'c', 'm', 'p', '.', 's', 'l', 'e', '.', 's', 9, 0,
  /* 6887 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6896 */ 'c', 'm', 'p', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6907 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 6919 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 6926 */ 'c', 'm', 'p', '.', 'a', 'f', '.', 's', 9, 0,
  /* 6936 */ 'c', 'm', 'p', '.', 's', 'a', 'f', '.', 's', 9, 0,
  /* 6947 */ 'm', 's', 'u', 'b', 'f', '.', 's', 9, 0,
  /* 6956 */ 'm', 'a', 'd', 'd', 'f', '.', 's', 9, 0,
  /* 6965 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 6973 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 6981 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 6988 */ 'l', 'i', '.', 's', 9, 0,
  /* 6994 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 7005 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 7016 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 7026 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 7037 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 7046 */ 's', 'e', 'l', '.', 's', 9, 0,
  /* 7053 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 7062 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 7069 */ 'm', 'i', 'n', '.', 's', 9, 0,
  /* 7076 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7084 */ 'c', 'm', 'p', '.', 'u', 'n', '.', 's', 9, 0,
  /* 7094 */ 'c', 'm', 'p', '.', 's', 'u', 'n', '.', 's', 9, 0,
  /* 7105 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 7113 */ 'r', 'e', 'c', 'i', 'p', '.', 's', 9, 0,
  /* 7122 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7130 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 's', 9, 0,
  /* 7140 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7149 */ 'c', 'm', 'p', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 7160 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7169 */ 'c', 'm', 'p', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7180 */ 'c', 'm', 'p', '.', 's', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 7192 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 7199 */ 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 7208 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 7217 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 7225 */ 'c', 'm', 'p', '.', 'l', 't', '.', 's', 9, 0,
  /* 7235 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 7244 */ 'c', 'm', 'p', '.', 's', 'l', 't', '.', 's', 9, 0,
  /* 7255 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7264 */ 'c', 'm', 'p', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7275 */ 'c', 'm', 'p', '.', 's', 'u', 'l', 't', '.', 's', 9, 0,
  /* 7287 */ 'r', 'i', 'n', 't', '.', 's', 9, 0,
  /* 7295 */ 'r', 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 7304 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 7312 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 7319 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7326 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 7337 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 7348 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 7358 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 7369 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 7378 */ 'm', 'a', 'x', '.', 's', 9, 0,
  /* 7385 */ 's', 'e', 'l', 'n', 'e', 'z', '.', 's', 9, 0,
  /* 7395 */ 's', 'e', 'l', 'e', 'q', 'z', '.', 's', 9, 0,
  /* 7405 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 7413 */ 'a', 'b', 's', 9, 0,
  /* 7418 */ 'j', 'a', 'l', 's', 9, 0,
  /* 7424 */ 'b', 'g', 'e', 'z', 'a', 'l', 's', 9, 0,
  /* 7433 */ 'b', 'l', 't', 'z', 'a', 'l', 's', 9, 0,
  /* 7442 */ 'c', 'i', 'n', 's', 9, 0,
  /* 7448 */ 'd', 'i', 'n', 's', 9, 0,
  /* 7454 */ 'j', 'a', 'l', 'r', 's', 9, 0,
  /* 7461 */ 'e', 'x', 't', 's', 9, 0,
  /* 7467 */ 'l', 'w', 'x', 's', 9, 0,
  /* 7473 */ 'b', 'c', '1', 't', 9, 0,
  /* 7479 */ 'b', 'g', 't', 9, 0,
  /* 7484 */ 'w', 'a', 'i', 't', 9, 0,
  /* 7490 */ 'b', 'l', 't', 9, 0,
  /* 7495 */ 's', 'l', 't', 9, 0,
  /* 7500 */ 't', 'l', 't', 9, 0,
  /* 7505 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 7512 */ 'd', 'm', 't', 9, 0,
  /* 7517 */ 'e', 'm', 't', 9, 0,
  /* 7522 */ 'n', 'o', 't', 9, 0,
  /* 7527 */ 'm', 'o', 'v', 't', 9, 0,
  /* 7533 */ 'd', 'e', 'x', 't', 9, 0,
  /* 7539 */ 'l', 'b', 'u', 9, 0,
  /* 7544 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 7551 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 7558 */ 'b', 'a', 'd', 'd', 'u', 9, 0,
  /* 7565 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 7572 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 7579 */ 'd', 'm', 'o', 'd', 'u', 9, 0,
  /* 7586 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 7592 */ 't', 'g', 'e', 'u', 9, 0,
  /* 7598 */ 'b', 'l', 'e', 'u', 9, 0,
  /* 7604 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 7610 */ 'd', 'm', 'u', 'h', 'u', 9, 0,
  /* 7617 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 7625 */ 't', 'g', 'e', 'i', 'u', 9, 0,
  /* 7632 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 7639 */ 't', 'l', 't', 'i', 'u', 9, 0,
  /* 7646 */ 'v', '3', 'm', 'u', 'l', 'u', 9, 0,
  /* 7654 */ 'd', 'm', 'u', 'l', 'u', 9, 0,
  /* 7661 */ 'v', 'm', 'u', 'l', 'u', 9, 0,
  /* 7668 */ 'd', 'm', 'u', 'l', 'o', 'u', 9, 0,
  /* 7676 */ 'd', 'i', 'n', 's', 'u', 9, 0,
  /* 7683 */ 'b', 'g', 't', 'u', 9, 0,
  /* 7689 */ 'b', 'l', 't', 'u', 9, 0,
  /* 7695 */ 's', 'l', 't', 'u', 9, 0,
  /* 7701 */ 't', 'l', 't', 'u', 9, 0,
  /* 7707 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 7715 */ 'd', 'e', 'x', 't', 'u', 9, 0,
  /* 7722 */ 'd', 'd', 'i', 'v', 'u', 9, 0,
  /* 7729 */ 'l', 'w', 'u', 9, 0,
  /* 7734 */ 'a', 'n', 'd', '.', 'v', 9, 0,
  /* 7741 */ 'm', 'o', 'v', 'e', '.', 'v', 9, 0,
  /* 7749 */ 'b', 's', 'e', 'l', '.', 'v', 9, 0,
  /* 7757 */ 'n', 'o', 'r', '.', 'v', 9, 0,
  /* 7764 */ 'x', 'o', 'r', '.', 'v', 9, 0,
  /* 7771 */ 'b', 'z', '.', 'v', 9, 0,
  /* 7777 */ 'b', 'm', 'z', '.', 'v', 9, 0,
  /* 7784 */ 'b', 'n', 'z', '.', 'v', 9, 0,
  /* 7791 */ 'b', 'm', 'n', 'z', '.', 'v', 9, 0,
  /* 7799 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 7806 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 7814 */ 'd', 'd', 'i', 'v', 9, 0,
  /* 7820 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 7827 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 7834 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 7842 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 7851 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 7858 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 7866 */ 'i', 'n', 's', 'v', 9, 0,
  /* 7872 */ 'f', 'l', 'o', 'g', '2', '.', 'w', 9, 0,
  /* 7881 */ 'f', 'e', 'x', 'p', '2', '.', 'w', 9, 0,
  /* 7890 */ 'a', 'd', 'd', '_', 'a', '.', 'w', 9, 0,
  /* 7899 */ 'f', 'm', 'i', 'n', '_', 'a', '.', 'w', 9, 0,
  /* 7909 */ 'a', 'd', 'd', 's', '_', 'a', '.', 'w', 9, 0,
  /* 7919 */ 'f', 'm', 'a', 'x', '_', 'a', '.', 'w', 9, 0,
  /* 7929 */ 's', 'r', 'a', '.', 'w', 9, 0,
  /* 7936 */ 'f', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7944 */ 'f', 'm', 's', 'u', 'b', '.', 'w', 9, 0,
  /* 7953 */ 'n', 'l', 'o', 'c', '.', 'w', 9, 0,
  /* 7961 */ 'n', 'l', 'z', 'c', '.', 'w', 9, 0,
  /* 7969 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 7978 */ 'f', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7986 */ 'f', 'm', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 7995 */ 's', 'l', 'd', '.', 'w', 9, 0,
  /* 8002 */ 'p', 'c', 'k', 'o', 'd', '.', 'w', 9, 0,
  /* 8011 */ 'i', 'l', 'v', 'o', 'd', '.', 'w', 9, 0,
  /* 8020 */ 'f', 'c', 'l', 'e', '.', 'w', 9, 0,
  /* 8028 */ 'f', 's', 'l', 'e', '.', 'w', 9, 0,
  /* 8036 */ 'f', 'c', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 8045 */ 'f', 's', 'u', 'l', 'e', '.', 'w', 9, 0,
  /* 8054 */ 'f', 'c', 'n', 'e', '.', 'w', 9, 0,
  /* 8062 */ 'f', 's', 'n', 'e', '.', 'w', 9, 0,
  /* 8070 */ 'f', 'c', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 8079 */ 'f', 's', 'u', 'n', 'e', '.', 'w', 9, 0,
  /* 8088 */ 'i', 'n', 's', 'v', 'e', '.', 'w', 9, 0,
  /* 8097 */ 'f', 'c', 'a', 'f', '.', 'w', 9, 0,
  /* 8105 */ 'f', 's', 'a', 'f', '.', 'w', 9, 0,
  /* 8113 */ 'v', 's', 'h', 'f', '.', 'w', 9, 0,
  /* 8121 */ 'b', 'n', 'e', 'g', '.', 'w', 9, 0,
  /* 8129 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8145 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8158 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8176 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 8192 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 8201 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 8210 */ 's', 'r', 'a', 'i', '.', 'w', 9, 0,
  /* 8218 */ 's', 'l', 'd', 'i', '.', 'w', 9, 0,
  /* 8226 */ 'b', 'n', 'e', 'g', 'i', '.', 'w', 9, 0,
  /* 8235 */ 's', 'l', 'l', 'i', '.', 'w', 9, 0,
  /* 8243 */ 's', 'r', 'l', 'i', '.', 'w', 9, 0,
  /* 8251 */ 'b', 'i', 'n', 's', 'l', 'i', '.', 'w', 9, 0,
  /* 8261 */ 'c', 'e', 'q', 'i', '.', 'w', 9, 0,
  /* 8269 */ 's', 'r', 'a', 'r', 'i', '.', 'w', 9, 0,
  /* 8278 */ 'b', 'c', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8287 */ 's', 'r', 'l', 'r', 'i', '.', 'w', 9, 0,
  /* 8296 */ 'b', 'i', 'n', 's', 'r', 'i', '.', 'w', 9, 0,
  /* 8306 */ 's', 'p', 'l', 'a', 't', 'i', '.', 'w', 9, 0,
  /* 8316 */ 'b', 's', 'e', 't', 'i', '.', 'w', 9, 0,
  /* 8325 */ 's', 'u', 'b', 'v', 'i', '.', 'w', 9, 0,
  /* 8334 */ 'a', 'd', 'd', 'v', 'i', '.', 'w', 9, 0,
  /* 8343 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8356 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 8369 */ 'f', 'i', 'l', 'l', '.', 'w', 9, 0,
  /* 8377 */ 's', 'l', 'l', '.', 'w', 9, 0,
  /* 8384 */ 'f', 'e', 'x', 'u', 'p', 'l', '.', 'w', 9, 0,
  /* 8394 */ 'f', 'f', 'q', 'l', '.', 'w', 9, 0,
  /* 8402 */ 's', 'r', 'l', '.', 'w', 9, 0,
  /* 8409 */ 'b', 'i', 'n', 's', 'l', '.', 'w', 9, 0,
  /* 8418 */ 'f', 'm', 'u', 'l', '.', 'w', 9, 0,
  /* 8426 */ 'i', 'l', 'v', 'l', '.', 'w', 9, 0,
  /* 8434 */ 'f', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 8442 */ 'f', 'c', 'u', 'n', '.', 'w', 9, 0,
  /* 8450 */ 'f', 's', 'u', 'n', '.', 'w', 9, 0,
  /* 8458 */ 'f', 'e', 'x', 'd', 'o', '.', 'w', 9, 0,
  /* 8467 */ 'f', 'r', 'c', 'p', '.', 'w', 9, 0,
  /* 8475 */ 'm', 's', 'u', 'b', '_', 'q', '.', 'w', 9, 0,
  /* 8485 */ 'm', 'a', 'd', 'd', '_', 'q', '.', 'w', 9, 0,
  /* 8495 */ 'm', 'u', 'l', '_', 'q', '.', 'w', 9, 0,
  /* 8504 */ 'm', 's', 'u', 'b', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8515 */ 'm', 'a', 'd', 'd', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8526 */ 'm', 'u', 'l', 'r', '_', 'q', '.', 'w', 9, 0,
  /* 8536 */ 'f', 'c', 'e', 'q', '.', 'w', 9, 0,
  /* 8544 */ 'f', 's', 'e', 'q', '.', 'w', 9, 0,
  /* 8552 */ 'f', 'c', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8561 */ 'f', 's', 'u', 'e', 'q', '.', 'w', 9, 0,
  /* 8570 */ 'f', 't', 'q', '.', 'w', 9, 0,
  /* 8577 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 8587 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8598 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 8609 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 8619 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8630 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 8641 */ 's', 'r', 'a', 'r', '.', 'w', 9, 0,
  /* 8649 */ 'b', 'c', 'l', 'r', '.', 'w', 9, 0,
  /* 8657 */ 's', 'r', 'l', 'r', '.', 'w', 9, 0,
  /* 8665 */ 'f', 'c', 'o', 'r', '.', 'w', 9, 0,
  /* 8673 */ 'f', 's', 'o', 'r', '.', 'w', 9, 0,
  /* 8681 */ 'f', 'e', 'x', 'u', 'p', 'r', '.', 'w', 9, 0,
  /* 8691 */ 'f', 'f', 'q', 'r', '.', 'w', 9, 0,
  /* 8699 */ 'b', 'i', 'n', 's', 'r', '.', 'w', 9, 0,
  /* 8708 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 8716 */ 'i', 'l', 'v', 'r', '.', 'w', 9, 0,
  /* 8724 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 8733 */ 'a', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8743 */ 'h', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8753 */ 'd', 'p', 's', 'u', 'b', '_', 's', '.', 'w', 9, 0,
  /* 8764 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 's', '.', 'w', 9, 0,
  /* 8776 */ 'h', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8786 */ 'd', 'p', 'a', 'd', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8797 */ 'm', 'o', 'd', '_', 's', '.', 'w', 9, 0,
  /* 8806 */ 'c', 'l', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8815 */ 'a', 'v', 'e', '_', 's', '.', 'w', 9, 0,
  /* 8824 */ 'c', 'l', 'e', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8834 */ 'm', 'i', 'n', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8844 */ 'c', 'l', 't', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8854 */ 'm', 'a', 'x', 'i', '_', 's', '.', 'w', 9, 0,
  /* 8864 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 8874 */ 'm', 'i', 'n', '_', 's', '.', 'w', 9, 0,
  /* 8883 */ 'd', 'o', 't', 'p', '_', 's', '.', 'w', 9, 0,
  /* 8893 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8903 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8913 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8923 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 8933 */ 'a', 'v', 'e', 'r', '_', 's', '.', 'w', 9, 0,
  /* 8943 */ 's', 'u', 'b', 's', '_', 's', '.', 'w', 9, 0,
  /* 8953 */ 'a', 'd', 'd', 's', '_', 's', '.', 'w', 9, 0,
  /* 8963 */ 's', 'a', 't', '_', 's', '.', 'w', 9, 0,
  /* 8972 */ 'c', 'l', 't', '_', 's', '.', 'w', 9, 0,
  /* 8981 */ 'f', 'f', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 8992 */ 'f', 't', 'i', 'n', 't', '_', 's', '.', 'w', 9, 0,
  /* 9003 */ 's', 'u', 'b', 's', 'u', 'u', '_', 's', '.', 'w', 9, 0,
  /* 9015 */ 'd', 'i', 'v', '_', 's', '.', 'w', 9, 0,
  /* 9024 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 9035 */ 'm', 'a', 'x', '_', 's', '.', 'w', 9, 0,
  /* 9044 */ 'c', 'o', 'p', 'y', '_', 's', '.', 'w', 9, 0,
  /* 9054 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9065 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9076 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 9088 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'w', 9, 0,
  /* 9098 */ 's', 'p', 'l', 'a', 't', '.', 'w', 9, 0,
  /* 9107 */ 'b', 's', 'e', 't', '.', 'w', 9, 0,
  /* 9115 */ 'f', 'c', 'l', 't', '.', 'w', 9, 0,
  /* 9123 */ 'f', 's', 'l', 't', '.', 'w', 9, 0,
  /* 9131 */ 'f', 'c', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9140 */ 'f', 's', 'u', 'l', 't', '.', 'w', 9, 0,
  /* 9149 */ 'p', 'c', 'n', 't', '.', 'w', 9, 0,
  /* 9157 */ 'f', 'r', 'i', 'n', 't', '.', 'w', 9, 0,
  /* 9166 */ 'i', 'n', 's', 'e', 'r', 't', '.', 'w', 9, 0,
  /* 9176 */ 'f', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9185 */ 'f', 'r', 's', 'q', 'r', 't', '.', 'w', 9, 0,
  /* 9195 */ 's', 't', '.', 'w', 9, 0,
  /* 9201 */ 'a', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9211 */ 'h', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9221 */ 'd', 'p', 's', 'u', 'b', '_', 'u', '.', 'w', 9, 0,
  /* 9232 */ 'f', 't', 'r', 'u', 'n', 'c', '_', 'u', '.', 'w', 9, 0,
  /* 9244 */ 'h', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9254 */ 'd', 'p', 'a', 'd', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9265 */ 'm', 'o', 'd', '_', 'u', '.', 'w', 9, 0,
  /* 9274 */ 'c', 'l', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9283 */ 'a', 'v', 'e', '_', 'u', '.', 'w', 9, 0,
  /* 9292 */ 'c', 'l', 'e', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9302 */ 'm', 'i', 'n', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9312 */ 'c', 'l', 't', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9322 */ 'm', 'a', 'x', 'i', '_', 'u', '.', 'w', 9, 0,
  /* 9332 */ 'm', 'i', 'n', '_', 'u', '.', 'w', 9, 0,
  /* 9341 */ 'd', 'o', 't', 'p', '_', 'u', '.', 'w', 9, 0,
  /* 9351 */ 'a', 'v', 'e', 'r', '_', 'u', '.', 'w', 9, 0,
  /* 9361 */ 's', 'u', 'b', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9371 */ 'a', 'd', 'd', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9381 */ 's', 'u', 'b', 's', 'u', 's', '_', 'u', '.', 'w', 9, 0,
  /* 9393 */ 's', 'a', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9402 */ 'c', 'l', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9411 */ 'f', 'f', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9422 */ 'f', 't', 'i', 'n', 't', '_', 'u', '.', 'w', 9, 0,
  /* 9433 */ 'd', 'i', 'v', '_', 'u', '.', 'w', 9, 0,
  /* 9442 */ 'm', 'a', 'x', '_', 'u', '.', 'w', 9, 0,
  /* 9451 */ 'c', 'o', 'p', 'y', '_', 'u', '.', 'w', 9, 0,
  /* 9461 */ 'm', 's', 'u', 'b', 'v', '.', 'w', 9, 0,
  /* 9470 */ 'm', 'a', 'd', 'd', 'v', '.', 'w', 9, 0,
  /* 9479 */ 'p', 'c', 'k', 'e', 'v', '.', 'w', 9, 0,
  /* 9488 */ 'i', 'l', 'v', 'e', 'v', '.', 'w', 9, 0,
  /* 9497 */ 'f', 'd', 'i', 'v', '.', 'w', 9, 0,
  /* 9505 */ 'm', 'u', 'l', 'v', '.', 'w', 9, 0,
  /* 9513 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 9522 */ 'f', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 9530 */ 'b', 'z', '.', 'w', 9, 0,
  /* 9536 */ 'b', 'n', 'z', '.', 'w', 9, 0,
  /* 9543 */ 'u', 'l', 'w', 9, 0,
  /* 9548 */ 'u', 's', 'w', 9, 0,
  /* 9553 */ 'p', 'r', 'e', 'f', 'x', 9, 0,
  /* 9560 */ 'l', 'h', 'x', 9, 0,
  /* 9565 */ 'j', 'a', 'l', 'x', 9, 0,
  /* 9571 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 9577 */ 'l', 'w', 'x', 9, 0,
  /* 9582 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 9588 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 9594 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 9600 */ 's', 'e', 'l', 'n', 'e', 'z', 9, 0,
  /* 9608 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 9615 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 9621 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 9627 */ 's', 'e', 'l', 'e', 'q', 'z', 9, 0,
  /* 9635 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 9642 */ 'b', 'g', 't', 'z', 9, 0,
  /* 9648 */ 'b', 'l', 't', 'z', 9, 0,
  /* 9654 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 9660 */ 's', 'e', 'b', 9, 32, 0,
  /* 9666 */ 's', 'e', 'h', 9, 32, 0,
  /* 9672 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9686 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 9699 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 9711 */ 'm', 'f', 't', 'c', '0', 32, 0,
  /* 9718 */ 'm', 't', 't', 'c', '0', 32, 0,
  /* 9725 */ 'm', 'f', 't', 'h', 'c', '1', 32, 0,
  /* 9733 */ 'm', 't', 't', 'h', 'c', '1', 32, 0,
  /* 9741 */ 'c', 'f', 't', 'c', '1', 32, 0,
  /* 9748 */ 'm', 'f', 't', 'c', '1', 32, 0,
  /* 9755 */ 'c', 't', 't', 'c', '1', 32, 0,
  /* 9762 */ 'm', 't', 't', 'c', '1', 32, 0,
  /* 9769 */ 's', 'y', 'n', 'c', 32, 0,
  /* 9775 */ 'l', 'd', 32, 0,
  /* 9779 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 9787 */ 's', 'd', 32, 0,
  /* 9791 */ 'm', 'f', 't', 'h', 'i', 32, 0,
  /* 9798 */ 'm', 't', 't', 'h', 'i', 32, 0,
  /* 9805 */ 'm', 'f', 't', 'l', 'o', 32, 0,
  /* 9812 */ 'm', 't', 't', 'l', 'o', 32, 0,
  /* 9819 */ 'm', 'f', 't', 'd', 's', 'p', 32, 0,
  /* 9827 */ 'm', 't', 't', 'd', 's', 'p', 32, 0,
  /* 9835 */ 's', 'e', 'q', 32, 0,
  /* 9840 */ 'm', 'f', 't', 'g', 'p', 'r', 32, 0,
  /* 9848 */ 'm', 't', 't', 'g', 'p', 'r', 32, 0,
  /* 9856 */ 'd', 'e', 'x', 't', 32, 0,
  /* 9862 */ 'm', 'f', 't', 'a', 'c', 'x', 32, 0,
  /* 9870 */ 'm', 't', 't', 'a', 'c', 'x', 32, 0,
  /* 9878 */ 'b', 'c', '1', 'n', 'e', 'z', 32, 0,
  /* 9886 */ 'b', 'c', '2', 'n', 'e', 'z', 32, 0,
  /* 9894 */ 'b', 'c', '1', 'e', 'q', 'z', 32, 0,
  /* 9902 */ 'b', 'c', '2', 'e', 'q', 'z', 32, 0,
  /* 9910 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 9941 */ 'c', '.', 0,
  /* 9944 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 9969 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 9992 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 10015 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 10037 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 10045 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 10058 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 10065 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 10075 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 10090 */ 'j', 'r', 'c', 9, '$', 'r', 'a', 0,
  /* 10098 */ 'j', 'r', 9, '$', 'r', 'a', 0,
  /* 10105 */ 'e', 'h', 'b', 0,
  /* 10109 */ 'e', 'r', 'e', 't', 'n', 'c', 0,
  /* 10116 */ 'p', 'a', 'u', 's', 'e', 0,
  /* 10122 */ 't', 'l', 'b', 'i', 'n', 'v', 'f', 0,
  /* 10130 */ 't', 'l', 'b', 'w', 'i', 0,
  /* 10136 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 10150 */ 'f', 'o', 'o', 0,
  /* 10154 */ 't', 'l', 'b', 'p', 0,
  /* 10159 */ 's', 's', 'n', 'o', 'p', 0,
  /* 10165 */ 't', 'l', 'b', 'r', 0,
  /* 10170 */ 't', 'l', 'b', 'w', 'r', 0,
  /* 10176 */ 'd', 'e', 'r', 'e', 't', 0,
  /* 10182 */ 'w', 'a', 'i', 't', 0,
  /* 10187 */ 't', 'l', 'b', 'i', 'n', 'v', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    10066U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    10059U,	// BUNDLE
    10076U,	// LIFETIME_START
    10046U,	// LIFETIME_END
    0U,	// STACKMAP
    10137U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    9970U,	// PATCHABLE_FUNCTION_ENTER
    9911U,	// PATCHABLE_RET
    10016U,	// PATCHABLE_FUNCTION_EXIT
    9993U,	// PATCHABLE_TAIL_CALL
    9945U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    23798U,	// ABSMacro
    21924U,	// ABSQ_S_PH
    21924U,	// ABSQ_S_PH_MM
    18127U,	// ABSQ_S_QB
    18127U,	// ABSQ_S_QB_MMR2
    25308U,	// ABSQ_S_W
    25308U,	// ABSQ_S_W_MM
    19802U,	// ABS_D_MMR6
    23577U,	// ABS_S_MMR6
    268455881U,	// ADD
    18413U,	// ADDIUPC
    18413U,	// ADDIUPC_MM
    18413U,	// ADDIUPC_MMR6
    22835U,	// ADDIUR1SP_MM
    268452186U,	// ADDIUR2_MM
    8683899U,	// ADDIUS5_MM
    547184U,	// ADDIUSP_MM
    268459459U,	// ADDIU_MMR6
    268457185U,	// ADDQH_PH
    268457185U,	// ADDQH_PH_MMR2
    268457302U,	// ADDQH_R_PH
    268457302U,	// ADDQH_R_PH_MMR2
    268460439U,	// ADDQH_R_W
    268460439U,	// ADDQH_R_W_MMR2
    268460042U,	// ADDQH_W
    268460042U,	// ADDQH_W_MMR2
    268457259U,	// ADDQ_PH
    268457259U,	// ADDQ_PH_MM
    268457358U,	// ADDQ_S_PH
    268457358U,	// ADDQ_S_PH_MM
    268460744U,	// ADDQ_S_W
    268460744U,	// ADDQ_S_W_MM
    268453909U,	// ADDSC
    268453909U,	// ADDSC_MM
    268452550U,	// ADDS_A_B
    268454070U,	// ADDS_A_D
    268456129U,	// ADDS_A_H
    268459750U,	// ADDS_A_W
    268453018U,	// ADDS_S_B
    268455168U,	// ADDS_S_D
    268456686U,	// ADDS_S_H
    268460794U,	// ADDS_S_W
    268453233U,	// ADDS_U_B
    268455635U,	// ADDS_U_D
    268456964U,	// ADDS_U_H
    268461212U,	// ADDS_U_W
    268452390U,	// ADDU16_MM
    268452390U,	// ADDU16_MMR6
    268453451U,	// ADDUH_QB
    268453451U,	// ADDUH_QB_MMR2
    268453559U,	// ADDUH_R_QB
    268453559U,	// ADDUH_R_QB_MMR2
    268459400U,	// ADDU_MMR6
    268457457U,	// ADDU_PH
    268457457U,	// ADDU_PH_MMR2
    268453664U,	// ADDU_QB
    268453664U,	// ADDU_QB_MM
    268457402U,	// ADDU_S_PH
    268457402U,	// ADDU_S_PH_MMR2
    268453605U,	// ADDU_S_QB
    268453605U,	// ADDU_S_QB_MM
    268452799U,	// ADDVI_B
    268454590U,	// ADDVI_D
    268456345U,	// ADDVI_H
    268460175U,	// ADDVI_W
    268453311U,	// ADDV_B
    268455725U,	// ADDV_D
    268457042U,	// ADDV_H
    268461312U,	// ADDV_W
    268453948U,	// ADDWC
    268453948U,	// ADDWC_MM
    268452532U,	// ADD_A_B
    268454051U,	// ADD_A_D
    268456111U,	// ADD_A_H
    268459731U,	// ADD_A_W
    268455881U,	// ADD_MM
    268455881U,	// ADD_MMR6
    268457678U,	// ADDi
    268457678U,	// ADDi_MM
    268459459U,	// ADDiu
    268459459U,	// ADDiu_MM
    268459400U,	// ADDu
    268459400U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    268458187U,	// ALIGN
    268458187U,	// ALIGN_MMR6
    18405U,	// ALUIPC
    18405U,	// ALUIPC_MMR6
    268455910U,	// AND
    9224617U,	// AND16_MM
    9224617U,	// AND16_MMR6
    268455910U,	// AND64
    268452286U,	// ANDI16_MM
    268452286U,	// ANDI16_MMR6
    268452658U,	// ANDI_B
    268457684U,	// ANDI_MMR6
    268455910U,	// AND_MM
    268455910U,	// AND_MMR6
    268459575U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    268457684U,	// ANDi
    268457684U,	// ANDi64
    268457684U,	// ANDi_MM
    268455924U,	// APPEND
    268455924U,	// APPEND_MMR2
    268452912U,	// ASUB_S_B
    268454998U,	// ASUB_S_D
    268456518U,	// ASUB_S_H
    268460574U,	// ASUB_S_W
    268453127U,	// ASUB_U_B
    268455465U,	// ASUB_U_D
    268456806U,	// ASUB_U_H
    268461042U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    268457788U,	// AUI
    18398U,	// AUIPC
    18398U,	// AUIPC_MMR6
    268457788U,	// AUI_MMR6
    268452998U,	// AVER_S_B
    268455148U,	// AVER_S_D
    268456656U,	// AVER_S_H
    268460774U,	// AVER_S_W
    268453213U,	// AVER_U_B
    268455615U,	// AVER_U_D
    268456944U,	// AVER_U_H
    268461192U,	// AVER_U_W
    268452940U,	// AVE_S_B
    268455080U,	// AVE_S_D
    268456588U,	// AVE_S_H
    268460656U,	// AVE_S_W
    268453155U,	// AVE_U_B
    268455547U,	// AVE_U_D
    268456876U,	// AVE_U_H
    268461124U,	// AVE_U_W
    24003U,	// AddiuRxImmX16
    1072579U,	// AddiuRxPcImmX16
    553672131U,	// AddiuRxRxImm16
    16801219U,	// AddiuRxRxImmX16
    25189827U,	// AddiuRxRyOffMemX16
    1336804U,	// AddiuSpImm16
    550372U,	// AddiuSpImmX16
    268459400U,	// AdduRxRyRz16
    16797670U,	// AndRxRxRy16
    0U,	// B
    541061U,	// B16_MM
    268459399U,	// BADDu
    546664U,	// BAL
    542607U,	// BALC
    542607U,	// BALC_MMR6
    268458186U,	// BALIGN
    268458186U,	// BALIGN_MMR2
    0U,	// BAL_BR
    33570863U,	// BBIT0
    33570995U,	// BBIT032
    33570988U,	// BBIT1
    33571004U,	// BBIT132
    542586U,	// BC
    541066U,	// BC16_MMR6
    26279U,	// BC1EQZ
    18538U,	// BC1EQZC_MMR6
    20632U,	// BC1F
    22501U,	// BC1FL
    20632U,	// BC1F_MM
    26263U,	// BC1NEZ
    18513U,	// BC1NEZC_MMR6
    23858U,	// BC1T
    22615U,	// BC1TL
    23858U,	// BC1T_MM
    26287U,	// BC2EQZ
    18547U,	// BC2EQZC_MMR6
    26271U,	// BC2NEZ
    18522U,	// BC2NEZC_MMR6
    268452727U,	// BCLRI_B
    268454534U,	// BCLRI_D
    268456289U,	// BCLRI_H
    268460119U,	// BCLRI_W
    268452879U,	// BCLR_B
    268454922U,	// BCLR_D
    268456485U,	// BCLR_H
    268460490U,	// BCLR_W
    542586U,	// BC_MMR6
    268458398U,	// BEQ
    268458398U,	// BEQ64
    268453891U,	// BEQC
    268453891U,	// BEQC64
    268453891U,	// BEQC_MMR6
    268458059U,	// BEQL
    268458059U,	// BEQLImmMacro
    16969U,	// BEQZ16_MM
    18359U,	// BEQZALC
    18359U,	// BEQZALC_MMR6
    18556U,	// BEQZC
    16800U,	// BEQZC16_MMR6
    18556U,	// BEQZC64
    18556U,	// BEQZC_MM
    18556U,	// BEQZC_MMR6
    268458398U,	// BEQ_MM
    268455972U,	// BGE
    268453758U,	// BGEC
    268453758U,	// BGEC64
    268453758U,	// BGEC_MMR6
    268455972U,	// BGEImmMacro
    268457939U,	// BGEL
    268457939U,	// BGELImmMacro
    268459427U,	// BGEU
    268453922U,	// BGEUC
    268453922U,	// BGEUC64
    268453922U,	// BGEUC_MMR6
    268459427U,	// BGEUImmMacro
    268458090U,	// BGEUL
    268458090U,	// BGEULImmMacro
    25967U,	// BGEZ
    25967U,	// BGEZ64
    22386U,	// BGEZAL
    18332U,	// BGEZALC
    18332U,	// BGEZALC_MMR6
    22573U,	// BGEZALL
    23809U,	// BGEZALS_MM
    22386U,	// BGEZAL_MM
    18499U,	// BGEZC
    18499U,	// BGEZC64
    18499U,	// BGEZC_MMR6
    22678U,	// BGEZL
    25967U,	// BGEZ_MM
    268459320U,	// BGT
    268459320U,	// BGTImmMacro
    268458078U,	// BGTL
    268458078U,	// BGTLImmMacro
    268459524U,	// BGTU
    268459524U,	// BGTUImmMacro
    268458110U,	// BGTUL
    268458110U,	// BGTULImmMacro
    26027U,	// BGTZ
    26027U,	// BGTZ64
    18368U,	// BGTZALC
    18368U,	// BGTZALC_MMR6
    18563U,	// BGTZC
    18563U,	// BGTZC64
    18563U,	// BGTZC_MMR6
    22692U,	// BGTZL
    26027U,	// BGTZ_MM
    285229916U,	// BINSLI_B
    285231723U,	// BINSLI_D
    285233478U,	// BINSLI_H
    285237308U,	// BINSLI_W
    285230063U,	// BINSL_B
    285231923U,	// BINSL_D
    285233592U,	// BINSL_H
    285237466U,	// BINSL_W
    285229977U,	// BINSRI_B
    285231768U,	// BINSRI_D
    285233523U,	// BINSRI_H
    285237353U,	// BINSRI_W
    285230111U,	// BINSR_B
    285232188U,	// BINSR_D
    285233717U,	// BINSR_H
    285237756U,	// BINSR_W
    24191U,	// BITREV
    24191U,	// BITREV_MM
    22785U,	// BITSWAP
    22785U,	// BITSWAP_MMR6
    268455999U,	// BLE
    268455999U,	// BLEImmMacro
    268457945U,	// BLEL
    268457945U,	// BLELImmMacro
    268459439U,	// BLEU
    268459439U,	// BLEUImmMacro
    268458097U,	// BLEUL
    268458097U,	// BLEULImmMacro
    25973U,	// BLEZ
    25973U,	// BLEZ64
    18341U,	// BLEZALC
    18341U,	// BLEZALC_MMR6
    18506U,	// BLEZC
    18506U,	// BLEZC64
    18506U,	// BLEZC_MMR6
    22685U,	// BLEZL
    25973U,	// BLEZ_MM
    268459331U,	// BLT
    268453916U,	// BLTC
    268453916U,	// BLTC64
    268453916U,	// BLTC_MMR6
    268459331U,	// BLTImmMacro
    268458084U,	// BLTL
    268458084U,	// BLTLImmMacro
    268459530U,	// BLTU
    268453929U,	// BLTUC
    268453929U,	// BLTUC64
    268453929U,	// BLTUC_MMR6
    268459530U,	// BLTUImmMacro
    268458117U,	// BLTUL
    268458117U,	// BLTULImmMacro
    26033U,	// BLTZ
    26033U,	// BLTZ64
    22394U,	// BLTZAL
    18377U,	// BLTZALC
    18377U,	// BLTZALC_MMR6
    22582U,	// BLTZALL
    23818U,	// BLTZALS_MM
    22394U,	// BLTZAL_MM
    18570U,	// BLTZC
    18570U,	// BLTZC64
    18570U,	// BLTZC_MMR6
    22699U,	// BLTZL
    26033U,	// BLTZ_MM
    285230032U,	// BMNZI_B
    285236848U,	// BMNZ_V
    285230024U,	// BMZI_B
    285236834U,	// BMZ_V
    268456021U,	// BNE
    268456021U,	// BNE64
    268453764U,	// BNEC
    268453764U,	// BNEC64
    268453764U,	// BNEC_MMR6
    268452666U,	// BNEGI_B
    268454482U,	// BNEGI_D
    268456237U,	// BNEGI_H
    268460067U,	// BNEGI_W
    268452634U,	// BNEG_B
    268454458U,	// BNEG_D
    268456213U,	// BNEG_H
    268459962U,	// BNEG_W
    268457951U,	// BNEL
    268457951U,	// BNELImmMacro
    16961U,	// BNEZ16_MM
    18350U,	// BNEZALC
    18350U,	// BNEZALC_MMR6
    18531U,	// BNEZC
    16791U,	// BNEZC16_MMR6
    18531U,	// BNEZC64
    18531U,	// BNEZC_MM
    18531U,	// BNEZC_MMR6
    268456021U,	// BNE_MM
    268453936U,	// BNVC
    268453936U,	// BNVC_MMR6
    17895U,	// BNZ_B
    20394U,	// BNZ_D
    21626U,	// BNZ_H
    24169U,	// BNZ_V
    25921U,	// BNZ_W
    268453942U,	// BOVC
    268453942U,	// BOVC_MMR6
    540877U,	// BPOSGE32
    542575U,	// BPOSGE32C_MMR3
    540877U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    42014537U,	// BREAK
    82380U,	// BREAK16_MM
    82380U,	// BREAK16_MMR6
    42014537U,	// BREAK_MM
    42014537U,	// BREAK_MMR6
    285229891U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    285236806U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    268452781U,	// BSETI_B
    268454572U,	// BSETI_D
    268456327U,	// BSETI_H
    268460157U,	// BSETI_W
    268453095U,	// BSET_B
    268455284U,	// BSET_D
    268456774U,	// BSET_H
    268460948U,	// BSET_W
    17889U,	// BZ_B
    20378U,	// BZ_D
    21620U,	// BZ_H
    24156U,	// BZ_V
    25915U,	// BZ_W
    0U,	// B_MM
    541370U,	// B_MMR6_Pseudo
    541370U,	// B_MM_Pseudo
    268458398U,	// BeqImm
    805332374U,	// BeqzRxImm16
    26006U,	// BeqzRxImmX16
    1327802U,	// Bimm16
    541370U,	// BimmX16
    268456021U,	// BneImm
    805332347U,	// BnezRxImm16
    25979U,	// BnezRxImmX16
    10038U,	// Break16
    1598884U,	// Bteqz16
    1073764648U,	// BteqzT8CmpX16
    1073764113U,	// BteqzT8CmpiX16
    1073765704U,	// BteqzT8SltX16
    1073764143U,	// BteqzT8SltiX16
    1073765841U,	// BteqzT8SltiuX16
    1073765904U,	// BteqzT8SltuX16
    550308U,	// BteqzX16
    1598857U,	// Btnez16
    1342200104U,	// BtnezT8CmpX16
    1342199569U,	// BtnezT8CmpiX16
    1342201160U,	// BtnezT8SltX16
    1342199599U,	// BtnezT8SltiX16
    1342201297U,	// BtnezT8SltiuX16
    1342201360U,	// BtnezT8SltuX16
    550281U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    1937454U,	// CACHE
    1937429U,	// CACHEE
    1937429U,	// CACHEE_MM
    1937429U,	// CACHEE_MMR6
    1937454U,	// CACHE_MM
    1937454U,	// CACHE_MMR6
    1937454U,	// CACHE_R6
    19165U,	// CEIL_L_D64
    19165U,	// CEIL_L_D_MMR6
    23401U,	// CEIL_L_S
    23401U,	// CEIL_L_S_MMR6
    20340U,	// CEIL_W_D32
    20340U,	// CEIL_W_D64
    20340U,	// CEIL_W_D_MMR6
    20340U,	// CEIL_W_MM
    23733U,	// CEIL_W_S
    23733U,	// CEIL_W_S_MM
    23733U,	// CEIL_W_S_MMR6
    268452710U,	// CEQI_B
    268454517U,	// CEQI_D
    268456272U,	// CEQI_H
    268460102U,	// CEQI_W
    268452864U,	// CEQ_B
    268454829U,	// CEQ_D
    268456463U,	// CEQ_H
    268460378U,	// CEQ_W
    16450U,	// CFC1
    16450U,	// CFC1_MM
    16666U,	// CFC2_MM
    17060U,	// CFCMSA
    26126U,	// CFTC1
    268459283U,	// CINS
    268452094U,	// CINS32
    268459283U,	// CINS64_32
    268459283U,	// CINS_i32
    19810U,	// CLASS_D
    19810U,	// CLASS_D_MMR6
    23584U,	// CLASS_S
    23584U,	// CLASS_S_MMR6
    268452949U,	// CLEI_S_B
    268455089U,	// CLEI_S_D
    268456597U,	// CLEI_S_H
    268460665U,	// CLEI_S_W
    268453164U,	// CLEI_U_B
    268455556U,	// CLEI_U_D
    268456885U,	// CLEI_U_H
    268461133U,	// CLEI_U_W
    268452931U,	// CLE_S_B
    268455071U,	// CLE_S_D
    268456579U,	// CLE_S_H
    268460647U,	// CLE_S_W
    268453146U,	// CLE_U_B
    268455538U,	// CLE_U_D
    268456867U,	// CLE_U_H
    268461115U,	// CLE_U_W
    22753U,	// CLO
    22753U,	// CLO_MM
    22753U,	// CLO_MMR6
    22753U,	// CLO_R6
    268452969U,	// CLTI_S_B
    268455109U,	// CLTI_S_D
    268456617U,	// CLTI_S_H
    268460685U,	// CLTI_S_W
    268453184U,	// CLTI_U_B
    268455576U,	// CLTI_U_D
    268456905U,	// CLTI_U_H
    268461153U,	// CLTI_U_W
    268453037U,	// CLT_S_B
    268455187U,	// CLT_S_D
    268456705U,	// CLT_S_H
    268460813U,	// CLT_S_W
    268453264U,	// CLT_U_B
    268455666U,	// CLT_U_D
    268456995U,	// CLT_U_H
    268461243U,	// CLT_U_W
    26001U,	// CLZ
    26001U,	// CLZ_MM
    26001U,	// CLZ_MMR6
    26001U,	// CLZ_R6
    268453497U,	// CMPGDU_EQ_QB
    268453497U,	// CMPGDU_EQ_QB_MMR2
    268453402U,	// CMPGDU_LE_QB
    268453402U,	// CMPGDU_LE_QB_MMR2
    268453616U,	// CMPGDU_LT_QB
    268453616U,	// CMPGDU_LT_QB_MMR2
    268453511U,	// CMPGU_EQ_QB
    268453511U,	// CMPGU_EQ_QB_MM
    268453416U,	// CMPGU_LE_QB
    268453416U,	// CMPGU_LE_QB_MM
    268453630U,	// CMPGU_LT_QB
    268453630U,	// CMPGU_LT_QB_MM
    18068U,	// CMPU_EQ_QB
    18068U,	// CMPU_EQ_QB_MM
    17973U,	// CMPU_LE_QB
    17973U,	// CMPU_LE_QB_MM
    18187U,	// CMPU_LT_QB
    18187U,	// CMPU_LT_QB_MM
    268454379U,	// CMP_AF_D_MMR6
    268458767U,	// CMP_AF_S_MMR6
    268454818U,	// CMP_EQ_D
    268454818U,	// CMP_EQ_D_MMR6
    21812U,	// CMP_EQ_PH
    21812U,	// CMP_EQ_PH_MM
    268458971U,	// CMP_EQ_S
    268458971U,	// CMP_EQ_S_MMR6
    268454379U,	// CMP_F_D
    268458767U,	// CMP_F_S
    268454223U,	// CMP_LE_D
    268454223U,	// CMP_LE_D_MMR6
    21708U,	// CMP_LE_PH
    21708U,	// CMP_LE_PH_MM
    268458688U,	// CMP_LE_S
    268458688U,	// CMP_LE_S_MMR6
    268455309U,	// CMP_LT_D
    268455309U,	// CMP_LT_D_MMR6
    21981U,	// CMP_LT_PH
    21981U,	// CMP_LT_PH_MM
    268459066U,	// CMP_LT_S
    268459066U,	// CMP_LT_S_MMR6
    268454397U,	// CMP_SAF_D
    268454397U,	// CMP_SAF_D_MMR6
    268458777U,	// CMP_SAF_S
    268458777U,	// CMP_SAF_S_MMR6
    268454845U,	// CMP_SEQ_D
    268454845U,	// CMP_SEQ_D_MMR6
    268458990U,	// CMP_SEQ_S
    268458990U,	// CMP_SEQ_S_MMR6
    268454260U,	// CMP_SLE_D
    268454260U,	// CMP_SLE_D_MMR6
    268458717U,	// CMP_SLE_S
    268458717U,	// CMP_SLE_S_MMR6
    268455336U,	// CMP_SLT_D
    268455336U,	// CMP_SLT_D_MMR6
    268459085U,	// CMP_SLT_S
    268459085U,	// CMP_SLT_S_MMR6
    268454893U,	// CMP_SUEQ_D
    268454893U,	// CMP_SUEQ_D_MMR6
    268459021U,	// CMP_SUEQ_S
    268459021U,	// CMP_SUEQ_S_MMR6
    268454308U,	// CMP_SULE_D
    268454308U,	// CMP_SULE_D_MMR6
    268458748U,	// CMP_SULE_S
    268458748U,	// CMP_SULE_S_MMR6
    268455384U,	// CMP_SULT_D
    268455384U,	// CMP_SULT_D_MMR6
    268459116U,	// CMP_SULT_S
    268459116U,	// CMP_SULT_S_MMR6
    268454766U,	// CMP_SUN_D
    268454766U,	// CMP_SUN_D_MMR6
    268458935U,	// CMP_SUN_S
    268458935U,	// CMP_SUN_S_MMR6
    268454873U,	// CMP_UEQ_D
    268454873U,	// CMP_UEQ_D_MMR6
    268459010U,	// CMP_UEQ_S
    268459010U,	// CMP_UEQ_S_MMR6
    268454288U,	// CMP_ULE_D
    268454288U,	// CMP_ULE_D_MMR6
    268458737U,	// CMP_ULE_S
    268458737U,	// CMP_ULE_S_MMR6
    268455364U,	// CMP_ULT_D
    268455364U,	// CMP_ULT_D_MMR6
    268459105U,	// CMP_ULT_S
    268459105U,	// CMP_ULT_S_MMR6
    268454748U,	// CMP_UN_D
    268454748U,	// CMP_UN_D_MMR6
    268458925U,	// CMP_UN_S
    268458925U,	// CMP_UN_S_MMR6
    10151U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    1610630356U,	// COPY_S_B
    1610632528U,	// COPY_S_D
    1610634035U,	// COPY_S_H
    1610638165U,	// COPY_S_W
    1610630571U,	// COPY_U_B
    1610634302U,	// COPY_U_H
    1610638572U,	// COPY_U_W
    10518621U,	// CTC1
    10518621U,	// CTC1_MM
    10518837U,	// CTC2_MM
    17068U,	// CTCMSA
    10528284U,	// CTTC1
    23197U,	// CVT_D32_S
    24354U,	// CVT_D32_W
    24354U,	// CVT_D32_W_MM
    22358U,	// CVT_D64_L
    23197U,	// CVT_D64_S
    24354U,	// CVT_D64_W
    22358U,	// CVT_D_L_MMR6
    23197U,	// CVT_D_S_MM
    23197U,	// CVT_D_S_MMR6
    24354U,	// CVT_D_W_MMR6
    19186U,	// CVT_L_D64
    19186U,	// CVT_L_D64_MM
    19186U,	// CVT_L_D_MMR6
    23422U,	// CVT_L_S
    23422U,	// CVT_L_S_MM
    23422U,	// CVT_L_S_MMR6
    19533U,	// CVT_S_D32
    19533U,	// CVT_S_D32_MM
    19533U,	// CVT_S_D64
    19533U,	// CVT_S_D_MMR6
    22367U,	// CVT_S_L
    22367U,	// CVT_S_L_MMR6
    25109U,	// CVT_S_W
    25109U,	// CVT_S_W_MM
    25109U,	// CVT_S_W_MMR6
    20361U,	// CVT_W_D32
    20361U,	// CVT_W_D64
    20361U,	// CVT_W_D_MMR6
    20361U,	// CVT_W_MM
    23754U,	// CVT_W_S
    23754U,	// CVT_W_S_MM
    23754U,	// CVT_W_S_MMR6
    268454810U,	// C_EQ_D32
    268454810U,	// C_EQ_D32_MM
    268454810U,	// C_EQ_D64
    268454810U,	// C_EQ_D64_MM
    268458963U,	// C_EQ_S
    268458963U,	// C_EQ_S_MM
    268454372U,	// C_F_D32
    268454372U,	// C_F_D32_MM
    268454372U,	// C_F_D64
    268454372U,	// C_F_D64_MM
    268458760U,	// C_F_S
    268458760U,	// C_F_S_MM
    268454215U,	// C_LE_D32
    268454215U,	// C_LE_D32_MM
    268454215U,	// C_LE_D64
    268454215U,	// C_LE_D64_MM
    268458680U,	// C_LE_S
    268458680U,	// C_LE_S_MM
    268455301U,	// C_LT_D32
    268455301U,	// C_LT_D32_MM
    268455301U,	// C_LT_D64
    268455301U,	// C_LT_D64_MM
    268459058U,	// C_LT_S
    268459058U,	// C_LT_S_MM
    268454206U,	// C_NGE_D32
    268454206U,	// C_NGE_D32_MM
    268454206U,	// C_NGE_D64
    268454206U,	// C_NGE_D64_MM
    268458671U,	// C_NGE_S
    268458671U,	// C_NGE_S_MM
    268454241U,	// C_NGLE_D32
    268454241U,	// C_NGLE_D32_MM
    268454241U,	// C_NGLE_D64
    268454241U,	// C_NGLE_D64_MM
    268458698U,	// C_NGLE_S
    268458698U,	// C_NGLE_S_MM
    268454658U,	// C_NGL_D32
    268454658U,	// C_NGL_D32_MM
    268454658U,	// C_NGL_D64
    268454658U,	// C_NGL_D64_MM
    268458894U,	// C_NGL_S
    268458894U,	// C_NGL_S_MM
    268455292U,	// C_NGT_D32
    268455292U,	// C_NGT_D32_MM
    268455292U,	// C_NGT_D64
    268455292U,	// C_NGT_D64_MM
    268459049U,	// C_NGT_S
    268459049U,	// C_NGT_S_MM
    268454251U,	// C_OLE_D32
    268454251U,	// C_OLE_D32_MM
    268454251U,	// C_OLE_D64
    268454251U,	// C_OLE_D64_MM
    268458708U,	// C_OLE_S
    268458708U,	// C_OLE_S_MM
    268455327U,	// C_OLT_D32
    268455327U,	// C_OLT_D32_MM
    268455327U,	// C_OLT_D64
    268455327U,	// C_OLT_D64_MM
    268459076U,	// C_OLT_S
    268459076U,	// C_OLT_S_MM
    268454836U,	// C_SEQ_D32
    268454836U,	// C_SEQ_D32_MM
    268454836U,	// C_SEQ_D64
    268454836U,	// C_SEQ_D64_MM
    268458981U,	// C_SEQ_S
    268458981U,	// C_SEQ_S_MM
    268454442U,	// C_SF_D32
    268454442U,	// C_SF_D32_MM
    268454442U,	// C_SF_D64
    268454442U,	// C_SF_D64_MM
    268458806U,	// C_SF_S
    268458806U,	// C_SF_S_MM
    268454864U,	// C_UEQ_D32
    268454864U,	// C_UEQ_D32_MM
    268454864U,	// C_UEQ_D64
    268454864U,	// C_UEQ_D64_MM
    268459001U,	// C_UEQ_S
    268459001U,	// C_UEQ_S_MM
    268454279U,	// C_ULE_D32
    268454279U,	// C_ULE_D32_MM
    268454279U,	// C_ULE_D64
    268454279U,	// C_ULE_D64_MM
    268458728U,	// C_ULE_S
    268458728U,	// C_ULE_S_MM
    268455355U,	// C_ULT_D32
    268455355U,	// C_ULT_D32_MM
    268455355U,	// C_ULT_D64
    268455355U,	// C_ULT_D64_MM
    268459096U,	// C_ULT_S
    268459096U,	// C_ULT_S_MM
    268454740U,	// C_UN_D32
    268454740U,	// C_UN_D32_MM
    268454740U,	// C_UN_D64
    268454740U,	// C_UN_D64_MM
    268458917U,	// C_UN_S
    268458917U,	// C_UN_S_MM
    22824U,	// CmpRxRy16
    1879070481U,	// CmpiRxImm16
    22289U,	// CmpiRxImmX16
    550452U,	// Constant32
    268455880U,	// DADD
    268457677U,	// DADDi
    268459458U,	// DADDiu
    268459406U,	// DADDu
    268457708U,	// DAHI
    268458194U,	// DALIGN
    268457769U,	// DATI
    268457787U,	// DAUI
    22784U,	// DBITSWAP
    22752U,	// DCLO
    22752U,	// DCLO_R6
    26000U,	// DCLZ
    26000U,	// DCLZ_R6
    268459655U,	// DDIV
    268459563U,	// DDIVU
    10177U,	// DERET
    10177U,	// DERET_MM
    10177U,	// DERET_MMR6
    268459374U,	// DEXT
    268461697U,	// DEXT64_32
    268458169U,	// DEXTM
    268459556U,	// DEXTU
    546512U,	// DI
    268459289U,	// DINS
    268458162U,	// DINSM
    268459517U,	// DINSU
    268459656U,	// DIV
    268459564U,	// DIVU
    268459564U,	// DIVU_MMR6
    268459656U,	// DIV_MMR6
    268453058U,	// DIV_S_B
    268455230U,	// DIV_S_D
    268456726U,	// DIV_S_H
    268460856U,	// DIV_S_W
    268453273U,	// DIV_U_B
    268455697U,	// DIV_U_D
    268457004U,	// DIV_U_H
    268461274U,	// DIV_U_W
    546512U,	// DI_MM
    546512U,	// DI_MMR6
    268452510U,	// DLSA
    268452510U,	// DLSA_R6
    268451841U,	// DMFC0
    16456U,	// DMFC1
    268452128U,	// DMFC2
    50348320U,	// DMFC2_OCTEON
    268455932U,	// DMOD
    268459420U,	// DMODU
    548185U,	// DMT
    2208333846U,	// DMTC0
    10518627U,	// DMTC1
    2208334139U,	// DMTC2
    50348347U,	// DMTC2_OCTEON
    268457664U,	// DMUH
    268459451U,	// DMUHU
    268458104U,	// DMUL
    268458104U,	// DMULImmMacro
    268458104U,	// DMULMacro
    268458233U,	// DMULOMacro
    268459509U,	// DMULOUMacro
    23890U,	// DMULT
    24092U,	// DMULTu
    268459495U,	// DMULU
    268458104U,	// DMUL_R6
    268455138U,	// DOTP_S_D
    268456646U,	// DOTP_S_H
    268460724U,	// DOTP_S_W
    268455605U,	// DOTP_U_D
    268456934U,	// DOTP_U_H
    268461182U,	// DOTP_U_W
    285232267U,	// DPADD_S_D
    285233775U,	// DPADD_S_H
    285237843U,	// DPADD_S_W
    285232734U,	// DPADD_U_D
    285234063U,	// DPADD_U_H
    285238311U,	// DPADD_U_W
    268457516U,	// DPAQX_SA_W_PH
    268457516U,	// DPAQX_SA_W_PH_MMR2
    268457599U,	// DPAQX_S_W_PH
    268457599U,	// DPAQX_S_W_PH_MMR2
    268460184U,	// DPAQ_SA_L_W
    268460184U,	// DPAQ_SA_L_W_MM
    268457558U,	// DPAQ_S_W_PH
    268457558U,	// DPAQ_S_W_PH_MM
    268457858U,	// DPAU_H_QBL
    268457858U,	// DPAU_H_QBL_MM
    268458413U,	// DPAU_H_QBR
    268458413U,	// DPAU_H_QBR_MM
    268457637U,	// DPAX_W_PH
    268457637U,	// DPAX_W_PH_MMR2
    268457506U,	// DPA_W_PH
    268457506U,	// DPA_W_PH_MMR2
    22829U,	// DPOP
    268457531U,	// DPSQX_SA_W_PH
    268457531U,	// DPSQX_SA_W_PH_MMR2
    268457613U,	// DPSQX_S_W_PH
    268457613U,	// DPSQX_S_W_PH_MMR2
    268460197U,	// DPSQ_SA_L_W
    268460197U,	// DPSQ_SA_L_W_MM
    268457586U,	// DPSQ_S_W_PH
    268457586U,	// DPSQ_S_W_PH_MM
    285232234U,	// DPSUB_S_D
    285233754U,	// DPSUB_S_H
    285237810U,	// DPSUB_S_W
    285232701U,	// DPSUB_U_D
    285234042U,	// DPSUB_U_H
    285238278U,	// DPSUB_U_W
    268457870U,	// DPSU_H_QBL
    268457870U,	// DPSU_H_QBL_MM
    268458425U,	// DPSU_H_QBR
    268458425U,	// DPSU_H_QBR_MM
    268457648U,	// DPSX_W_PH
    268457648U,	// DPSX_W_PH_MMR2
    268457627U,	// DPS_W_PH
    268457627U,	// DPS_W_PH_MMR2
    268458053U,	// DROL
    268458053U,	// DROLImm
    268458565U,	// DROR
    268458565U,	// DRORImm
    268458598U,	// DROTR
    268452085U,	// DROTR32
    268459699U,	// DROTRV
    21633U,	// DSBH
    26071U,	// DSDIV
    268459655U,	// DSDivIMacro
    268459655U,	// DSDivMacro
    20436U,	// DSHD
    268458047U,	// DSLL
    268452055U,	// DSLL32
    2415941695U,	// DSLL64_32
    268459661U,	// DSLLV
    268452504U,	// DSRA
    268452037U,	// DSRA32
    268459640U,	// DSRAV
    268458065U,	// DSRL
    268452063U,	// DSRL32
    268459668U,	// DSRLV
    268453731U,	// DSUB
    268459385U,	// DSUBu
    26057U,	// DUDIV
    268459563U,	// DUDivIMacro
    268459563U,	// DUDivMacro
    547210U,	// DVP
    544868U,	// DVPE
    547210U,	// DVP_MMR6
    26072U,	// DivRxRy16
    26058U,	// DivuRxRy16
    10106U,	// EHB
    10106U,	// EHB_MM
    10106U,	// EHB_MMR6
    546524U,	// EI
    546524U,	// EI_MM
    546524U,	// EI_MMR6
    548190U,	// EMT
    10178U,	// ERET
    10110U,	// ERETNC
    10110U,	// ERETNC_MMR6
    10178U,	// ERET_MM
    10178U,	// ERET_MMR6
    0U,	// ERet
    547215U,	// EVP
    544874U,	// EVPE
    547215U,	// EVP_MMR6
    268459375U,	// EXT
    268458372U,	// EXTP
    268458257U,	// EXTPDP
    268459683U,	// EXTPDPV
    268459683U,	// EXTPDPV_MM
    268458257U,	// EXTPDP_MM
    268459692U,	// EXTPV
    268459692U,	// EXTPV_MM
    268458372U,	// EXTP_MM
    268460917U,	// EXTRV_RS_W
    268460917U,	// EXTRV_RS_W_MM
    268460471U,	// EXTRV_R_W
    268460471U,	// EXTRV_R_W_MM
    268456735U,	// EXTRV_S_H
    268456735U,	// EXTRV_S_H_MM
    268461354U,	// EXTRV_W
    268461354U,	// EXTRV_W_MM
    268460906U,	// EXTR_RS_W
    268460906U,	// EXTR_RS_W_MM
    268460450U,	// EXTR_R_W
    268460450U,	// EXTR_R_W_MM
    268456666U,	// EXTR_S_H
    268456666U,	// EXTR_S_H_MM
    268460549U,	// EXTR_W
    268460549U,	// EXTR_W_MM
    268459302U,	// EXTS
    268452102U,	// EXTS32
    268459375U,	// EXT_MM
    268459375U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    19802U,	// FABS_D32
    19802U,	// FABS_D64
    19802U,	// FABS_MM
    23577U,	// FABS_S
    23577U,	// FABS_S_MM
    0U,	// FABS_W
    268454155U,	// FADD_D
    268454156U,	// FADD_D32
    268454156U,	// FADD_D64
    285231372U,	// FADD_D_MMR6
    268454156U,	// FADD_MM
    268458664U,	// FADD_S
    268458664U,	// FADD_S_MM
    285235880U,	// FADD_S_MMR6
    268459819U,	// FADD_W
    268454389U,	// FCAF_D
    268459938U,	// FCAF_W
    268454828U,	// FCEQ_D
    268460377U,	// FCEQ_W
    19809U,	// FCLASS_D
    25473U,	// FCLASS_W
    268454233U,	// FCLE_D
    268459861U,	// FCLE_W
    268455319U,	// FCLT_D
    268460956U,	// FCLT_W
    2483926U,	// FCMP_D32
    2483926U,	// FCMP_D32_MM
    2483926U,	// FCMP_D64
    2746070U,	// FCMP_S32
    2746070U,	// FCMP_S32_MM
    268454329U,	// FCNE_D
    268459895U,	// FCNE_W
    268454938U,	// FCOR_D
    268460506U,	// FCOR_W
    268454884U,	// FCUEQ_D
    268460393U,	// FCUEQ_W
    268454299U,	// FCULE_D
    268459877U,	// FCULE_W
    268455375U,	// FCULT_D
    268460972U,	// FCULT_W
    268454345U,	// FCUNE_D
    268459911U,	// FCUNE_W
    268454758U,	// FCUN_D
    268460283U,	// FCUN_W
    268455751U,	// FDIV_D
    268455752U,	// FDIV_D32
    268455752U,	// FDIV_D64
    285232968U,	// FDIV_D_MMR6
    268455752U,	// FDIV_MM
    268459153U,	// FDIV_S
    268459153U,	// FDIV_S_MM
    285236369U,	// FDIV_S_MMR6
    268461338U,	// FDIV_W
    268456393U,	// FEXDO_H
    268460299U,	// FEXDO_W
    268454042U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    268459722U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    19226U,	// FEXUPL_D
    24769U,	// FEXUPL_W
    19498U,	// FEXUPR_D
    25066U,	// FEXUPR_W
    19740U,	// FFINT_S_D
    25366U,	// FFINT_S_W
    20219U,	// FFINT_U_D
    25796U,	// FFINT_U_W
    19236U,	// FFQL_D
    24779U,	// FFQL_W
    19508U,	// FFQR_D
    25076U,	// FFQR_W
    17369U,	// FILL_B
    19211U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    20898U,	// FILL_H
    24754U,	// FILL_W
    18577U,	// FLOG2_D
    24257U,	// FLOG2_W
    19175U,	// FLOOR_L_D64
    19175U,	// FLOOR_L_D_MMR6
    23411U,	// FLOOR_L_S
    23411U,	// FLOOR_L_S_MMR6
    20350U,	// FLOOR_W_D32
    20350U,	// FLOOR_W_D64
    20350U,	// FLOOR_W_D_MMR6
    20350U,	// FLOOR_W_MM
    23743U,	// FLOOR_W_S
    23743U,	// FLOOR_W_S_MM
    23743U,	// FLOOR_W_S_MMR6
    285231379U,	// FMADD_D
    285237043U,	// FMADD_W
    268454080U,	// FMAX_A_D
    268459760U,	// FMAX_A_W
    268455826U,	// FMAX_D
    268461363U,	// FMAX_W
    268454060U,	// FMIN_A_D
    268459740U,	// FMIN_A_W
    268454732U,	// FMIN_D
    268460275U,	// FMIN_W
    20311U,	// FMOV_D32
    20311U,	// FMOV_D32_MM
    20311U,	// FMOV_D64
    20311U,	// FMOV_D_MMR6
    23704U,	// FMOV_S
    23704U,	// FMOV_S_MM
    23704U,	// FMOV_S_MMR6
    285231337U,	// FMSUB_D
    285237001U,	// FMSUB_W
    268454716U,	// FMUL_D
    268454717U,	// FMUL_D32
    268454717U,	// FMUL_D64
    285231933U,	// FMUL_D_MMR6
    268454717U,	// FMUL_MM
    268458903U,	// FMUL_S
    268458903U,	// FMUL_S_MM
    285236119U,	// FMUL_S_MMR6
    268460259U,	// FMUL_W
    19003U,	// FNEG_D32
    19003U,	// FNEG_D64
    19003U,	// FNEG_D_MMR6
    19003U,	// FNEG_MM
    23366U,	// FNEG_S
    23366U,	// FNEG_S_MM
    23366U,	// FNEG_S_MMR6
    2745210704U,	// FORK
    19337U,	// FRCP_D
    24852U,	// FRCP_W
    19957U,	// FRINT_D
    25542U,	// FRINT_W
    19985U,	// FRSQRT_D
    25570U,	// FRSQRT_W
    268454408U,	// FSAF_D
    268459946U,	// FSAF_W
    268454856U,	// FSEQ_D
    268460385U,	// FSEQ_W
    268454271U,	// FSLE_D
    268459869U,	// FSLE_W
    268455347U,	// FSLT_D
    268460964U,	// FSLT_W
    268454337U,	// FSNE_D
    268459903U,	// FSNE_W
    268454946U,	// FSOR_D
    268460514U,	// FSOR_W
    19976U,	// FSQRT_D
    19977U,	// FSQRT_D32
    19977U,	// FSQRT_D64
    19977U,	// FSQRT_MM
    23681U,	// FSQRT_S
    23681U,	// FSQRT_S_MM
    25561U,	// FSQRT_W
    268454113U,	// FSUB_D
    268454114U,	// FSUB_D32
    268454114U,	// FSUB_D64
    285231330U,	// FSUB_D_MMR6
    268454114U,	// FSUB_MM
    268458646U,	// FSUB_S
    268458646U,	// FSUB_S_MM
    285235862U,	// FSUB_S_MMR6
    268459777U,	// FSUB_W
    268454905U,	// FSUEQ_D
    268460402U,	// FSUEQ_W
    268454320U,	// FSULE_D
    268459886U,	// FSULE_W
    268455396U,	// FSULT_D
    268460981U,	// FSULT_W
    268454354U,	// FSUNE_D
    268459920U,	// FSUNE_W
    268454777U,	// FSUN_D
    268460291U,	// FSUN_W
    19751U,	// FTINT_S_D
    25377U,	// FTINT_S_W
    20230U,	// FTINT_U_D
    25807U,	// FTINT_U_W
    268456470U,	// FTQ_H
    268460411U,	// FTQ_W
    19573U,	// FTRUNC_S_D
    25149U,	// FTRUNC_S_W
    20040U,	// FTRUNC_U_D
    25617U,	// FTRUNC_U_W
    2969589512U,	// GotPrologue16
    268455041U,	// HADD_S_D
    268456549U,	// HADD_S_H
    268460617U,	// HADD_S_W
    268455508U,	// HADD_U_D
    268456837U,	// HADD_U_H
    268461085U,	// HADD_U_W
    268455008U,	// HSUB_S_D
    268456528U,	// HSUB_S_H
    268460584U,	// HSUB_S_W
    268455475U,	// HSUB_U_D
    268456816U,	// HSUB_U_H
    268461052U,	// HSUB_U_W
    268453328U,	// ILVEV_B
    268455742U,	// ILVEV_D
    268457059U,	// ILVEV_H
    268461329U,	// ILVEV_W
    268452856U,	// ILVL_B
    268454724U,	// ILVL_D
    268456385U,	// ILVL_H
    268460267U,	// ILVL_W
    268452608U,	// ILVOD_B
    268454197U,	// ILVOD_D
    268456187U,	// ILVOD_H
    268459852U,	// ILVOD_W
    268452904U,	// ILVR_B
    268454981U,	// ILVR_D
    268456510U,	// ILVR_H
    268460557U,	// ILVR_W
    268459284U,	// INS
    70010103U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    78401022U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    86790998U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    95183823U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    16801467U,	// INSV
    103564041U,	// INSVE_B
    111954395U,	// INSVE_D
    120344836U,	// INSVE_H
    128737177U,	// INSVE_W
    16801467U,	// INSV_MM
    268459284U,	// INS_MM
    268459284U,	// INS_MMR6
    546630U,	// J
    546669U,	// JAL
    23098U,	// JALR
    547386U,	// JALR16_MM
    23098U,	// JALR64
    0U,	// JALR64Pseudo
    547386U,	// JALRC16_MMR6
    17907U,	// JALRC_HB_MMR6
    18446U,	// JALRC_MMR6
    0U,	// JALRPseudo
    541191U,	// JALRS16_MM
    23839U,	// JALRS_MM
    17924U,	// JALR_HB
    23098U,	// JALR_MM
    548091U,	// JALS_MM
    550238U,	// JALX
    550238U,	// JALX_MM
    546669U,	// JAL_MM
    18325U,	// JIALC
    18325U,	// JIALC64
    18325U,	// JIALC_MMR6
    18314U,	// JIC
    18314U,	// JIC64
    18314U,	// JIC_MMR6
    547382U,	// JR
    541178U,	// JR16_MM
    547382U,	// JR64
    547193U,	// JRADDIUSP
    542729U,	// JRC16_MM
    541072U,	// JRC16_MMR6
    547181U,	// JRCADDIUSP_MMR6
    542205U,	// JR_HB
    542205U,	// JR_HB_R6
    547382U,	// JR_MM
    546630U,	// J_MM
    3282797U,	// Jal16
    3544941U,	// JalB16
    546669U,	// JalOneReg
    22381U,	// JalTwoReg
    10099U,	// JrRa16
    10091U,	// JrcRa16
    542729U,	// JrcRx16
    542734U,	// JumpLinkReg16
    134235661U,	// LB
    134235661U,	// LB64
    134238214U,	// LBE
    134238214U,	// LBE_MM
    134238214U,	// LBE_MMR6
    134234647U,	// LBU16_MM
    134238332U,	// LBUE_MMR6
    3238028644U,	// LBUX
    3238028644U,	// LBUX_MM
    134241652U,	// LBU_MMR6
    134235661U,	// LB_MM
    134235661U,	// LB_MMR6
    134241652U,	// LBu
    134241652U,	// LBu64
    134238332U,	// LBuE
    134238332U,	// LBuE_MM
    134241652U,	// LBu_MM
    134238173U,	// LD
    134234166U,	// LDC1
    134234166U,	// LDC164
    134234166U,	// LDC1_D64_MMR6
    134234166U,	// LDC1_MM
    134234382U,	// LDC2
    134234382U,	// LDC2_MMR6
    134234382U,	// LDC2_R6
    134234467U,	// LDC3
    17195U,	// LDI_B
    19019U,	// LDI_D
    20774U,	// LDI_H
    24604U,	// LDI_W
    134240201U,	// LDL
    134243888U,	// LDMacro
    18392U,	// LDPC
    134240756U,	// LDR
    3238019190U,	// LDXC1
    3238019190U,	// LDXC164
    134234865U,	// LD_B
    134236454U,	// LD_D
    0U,	// LD_F16
    134238444U,	// LD_H
    134242109U,	// LD_W
    25189827U,	// LEA_ADDiu
    25189826U,	// LEA_ADDiu64
    25189827U,	// LEA_ADDiu_MM
    134239379U,	// LH
    134239379U,	// LH64
    134238261U,	// LHE
    134238261U,	// LHE_MM
    134234670U,	// LHU16_MM
    3238028633U,	// LHX
    3238028633U,	// LHX_MM
    134239379U,	// LH_MM
    134241718U,	// LHu
    134241718U,	// LHu64
    134238338U,	// LHuE
    134238338U,	// LHuE_MM
    134241718U,	// LHu_MM
    16838U,	// LI16_MM
    16838U,	// LI16_MMR6
    134240297U,	// LL
    134240297U,	// LL64
    134240297U,	// LL64_R6
    134238177U,	// LLD
    134238177U,	// LLD_R6
    134238276U,	// LLE
    134238276U,	// LLE_MM
    134238276U,	// LLE_MMR6
    134240297U,	// LL_MM
    134240297U,	// LL_R6
    134234118U,	// LOAD_ACC128
    134234118U,	// LOAD_ACC64
    134234118U,	// LOAD_ACC64DSP
    134240574U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    268452511U,	// LSA
    3549217439U,	// LSA_MMR6
    268452511U,	// LSA_R6
    50353985U,	// LUI_MMR6
    3238019204U,	// LUXC1
    3238019204U,	// LUXC164
    3238019204U,	// LUXC1_MM
    50353985U,	// LUi
    50353985U,	// LUi64
    50353985U,	// LUi_MM
    134243657U,	// LW
    134234677U,	// LW16_MM
    134243657U,	// LW64
    134234218U,	// LWC1
    134234218U,	// LWC1_MM
    134234434U,	// LWC2
    134234434U,	// LWC2_MMR6
    134234434U,	// LWC2_R6
    134234479U,	// LWC3
    134243657U,	// LWDSP
    134243657U,	// LWDSP_MM
    134238350U,	// LWE
    134238350U,	// LWE_MM
    134238350U,	// LWE_MMR6
    134243657U,	// LWGP_MM
    134240396U,	// LWL
    134240396U,	// LWL64
    134238281U,	// LWLE
    134238281U,	// LWLE_MM
    134240396U,	// LWL_MM
    3817955U,	// LWM16_MM
    3817955U,	// LWM16_MMR6
    3817703U,	// LWM32_MM
    3823808U,	// LWM_MM
    18429U,	// LWPC
    18429U,	// LWPC_MMR6
    170388U,	// LWP_MM
    170388U,	// LWP_MMR6
    134240890U,	// LWR
    134240890U,	// LWR64
    134238320U,	// LWRE
    134238320U,	// LWRE_MM
    134240890U,	// LWR_MM
    134243657U,	// LWSP_MM
    18422U,	// LWUPC
    134241842U,	// LWU_MM
    3238028650U,	// LWX
    3238019218U,	// LWXC1
    3238019218U,	// LWXC1_MM
    3238026540U,	// LWXS_MM
    3238028650U,	// LWX_MM
    134243657U,	// LW_MM
    134243657U,	// LW_MMR6
    134241842U,	// LWu
    134235661U,	// LbRxRyOffMemX16
    134241652U,	// LbuRxRyOffMemX16
    134239379U,	// LhRxRyOffMemX16
    134241718U,	// LhuRxRyOffMemX16
    1879070472U,	// LiRxImm16
    22270U,	// LiRxImmAlignX16
    22280U,	// LiRxImmX16
    16989U,	// LoadAddrImm32
    17010U,	// LoadAddrImm64
    134234717U,	// LoadAddrReg32
    134234738U,	// LoadAddrReg64
    22280U,	// LoadImm32
    22284U,	// LoadImm64
    19037U,	// LoadImmDoubleFGR
    19037U,	// LoadImmDoubleFGR_32
    19037U,	// LoadImmDoubleGPR
    23373U,	// LoadImmSingleFGR
    23373U,	// LoadImmSingleGPR
    3958089U,	// LwConstant32
    536896841U,	// LwRxPcTcp16
    25929U,	// LwRxPcTcpX16
    134243657U,	// LwRxRyOffMemX16
    134243657U,	// LwRxSpImmX16
    20430U,	// MADD
    285231641U,	// MADDF_D
    285231641U,	// MADDF_D_MMR6
    285236013U,	// MADDF_S
    285236013U,	// MADDF_S_MMR6
    285233658U,	// MADDR_Q_H
    285237572U,	// MADDR_Q_W
    23957U,	// MADDU
    268459413U,	// MADDU_DSP
    268459413U,	// MADDU_DSP_MM
    23957U,	// MADDU_MM
    285230526U,	// MADDV_B
    285232940U,	// MADDV_D
    285234257U,	// MADDV_H
    285238527U,	// MADDV_W
    268454164U,	// MADD_D32
    268454164U,	// MADD_D32_MM
    268454164U,	// MADD_D64
    268455886U,	// MADD_DSP
    268455886U,	// MADD_DSP_MM
    20430U,	// MADD_MM
    285233628U,	// MADD_Q_H
    285237542U,	// MADD_Q_W
    268458663U,	// MADD_S
    268458663U,	// MADD_S_MM
    268457964U,	// MAQ_SA_W_PHL
    268457964U,	// MAQ_SA_W_PHL_MM
    268458494U,	// MAQ_SA_W_PHR
    268458494U,	// MAQ_SA_W_PHR_MM
    268457992U,	// MAQ_S_W_PHL
    268457992U,	// MAQ_S_W_PHL_MM
    268458522U,	// MAQ_S_W_PHR
    268458522U,	// MAQ_S_W_PHR_MM
    268454105U,	// MAXA_D
    268454105U,	// MAXA_D_MMR6
    268458636U,	// MAXA_S
    268458636U,	// MAXA_S_MMR6
    268452979U,	// MAXI_S_B
    268455119U,	// MAXI_S_D
    268456627U,	// MAXI_S_H
    268460695U,	// MAXI_S_W
    268453194U,	// MAXI_U_B
    268455586U,	// MAXI_U_D
    268456915U,	// MAXI_U_H
    268461163U,	// MAXI_U_W
    268452560U,	// MAX_A_B
    268454081U,	// MAX_A_D
    268456139U,	// MAX_A_H
    268459761U,	// MAX_A_W
    268455827U,	// MAX_D
    268455827U,	// MAX_D_MMR6
    268459219U,	// MAX_S
    268453067U,	// MAX_S_B
    268455239U,	// MAX_S_D
    268456746U,	// MAX_S_H
    268459219U,	// MAX_S_MMR6
    268460876U,	// MAX_S_W
    268453282U,	// MAX_U_B
    268455706U,	// MAX_U_D
    268457013U,	// MAX_U_H
    268461283U,	// MAX_U_W
    268451842U,	// MFC0
    268451842U,	// MFC0_MMR6
    16457U,	// MFC1
    16457U,	// MFC1_D64
    16457U,	// MFC1_MM
    16457U,	// MFC1_MMR6
    268452129U,	// MFC2
    16673U,	// MFC2_MMR6
    268451848U,	// MFHC0_MMR6
    16463U,	// MFHC1_D32
    16463U,	// MFHC1_D32_MMR6
    16463U,	// MFHC1_D64
    16463U,	// MFHC1_D64_MMR6
    16463U,	// MFHC1_MM
    16679U,	// MFHC2_MMR6
    546546U,	// MFHI
    546546U,	// MFHI16_MM
    546546U,	// MFHI64
    22258U,	// MFHI_DSP
    22258U,	// MFHI_DSP_MM
    546546U,	// MFHI_MM
    547046U,	// MFLO
    547046U,	// MFLO16_MM
    547046U,	// MFLO64
    22758U,	// MFLO_DSP
    22758U,	// MFLO_DSP_MM
    547046U,	// MFLO_MM
    26247U,	// MFTACX
    268461552U,	// MFTC0
    26133U,	// MFTC1
    550492U,	// MFTDSP
    26225U,	// MFTGPR
    26110U,	// MFTHC1
    26176U,	// MFTHI
    26190U,	// MFTLO
    268458592U,	// MFTR
    268454090U,	// MINA_D
    268454090U,	// MINA_D_MMR6
    268458628U,	// MINA_S
    268458628U,	// MINA_S_MMR6
    268452959U,	// MINI_S_B
    268455099U,	// MINI_S_D
    268456607U,	// MINI_S_H
    268460675U,	// MINI_S_W
    268453174U,	// MINI_U_B
    268455566U,	// MINI_U_D
    268456895U,	// MINI_U_H
    268461143U,	// MINI_U_W
    268452541U,	// MIN_A_B
    268454061U,	// MIN_A_D
    268456120U,	// MIN_A_H
    268459741U,	// MIN_A_W
    268454733U,	// MIN_D
    268454733U,	// MIN_D_MMR6
    268458910U,	// MIN_S
    268452989U,	// MIN_S_B
    268455129U,	// MIN_S_D
    268456637U,	// MIN_S_H
    268458910U,	// MIN_S_MMR6
    268460715U,	// MIN_S_W
    268453204U,	// MIN_U_B
    268455596U,	// MIN_U_D
    268456925U,	// MIN_U_H
    268461173U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    268455933U,	// MOD
    268453729U,	// MODSUB
    268453729U,	// MODSUB_MM
    268459421U,	// MODU
    268459421U,	// MODU_MMR6
    268455933U,	// MOD_MMR6
    268452922U,	// MOD_S_B
    268455062U,	// MOD_S_D
    268456570U,	// MOD_S_H
    268460638U,	// MOD_S_W
    268453137U,	// MOD_U_B
    268455529U,	// MOD_U_D
    268456858U,	// MOD_U_H
    268461106U,	// MOD_U_W
    20616U,	// MOVE16_MM
    16816U,	// MOVE16_MMR6
    3817232665U,	// MOVEP_MM
    3817232665U,	// MOVEP_MMR6
    24126U,	// MOVE_V
    268454450U,	// MOVF_D32
    268454450U,	// MOVF_D32_MM
    268454450U,	// MOVF_D64
    268456100U,	// MOVF_I
    268456100U,	// MOVF_I64
    268456100U,	// MOVF_I_MM
    268458814U,	// MOVF_S
    268458814U,	// MOVF_S_MM
    268454785U,	// MOVN_I64_D64
    268458202U,	// MOVN_I64_I
    268458202U,	// MOVN_I64_I64
    268458946U,	// MOVN_I64_S
    268454785U,	// MOVN_I_D32
    268454785U,	// MOVN_I_D32_MM
    268454785U,	// MOVN_I_D64
    268458202U,	// MOVN_I_I
    268458202U,	// MOVN_I_I64
    268458202U,	// MOVN_I_MM
    268458946U,	// MOVN_I_S
    268458946U,	// MOVN_I_S_MM
    268455457U,	// MOVT_D32
    268455457U,	// MOVT_D32_MM
    268455457U,	// MOVT_D64
    268459368U,	// MOVT_I
    268459368U,	// MOVT_I64
    268459368U,	// MOVT_I_MM
    268459145U,	// MOVT_S
    268459145U,	// MOVT_S_MM
    268455867U,	// MOVZ_I64_D64
    268461495U,	// MOVZ_I64_I
    268461495U,	// MOVZ_I64_I64
    268459246U,	// MOVZ_I64_S
    268455867U,	// MOVZ_I_D32
    268455867U,	// MOVZ_I_D32_MM
    268455867U,	// MOVZ_I_D64
    268461495U,	// MOVZ_I_I
    268461495U,	// MOVZ_I_I64
    268461495U,	// MOVZ_I_MM
    268459246U,	// MOVZ_I_S
    268459246U,	// MOVZ_I_S_MM
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    18281U,	// MSUB
    285231632U,	// MSUBF_D
    285231632U,	// MSUBF_D_MMR6
    285236004U,	// MSUBF_S
    285236004U,	// MSUBF_S_MMR6
    285233647U,	// MSUBR_Q_H
    285237561U,	// MSUBR_Q_W
    23936U,	// MSUBU
    268459392U,	// MSUBU_DSP
    268459392U,	// MSUBU_DSP_MM
    23936U,	// MSUBU_MM
    285230517U,	// MSUBV_B
    285232931U,	// MSUBV_D
    285234248U,	// MSUBV_H
    285238518U,	// MSUBV_W
    268454122U,	// MSUB_D32
    268454122U,	// MSUB_D32_MM
    268454122U,	// MSUB_D64
    268453737U,	// MSUB_DSP
    268453737U,	// MSUB_DSP_MM
    18281U,	// MSUB_MM
    285233618U,	// MSUB_Q_H
    285237532U,	// MSUB_Q_W
    268458645U,	// MSUB_S
    268458645U,	// MSUB_S_MM
    2208333847U,	// MTC0
    2208333847U,	// MTC0_MMR6
    10518628U,	// MTC1
    10518628U,	// MTC1_D64
    10518628U,	// MTC1_MM
    10518628U,	// MTC1_MMR6
    2208334140U,	// MTC2
    10518844U,	// MTC2_MMR6
    2208333839U,	// MTHC0_MMR6
    10534998U,	// MTHC1_D32
    10534998U,	// MTHC1_D32_MMR6
    10534998U,	// MTHC1_D64
    10534998U,	// MTHC1_D64_MMR6
    10534998U,	// MTHC1_MM
    10518830U,	// MTHC2_MMR6
    546552U,	// MTHI
    546552U,	// MTHI64
    10524408U,	// MTHI_DSP
    10524408U,	// MTHI_DSP_MM
    546552U,	// MTHI_MM
    10524960U,	// MTHLIP
    10524960U,	// MTHLIP_MM
    547059U,	// MTLO
    547059U,	// MTLO64
    10524915U,	// MTLO_DSP
    10524915U,	// MTLO_DSP_MM
    547059U,	// MTLO_MM
    540707U,	// MTM0
    540832U,	// MTM1
    541006U,	// MTM2
    540713U,	// MTP0
    540838U,	// MTP1
    541012U,	// MTP2
    10528399U,	// MTTACX
    2208343543U,	// MTTC0
    10528291U,	// MTTC1
    550500U,	// MTTDSP
    10528377U,	// MTTGPR
    10528262U,	// MTTHC1
    10528327U,	// MTTHI
    10528341U,	// MTTLO
    4087388781U,	// MTTR
    268457665U,	// MUH
    268459452U,	// MUHU
    268459452U,	// MUHU_MMR6
    268457665U,	// MUH_MMR6
    268458105U,	// MUL
    268458005U,	// MULEQ_S_W_PHL
    268458005U,	// MULEQ_S_W_PHL_MM
    268458535U,	// MULEQ_S_W_PHR
    268458535U,	// MULEQ_S_W_PHR_MM
    268457882U,	// MULEU_S_PH_QBL
    268457882U,	// MULEU_S_PH_QBL_MM
    268458437U,	// MULEU_S_PH_QBR
    268458437U,	// MULEU_S_PH_QBR_MM
    268458105U,	// MULImmMacro
    268458234U,	// MULOMacro
    268459510U,	// MULOUMacro
    268457425U,	// MULQ_RS_PH
    268457425U,	// MULQ_RS_PH_MM
    268460895U,	// MULQ_RS_W
    268460895U,	// MULQ_RS_W_MMR2
    268457369U,	// MULQ_S_PH
    268457369U,	// MULQ_S_PH_MMR2
    268460754U,	// MULQ_S_W
    268460754U,	// MULQ_S_W_MMR2
    268456453U,	// MULR_Q_H
    268460367U,	// MULR_Q_W
    268457571U,	// MULSAQ_S_W_PH
    268457571U,	// MULSAQ_S_W_PH_MM
    268457546U,	// MULSA_W_PH
    268457546U,	// MULSA_W_PH_MMR2
    23891U,	// MULT
    268459549U,	// MULTU_DSP
    268459549U,	// MULTU_DSP_MM
    268459347U,	// MULT_DSP
    268459347U,	// MULT_DSP_MM
    23891U,	// MULT_MM
    24093U,	// MULTu
    24093U,	// MULTu_MM
    268459489U,	// MULU
    268459489U,	// MULU_MMR6
    268453337U,	// MULV_B
    268455759U,	// MULV_D
    268457068U,	// MULV_H
    268461346U,	// MULV_W
    268458105U,	// MUL_MM
    268458105U,	// MUL_MMR6
    268457242U,	// MUL_PH
    268457242U,	// MUL_PH_MMR2
    268456422U,	// MUL_Q_H
    268460336U,	// MUL_Q_W
    268458105U,	// MUL_R6
    268457337U,	// MUL_S_PH
    268457337U,	// MUL_S_PH_MMR2
    546546U,	// Mfhi16
    547046U,	// Mflo16
    20616U,	// Move32R16
    20616U,	// MoveR3216
    23891U,	// MultRxRy16
    142908755U,	// MultRxRyRz16
    24093U,	// MultuRxRy16
    142908957U,	// MultuRxRyRz16
    17120U,	// NLOC_B
    18683U,	// NLOC_D
    20699U,	// NLOC_H
    24338U,	// NLOC_W
    17128U,	// NLZC_B
    18691U,	// NLZC_D
    20707U,	// NLZC_H
    24346U,	// NLZC_W
    268454172U,	// NMADD_D32
    268454172U,	// NMADD_D32_MM
    268454172U,	// NMADD_D64
    268458662U,	// NMADD_S
    268458662U,	// NMADD_S_MM
    268454130U,	// NMSUB_D32
    268454130U,	// NMSUB_D32_MM
    268454130U,	// NMSUB_D64
    268458644U,	// NMSUB_S
    268458644U,	// NMSUB_S_MM
    0U,	// NOP
    268458560U,	// NOR
    268458560U,	// NOR64
    268452745U,	// NORI_B
    268458560U,	// NORImm
    268458560U,	// NORImm64
    268458560U,	// NOR_MM
    268458560U,	// NOR_MMR6
    268459598U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    16912U,	// NOT16_MM
    16912U,	// NOT16_MMR6
    20650U,	// NegRxRy16
    23907U,	// NotRxRy16
    268458561U,	// OR
    9224705U,	// OR16_MM
    9224705U,	// OR16_MMR6
    268458561U,	// OR64
    268452746U,	// ORI_B
    268457764U,	// ORI_MMR6
    268458561U,	// OR_MM
    268458561U,	// OR_MMR6
    268459599U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    268457764U,	// ORi
    268457764U,	// ORi64
    268457764U,	// ORi_MM
    16800321U,	// OrRxRxRy16
    268457231U,	// PACKRL_PH
    268457231U,	// PACKRL_PH_MM
    10117U,	// PAUSE
    10117U,	// PAUSE_MM
    10117U,	// PAUSE_MMR6
    268453319U,	// PCKEV_B
    268455733U,	// PCKEV_D
    268457050U,	// PCKEV_H
    268461320U,	// PCKEV_W
    268452599U,	// PCKOD_B
    268454188U,	// PCKOD_D
    268456178U,	// PCKOD_H
    268459843U,	// PCKOD_W
    17647U,	// PCNT_B
    19949U,	// PCNT_D
    21326U,	// PCNT_H
    25534U,	// PCNT_W
    268457195U,	// PICK_PH
    268457195U,	// PICK_PH_MM
    268453461U,	// PICK_QB
    268453461U,	// PICK_QB_MM
    22830U,	// POP
    22457U,	// PRECEQU_PH_QBL
    16993U,	// PRECEQU_PH_QBLA
    16993U,	// PRECEQU_PH_QBLA_MM
    22457U,	// PRECEQU_PH_QBL_MM
    23012U,	// PRECEQU_PH_QBR
    17031U,	// PRECEQU_PH_QBRA
    17031U,	// PRECEQU_PH_QBRA_MM
    23012U,	// PRECEQU_PH_QBR_MM
    22522U,	// PRECEQ_W_PHL
    22522U,	// PRECEQ_W_PHL_MM
    23052U,	// PRECEQ_W_PHR
    23052U,	// PRECEQ_W_PHR_MM
    22442U,	// PRECEU_PH_QBL
    16977U,	// PRECEU_PH_QBLA
    16977U,	// PRECEU_PH_QBLA_MM
    22442U,	// PRECEU_PH_QBL_MM
    22997U,	// PRECEU_PH_QBR
    17015U,	// PRECEU_PH_QBRA
    17015U,	// PRECEU_PH_QBRA_MM
    22997U,	// PRECEU_PH_QBR_MM
    268457147U,	// PRECRQU_S_QB_PH
    268457147U,	// PRECRQU_S_QB_PH_MM
    268459986U,	// PRECRQ_PH_W
    268459986U,	// PRECRQ_PH_W_MM
    268457120U,	// PRECRQ_QB_PH
    268457120U,	// PRECRQ_QB_PH_MM
    268460017U,	// PRECRQ_RS_PH_W
    268460017U,	// PRECRQ_RS_PH_W_MM
    268457134U,	// PRECR_QB_PH
    268457134U,	// PRECR_QB_PH_MMR2
    268459970U,	// PRECR_SRA_PH_W
    268459970U,	// PRECR_SRA_PH_W_MMR2
    268459999U,	// PRECR_SRA_R_PH_W
    268459999U,	// PRECR_SRA_R_PH_W_MMR2
    1937566U,	// PREF
    1937437U,	// PREFE
    1937437U,	// PREFE_MM
    1937437U,	// PREFE_MMR6
    151889234U,	// PREFX_MM
    1937566U,	// PREF_MM
    1937566U,	// PREF_MMR6
    1937566U,	// PREF_R6
    268455915U,	// PREPEND
    268455915U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    16390U,	// PseudoCVT_D32_W
    16390U,	// PseudoCVT_D64_L
    16390U,	// PseudoCVT_D64_W
    16390U,	// PseudoCVT_S_L
    16390U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    268455774U,	// PseudoTRUNC_W_D
    268455774U,	// PseudoTRUNC_W_D32
    268459167U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    18257U,	// RADDU_W_QB
    18257U,	// RADDU_W_QB_MM
    41965919U,	// RDDSP
    159406431U,	// RDDSP_MM
    23155U,	// RDHWR
    23155U,	// RDHWR64
    23155U,	// RDHWR_MM
    268458611U,	// RDHWR_MMR6
    23120U,	// RDPGPR_MMR6
    19345U,	// RECIP_D32
    19345U,	// RECIP_D32_MM
    19345U,	// RECIP_D64
    19345U,	// RECIP_D64_MM
    23498U,	// RECIP_S
    23498U,	// RECIP_S_MM
    22030U,	// REPLV_PH
    22030U,	// REPLV_PH_MM
    18237U,	// REPLV_QB
    18237U,	// REPLV_QB_MM
    21757U,	// REPL_PH
    21757U,	// REPL_PH_MM
    167790183U,	// REPL_QB
    167790183U,	// REPL_QB_MM
    19958U,	// RINT_D
    19958U,	// RINT_D_MMR6
    23672U,	// RINT_S
    23672U,	// RINT_S_MMR6
    268458054U,	// ROL
    268458054U,	// ROLImm
    268458566U,	// ROR
    268458566U,	// RORImm
    268458599U,	// ROTR
    268459700U,	// ROTRV
    268459700U,	// ROTRV_MM
    268458599U,	// ROTR_MM
    19154U,	// ROUND_L_D64
    19154U,	// ROUND_L_D_MMR6
    23390U,	// ROUND_L_S
    23390U,	// ROUND_L_S_MMR6
    20329U,	// ROUND_W_D32
    20329U,	// ROUND_W_D64
    20329U,	// ROUND_W_D_MMR6
    20329U,	// ROUND_W_MM
    23722U,	// ROUND_W_S
    23722U,	// ROUND_W_S_MM
    23722U,	// ROUND_W_S_MMR6
    19986U,	// RSQRT_D32
    19986U,	// RSQRT_D32_MM
    19986U,	// RSQRT_D64
    19986U,	// RSQRT_D64_MM
    23680U,	// RSQRT_S
    23680U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    268453028U,	// SAT_S_B
    268455178U,	// SAT_S_D
    268456696U,	// SAT_S_H
    268460804U,	// SAT_S_W
    268453255U,	// SAT_U_B
    268455657U,	// SAT_U_D
    268456986U,	// SAT_U_H
    268461234U,	// SAT_U_W
    134235997U,	// SB
    134234500U,	// SB16_MM
    134234500U,	// SB16_MMR6
    134235997U,	// SB64
    134238219U,	// SBE
    134238219U,	// SBE_MM
    134238219U,	// SBE_MMR6
    134235997U,	// SB_MM
    134235997U,	// SB_MMR6
    4229144U,	// SC
    4229144U,	// SC64
    4229144U,	// SC64_R6
    4231107U,	// SCD
    4231107U,	// SCD_R6
    4231184U,	// SCE
    4231184U,	// SCE_MM
    134238224U,	// SCE_MMR6
    4229144U,	// SC_MM
    4229144U,	// SC_R6
    134238210U,	// SD
    186634U,	// SDBBP
    82417U,	// SDBBP16_MM
    82417U,	// SDBBP16_MMR6
    596234U,	// SDBBP_MM
    186634U,	// SDBBP_MMR6
    186634U,	// SDBBP_R6
    134234172U,	// SDC1
    134234172U,	// SDC164
    134234172U,	// SDC1_D64_MMR6
    134234172U,	// SDC1_MM
    134234388U,	// SDC2
    134234388U,	// SDC2_MMR6
    134234388U,	// SDC2_R6
    134234473U,	// SDC3
    26072U,	// SDIV
    26072U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    134240206U,	// SDL
    134243900U,	// SDMacro
    134240761U,	// SDR
    3238019197U,	// SDXC1
    3238019197U,	// SDXC164
    268459656U,	// SDivIMacro
    268459656U,	// SDivMacro
    17902U,	// SEB
    17902U,	// SEB64
    17902U,	// SEB_MM
    17902U,	// SEB_MMR6
    21645U,	// SEH
    21645U,	// SEH64
    21645U,	// SEH_MM
    21645U,	// SEH_MMR6
    268461468U,	// SELEQZ
    268461468U,	// SELEQZ64
    268455857U,	// SELEQZ_D
    268455857U,	// SELEQZ_D_MMR6
    268461468U,	// SELEQZ_MMR6
    268459236U,	// SELEQZ_S
    268459236U,	// SELEQZ_S_MMR6
    268461441U,	// SELNEZ
    268461441U,	// SELNEZ64
    268455840U,	// SELNEZ_D
    268455840U,	// SELNEZ_D_MMR6
    268461441U,	// SELNEZ_MMR6
    268459226U,	// SELNEZ_S
    268459226U,	// SELNEZ_S_MMR6
    285231867U,	// SEL_D
    285231867U,	// SEL_D_MMR6
    285236103U,	// SEL_S
    285236103U,	// SEL_S_MMR6
    268458403U,	// SEQ
    268461676U,	// SEQIMacro
    268461676U,	// SEQMacro
    268457751U,	// SEQi
    134239932U,	// SH
    134234552U,	// SH16_MM
    134234552U,	// SH16_MMR6
    134239932U,	// SH64
    134238266U,	// SHE
    134238266U,	// SHE_MM
    134238266U,	// SHE_MMR6
    268452627U,	// SHF_B
    268456206U,	// SHF_H
    268459955U,	// SHF_W
    22764U,	// SHILO
    24219U,	// SHILOV
    24219U,	// SHILOV_MM
    22764U,	// SHILO_MM
    268457476U,	// SHLLV_PH
    268457476U,	// SHLLV_PH_MM
    268453683U,	// SHLLV_QB
    268453683U,	// SHLLV_QB_MM
    268457413U,	// SHLLV_S_PH
    268457413U,	// SHLLV_S_PH_MM
    268460865U,	// SHLLV_S_W
    268460865U,	// SHLLV_S_W_MM
    268457204U,	// SHLL_PH
    268457204U,	// SHLL_PH_MM
    268453470U,	// SHLL_QB
    268453470U,	// SHLL_QB_MM
    268457326U,	// SHLL_S_PH
    268457326U,	// SHLL_S_PH_MM
    268460705U,	// SHLL_S_W
    268460705U,	// SHLL_S_W_MM
    268457466U,	// SHRAV_PH
    268457466U,	// SHRAV_PH_MM
    268453673U,	// SHRAV_QB
    268453673U,	// SHRAV_QB_MMR2
    268457314U,	// SHRAV_R_PH
    268457314U,	// SHRAV_R_PH_MM
    268453571U,	// SHRAV_R_QB
    268453571U,	// SHRAV_R_QB_MMR2
    268460460U,	// SHRAV_R_W
    268460460U,	// SHRAV_R_W_MM
    268457111U,	// SHRA_PH
    268457111U,	// SHRA_PH_MM
    268453393U,	// SHRA_QB
    268453393U,	// SHRA_QB_MMR2
    268457279U,	// SHRA_R_PH
    268457279U,	// SHRA_R_PH_MM
    268453536U,	// SHRA_R_QB
    268453536U,	// SHRA_R_QB_MMR2
    268460418U,	// SHRA_R_W
    268460418U,	// SHRA_R_W_MM
    268457496U,	// SHRLV_PH
    268457496U,	// SHRLV_PH_MMR2
    268453703U,	// SHRLV_QB
    268453703U,	// SHRLV_QB_MM
    268457222U,	// SHRL_PH
    268457222U,	// SHRL_PH_MMR2
    268453488U,	// SHRL_QB
    268453488U,	// SHRL_QB_MM
    134239932U,	// SH_MM
    134239932U,	// SH_MMR6
    1627407146U,	// SLDI_B
    1627408970U,	// SLDI_D
    1627410725U,	// SLDI_H
    1627414555U,	// SLDI_W
    1627407088U,	// SLD_B
    1627408677U,	// SLD_D
    1627410667U,	// SLD_H
    1627414332U,	// SLD_W
    268458048U,	// SLL
    268452309U,	// SLL16_MM
    268452309U,	// SLL16_MMR6
    22592U,	// SLL64_32
    22592U,	// SLL64_64
    268452684U,	// SLLI_B
    268454491U,	// SLLI_D
    268456246U,	// SLLI_H
    268460076U,	// SLLI_W
    268459662U,	// SLLV
    268459662U,	// SLLV_MM
    268452833U,	// SLL_B
    268454675U,	// SLL_D
    268456362U,	// SLL_H
    268458048U,	// SLL_MM
    268458048U,	// SLL_MMR6
    268460218U,	// SLL_W
    268459336U,	// SLT
    268459336U,	// SLT64
    268459336U,	// SLTImm64
    268459536U,	// SLTUImm64
    268459336U,	// SLT_MM
    268457775U,	// SLTi
    268457775U,	// SLTi64
    268457775U,	// SLTi_MM
    268459473U,	// SLTiu
    268459473U,	// SLTiu64
    268459473U,	// SLTiu_MM
    268459536U,	// SLTu
    268459536U,	// SLTu64
    268459536U,	// SLTu_MM
    268456026U,	// SNE
    268457696U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    1610630051U,	// SPLATI_B
    1610631842U,	// SPLATI_D
    1610633597U,	// SPLATI_H
    1610637427U,	// SPLATI_W
    1610630366U,	// SPLAT_B
    1610632555U,	// SPLAT_D
    1610634045U,	// SPLAT_H
    1610638219U,	// SPLAT_W
    19977U,	// SQRT_D_MMR6
    23681U,	// SQRT_S_MMR6
    268452505U,	// SRA
    268452642U,	// SRAI_B
    268454466U,	// SRAI_D
    268456221U,	// SRAI_H
    268460051U,	// SRAI_W
    268452718U,	// SRARI_B
    268454525U,	// SRARI_D
    268456280U,	// SRARI_H
    268460110U,	// SRARI_W
    268452871U,	// SRAR_B
    268454914U,	// SRAR_D
    268456477U,	// SRAR_H
    268460482U,	// SRAR_W
    268459641U,	// SRAV
    268459641U,	// SRAV_MM
    268452569U,	// SRA_B
    268454098U,	// SRA_D
    268456148U,	// SRA_H
    268452505U,	// SRA_MM
    268459770U,	// SRA_W
    268458066U,	// SRL
    268452316U,	// SRL16_MM
    268452316U,	// SRL16_MMR6
    268452692U,	// SRLI_B
    268454499U,	// SRLI_D
    268456254U,	// SRLI_H
    268460084U,	// SRLI_W
    268452736U,	// SRLRI_B
    268454543U,	// SRLRI_D
    268456298U,	// SRLRI_H
    268460128U,	// SRLRI_W
    268452887U,	// SRLR_B
    268454930U,	// SRLR_D
    268456493U,	// SRLR_H
    268460498U,	// SRLR_W
    268459669U,	// SRLV
    268459669U,	// SRLV_MM
    268452840U,	// SRL_B
    268454700U,	// SRL_D
    268456369U,	// SRL_H
    268458066U,	// SRL_MM
    268460243U,	// SRL_W
    10160U,	// SSNOP
    10160U,	// SSNOP_MM
    10160U,	// SSNOP_MMR6
    134234118U,	// STORE_ACC128
    134234118U,	// STORE_ACC64
    134234118U,	// STORE_ACC64DSP
    134240590U,	// STORE_CCOND_DSP
    134235393U,	// ST_B
    134237723U,	// ST_D
    0U,	// ST_F16
    134239072U,	// ST_H
    134243308U,	// ST_W
    268453732U,	// SUB
    268457175U,	// SUBQH_PH
    268457175U,	// SUBQH_PH_MMR2
    268457290U,	// SUBQH_R_PH
    268457290U,	// SUBQH_R_PH_MMR2
    268460428U,	// SUBQH_R_W
    268460428U,	// SUBQH_R_W_MMR2
    268460033U,	// SUBQH_W
    268460033U,	// SUBQH_W_MMR2
    268457250U,	// SUBQ_PH
    268457250U,	// SUBQ_PH_MM
    268457347U,	// SUBQ_S_PH
    268457347U,	// SUBQ_S_PH_MM
    268460734U,	// SUBQ_S_W
    268460734U,	// SUBQ_S_W_MM
    268453243U,	// SUBSUS_U_B
    268455645U,	// SUBSUS_U_D
    268456974U,	// SUBSUS_U_H
    268461222U,	// SUBSUS_U_W
    268453046U,	// SUBSUU_S_B
    268455218U,	// SUBSUU_S_D
    268456714U,	// SUBSUU_S_H
    268460844U,	// SUBSUU_S_W
    268453008U,	// SUBS_S_B
    268455158U,	// SUBS_S_D
    268456676U,	// SUBS_S_H
    268460784U,	// SUBS_S_W
    268453223U,	// SUBS_U_B
    268455625U,	// SUBS_U_D
    268456954U,	// SUBS_U_H
    268461202U,	// SUBS_U_W
    268452382U,	// SUBU16_MM
    268452382U,	// SUBU16_MMR6
    268453441U,	// SUBUH_QB
    268453441U,	// SUBUH_QB_MMR2
    268453547U,	// SUBUH_R_QB
    268453547U,	// SUBUH_R_QB_MMR2
    268459386U,	// SUBU_MMR6
    268457448U,	// SUBU_PH
    268457448U,	// SUBU_PH_MMR2
    268453655U,	// SUBU_QB
    268453655U,	// SUBU_QB_MM
    268457391U,	// SUBU_S_PH
    268457391U,	// SUBU_S_PH_MMR2
    268453594U,	// SUBU_S_QB
    268453594U,	// SUBU_S_QB_MM
    268452790U,	// SUBVI_B
    268454581U,	// SUBVI_D
    268456336U,	// SUBVI_H
    268460166U,	// SUBVI_W
    268453302U,	// SUBV_B
    268455716U,	// SUBV_D
    268457033U,	// SUBV_H
    268461303U,	// SUBV_W
    268453732U,	// SUB_MM
    268453732U,	// SUB_MMR6
    268459386U,	// SUBu
    268459386U,	// SUBu_MM
    3238019211U,	// SUXC1
    3238019211U,	// SUXC164
    3238019211U,	// SUXC1_MM
    134243662U,	// SW
    134234683U,	// SW16_MM
    134234683U,	// SW16_MMR6
    134243662U,	// SW64
    134234224U,	// SWC1
    134234224U,	// SWC1_MM
    134234440U,	// SWC2
    134234440U,	// SWC2_MMR6
    134234440U,	// SWC2_R6
    134234485U,	// SWC3
    134243662U,	// SWDSP
    134243662U,	// SWDSP_MM
    134238355U,	// SWE
    134238355U,	// SWE_MM
    134238355U,	// SWE_MMR6
    134240401U,	// SWL
    134240401U,	// SWL64
    134238287U,	// SWLE
    134238287U,	// SWLE_MM
    134240401U,	// SWL_MM
    3817962U,	// SWM16_MM
    3817962U,	// SWM16_MMR6
    3817710U,	// SWM32_MM
    3823813U,	// SWM_MM
    170393U,	// SWP_MM
    170393U,	// SWP_MMR6
    134240895U,	// SWR
    134240895U,	// SWR64
    134238326U,	// SWRE
    134238326U,	// SWRE_MM
    134240895U,	// SWR_MM
    134243662U,	// SWSP_MM
    134243662U,	// SWSP_MMR6
    3238019225U,	// SWXC1
    3238019225U,	// SWXC1_MM
    134243662U,	// SW_MM
    134243662U,	// SW_MMR6
    206378U,	// SYNC
    218822U,	// SYNCI
    218822U,	// SYNCI_MM
    218822U,	// SYNCI_MMR6
    206378U,	// SYNC_MM
    198610U,	// SYNC_MMR6
    186404U,	// SYSCALL
    596004U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    134235997U,	// SbRxRyOffMemX16
    550333U,	// SebRx16
    550339U,	// SehRx16
    4695446U,	// SelBeqZ
    4695419U,	// SelBneZ
    444832040U,	// SelTBteqZCmp
    444831505U,	// SelTBteqZCmpi
    444833096U,	// SelTBteqZSlt
    444831535U,	// SelTBteqZSlti
    444833233U,	// SelTBteqZSltiu
    444833296U,	// SelTBteqZSltu
    713267496U,	// SelTBtneZCmp
    713266961U,	// SelTBtneZCmpi
    713268552U,	// SelTBtneZSlt
    713266991U,	// SelTBtneZSlti
    713268689U,	// SelTBtneZSltiu
    713268752U,	// SelTBtneZSltu
    134239932U,	// ShRxRyOffMemX16
    268458048U,	// SllX16
    16801422U,	// SllvRxRy16
    184851784U,	// SltCCRxRy16
    23880U,	// SltRxRy16
    184850223U,	// SltiCCRxImmX16
    1879070511U,	// SltiRxImm16
    22319U,	// SltiRxImmX16
    184851921U,	// SltiuCCRxImmX16
    1879072209U,	// SltiuRxImm16
    24017U,	// SltiuRxImmX16
    184851984U,	// SltuCCRxRy16
    24080U,	// SltuRxRy16
    184851984U,	// SltuRxRyRz16
    268452505U,	// SraX16
    16801401U,	// SravRxRy16
    268458066U,	// SrlX16
    16801429U,	// SrlvRxRy16
    268459386U,	// SubuRxRyRz16
    134243662U,	// SwRxRyOffMemX16
    134243662U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    268458408U,	// TEQ
    22301U,	// TEQI
    22301U,	// TEQI_MM
    268458408U,	// TEQ_MM
    268455977U,	// TGE
    22234U,	// TGEI
    24010U,	// TGEIU
    24010U,	// TGEIU_MM
    22234U,	// TGEI_MM
    268459433U,	// TGEU
    268459433U,	// TGEU_MM
    268455977U,	// TGE_MM
    10188U,	// TLBINV
    10123U,	// TLBINVF
    10123U,	// TLBINVF_MMR6
    10188U,	// TLBINV_MMR6
    10155U,	// TLBP
    10155U,	// TLBP_MM
    10166U,	// TLBR
    10166U,	// TLBR_MM
    10131U,	// TLBWI
    10131U,	// TLBWI_MM
    10171U,	// TLBWR
    10171U,	// TLBWR_MM
    268459341U,	// TLT
    22325U,	// TLTI
    24024U,	// TLTIU_MM
    22325U,	// TLTI_MM
    268459542U,	// TLTU
    268459542U,	// TLTU_MM
    268459341U,	// TLT_MM
    268456031U,	// TNE
    22246U,	// TNEI
    22246U,	// TNEI_MM
    268456031U,	// TNE_MM
    0U,	// TRAP
    19143U,	// TRUNC_L_D64
    19143U,	// TRUNC_L_D_MMR6
    23379U,	// TRUNC_L_S
    23379U,	// TRUNC_L_S_MMR6
    20318U,	// TRUNC_W_D32
    20318U,	// TRUNC_W_D64
    20318U,	// TRUNC_W_D_MMR6
    20318U,	// TRUNC_W_MM
    23711U,	// TRUNC_W_S
    23711U,	// TRUNC_W_S_MM
    23711U,	// TRUNC_W_S_MMR6
    24024U,	// TTLTIU
    26058U,	// UDIV
    26058U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    268459564U,	// UDivIMacro
    268459564U,	// UDivMacro
    134239378U,	// Ulh
    134241717U,	// Ulhu
    134243656U,	// Ulw
    134239931U,	// Ush
    134243661U,	// Usw
    268459487U,	// V3MULU
    268451869U,	// VMM0
    268459502U,	// VMULU
    285229842U,	// VSHF_B
    285231650U,	// VSHF_D
    285233421U,	// VSHF_H
    285237170U,	// VSHF_W
    10183U,	// WAIT
    597309U,	// WAIT_MM
    597309U,	// WAIT_MMR6
    41965926U,	// WRDSP
    159406438U,	// WRDSP_MM
    23128U,	// WRPGPR_MMR6
    21639U,	// WSBH
    21639U,	// WSBH_MM
    21639U,	// WSBH_MMR6
    268458571U,	// XOR
    9224704U,	// XOR16_MM
    9224704U,	// XOR16_MMR6
    268458571U,	// XOR64
    268452753U,	// XORI_B
    268457763U,	// XORI_MMR6
    268458571U,	// XOR_MM
    268458571U,	// XOR_MMR6
    268459605U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    268457763U,	// XORi
    268457763U,	// XORi64
    268457763U,	// XORi_MM
    16800331U,	// XorRxRxRy16
    20442U,	// YIELD
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABSMacro
    0U,	// ABSQ_S_PH
    0U,	// ABSQ_S_PH_MM
    0U,	// ABSQ_S_QB
    0U,	// ABSQ_S_QB_MMR2
    0U,	// ABSQ_S_W
    0U,	// ABSQ_S_W_MM
    0U,	// ABS_D_MMR6
    0U,	// ABS_S_MMR6
    0U,	// ADD
    0U,	// ADDIUPC
    0U,	// ADDIUPC_MM
    0U,	// ADDIUPC_MMR6
    0U,	// ADDIUR1SP_MM
    0U,	// ADDIUR2_MM
    0U,	// ADDIUS5_MM
    0U,	// ADDIUSP_MM
    0U,	// ADDIU_MMR6
    0U,	// ADDQH_PH
    0U,	// ADDQH_PH_MMR2
    0U,	// ADDQH_R_PH
    0U,	// ADDQH_R_PH_MMR2
    0U,	// ADDQH_R_W
    0U,	// ADDQH_R_W_MMR2
    0U,	// ADDQH_W
    0U,	// ADDQH_W_MMR2
    0U,	// ADDQ_PH
    0U,	// ADDQ_PH_MM
    0U,	// ADDQ_S_PH
    0U,	// ADDQ_S_PH_MM
    0U,	// ADDQ_S_W
    0U,	// ADDQ_S_W_MM
    0U,	// ADDSC
    0U,	// ADDSC_MM
    0U,	// ADDS_A_B
    0U,	// ADDS_A_D
    0U,	// ADDS_A_H
    0U,	// ADDS_A_W
    0U,	// ADDS_S_B
    0U,	// ADDS_S_D
    0U,	// ADDS_S_H
    0U,	// ADDS_S_W
    0U,	// ADDS_U_B
    0U,	// ADDS_U_D
    0U,	// ADDS_U_H
    0U,	// ADDS_U_W
    0U,	// ADDU16_MM
    0U,	// ADDU16_MMR6
    0U,	// ADDUH_QB
    0U,	// ADDUH_QB_MMR2
    0U,	// ADDUH_R_QB
    0U,	// ADDUH_R_QB_MMR2
    0U,	// ADDU_MMR6
    0U,	// ADDU_PH
    0U,	// ADDU_PH_MMR2
    0U,	// ADDU_QB
    0U,	// ADDU_QB_MM
    0U,	// ADDU_S_PH
    0U,	// ADDU_S_PH_MMR2
    0U,	// ADDU_S_QB
    0U,	// ADDU_S_QB_MM
    2U,	// ADDVI_B
    2U,	// ADDVI_D
    2U,	// ADDVI_H
    2U,	// ADDVI_W
    0U,	// ADDV_B
    0U,	// ADDV_D
    0U,	// ADDV_H
    0U,	// ADDV_W
    0U,	// ADDWC
    0U,	// ADDWC_MM
    0U,	// ADD_A_B
    0U,	// ADD_A_D
    0U,	// ADD_A_H
    0U,	// ADD_A_W
    0U,	// ADD_MM
    0U,	// ADD_MMR6
    0U,	// ADDi
    0U,	// ADDi_MM
    0U,	// ADDiu
    0U,	// ADDiu_MM
    0U,	// ADDu
    0U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    64U,	// ALIGN
    64U,	// ALIGN_MMR6
    0U,	// ALUIPC
    0U,	// ALUIPC_MMR6
    0U,	// AND
    0U,	// AND16_MM
    0U,	// AND16_MMR6
    0U,	// AND64
    0U,	// ANDI16_MM
    0U,	// ANDI16_MMR6
    4U,	// ANDI_B
    6U,	// ANDI_MMR6
    0U,	// AND_MM
    0U,	// AND_MMR6
    0U,	// AND_V
    0U,	// AND_V_D_PSEUDO
    0U,	// AND_V_H_PSEUDO
    0U,	// AND_V_W_PSEUDO
    6U,	// ANDi
    6U,	// ANDi64
    6U,	// ANDi_MM
    2U,	// APPEND
    2U,	// APPEND_MMR2
    0U,	// ASUB_S_B
    0U,	// ASUB_S_D
    0U,	// ASUB_S_H
    0U,	// ASUB_S_W
    0U,	// ASUB_U_B
    0U,	// ASUB_U_D
    0U,	// ASUB_U_H
    0U,	// ASUB_U_W
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    6U,	// AUI
    0U,	// AUIPC
    0U,	// AUIPC_MMR6
    6U,	// AUI_MMR6
    0U,	// AVER_S_B
    0U,	// AVER_S_D
    0U,	// AVER_S_H
    0U,	// AVER_S_W
    0U,	// AVER_U_B
    0U,	// AVER_U_D
    0U,	// AVER_U_H
    0U,	// AVER_U_W
    0U,	// AVE_S_B
    0U,	// AVE_S_D
    0U,	// AVE_S_H
    0U,	// AVE_S_W
    0U,	// AVE_U_B
    0U,	// AVE_U_D
    0U,	// AVE_U_H
    0U,	// AVE_U_W
    0U,	// AddiuRxImmX16
    0U,	// AddiuRxPcImmX16
    0U,	// AddiuRxRxImm16
    0U,	// AddiuRxRxImmX16
    0U,	// AddiuRxRyOffMemX16
    0U,	// AddiuSpImm16
    0U,	// AddiuSpImmX16
    0U,	// AdduRxRyRz16
    0U,	// AndRxRxRy16
    0U,	// B
    0U,	// B16_MM
    0U,	// BADDu
    0U,	// BAL
    0U,	// BALC
    0U,	// BALC_MMR6
    8U,	// BALIGN
    8U,	// BALIGN_MMR2
    0U,	// BAL_BR
    0U,	// BBIT0
    0U,	// BBIT032
    0U,	// BBIT1
    0U,	// BBIT132
    0U,	// BC
    0U,	// BC16_MMR6
    0U,	// BC1EQZ
    0U,	// BC1EQZC_MMR6
    0U,	// BC1F
    0U,	// BC1FL
    0U,	// BC1F_MM
    0U,	// BC1NEZ
    0U,	// BC1NEZC_MMR6
    0U,	// BC1T
    0U,	// BC1TL
    0U,	// BC1T_MM
    0U,	// BC2EQZ
    0U,	// BC2EQZC_MMR6
    0U,	// BC2NEZ
    0U,	// BC2NEZC_MMR6
    10U,	// BCLRI_B
    12U,	// BCLRI_D
    14U,	// BCLRI_H
    2U,	// BCLRI_W
    0U,	// BCLR_B
    0U,	// BCLR_D
    0U,	// BCLR_H
    0U,	// BCLR_W
    0U,	// BC_MMR6
    0U,	// BEQ
    0U,	// BEQ64
    0U,	// BEQC
    0U,	// BEQC64
    0U,	// BEQC_MMR6
    0U,	// BEQL
    0U,	// BEQLImmMacro
    0U,	// BEQZ16_MM
    0U,	// BEQZALC
    0U,	// BEQZALC_MMR6
    0U,	// BEQZC
    0U,	// BEQZC16_MMR6
    0U,	// BEQZC64
    0U,	// BEQZC_MM
    0U,	// BEQZC_MMR6
    0U,	// BEQ_MM
    0U,	// BGE
    0U,	// BGEC
    0U,	// BGEC64
    0U,	// BGEC_MMR6
    0U,	// BGEImmMacro
    0U,	// BGEL
    0U,	// BGELImmMacro
    0U,	// BGEU
    0U,	// BGEUC
    0U,	// BGEUC64
    0U,	// BGEUC_MMR6
    0U,	// BGEUImmMacro
    0U,	// BGEUL
    0U,	// BGEULImmMacro
    0U,	// BGEZ
    0U,	// BGEZ64
    0U,	// BGEZAL
    0U,	// BGEZALC
    0U,	// BGEZALC_MMR6
    0U,	// BGEZALL
    0U,	// BGEZALS_MM
    0U,	// BGEZAL_MM
    0U,	// BGEZC
    0U,	// BGEZC64
    0U,	// BGEZC_MMR6
    0U,	// BGEZL
    0U,	// BGEZ_MM
    0U,	// BGT
    0U,	// BGTImmMacro
    0U,	// BGTL
    0U,	// BGTLImmMacro
    0U,	// BGTU
    0U,	// BGTUImmMacro
    0U,	// BGTUL
    0U,	// BGTULImmMacro
    0U,	// BGTZ
    0U,	// BGTZ64
    0U,	// BGTZALC
    0U,	// BGTZALC_MMR6
    0U,	// BGTZC
    0U,	// BGTZC64
    0U,	// BGTZC_MMR6
    0U,	// BGTZL
    0U,	// BGTZ_MM
    16U,	// BINSLI_B
    18U,	// BINSLI_D
    20U,	// BINSLI_H
    22U,	// BINSLI_W
    24U,	// BINSL_B
    24U,	// BINSL_D
    24U,	// BINSL_H
    24U,	// BINSL_W
    16U,	// BINSRI_B
    18U,	// BINSRI_D
    20U,	// BINSRI_H
    22U,	// BINSRI_W
    24U,	// BINSR_B
    24U,	// BINSR_D
    24U,	// BINSR_H
    24U,	// BINSR_W
    0U,	// BITREV
    0U,	// BITREV_MM
    0U,	// BITSWAP
    0U,	// BITSWAP_MMR6
    0U,	// BLE
    0U,	// BLEImmMacro
    0U,	// BLEL
    0U,	// BLELImmMacro
    0U,	// BLEU
    0U,	// BLEUImmMacro
    0U,	// BLEUL
    0U,	// BLEULImmMacro
    0U,	// BLEZ
    0U,	// BLEZ64
    0U,	// BLEZALC
    0U,	// BLEZALC_MMR6
    0U,	// BLEZC
    0U,	// BLEZC64
    0U,	// BLEZC_MMR6
    0U,	// BLEZL
    0U,	// BLEZ_MM
    0U,	// BLT
    0U,	// BLTC
    0U,	// BLTC64
    0U,	// BLTC_MMR6
    0U,	// BLTImmMacro
    0U,	// BLTL
    0U,	// BLTLImmMacro
    0U,	// BLTU
    0U,	// BLTUC
    0U,	// BLTUC64
    0U,	// BLTUC_MMR6
    0U,	// BLTUImmMacro
    0U,	// BLTUL
    0U,	// BLTULImmMacro
    0U,	// BLTZ
    0U,	// BLTZ64
    0U,	// BLTZAL
    0U,	// BLTZALC
    0U,	// BLTZALC_MMR6
    0U,	// BLTZALL
    0U,	// BLTZALS_MM
    0U,	// BLTZAL_MM
    0U,	// BLTZC
    0U,	// BLTZC64
    0U,	// BLTZC_MMR6
    0U,	// BLTZL
    0U,	// BLTZ_MM
    26U,	// BMNZI_B
    24U,	// BMNZ_V
    26U,	// BMZI_B
    24U,	// BMZ_V
    0U,	// BNE
    0U,	// BNE64
    0U,	// BNEC
    0U,	// BNEC64
    0U,	// BNEC_MMR6
    10U,	// BNEGI_B
    12U,	// BNEGI_D
    14U,	// BNEGI_H
    2U,	// BNEGI_W
    0U,	// BNEG_B
    0U,	// BNEG_D
    0U,	// BNEG_H
    0U,	// BNEG_W
    0U,	// BNEL
    0U,	// BNELImmMacro
    0U,	// BNEZ16_MM
    0U,	// BNEZALC
    0U,	// BNEZALC_MMR6
    0U,	// BNEZC
    0U,	// BNEZC16_MMR6
    0U,	// BNEZC64
    0U,	// BNEZC_MM
    0U,	// BNEZC_MMR6
    0U,	// BNE_MM
    0U,	// BNVC
    0U,	// BNVC_MMR6
    0U,	// BNZ_B
    0U,	// BNZ_D
    0U,	// BNZ_H
    0U,	// BNZ_V
    0U,	// BNZ_W
    0U,	// BOVC
    0U,	// BOVC_MMR6
    0U,	// BPOSGE32
    0U,	// BPOSGE32C_MMR3
    0U,	// BPOSGE32_MM
    0U,	// BPOSGE32_PSEUDO
    0U,	// BREAK
    0U,	// BREAK16_MM
    0U,	// BREAK16_MMR6
    0U,	// BREAK_MM
    0U,	// BREAK_MMR6
    26U,	// BSELI_B
    0U,	// BSEL_D_PSEUDO
    0U,	// BSEL_FD_PSEUDO
    0U,	// BSEL_FW_PSEUDO
    0U,	// BSEL_H_PSEUDO
    24U,	// BSEL_V
    0U,	// BSEL_W_PSEUDO
    10U,	// BSETI_B
    12U,	// BSETI_D
    14U,	// BSETI_H
    2U,	// BSETI_W
    0U,	// BSET_B
    0U,	// BSET_D
    0U,	// BSET_H
    0U,	// BSET_W
    0U,	// BZ_B
    0U,	// BZ_D
    0U,	// BZ_H
    0U,	// BZ_V
    0U,	// BZ_W
    0U,	// B_MM
    0U,	// B_MMR6_Pseudo
    0U,	// B_MM_Pseudo
    0U,	// BeqImm
    0U,	// BeqzRxImm16
    0U,	// BeqzRxImmX16
    0U,	// Bimm16
    0U,	// BimmX16
    0U,	// BneImm
    0U,	// BnezRxImm16
    0U,	// BnezRxImmX16
    0U,	// Break16
    0U,	// Bteqz16
    0U,	// BteqzT8CmpX16
    0U,	// BteqzT8CmpiX16
    0U,	// BteqzT8SltX16
    0U,	// BteqzT8SltiX16
    0U,	// BteqzT8SltiuX16
    0U,	// BteqzT8SltuX16
    0U,	// BteqzX16
    0U,	// Btnez16
    0U,	// BtnezT8CmpX16
    0U,	// BtnezT8CmpiX16
    0U,	// BtnezT8SltX16
    0U,	// BtnezT8SltiX16
    0U,	// BtnezT8SltiuX16
    0U,	// BtnezT8SltuX16
    0U,	// BtnezX16
    0U,	// BuildPairF64
    0U,	// BuildPairF64_64
    0U,	// CACHE
    0U,	// CACHEE
    0U,	// CACHEE_MM
    0U,	// CACHEE_MMR6
    0U,	// CACHE_MM
    0U,	// CACHE_MMR6
    0U,	// CACHE_R6
    0U,	// CEIL_L_D64
    0U,	// CEIL_L_D_MMR6
    0U,	// CEIL_L_S
    0U,	// CEIL_L_S_MMR6
    0U,	// CEIL_W_D32
    0U,	// CEIL_W_D64
    0U,	// CEIL_W_D_MMR6
    0U,	// CEIL_W_MM
    0U,	// CEIL_W_S
    0U,	// CEIL_W_S_MM
    0U,	// CEIL_W_S_MMR6
    0U,	// CEQI_B
    0U,	// CEQI_D
    0U,	// CEQI_H
    0U,	// CEQI_W
    0U,	// CEQ_B
    0U,	// CEQ_D
    0U,	// CEQ_H
    0U,	// CEQ_W
    0U,	// CFC1
    0U,	// CFC1_MM
    0U,	// CFC2_MM
    0U,	// CFCMSA
    0U,	// CFTC1
    578U,	// CINS
    578U,	// CINS32
    578U,	// CINS64_32
    578U,	// CINS_i32
    0U,	// CLASS_D
    0U,	// CLASS_D_MMR6
    0U,	// CLASS_S
    0U,	// CLASS_S_MMR6
    0U,	// CLEI_S_B
    0U,	// CLEI_S_D
    0U,	// CLEI_S_H
    0U,	// CLEI_S_W
    2U,	// CLEI_U_B
    2U,	// CLEI_U_D
    2U,	// CLEI_U_H
    2U,	// CLEI_U_W
    0U,	// CLE_S_B
    0U,	// CLE_S_D
    0U,	// CLE_S_H
    0U,	// CLE_S_W
    0U,	// CLE_U_B
    0U,	// CLE_U_D
    0U,	// CLE_U_H
    0U,	// CLE_U_W
    0U,	// CLO
    0U,	// CLO_MM
    0U,	// CLO_MMR6
    0U,	// CLO_R6
    0U,	// CLTI_S_B
    0U,	// CLTI_S_D
    0U,	// CLTI_S_H
    0U,	// CLTI_S_W
    2U,	// CLTI_U_B
    2U,	// CLTI_U_D
    2U,	// CLTI_U_H
    2U,	// CLTI_U_W
    0U,	// CLT_S_B
    0U,	// CLT_S_D
    0U,	// CLT_S_H
    0U,	// CLT_S_W
    0U,	// CLT_U_B
    0U,	// CLT_U_D
    0U,	// CLT_U_H
    0U,	// CLT_U_W
    0U,	// CLZ
    0U,	// CLZ_MM
    0U,	// CLZ_MMR6
    0U,	// CLZ_R6
    0U,	// CMPGDU_EQ_QB
    0U,	// CMPGDU_EQ_QB_MMR2
    0U,	// CMPGDU_LE_QB
    0U,	// CMPGDU_LE_QB_MMR2
    0U,	// CMPGDU_LT_QB
    0U,	// CMPGDU_LT_QB_MMR2
    0U,	// CMPGU_EQ_QB
    0U,	// CMPGU_EQ_QB_MM
    0U,	// CMPGU_LE_QB
    0U,	// CMPGU_LE_QB_MM
    0U,	// CMPGU_LT_QB
    0U,	// CMPGU_LT_QB_MM
    0U,	// CMPU_EQ_QB
    0U,	// CMPU_EQ_QB_MM
    0U,	// CMPU_LE_QB
    0U,	// CMPU_LE_QB_MM
    0U,	// CMPU_LT_QB
    0U,	// CMPU_LT_QB_MM
    0U,	// CMP_AF_D_MMR6
    0U,	// CMP_AF_S_MMR6
    0U,	// CMP_EQ_D
    0U,	// CMP_EQ_D_MMR6
    0U,	// CMP_EQ_PH
    0U,	// CMP_EQ_PH_MM
    0U,	// CMP_EQ_S
    0U,	// CMP_EQ_S_MMR6
    0U,	// CMP_F_D
    0U,	// CMP_F_S
    0U,	// CMP_LE_D
    0U,	// CMP_LE_D_MMR6
    0U,	// CMP_LE_PH
    0U,	// CMP_LE_PH_MM
    0U,	// CMP_LE_S
    0U,	// CMP_LE_S_MMR6
    0U,	// CMP_LT_D
    0U,	// CMP_LT_D_MMR6
    0U,	// CMP_LT_PH
    0U,	// CMP_LT_PH_MM
    0U,	// CMP_LT_S
    0U,	// CMP_LT_S_MMR6
    0U,	// CMP_SAF_D
    0U,	// CMP_SAF_D_MMR6
    0U,	// CMP_SAF_S
    0U,	// CMP_SAF_S_MMR6
    0U,	// CMP_SEQ_D
    0U,	// CMP_SEQ_D_MMR6
    0U,	// CMP_SEQ_S
    0U,	// CMP_SEQ_S_MMR6
    0U,	// CMP_SLE_D
    0U,	// CMP_SLE_D_MMR6
    0U,	// CMP_SLE_S
    0U,	// CMP_SLE_S_MMR6
    0U,	// CMP_SLT_D
    0U,	// CMP_SLT_D_MMR6
    0U,	// CMP_SLT_S
    0U,	// CMP_SLT_S_MMR6
    0U,	// CMP_SUEQ_D
    0U,	// CMP_SUEQ_D_MMR6
    0U,	// CMP_SUEQ_S
    0U,	// CMP_SUEQ_S_MMR6
    0U,	// CMP_SULE_D
    0U,	// CMP_SULE_D_MMR6
    0U,	// CMP_SULE_S
    0U,	// CMP_SULE_S_MMR6
    0U,	// CMP_SULT_D
    0U,	// CMP_SULT_D_MMR6
    0U,	// CMP_SULT_S
    0U,	// CMP_SULT_S_MMR6
    0U,	// CMP_SUN_D
    0U,	// CMP_SUN_D_MMR6
    0U,	// CMP_SUN_S
    0U,	// CMP_SUN_S_MMR6
    0U,	// CMP_UEQ_D
    0U,	// CMP_UEQ_D_MMR6
    0U,	// CMP_UEQ_S
    0U,	// CMP_UEQ_S_MMR6
    0U,	// CMP_ULE_D
    0U,	// CMP_ULE_D_MMR6
    0U,	// CMP_ULE_S
    0U,	// CMP_ULE_S_MMR6
    0U,	// CMP_ULT_D
    0U,	// CMP_ULT_D_MMR6
    0U,	// CMP_ULT_S
    0U,	// CMP_ULT_S_MMR6
    0U,	// CMP_UN_D
    0U,	// CMP_UN_D_MMR6
    0U,	// CMP_UN_S
    0U,	// CMP_UN_S_MMR6
    0U,	// CONSTPOOL_ENTRY
    0U,	// COPY_FD_PSEUDO
    0U,	// COPY_FW_PSEUDO
    142U,	// COPY_S_B
    156U,	// COPY_S_D
    138U,	// COPY_S_H
    136U,	// COPY_S_W
    142U,	// COPY_U_B
    138U,	// COPY_U_H
    136U,	// COPY_U_W
    0U,	// CTC1
    0U,	// CTC1_MM
    0U,	// CTC2_MM
    0U,	// CTCMSA
    0U,	// CTTC1
    0U,	// CVT_D32_S
    0U,	// CVT_D32_W
    0U,	// CVT_D32_W_MM
    0U,	// CVT_D64_L
    0U,	// CVT_D64_S
    0U,	// CVT_D64_W
    0U,	// CVT_D_L_MMR6
    0U,	// CVT_D_S_MM
    0U,	// CVT_D_S_MMR6
    0U,	// CVT_D_W_MMR6
    0U,	// CVT_L_D64
    0U,	// CVT_L_D64_MM
    0U,	// CVT_L_D_MMR6
    0U,	// CVT_L_S
    0U,	// CVT_L_S_MM
    0U,	// CVT_L_S_MMR6
    0U,	// CVT_S_D32
    0U,	// CVT_S_D32_MM
    0U,	// CVT_S_D64
    0U,	// CVT_S_D_MMR6
    0U,	// CVT_S_L
    0U,	// CVT_S_L_MMR6
    0U,	// CVT_S_W
    0U,	// CVT_S_W_MM
    0U,	// CVT_S_W_MMR6
    0U,	// CVT_W_D32
    0U,	// CVT_W_D64
    0U,	// CVT_W_D_MMR6
    0U,	// CVT_W_MM
    0U,	// CVT_W_S
    0U,	// CVT_W_S_MM
    0U,	// CVT_W_S_MMR6
    0U,	// C_EQ_D32
    0U,	// C_EQ_D32_MM
    0U,	// C_EQ_D64
    0U,	// C_EQ_D64_MM
    0U,	// C_EQ_S
    0U,	// C_EQ_S_MM
    0U,	// C_F_D32
    0U,	// C_F_D32_MM
    0U,	// C_F_D64
    0U,	// C_F_D64_MM
    0U,	// C_F_S
    0U,	// C_F_S_MM
    0U,	// C_LE_D32
    0U,	// C_LE_D32_MM
    0U,	// C_LE_D64
    0U,	// C_LE_D64_MM
    0U,	// C_LE_S
    0U,	// C_LE_S_MM
    0U,	// C_LT_D32
    0U,	// C_LT_D32_MM
    0U,	// C_LT_D64
    0U,	// C_LT_D64_MM
    0U,	// C_LT_S
    0U,	// C_LT_S_MM
    0U,	// C_NGE_D32
    0U,	// C_NGE_D32_MM
    0U,	// C_NGE_D64
    0U,	// C_NGE_D64_MM
    0U,	// C_NGE_S
    0U,	// C_NGE_S_MM
    0U,	// C_NGLE_D32
    0U,	// C_NGLE_D32_MM
    0U,	// C_NGLE_D64
    0U,	// C_NGLE_D64_MM
    0U,	// C_NGLE_S
    0U,	// C_NGLE_S_MM
    0U,	// C_NGL_D32
    0U,	// C_NGL_D32_MM
    0U,	// C_NGL_D64
    0U,	// C_NGL_D64_MM
    0U,	// C_NGL_S
    0U,	// C_NGL_S_MM
    0U,	// C_NGT_D32
    0U,	// C_NGT_D32_MM
    0U,	// C_NGT_D64
    0U,	// C_NGT_D64_MM
    0U,	// C_NGT_S
    0U,	// C_NGT_S_MM
    0U,	// C_OLE_D32
    0U,	// C_OLE_D32_MM
    0U,	// C_OLE_D64
    0U,	// C_OLE_D64_MM
    0U,	// C_OLE_S
    0U,	// C_OLE_S_MM
    0U,	// C_OLT_D32
    0U,	// C_OLT_D32_MM
    0U,	// C_OLT_D64
    0U,	// C_OLT_D64_MM
    0U,	// C_OLT_S
    0U,	// C_OLT_S_MM
    0U,	// C_SEQ_D32
    0U,	// C_SEQ_D32_MM
    0U,	// C_SEQ_D64
    0U,	// C_SEQ_D64_MM
    0U,	// C_SEQ_S
    0U,	// C_SEQ_S_MM
    0U,	// C_SF_D32
    0U,	// C_SF_D32_MM
    0U,	// C_SF_D64
    0U,	// C_SF_D64_MM
    0U,	// C_SF_S
    0U,	// C_SF_S_MM
    0U,	// C_UEQ_D32
    0U,	// C_UEQ_D32_MM
    0U,	// C_UEQ_D64
    0U,	// C_UEQ_D64_MM
    0U,	// C_UEQ_S
    0U,	// C_UEQ_S_MM
    0U,	// C_ULE_D32
    0U,	// C_ULE_D32_MM
    0U,	// C_ULE_D64
    0U,	// C_ULE_D64_MM
    0U,	// C_ULE_S
    0U,	// C_ULE_S_MM
    0U,	// C_ULT_D32
    0U,	// C_ULT_D32_MM
    0U,	// C_ULT_D64
    0U,	// C_ULT_D64_MM
    0U,	// C_ULT_S
    0U,	// C_ULT_S_MM
    0U,	// C_UN_D32
    0U,	// C_UN_D32_MM
    0U,	// C_UN_D64
    0U,	// C_UN_D64_MM
    0U,	// C_UN_S
    0U,	// C_UN_S_MM
    0U,	// CmpRxRy16
    0U,	// CmpiRxImm16
    0U,	// CmpiRxImmX16
    0U,	// Constant32
    0U,	// DADD
    0U,	// DADDi
    0U,	// DADDiu
    0U,	// DADDu
    6U,	// DAHI
    1088U,	// DALIGN
    6U,	// DATI
    6U,	// DAUI
    0U,	// DBITSWAP
    0U,	// DCLO
    0U,	// DCLO_R6
    0U,	// DCLZ
    0U,	// DCLZ_R6
    0U,	// DDIV
    0U,	// DDIVU
    0U,	// DERET
    0U,	// DERET_MM
    0U,	// DERET_MMR6
    1612U,	// DEXT
    2124U,	// DEXT64_32
    2626U,	// DEXTM
    222U,	// DEXTU
    0U,	// DI
    3148U,	// DINS
    3650U,	// DINSM
    286U,	// DINSU
    0U,	// DIV
    0U,	// DIVU
    0U,	// DIVU_MMR6
    0U,	// DIV_MMR6
    0U,	// DIV_S_B
    0U,	// DIV_S_D
    0U,	// DIV_S_H
    0U,	// DIV_S_W
    0U,	// DIV_U_B
    0U,	// DIV_U_D
    0U,	// DIV_U_H
    0U,	// DIV_U_W
    0U,	// DI_MM
    0U,	// DI_MMR6
    4160U,	// DLSA
    4160U,	// DLSA_R6
    10U,	// DMFC0
    0U,	// DMFC1
    10U,	// DMFC2
    0U,	// DMFC2_OCTEON
    0U,	// DMOD
    0U,	// DMODU
    0U,	// DMT
    0U,	// DMTC0
    0U,	// DMTC1
    0U,	// DMTC2
    0U,	// DMTC2_OCTEON
    0U,	// DMUH
    0U,	// DMUHU
    0U,	// DMUL
    0U,	// DMULImmMacro
    0U,	// DMULMacro
    0U,	// DMULOMacro
    0U,	// DMULOUMacro
    0U,	// DMULT
    0U,	// DMULTu
    0U,	// DMULU
    0U,	// DMUL_R6
    0U,	// DOTP_S_D
    0U,	// DOTP_S_H
    0U,	// DOTP_S_W
    0U,	// DOTP_U_D
    0U,	// DOTP_U_H
    0U,	// DOTP_U_W
    24U,	// DPADD_S_D
    24U,	// DPADD_S_H
    24U,	// DPADD_S_W
    24U,	// DPADD_U_D
    24U,	// DPADD_U_H
    24U,	// DPADD_U_W
    0U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_MMR2
    0U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_MMR2
    0U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_MM
    0U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_MM
    0U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_MM
    0U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_MM
    0U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_MMR2
    0U,	// DPA_W_PH
    0U,	// DPA_W_PH_MMR2
    0U,	// DPOP
    0U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_MMR2
    0U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_MMR2
    0U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_MM
    0U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_MM
    24U,	// DPSUB_S_D
    24U,	// DPSUB_S_H
    24U,	// DPSUB_S_W
    24U,	// DPSUB_U_D
    24U,	// DPSUB_U_H
    24U,	// DPSUB_U_W
    0U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_MM
    0U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_MM
    0U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_MMR2
    0U,	// DPS_W_PH
    0U,	// DPS_W_PH_MMR2
    0U,	// DROL
    0U,	// DROLImm
    0U,	// DROR
    0U,	// DRORImm
    12U,	// DROTR
    2U,	// DROTR32
    0U,	// DROTRV
    0U,	// DSBH
    0U,	// DSDIV
    0U,	// DSDivIMacro
    0U,	// DSDivMacro
    0U,	// DSHD
    12U,	// DSLL
    2U,	// DSLL32
    0U,	// DSLL64_32
    0U,	// DSLLV
    12U,	// DSRA
    2U,	// DSRA32
    0U,	// DSRAV
    12U,	// DSRL
    2U,	// DSRL32
    0U,	// DSRLV
    0U,	// DSUB
    0U,	// DSUBu
    0U,	// DUDIV
    0U,	// DUDivIMacro
    0U,	// DUDivMacro
    0U,	// DVP
    0U,	// DVPE
    0U,	// DVP_MMR6
    0U,	// DivRxRy16
    0U,	// DivuRxRy16
    0U,	// EHB
    0U,	// EHB_MM
    0U,	// EHB_MMR6
    0U,	// EI
    0U,	// EI_MM
    0U,	// EI_MMR6
    0U,	// EMT
    0U,	// ERET
    0U,	// ERETNC
    0U,	// ERETNC_MMR6
    0U,	// ERET_MM
    0U,	// ERET_MMR6
    0U,	// ERet
    0U,	// EVP
    0U,	// EVPE
    0U,	// EVP_MMR6
    2114U,	// EXT
    2U,	// EXTP
    2U,	// EXTPDP
    0U,	// EXTPDPV
    0U,	// EXTPDPV_MM
    2U,	// EXTPDP_MM
    0U,	// EXTPV
    0U,	// EXTPV_MM
    2U,	// EXTP_MM
    0U,	// EXTRV_RS_W
    0U,	// EXTRV_RS_W_MM
    0U,	// EXTRV_R_W
    0U,	// EXTRV_R_W_MM
    0U,	// EXTRV_S_H
    0U,	// EXTRV_S_H_MM
    0U,	// EXTRV_W
    0U,	// EXTRV_W_MM
    2U,	// EXTR_RS_W
    2U,	// EXTR_RS_W_MM
    2U,	// EXTR_R_W
    2U,	// EXTR_R_W_MM
    2U,	// EXTR_S_H
    2U,	// EXTR_S_H_MM
    2U,	// EXTR_W
    2U,	// EXTR_W_MM
    578U,	// EXTS
    578U,	// EXTS32
    2114U,	// EXT_MM
    2114U,	// EXT_MMR6
    0U,	// ExtractElementF64
    0U,	// ExtractElementF64_64
    0U,	// FABS_D
    0U,	// FABS_D32
    0U,	// FABS_D64
    0U,	// FABS_MM
    0U,	// FABS_S
    0U,	// FABS_S_MM
    0U,	// FABS_W
    0U,	// FADD_D
    0U,	// FADD_D32
    0U,	// FADD_D64
    32U,	// FADD_D_MMR6
    0U,	// FADD_MM
    0U,	// FADD_S
    0U,	// FADD_S_MM
    32U,	// FADD_S_MMR6
    0U,	// FADD_W
    0U,	// FCAF_D
    0U,	// FCAF_W
    0U,	// FCEQ_D
    0U,	// FCEQ_W
    0U,	// FCLASS_D
    0U,	// FCLASS_W
    0U,	// FCLE_D
    0U,	// FCLE_W
    0U,	// FCLT_D
    0U,	// FCLT_W
    0U,	// FCMP_D32
    0U,	// FCMP_D32_MM
    0U,	// FCMP_D64
    0U,	// FCMP_S32
    0U,	// FCMP_S32_MM
    0U,	// FCNE_D
    0U,	// FCNE_W
    0U,	// FCOR_D
    0U,	// FCOR_W
    0U,	// FCUEQ_D
    0U,	// FCUEQ_W
    0U,	// FCULE_D
    0U,	// FCULE_W
    0U,	// FCULT_D
    0U,	// FCULT_W
    0U,	// FCUNE_D
    0U,	// FCUNE_W
    0U,	// FCUN_D
    0U,	// FCUN_W
    0U,	// FDIV_D
    0U,	// FDIV_D32
    0U,	// FDIV_D64
    32U,	// FDIV_D_MMR6
    0U,	// FDIV_MM
    0U,	// FDIV_S
    0U,	// FDIV_S_MM
    32U,	// FDIV_S_MMR6
    0U,	// FDIV_W
    0U,	// FEXDO_H
    0U,	// FEXDO_W
    0U,	// FEXP2_D
    0U,	// FEXP2_D_1_PSEUDO
    0U,	// FEXP2_W
    0U,	// FEXP2_W_1_PSEUDO
    0U,	// FEXUPL_D
    0U,	// FEXUPL_W
    0U,	// FEXUPR_D
    0U,	// FEXUPR_W
    0U,	// FFINT_S_D
    0U,	// FFINT_S_W
    0U,	// FFINT_U_D
    0U,	// FFINT_U_W
    0U,	// FFQL_D
    0U,	// FFQL_W
    0U,	// FFQR_D
    0U,	// FFQR_W
    0U,	// FILL_B
    0U,	// FILL_D
    0U,	// FILL_FD_PSEUDO
    0U,	// FILL_FW_PSEUDO
    0U,	// FILL_H
    0U,	// FILL_W
    0U,	// FLOG2_D
    0U,	// FLOG2_W
    0U,	// FLOOR_L_D64
    0U,	// FLOOR_L_D_MMR6
    0U,	// FLOOR_L_S
    0U,	// FLOOR_L_S_MMR6
    0U,	// FLOOR_W_D32
    0U,	// FLOOR_W_D64
    0U,	// FLOOR_W_D_MMR6
    0U,	// FLOOR_W_MM
    0U,	// FLOOR_W_S
    0U,	// FLOOR_W_S_MM
    0U,	// FLOOR_W_S_MMR6
    24U,	// FMADD_D
    24U,	// FMADD_W
    0U,	// FMAX_A_D
    0U,	// FMAX_A_W
    0U,	// FMAX_D
    0U,	// FMAX_W
    0U,	// FMIN_A_D
    0U,	// FMIN_A_W
    0U,	// FMIN_D
    0U,	// FMIN_W
    0U,	// FMOV_D32
    0U,	// FMOV_D32_MM
    0U,	// FMOV_D64
    0U,	// FMOV_D_MMR6
    0U,	// FMOV_S
    0U,	// FMOV_S_MM
    0U,	// FMOV_S_MMR6
    24U,	// FMSUB_D
    24U,	// FMSUB_W
    0U,	// FMUL_D
    0U,	// FMUL_D32
    0U,	// FMUL_D64
    32U,	// FMUL_D_MMR6
    0U,	// FMUL_MM
    0U,	// FMUL_S
    0U,	// FMUL_S_MM
    32U,	// FMUL_S_MMR6
    0U,	// FMUL_W
    0U,	// FNEG_D32
    0U,	// FNEG_D64
    0U,	// FNEG_D_MMR6
    0U,	// FNEG_MM
    0U,	// FNEG_S
    0U,	// FNEG_S_MM
    0U,	// FNEG_S_MMR6
    0U,	// FORK
    0U,	// FRCP_D
    0U,	// FRCP_W
    0U,	// FRINT_D
    0U,	// FRINT_W
    0U,	// FRSQRT_D
    0U,	// FRSQRT_W
    0U,	// FSAF_D
    0U,	// FSAF_W
    0U,	// FSEQ_D
    0U,	// FSEQ_W
    0U,	// FSLE_D
    0U,	// FSLE_W
    0U,	// FSLT_D
    0U,	// FSLT_W
    0U,	// FSNE_D
    0U,	// FSNE_W
    0U,	// FSOR_D
    0U,	// FSOR_W
    0U,	// FSQRT_D
    0U,	// FSQRT_D32
    0U,	// FSQRT_D64
    0U,	// FSQRT_MM
    0U,	// FSQRT_S
    0U,	// FSQRT_S_MM
    0U,	// FSQRT_W
    0U,	// FSUB_D
    0U,	// FSUB_D32
    0U,	// FSUB_D64
    32U,	// FSUB_D_MMR6
    0U,	// FSUB_MM
    0U,	// FSUB_S
    0U,	// FSUB_S_MM
    32U,	// FSUB_S_MMR6
    0U,	// FSUB_W
    0U,	// FSUEQ_D
    0U,	// FSUEQ_W
    0U,	// FSULE_D
    0U,	// FSULE_W
    0U,	// FSULT_D
    0U,	// FSULT_W
    0U,	// FSUNE_D
    0U,	// FSUNE_W
    0U,	// FSUN_D
    0U,	// FSUN_W
    0U,	// FTINT_S_D
    0U,	// FTINT_S_W
    0U,	// FTINT_U_D
    0U,	// FTINT_U_W
    0U,	// FTQ_H
    0U,	// FTQ_W
    0U,	// FTRUNC_S_D
    0U,	// FTRUNC_S_W
    0U,	// FTRUNC_U_D
    0U,	// FTRUNC_U_W
    0U,	// GotPrologue16
    0U,	// HADD_S_D
    0U,	// HADD_S_H
    0U,	// HADD_S_W
    0U,	// HADD_U_D
    0U,	// HADD_U_H
    0U,	// HADD_U_W
    0U,	// HSUB_S_D
    0U,	// HSUB_S_H
    0U,	// HSUB_S_W
    0U,	// HSUB_U_D
    0U,	// HSUB_U_H
    0U,	// HSUB_U_W
    0U,	// ILVEV_B
    0U,	// ILVEV_D
    0U,	// ILVEV_H
    0U,	// ILVEV_W
    0U,	// ILVL_B
    0U,	// ILVL_D
    0U,	// ILVL_H
    0U,	// ILVL_W
    0U,	// ILVOD_B
    0U,	// ILVOD_D
    0U,	// ILVOD_H
    0U,	// ILVOD_W
    0U,	// ILVR_B
    0U,	// ILVR_D
    0U,	// ILVR_H
    0U,	// ILVR_W
    3138U,	// INS
    0U,	// INSERT_B
    0U,	// INSERT_B_VIDX64_PSEUDO
    0U,	// INSERT_B_VIDX_PSEUDO
    0U,	// INSERT_D
    0U,	// INSERT_D_VIDX64_PSEUDO
    0U,	// INSERT_D_VIDX_PSEUDO
    0U,	// INSERT_FD_PSEUDO
    0U,	// INSERT_FD_VIDX64_PSEUDO
    0U,	// INSERT_FD_VIDX_PSEUDO
    0U,	// INSERT_FW_PSEUDO
    0U,	// INSERT_FW_VIDX64_PSEUDO
    0U,	// INSERT_FW_VIDX_PSEUDO
    0U,	// INSERT_H
    0U,	// INSERT_H_VIDX64_PSEUDO
    0U,	// INSERT_H_VIDX_PSEUDO
    0U,	// INSERT_W
    0U,	// INSERT_W_VIDX64_PSEUDO
    0U,	// INSERT_W_VIDX_PSEUDO
    0U,	// INSV
    0U,	// INSVE_B
    0U,	// INSVE_D
    0U,	// INSVE_H
    0U,	// INSVE_W
    0U,	// INSV_MM
    3138U,	// INS_MM
    3138U,	// INS_MMR6
    0U,	// J
    0U,	// JAL
    0U,	// JALR
    0U,	// JALR16_MM
    0U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRC16_MMR6
    0U,	// JALRC_HB_MMR6
    0U,	// JALRC_MMR6
    0U,	// JALRPseudo
    0U,	// JALRS16_MM
    0U,	// JALRS_MM
    0U,	// JALR_HB
    0U,	// JALR_MM
    0U,	// JALS_MM
    0U,	// JALX
    0U,	// JALX_MM
    0U,	// JAL_MM
    0U,	// JIALC
    0U,	// JIALC64
    0U,	// JIALC_MMR6
    0U,	// JIC
    0U,	// JIC64
    0U,	// JIC_MMR6
    0U,	// JR
    0U,	// JR16_MM
    0U,	// JR64
    0U,	// JRADDIUSP
    0U,	// JRC16_MM
    0U,	// JRC16_MMR6
    0U,	// JRCADDIUSP_MMR6
    0U,	// JR_HB
    0U,	// JR_HB_R6
    0U,	// JR_MM
    0U,	// J_MM
    0U,	// Jal16
    0U,	// JalB16
    0U,	// JalOneReg
    0U,	// JalTwoReg
    0U,	// JrRa16
    0U,	// JrcRa16
    0U,	// JrcRx16
    0U,	// JumpLinkReg16
    0U,	// LB
    0U,	// LB64
    0U,	// LBE
    0U,	// LBE_MM
    0U,	// LBE_MMR6
    0U,	// LBU16_MM
    0U,	// LBUE_MMR6
    0U,	// LBUX
    0U,	// LBUX_MM
    0U,	// LBU_MMR6
    0U,	// LB_MM
    0U,	// LB_MMR6
    0U,	// LBu
    0U,	// LBu64
    0U,	// LBuE
    0U,	// LBuE_MM
    0U,	// LBu_MM
    0U,	// LD
    0U,	// LDC1
    0U,	// LDC164
    0U,	// LDC1_D64_MMR6
    0U,	// LDC1_MM
    0U,	// LDC2
    0U,	// LDC2_MMR6
    0U,	// LDC2_R6
    0U,	// LDC3
    0U,	// LDI_B
    0U,	// LDI_D
    0U,	// LDI_H
    0U,	// LDI_W
    0U,	// LDL
    0U,	// LDMacro
    0U,	// LDPC
    0U,	// LDR
    0U,	// LDXC1
    0U,	// LDXC164
    0U,	// LD_B
    0U,	// LD_D
    0U,	// LD_F16
    0U,	// LD_H
    0U,	// LD_W
    0U,	// LEA_ADDiu
    0U,	// LEA_ADDiu64
    0U,	// LEA_ADDiu_MM
    0U,	// LH
    0U,	// LH64
    0U,	// LHE
    0U,	// LHE_MM
    0U,	// LHU16_MM
    0U,	// LHX
    0U,	// LHX_MM
    0U,	// LH_MM
    0U,	// LHu
    0U,	// LHu64
    0U,	// LHuE
    0U,	// LHuE_MM
    0U,	// LHu_MM
    0U,	// LI16_MM
    0U,	// LI16_MMR6
    0U,	// LL
    0U,	// LL64
    0U,	// LL64_R6
    0U,	// LLD
    0U,	// LLD_R6
    0U,	// LLE
    0U,	// LLE_MM
    0U,	// LLE_MMR6
    0U,	// LL_MM
    0U,	// LL_R6
    0U,	// LOAD_ACC128
    0U,	// LOAD_ACC64
    0U,	// LOAD_ACC64DSP
    0U,	// LOAD_CCOND_DSP
    0U,	// LONG_BRANCH_ADDiu
    0U,	// LONG_BRANCH_DADDiu
    0U,	// LONG_BRANCH_LUi
    4160U,	// LSA
    0U,	// LSA_MMR6
    4160U,	// LSA_R6
    0U,	// LUI_MMR6
    0U,	// LUXC1
    0U,	// LUXC164
    0U,	// LUXC1_MM
    0U,	// LUi
    0U,	// LUi64
    0U,	// LUi_MM
    0U,	// LW
    0U,	// LW16_MM
    0U,	// LW64
    0U,	// LWC1
    0U,	// LWC1_MM
    0U,	// LWC2
    0U,	// LWC2_MMR6
    0U,	// LWC2_R6
    0U,	// LWC3
    0U,	// LWDSP
    0U,	// LWDSP_MM
    0U,	// LWE
    0U,	// LWE_MM
    0U,	// LWE_MMR6
    0U,	// LWGP_MM
    0U,	// LWL
    0U,	// LWL64
    0U,	// LWLE
    0U,	// LWLE_MM
    0U,	// LWL_MM
    0U,	// LWM16_MM
    0U,	// LWM16_MMR6
    0U,	// LWM32_MM
    0U,	// LWM_MM
    0U,	// LWPC
    0U,	// LWPC_MMR6
    0U,	// LWP_MM
    0U,	// LWP_MMR6
    0U,	// LWR
    0U,	// LWR64
    0U,	// LWRE
    0U,	// LWRE_MM
    0U,	// LWR_MM
    0U,	// LWSP_MM
    0U,	// LWUPC
    0U,	// LWU_MM
    0U,	// LWX
    0U,	// LWXC1
    0U,	// LWXC1_MM
    0U,	// LWXS_MM
    0U,	// LWX_MM
    0U,	// LW_MM
    0U,	// LW_MMR6
    0U,	// LWu
    0U,	// LbRxRyOffMemX16
    0U,	// LbuRxRyOffMemX16
    0U,	// LhRxRyOffMemX16
    0U,	// LhuRxRyOffMemX16
    0U,	// LiRxImm16
    0U,	// LiRxImmAlignX16
    0U,	// LiRxImmX16
    0U,	// LoadAddrImm32
    0U,	// LoadAddrImm64
    0U,	// LoadAddrReg32
    0U,	// LoadAddrReg64
    0U,	// LoadImm32
    0U,	// LoadImm64
    0U,	// LoadImmDoubleFGR
    0U,	// LoadImmDoubleFGR_32
    0U,	// LoadImmDoubleGPR
    0U,	// LoadImmSingleFGR
    0U,	// LoadImmSingleGPR
    0U,	// LwConstant32
    0U,	// LwRxPcTcp16
    0U,	// LwRxPcTcpX16
    0U,	// LwRxRyOffMemX16
    0U,	// LwRxSpImmX16
    0U,	// MADD
    24U,	// MADDF_D
    24U,	// MADDF_D_MMR6
    24U,	// MADDF_S
    24U,	// MADDF_S_MMR6
    24U,	// MADDR_Q_H
    24U,	// MADDR_Q_W
    0U,	// MADDU
    0U,	// MADDU_DSP
    0U,	// MADDU_DSP_MM
    0U,	// MADDU_MM
    24U,	// MADDV_B
    24U,	// MADDV_D
    24U,	// MADDV_H
    24U,	// MADDV_W
    4672U,	// MADD_D32
    4672U,	// MADD_D32_MM
    4672U,	// MADD_D64
    0U,	// MADD_DSP
    0U,	// MADD_DSP_MM
    0U,	// MADD_MM
    24U,	// MADD_Q_H
    24U,	// MADD_Q_W
    4672U,	// MADD_S
    4672U,	// MADD_S_MM
    0U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_MM
    0U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_MM
    0U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_MM
    0U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_MM
    0U,	// MAXA_D
    0U,	// MAXA_D_MMR6
    0U,	// MAXA_S
    0U,	// MAXA_S_MMR6
    0U,	// MAXI_S_B
    0U,	// MAXI_S_D
    0U,	// MAXI_S_H
    0U,	// MAXI_S_W
    2U,	// MAXI_U_B
    2U,	// MAXI_U_D
    2U,	// MAXI_U_H
    2U,	// MAXI_U_W
    0U,	// MAX_A_B
    0U,	// MAX_A_D
    0U,	// MAX_A_H
    0U,	// MAX_A_W
    0U,	// MAX_D
    0U,	// MAX_D_MMR6
    0U,	// MAX_S
    0U,	// MAX_S_B
    0U,	// MAX_S_D
    0U,	// MAX_S_H
    0U,	// MAX_S_MMR6
    0U,	// MAX_S_W
    0U,	// MAX_U_B
    0U,	// MAX_U_D
    0U,	// MAX_U_H
    0U,	// MAX_U_W
    10U,	// MFC0
    10U,	// MFC0_MMR6
    0U,	// MFC1
    0U,	// MFC1_D64
    0U,	// MFC1_MM
    0U,	// MFC1_MMR6
    10U,	// MFC2
    0U,	// MFC2_MMR6
    10U,	// MFHC0_MMR6
    0U,	// MFHC1_D32
    0U,	// MFHC1_D32_MMR6
    0U,	// MFHC1_D64
    0U,	// MFHC1_D64_MMR6
    0U,	// MFHC1_MM
    0U,	// MFHC2_MMR6
    0U,	// MFHI
    0U,	// MFHI16_MM
    0U,	// MFHI64
    0U,	// MFHI_DSP
    0U,	// MFHI_DSP_MM
    0U,	// MFHI_MM
    0U,	// MFLO
    0U,	// MFLO16_MM
    0U,	// MFLO64
    0U,	// MFLO_DSP
    0U,	// MFLO_DSP_MM
    0U,	// MFLO_MM
    0U,	// MFTACX
    10U,	// MFTC0
    0U,	// MFTC1
    0U,	// MFTDSP
    0U,	// MFTGPR
    0U,	// MFTHC1
    0U,	// MFTHI
    0U,	// MFTLO
    9308U,	// MFTR
    0U,	// MINA_D
    0U,	// MINA_D_MMR6
    0U,	// MINA_S
    0U,	// MINA_S_MMR6
    0U,	// MINI_S_B
    0U,	// MINI_S_D
    0U,	// MINI_S_H
    0U,	// MINI_S_W
    2U,	// MINI_U_B
    2U,	// MINI_U_D
    2U,	// MINI_U_H
    2U,	// MINI_U_W
    0U,	// MIN_A_B
    0U,	// MIN_A_D
    0U,	// MIN_A_H
    0U,	// MIN_A_W
    0U,	// MIN_D
    0U,	// MIN_D_MMR6
    0U,	// MIN_S
    0U,	// MIN_S_B
    0U,	// MIN_S_D
    0U,	// MIN_S_H
    0U,	// MIN_S_MMR6
    0U,	// MIN_S_W
    0U,	// MIN_U_B
    0U,	// MIN_U_D
    0U,	// MIN_U_H
    0U,	// MIN_U_W
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    0U,	// MOD
    0U,	// MODSUB
    0U,	// MODSUB_MM
    0U,	// MODU
    0U,	// MODU_MMR6
    0U,	// MOD_MMR6
    0U,	// MOD_S_B
    0U,	// MOD_S_D
    0U,	// MOD_S_H
    0U,	// MOD_S_W
    0U,	// MOD_U_B
    0U,	// MOD_U_D
    0U,	// MOD_U_H
    0U,	// MOD_U_W
    0U,	// MOVE16_MM
    0U,	// MOVE16_MMR6
    0U,	// MOVEP_MM
    0U,	// MOVEP_MMR6
    0U,	// MOVE_V
    0U,	// MOVF_D32
    0U,	// MOVF_D32_MM
    0U,	// MOVF_D64
    0U,	// MOVF_I
    0U,	// MOVF_I64
    0U,	// MOVF_I_MM
    0U,	// MOVF_S
    0U,	// MOVF_S_MM
    0U,	// MOVN_I64_D64
    0U,	// MOVN_I64_I
    0U,	// MOVN_I64_I64
    0U,	// MOVN_I64_S
    0U,	// MOVN_I_D32
    0U,	// MOVN_I_D32_MM
    0U,	// MOVN_I_D64
    0U,	// MOVN_I_I
    0U,	// MOVN_I_I64
    0U,	// MOVN_I_MM
    0U,	// MOVN_I_S
    0U,	// MOVN_I_S_MM
    0U,	// MOVT_D32
    0U,	// MOVT_D32_MM
    0U,	// MOVT_D64
    0U,	// MOVT_I
    0U,	// MOVT_I64
    0U,	// MOVT_I_MM
    0U,	// MOVT_S
    0U,	// MOVT_S_MM
    0U,	// MOVZ_I64_D64
    0U,	// MOVZ_I64_I
    0U,	// MOVZ_I64_I64
    0U,	// MOVZ_I64_S
    0U,	// MOVZ_I_D32
    0U,	// MOVZ_I_D32_MM
    0U,	// MOVZ_I_D64
    0U,	// MOVZ_I_I
    0U,	// MOVZ_I_I64
    0U,	// MOVZ_I_MM
    0U,	// MOVZ_I_S
    0U,	// MOVZ_I_S_MM
    0U,	// MSA_FP_EXTEND_D_PSEUDO
    0U,	// MSA_FP_EXTEND_W_PSEUDO
    0U,	// MSA_FP_ROUND_D_PSEUDO
    0U,	// MSA_FP_ROUND_W_PSEUDO
    0U,	// MSUB
    24U,	// MSUBF_D
    24U,	// MSUBF_D_MMR6
    24U,	// MSUBF_S
    24U,	// MSUBF_S_MMR6
    24U,	// MSUBR_Q_H
    24U,	// MSUBR_Q_W
    0U,	// MSUBU
    0U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_MM
    0U,	// MSUBU_MM
    24U,	// MSUBV_B
    24U,	// MSUBV_D
    24U,	// MSUBV_H
    24U,	// MSUBV_W
    4672U,	// MSUB_D32
    4672U,	// MSUB_D32_MM
    4672U,	// MSUB_D64
    0U,	// MSUB_DSP
    0U,	// MSUB_DSP_MM
    0U,	// MSUB_MM
    24U,	// MSUB_Q_H
    24U,	// MSUB_Q_W
    4672U,	// MSUB_S
    4672U,	// MSUB_S_MM
    0U,	// MTC0
    0U,	// MTC0_MMR6
    0U,	// MTC1
    0U,	// MTC1_D64
    0U,	// MTC1_MM
    0U,	// MTC1_MMR6
    0U,	// MTC2
    0U,	// MTC2_MMR6
    0U,	// MTHC0_MMR6
    0U,	// MTHC1_D32
    0U,	// MTHC1_D32_MMR6
    0U,	// MTHC1_D64
    0U,	// MTHC1_D64_MMR6
    0U,	// MTHC1_MM
    0U,	// MTHC2_MMR6
    0U,	// MTHI
    0U,	// MTHI64
    0U,	// MTHI_DSP
    0U,	// MTHI_DSP_MM
    0U,	// MTHI_MM
    0U,	// MTHLIP
    0U,	// MTHLIP_MM
    0U,	// MTLO
    0U,	// MTLO64
    0U,	// MTLO_DSP
    0U,	// MTLO_DSP_MM
    0U,	// MTLO_MM
    0U,	// MTM0
    0U,	// MTM1
    0U,	// MTM2
    0U,	// MTP0
    0U,	// MTP1
    0U,	// MTP2
    0U,	// MTTACX
    0U,	// MTTC0
    0U,	// MTTC1
    0U,	// MTTDSP
    0U,	// MTTGPR
    0U,	// MTTHC1
    0U,	// MTTHI
    0U,	// MTTLO
    0U,	// MTTR
    0U,	// MUH
    0U,	// MUHU
    0U,	// MUHU_MMR6
    0U,	// MUH_MMR6
    0U,	// MUL
    0U,	// MULEQ_S_W_PHL
    0U,	// MULEQ_S_W_PHL_MM
    0U,	// MULEQ_S_W_PHR
    0U,	// MULEQ_S_W_PHR_MM
    0U,	// MULEU_S_PH_QBL
    0U,	// MULEU_S_PH_QBL_MM
    0U,	// MULEU_S_PH_QBR
    0U,	// MULEU_S_PH_QBR_MM
    0U,	// MULImmMacro
    0U,	// MULOMacro
    0U,	// MULOUMacro
    0U,	// MULQ_RS_PH
    0U,	// MULQ_RS_PH_MM
    0U,	// MULQ_RS_W
    0U,	// MULQ_RS_W_MMR2
    0U,	// MULQ_S_PH
    0U,	// MULQ_S_PH_MMR2
    0U,	// MULQ_S_W
    0U,	// MULQ_S_W_MMR2
    0U,	// MULR_Q_H
    0U,	// MULR_Q_W
    0U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_MM
    0U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_MMR2
    0U,	// MULT
    0U,	// MULTU_DSP
    0U,	// MULTU_DSP_MM
    0U,	// MULT_DSP
    0U,	// MULT_DSP_MM
    0U,	// MULT_MM
    0U,	// MULTu
    0U,	// MULTu_MM
    0U,	// MULU
    0U,	// MULU_MMR6
    0U,	// MULV_B
    0U,	// MULV_D
    0U,	// MULV_H
    0U,	// MULV_W
    0U,	// MUL_MM
    0U,	// MUL_MMR6
    0U,	// MUL_PH
    0U,	// MUL_PH_MMR2
    0U,	// MUL_Q_H
    0U,	// MUL_Q_W
    0U,	// MUL_R6
    0U,	// MUL_S_PH
    0U,	// MUL_S_PH_MMR2
    0U,	// Mfhi16
    0U,	// Mflo16
    0U,	// Move32R16
    0U,	// MoveR3216
    0U,	// MultRxRy16
    0U,	// MultRxRyRz16
    0U,	// MultuRxRy16
    0U,	// MultuRxRyRz16
    0U,	// NLOC_B
    0U,	// NLOC_D
    0U,	// NLOC_H
    0U,	// NLOC_W
    0U,	// NLZC_B
    0U,	// NLZC_D
    0U,	// NLZC_H
    0U,	// NLZC_W
    4672U,	// NMADD_D32
    4672U,	// NMADD_D32_MM
    4672U,	// NMADD_D64
    4672U,	// NMADD_S
    4672U,	// NMADD_S_MM
    4672U,	// NMSUB_D32
    4672U,	// NMSUB_D32_MM
    4672U,	// NMSUB_D64
    4672U,	// NMSUB_S
    4672U,	// NMSUB_S_MM
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR64
    4U,	// NORI_B
    0U,	// NORImm
    0U,	// NORImm64
    0U,	// NOR_MM
    0U,	// NOR_MMR6
    0U,	// NOR_V
    0U,	// NOR_V_D_PSEUDO
    0U,	// NOR_V_H_PSEUDO
    0U,	// NOR_V_W_PSEUDO
    0U,	// NOT16_MM
    0U,	// NOT16_MMR6
    0U,	// NegRxRy16
    0U,	// NotRxRy16
    0U,	// OR
    0U,	// OR16_MM
    0U,	// OR16_MMR6
    0U,	// OR64
    4U,	// ORI_B
    6U,	// ORI_MMR6
    0U,	// OR_MM
    0U,	// OR_MMR6
    0U,	// OR_V
    0U,	// OR_V_D_PSEUDO
    0U,	// OR_V_H_PSEUDO
    0U,	// OR_V_W_PSEUDO
    6U,	// ORi
    6U,	// ORi64
    6U,	// ORi_MM
    0U,	// OrRxRxRy16
    0U,	// PACKRL_PH
    0U,	// PACKRL_PH_MM
    0U,	// PAUSE
    0U,	// PAUSE_MM
    0U,	// PAUSE_MMR6
    0U,	// PCKEV_B
    0U,	// PCKEV_D
    0U,	// PCKEV_H
    0U,	// PCKEV_W
    0U,	// PCKOD_B
    0U,	// PCKOD_D
    0U,	// PCKOD_H
    0U,	// PCKOD_W
    0U,	// PCNT_B
    0U,	// PCNT_D
    0U,	// PCNT_H
    0U,	// PCNT_W
    0U,	// PICK_PH
    0U,	// PICK_PH_MM
    0U,	// PICK_QB
    0U,	// PICK_QB_MM
    0U,	// POP
    0U,	// PRECEQU_PH_QBL
    0U,	// PRECEQU_PH_QBLA
    0U,	// PRECEQU_PH_QBLA_MM
    0U,	// PRECEQU_PH_QBL_MM
    0U,	// PRECEQU_PH_QBR
    0U,	// PRECEQU_PH_QBRA
    0U,	// PRECEQU_PH_QBRA_MM
    0U,	// PRECEQU_PH_QBR_MM
    0U,	// PRECEQ_W_PHL
    0U,	// PRECEQ_W_PHL_MM
    0U,	// PRECEQ_W_PHR
    0U,	// PRECEQ_W_PHR_MM
    0U,	// PRECEU_PH_QBL
    0U,	// PRECEU_PH_QBLA
    0U,	// PRECEU_PH_QBLA_MM
    0U,	// PRECEU_PH_QBL_MM
    0U,	// PRECEU_PH_QBR
    0U,	// PRECEU_PH_QBRA
    0U,	// PRECEU_PH_QBRA_MM
    0U,	// PRECEU_PH_QBR_MM
    0U,	// PRECRQU_S_QB_PH
    0U,	// PRECRQU_S_QB_PH_MM
    0U,	// PRECRQ_PH_W
    0U,	// PRECRQ_PH_W_MM
    0U,	// PRECRQ_QB_PH
    0U,	// PRECRQ_QB_PH_MM
    0U,	// PRECRQ_RS_PH_W
    0U,	// PRECRQ_RS_PH_W_MM
    0U,	// PRECR_QB_PH
    0U,	// PRECR_QB_PH_MMR2
    2U,	// PRECR_SRA_PH_W
    2U,	// PRECR_SRA_PH_W_MMR2
    2U,	// PRECR_SRA_R_PH_W
    2U,	// PRECR_SRA_R_PH_W_MMR2
    0U,	// PREF
    0U,	// PREFE
    0U,	// PREFE_MM
    0U,	// PREFE_MMR6
    0U,	// PREFX_MM
    0U,	// PREF_MM
    0U,	// PREF_MMR6
    0U,	// PREF_R6
    2U,	// PREPEND
    2U,	// PREPEND_MMR2
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    0U,	// PseudoCVT_D32_W
    0U,	// PseudoCVT_D64_L
    0U,	// PseudoCVT_D64_W
    0U,	// PseudoCVT_S_L
    0U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    0U,	// PseudoIndirectBranch
    0U,	// PseudoIndirectBranch64
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMFHI
    0U,	// PseudoMFHI64
    0U,	// PseudoMFLO
    0U,	// PseudoMFLO64
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMTLOHI
    0U,	// PseudoMTLOHI64
    0U,	// PseudoMTLOHI_DSP
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    0U,	// PseudoReturn
    0U,	// PseudoReturn64
    0U,	// PseudoSDIV
    0U,	// PseudoSELECTFP_F_D32
    0U,	// PseudoSELECTFP_F_D64
    0U,	// PseudoSELECTFP_F_I
    0U,	// PseudoSELECTFP_F_I64
    0U,	// PseudoSELECTFP_F_S
    0U,	// PseudoSELECTFP_T_D32
    0U,	// PseudoSELECTFP_T_D64
    0U,	// PseudoSELECTFP_T_I
    0U,	// PseudoSELECTFP_T_I64
    0U,	// PseudoSELECTFP_T_S
    0U,	// PseudoSELECT_D32
    0U,	// PseudoSELECT_D64
    0U,	// PseudoSELECT_I
    0U,	// PseudoSELECT_I64
    0U,	// PseudoSELECT_S
    0U,	// PseudoTRUNC_W_D
    0U,	// PseudoTRUNC_W_D32
    0U,	// PseudoTRUNC_W_S
    0U,	// PseudoUDIV
    0U,	// RADDU_W_QB
    0U,	// RADDU_W_QB_MM
    0U,	// RDDSP
    0U,	// RDDSP_MM
    0U,	// RDHWR
    0U,	// RDHWR64
    0U,	// RDHWR_MM
    10U,	// RDHWR_MMR6
    0U,	// RDPGPR_MMR6
    0U,	// RECIP_D32
    0U,	// RECIP_D32_MM
    0U,	// RECIP_D64
    0U,	// RECIP_D64_MM
    0U,	// RECIP_S
    0U,	// RECIP_S_MM
    0U,	// REPLV_PH
    0U,	// REPLV_PH_MM
    0U,	// REPLV_QB
    0U,	// REPLV_QB_MM
    0U,	// REPL_PH
    0U,	// REPL_PH_MM
    0U,	// REPL_QB
    0U,	// REPL_QB_MM
    0U,	// RINT_D
    0U,	// RINT_D_MMR6
    0U,	// RINT_S
    0U,	// RINT_S_MMR6
    0U,	// ROL
    0U,	// ROLImm
    0U,	// ROR
    0U,	// RORImm
    2U,	// ROTR
    0U,	// ROTRV
    0U,	// ROTRV_MM
    2U,	// ROTR_MM
    0U,	// ROUND_L_D64
    0U,	// ROUND_L_D_MMR6
    0U,	// ROUND_L_S
    0U,	// ROUND_L_S_MMR6
    0U,	// ROUND_W_D32
    0U,	// ROUND_W_D64
    0U,	// ROUND_W_D_MMR6
    0U,	// ROUND_W_MM
    0U,	// ROUND_W_S
    0U,	// ROUND_W_S_MM
    0U,	// ROUND_W_S_MMR6
    0U,	// RSQRT_D32
    0U,	// RSQRT_D32_MM
    0U,	// RSQRT_D64
    0U,	// RSQRT_D64_MM
    0U,	// RSQRT_S
    0U,	// RSQRT_S_MM
    0U,	// Restore16
    0U,	// RestoreX16
    0U,	// RetRA
    0U,	// RetRA16
    10U,	// SAT_S_B
    12U,	// SAT_S_D
    14U,	// SAT_S_H
    2U,	// SAT_S_W
    10U,	// SAT_U_B
    12U,	// SAT_U_D
    14U,	// SAT_U_H
    2U,	// SAT_U_W
    0U,	// SB
    0U,	// SB16_MM
    0U,	// SB16_MMR6
    0U,	// SB64
    0U,	// SBE
    0U,	// SBE_MM
    0U,	// SBE_MMR6
    0U,	// SB_MM
    0U,	// SB_MMR6
    0U,	// SC
    0U,	// SC64
    0U,	// SC64_R6
    0U,	// SCD
    0U,	// SCD_R6
    0U,	// SCE
    0U,	// SCE_MM
    0U,	// SCE_MMR6
    0U,	// SC_MM
    0U,	// SC_R6
    0U,	// SD
    0U,	// SDBBP
    0U,	// SDBBP16_MM
    0U,	// SDBBP16_MMR6
    0U,	// SDBBP_MM
    0U,	// SDBBP_MMR6
    0U,	// SDBBP_R6
    0U,	// SDC1
    0U,	// SDC164
    0U,	// SDC1_D64_MMR6
    0U,	// SDC1_MM
    0U,	// SDC2
    0U,	// SDC2_MMR6
    0U,	// SDC2_R6
    0U,	// SDC3
    0U,	// SDIV
    0U,	// SDIV_MM
    0U,	// SDIV_MM_Pseudo
    0U,	// SDL
    0U,	// SDMacro
    0U,	// SDR
    0U,	// SDXC1
    0U,	// SDXC164
    0U,	// SDivIMacro
    0U,	// SDivMacro
    0U,	// SEB
    0U,	// SEB64
    0U,	// SEB_MM
    0U,	// SEB_MMR6
    0U,	// SEH
    0U,	// SEH64
    0U,	// SEH_MM
    0U,	// SEH_MMR6
    0U,	// SELEQZ
    0U,	// SELEQZ64
    0U,	// SELEQZ_D
    0U,	// SELEQZ_D_MMR6
    0U,	// SELEQZ_MMR6
    0U,	// SELEQZ_S
    0U,	// SELEQZ_S_MMR6
    0U,	// SELNEZ
    0U,	// SELNEZ64
    0U,	// SELNEZ_D
    0U,	// SELNEZ_D_MMR6
    0U,	// SELNEZ_MMR6
    0U,	// SELNEZ_S
    0U,	// SELNEZ_S_MMR6
    24U,	// SEL_D
    24U,	// SEL_D_MMR6
    24U,	// SEL_S
    24U,	// SEL_S_MMR6
    0U,	// SEQ
    0U,	// SEQIMacro
    0U,	// SEQMacro
    0U,	// SEQi
    0U,	// SH
    0U,	// SH16_MM
    0U,	// SH16_MMR6
    0U,	// SH64
    0U,	// SHE
    0U,	// SHE_MM
    0U,	// SHE_MMR6
    4U,	// SHF_B
    4U,	// SHF_H
    4U,	// SHF_W
    0U,	// SHILO
    0U,	// SHILOV
    0U,	// SHILOV_MM
    0U,	// SHILO_MM
    0U,	// SHLLV_PH
    0U,	// SHLLV_PH_MM
    0U,	// SHLLV_QB
    0U,	// SHLLV_QB_MM
    0U,	// SHLLV_S_PH
    0U,	// SHLLV_S_PH_MM
    0U,	// SHLLV_S_W
    0U,	// SHLLV_S_W_MM
    14U,	// SHLL_PH
    14U,	// SHLL_PH_MM
    10U,	// SHLL_QB
    10U,	// SHLL_QB_MM
    14U,	// SHLL_S_PH
    14U,	// SHLL_S_PH_MM
    2U,	// SHLL_S_W
    2U,	// SHLL_S_W_MM
    0U,	// SHRAV_PH
    0U,	// SHRAV_PH_MM
    0U,	// SHRAV_QB
    0U,	// SHRAV_QB_MMR2
    0U,	// SHRAV_R_PH
    0U,	// SHRAV_R_PH_MM
    0U,	// SHRAV_R_QB
    0U,	// SHRAV_R_QB_MMR2
    0U,	// SHRAV_R_W
    0U,	// SHRAV_R_W_MM
    14U,	// SHRA_PH
    14U,	// SHRA_PH_MM
    10U,	// SHRA_QB
    10U,	// SHRA_QB_MMR2
    14U,	// SHRA_R_PH
    14U,	// SHRA_R_PH_MM
    10U,	// SHRA_R_QB
    10U,	// SHRA_R_QB_MMR2
    2U,	// SHRA_R_W
    2U,	// SHRA_R_W_MM
    0U,	// SHRLV_PH
    0U,	// SHRLV_PH_MMR2
    0U,	// SHRLV_QB
    0U,	// SHRLV_QB_MM
    14U,	// SHRL_PH
    14U,	// SHRL_PH_MMR2
    10U,	// SHRL_QB
    10U,	// SHRL_QB_MM
    0U,	// SH_MM
    0U,	// SH_MMR6
    148U,	// SLDI_B
    34U,	// SLDI_D
    144U,	// SLDI_H
    36U,	// SLDI_W
    152U,	// SLD_B
    152U,	// SLD_D
    152U,	// SLD_H
    152U,	// SLD_W
    2U,	// SLL
    0U,	// SLL16_MM
    0U,	// SLL16_MMR6
    1U,	// SLL64_32
    1U,	// SLL64_64
    10U,	// SLLI_B
    12U,	// SLLI_D
    14U,	// SLLI_H
    2U,	// SLLI_W
    0U,	// SLLV
    0U,	// SLLV_MM
    0U,	// SLL_B
    0U,	// SLL_D
    0U,	// SLL_H
    2U,	// SLL_MM
    2U,	// SLL_MMR6
    0U,	// SLL_W
    0U,	// SLT
    0U,	// SLT64
    0U,	// SLTImm64
    0U,	// SLTUImm64
    0U,	// SLT_MM
    0U,	// SLTi
    0U,	// SLTi64
    0U,	// SLTi_MM
    0U,	// SLTiu
    0U,	// SLTiu64
    0U,	// SLTiu_MM
    0U,	// SLTu
    0U,	// SLTu64
    0U,	// SLTu_MM
    0U,	// SNE
    0U,	// SNEi
    0U,	// SNZ_B_PSEUDO
    0U,	// SNZ_D_PSEUDO
    0U,	// SNZ_H_PSEUDO
    0U,	// SNZ_V_PSEUDO
    0U,	// SNZ_W_PSEUDO
    142U,	// SPLATI_B
    156U,	// SPLATI_D
    138U,	// SPLATI_H
    136U,	// SPLATI_W
    128U,	// SPLAT_B
    128U,	// SPLAT_D
    128U,	// SPLAT_H
    128U,	// SPLAT_W
    0U,	// SQRT_D_MMR6
    0U,	// SQRT_S_MMR6
    2U,	// SRA
    10U,	// SRAI_B
    12U,	// SRAI_D
    14U,	// SRAI_H
    2U,	// SRAI_W
    10U,	// SRARI_B
    12U,	// SRARI_D
    14U,	// SRARI_H
    2U,	// SRARI_W
    0U,	// SRAR_B
    0U,	// SRAR_D
    0U,	// SRAR_H
    0U,	// SRAR_W
    0U,	// SRAV
    0U,	// SRAV_MM
    0U,	// SRA_B
    0U,	// SRA_D
    0U,	// SRA_H
    2U,	// SRA_MM
    0U,	// SRA_W
    2U,	// SRL
    0U,	// SRL16_MM
    0U,	// SRL16_MMR6
    10U,	// SRLI_B
    12U,	// SRLI_D
    14U,	// SRLI_H
    2U,	// SRLI_W
    10U,	// SRLRI_B
    12U,	// SRLRI_D
    14U,	// SRLRI_H
    2U,	// SRLRI_W
    0U,	// SRLR_B
    0U,	// SRLR_D
    0U,	// SRLR_H
    0U,	// SRLR_W
    0U,	// SRLV
    0U,	// SRLV_MM
    0U,	// SRL_B
    0U,	// SRL_D
    0U,	// SRL_H
    2U,	// SRL_MM
    0U,	// SRL_W
    0U,	// SSNOP
    0U,	// SSNOP_MM
    0U,	// SSNOP_MMR6
    0U,	// STORE_ACC128
    0U,	// STORE_ACC64
    0U,	// STORE_ACC64DSP
    0U,	// STORE_CCOND_DSP
    0U,	// ST_B
    0U,	// ST_D
    0U,	// ST_F16
    0U,	// ST_H
    0U,	// ST_W
    0U,	// SUB
    0U,	// SUBQH_PH
    0U,	// SUBQH_PH_MMR2
    0U,	// SUBQH_R_PH
    0U,	// SUBQH_R_PH_MMR2
    0U,	// SUBQH_R_W
    0U,	// SUBQH_R_W_MMR2
    0U,	// SUBQH_W
    0U,	// SUBQH_W_MMR2
    0U,	// SUBQ_PH
    0U,	// SUBQ_PH_MM
    0U,	// SUBQ_S_PH
    0U,	// SUBQ_S_PH_MM
    0U,	// SUBQ_S_W
    0U,	// SUBQ_S_W_MM
    0U,	// SUBSUS_U_B
    0U,	// SUBSUS_U_D
    0U,	// SUBSUS_U_H
    0U,	// SUBSUS_U_W
    0U,	// SUBSUU_S_B
    0U,	// SUBSUU_S_D
    0U,	// SUBSUU_S_H
    0U,	// SUBSUU_S_W
    0U,	// SUBS_S_B
    0U,	// SUBS_S_D
    0U,	// SUBS_S_H
    0U,	// SUBS_S_W
    0U,	// SUBS_U_B
    0U,	// SUBS_U_D
    0U,	// SUBS_U_H
    0U,	// SUBS_U_W
    0U,	// SUBU16_MM
    0U,	// SUBU16_MMR6
    0U,	// SUBUH_QB
    0U,	// SUBUH_QB_MMR2
    0U,	// SUBUH_R_QB
    0U,	// SUBUH_R_QB_MMR2
    0U,	// SUBU_MMR6
    0U,	// SUBU_PH
    0U,	// SUBU_PH_MMR2
    0U,	// SUBU_QB
    0U,	// SUBU_QB_MM
    0U,	// SUBU_S_PH
    0U,	// SUBU_S_PH_MMR2
    0U,	// SUBU_S_QB
    0U,	// SUBU_S_QB_MM
    2U,	// SUBVI_B
    2U,	// SUBVI_D
    2U,	// SUBVI_H
    2U,	// SUBVI_W
    0U,	// SUBV_B
    0U,	// SUBV_D
    0U,	// SUBV_H
    0U,	// SUBV_W
    0U,	// SUB_MM
    0U,	// SUB_MMR6
    0U,	// SUBu
    0U,	// SUBu_MM
    0U,	// SUXC1
    0U,	// SUXC164
    0U,	// SUXC1_MM
    0U,	// SW
    0U,	// SW16_MM
    0U,	// SW16_MMR6
    0U,	// SW64
    0U,	// SWC1
    0U,	// SWC1_MM
    0U,	// SWC2
    0U,	// SWC2_MMR6
    0U,	// SWC2_R6
    0U,	// SWC3
    0U,	// SWDSP
    0U,	// SWDSP_MM
    0U,	// SWE
    0U,	// SWE_MM
    0U,	// SWE_MMR6
    0U,	// SWL
    0U,	// SWL64
    0U,	// SWLE
    0U,	// SWLE_MM
    0U,	// SWL_MM
    0U,	// SWM16_MM
    0U,	// SWM16_MMR6
    0U,	// SWM32_MM
    0U,	// SWM_MM
    0U,	// SWP_MM
    0U,	// SWP_MMR6
    0U,	// SWR
    0U,	// SWR64
    0U,	// SWRE
    0U,	// SWRE_MM
    0U,	// SWR_MM
    0U,	// SWSP_MM
    0U,	// SWSP_MMR6
    0U,	// SWXC1
    0U,	// SWXC1_MM
    0U,	// SW_MM
    0U,	// SW_MMR6
    0U,	// SYNC
    0U,	// SYNCI
    0U,	// SYNCI_MM
    0U,	// SYNCI_MMR6
    0U,	// SYNC_MM
    0U,	// SYNC_MMR6
    0U,	// SYSCALL
    0U,	// SYSCALL_MM
    0U,	// SZ_B_PSEUDO
    0U,	// SZ_D_PSEUDO
    0U,	// SZ_H_PSEUDO
    0U,	// SZ_V_PSEUDO
    0U,	// SZ_W_PSEUDO
    0U,	// Save16
    0U,	// SaveX16
    0U,	// SbRxRyOffMemX16
    0U,	// SebRx16
    0U,	// SehRx16
    0U,	// SelBeqZ
    0U,	// SelBneZ
    1U,	// SelTBteqZCmp
    1U,	// SelTBteqZCmpi
    1U,	// SelTBteqZSlt
    1U,	// SelTBteqZSlti
    1U,	// SelTBteqZSltiu
    1U,	// SelTBteqZSltu
    1U,	// SelTBtneZCmp
    1U,	// SelTBtneZCmpi
    1U,	// SelTBtneZSlt
    1U,	// SelTBtneZSlti
    1U,	// SelTBtneZSltiu
    1U,	// SelTBtneZSltu
    0U,	// ShRxRyOffMemX16
    2U,	// SllX16
    0U,	// SllvRxRy16
    0U,	// SltCCRxRy16
    0U,	// SltRxRy16
    0U,	// SltiCCRxImmX16
    0U,	// SltiRxImm16
    0U,	// SltiRxImmX16
    0U,	// SltiuCCRxImmX16
    0U,	// SltiuRxImm16
    0U,	// SltiuRxImmX16
    0U,	// SltuCCRxRy16
    0U,	// SltuRxRy16
    0U,	// SltuRxRyRz16
    2U,	// SraX16
    0U,	// SravRxRy16
    2U,	// SrlX16
    0U,	// SrlvRxRy16
    0U,	// SubuRxRyRz16
    0U,	// SwRxRyOffMemX16
    0U,	// SwRxSpImmX16
    0U,	// TAILCALL
    0U,	// TAILCALLREG
    0U,	// TAILCALLREG64
    0U,	// TAILCALL_MM
    0U,	// TAILCALL_MMR6
    38U,	// TEQ
    0U,	// TEQI
    0U,	// TEQI_MM
    14U,	// TEQ_MM
    38U,	// TGE
    0U,	// TGEI
    0U,	// TGEIU
    0U,	// TGEIU_MM
    0U,	// TGEI_MM
    38U,	// TGEU
    14U,	// TGEU_MM
    14U,	// TGE_MM
    0U,	// TLBINV
    0U,	// TLBINVF
    0U,	// TLBINVF_MMR6
    0U,	// TLBINV_MMR6
    0U,	// TLBP
    0U,	// TLBP_MM
    0U,	// TLBR
    0U,	// TLBR_MM
    0U,	// TLBWI
    0U,	// TLBWI_MM
    0U,	// TLBWR
    0U,	// TLBWR_MM
    38U,	// TLT
    0U,	// TLTI
    0U,	// TLTIU_MM
    0U,	// TLTI_MM
    38U,	// TLTU
    14U,	// TLTU_MM
    14U,	// TLT_MM
    38U,	// TNE
    0U,	// TNEI
    0U,	// TNEI_MM
    14U,	// TNE_MM
    0U,	// TRAP
    0U,	// TRUNC_L_D64
    0U,	// TRUNC_L_D_MMR6
    0U,	// TRUNC_L_S
    0U,	// TRUNC_L_S_MMR6
    0U,	// TRUNC_W_D32
    0U,	// TRUNC_W_D64
    0U,	// TRUNC_W_D_MMR6
    0U,	// TRUNC_W_MM
    0U,	// TRUNC_W_S
    0U,	// TRUNC_W_S_MM
    0U,	// TRUNC_W_S_MMR6
    0U,	// TTLTIU
    0U,	// UDIV
    0U,	// UDIV_MM
    0U,	// UDIV_MM_Pseudo
    0U,	// UDivIMacro
    0U,	// UDivMacro
    0U,	// Ulh
    0U,	// Ulhu
    0U,	// Ulw
    0U,	// Ush
    0U,	// Usw
    0U,	// V3MULU
    0U,	// VMM0
    0U,	// VMULU
    24U,	// VSHF_B
    24U,	// VSHF_D
    24U,	// VSHF_H
    24U,	// VSHF_W
    0U,	// WAIT
    0U,	// WAIT_MM
    0U,	// WAIT_MMR6
    0U,	// WRDSP
    0U,	// WRDSP_MM
    0U,	// WRPGPR_MMR6
    0U,	// WSBH
    0U,	// WSBH_MM
    0U,	// WSBH_MMR6
    0U,	// XOR
    0U,	// XOR16_MM
    0U,	// XOR16_MMR6
    0U,	// XOR64
    4U,	// XORI_B
    6U,	// XORI_MMR6
    0U,	// XOR_MM
    0U,	// XOR_MMR6
    0U,	// XOR_V
    0U,	// XOR_V_D_PSEUDO
    0U,	// XOR_V_H_PSEUDO
    0U,	// XOR_V_W_PSEUDO
    6U,	// XORi
    6U,	// XORi64
    6U,	// XORi_MM
    0U,	// XorRxRxRy16
    0U,	// YIELD
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADDIUS5_MM, CTC1, CTC1_MM, CTC2_MM, CTTC1, DMTC0, DMTC1, DMTC2, FORK, ...
    printOperand(MI, 1, O);
    O << ", ";
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, MTHC1_D32, MTHC1_D32_MMR6, MTHC1_D64, ...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 4:
    // BREAK, BREAK_MM, BREAK_MMR6, SDBBP_MM, SYSCALL_MM, WAIT_MM, WAIT_MMR6
    printUImm<10>(MI, 0, O);
    break;
  case 5:
    // BREAK16_MM, BREAK16_MMR6, SDBBP16_MM, SDBBP16_MMR6
    printUImm<4>(MI, 0, O);
    return;
    break;
  case 6:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printUImm<5>(MI, 2, O);
    O << ", ";
    break;
  case 7:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64, FCMP_S32, FCMP_S32_MM
    printFCCOperand(MI, 2, O);
    break;
  case 8:
    // Jal16, JalB16
    printUImm<26>(MI, 0, O);
    break;
  case 9:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, MOVEP_MM, MOVEP_MMR6, SWM16_MM...
    printRegisterList(MI, 0, O);
    O << ", ";
    break;
  case 10:
    // LWP_MM, LWP_MMR6, SWP_MM, SWP_MMR6
    printRegisterPair(MI, 0, O);
    O << ", ";
    printMemOperand(MI, 2, O);
    return;
    break;
  case 11:
    // SDBBP, SDBBP_MMR6, SDBBP_R6, SYSCALL
    printUImm<20>(MI, 0, O);
    return;
    break;
  case 12:
    // SYNC, SYNC_MM, SYNC_MMR6
    printUImm<5>(MI, 0, O);
    return;
    break;
  case 13:
    // SYNCI, SYNCI_MM, SYNCI_MMR6
    printMemOperand(MI, 0, O);
    return;
    break;
  case 14:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O);
    break;
  }


  // Fragment 1 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    O << ", ";
    break;
  case 1:
    // ADDIUS5_MM, MOVEP_MM, MOVEP_MMR6, MultRxRyRz16, MultuRxRyRz16, SltCCRx...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADDIUSP_MM, AddiuSpImmX16, B16_MM, BAL, BALC, BALC_MMR6, BC, BC16_MMR6...
    return;
    break;
  case 3:
    // AND16_MM, AND16_MMR6, LSA_MMR6, OR16_MM, OR16_MMR6, PREFX_MM, XOR16_MM...
    printOperand(MI, 1, O);
    break;
  case 4:
    // AddiuRxPcImmX16
    O << ", $pc, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 5:
    // AddiuSpImm16, Bimm16
    O << " # 16 bit inst";
    return;
    break;
  case 6:
    // Bteqz16, Btnez16
    O << "  # 16 bit inst";
    return;
    break;
  case 7:
    // CACHE, CACHEE, CACHEE_MM, CACHEE_MMR6, CACHE_MM, CACHE_MMR6, CACHE_R6,...
    printMemOperand(MI, 0, O);
    return;
    break;
  case 8:
    // CTC1, CTC1_MM, CTC2_MM, CTTC1, DMTC0, DMTC1, DMTC2, FORK, MTC0, MTC0_M...
    printOperand(MI, 0, O);
    break;
  case 9:
    // FCMP_D32, FCMP_D32_MM, FCMP_D64
    O << ".d\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // FCMP_S32, FCMP_S32_MM
    O << ".s\t";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 11:
    // INSERT_B, INSERT_D, INSERT_H, INSERT_W, INSVE_B, INSVE_D, INSVE_H, INS...
    O << '[';
    break;
  case 12:
    // Jal16
    O << "\n\tnop";
    return;
    break;
  case 13:
    // JalB16
    O << "\t# branch\n\tnop";
    return;
    break;
  case 14:
    // LWM16_MM, LWM16_MMR6, LWM32_MM, LWM_MM, SWM16_MM, SWM16_MMR6, SWM32_MM...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 15:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t";
    printOperand(MI, 1, O);
    O << "\n2:";
    return;
    break;
  case 16:
    // SC, SC64, SC64_R6, SCD, SCD_R6, SCE, SCE_MM, SC_MM, SC_R6
    printMemOperand(MI, 2, O);
    return;
    break;
  case 17:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 23) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADDIUS5_MM, AND16_MM, AND16_MMR6, CTC1, CTC1_MM, CTC2_MM, CTTC1, DMTC1...
    return;
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, BINSLI_B, BINSLI_D, BINS...
    printOperand(MI, 2, O);
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64, LEA_ADDiu_MM
    printMemOperandEA(MI, 1, O);
    return;
    break;
  case 4:
    // BBIT0, BBIT032, BBIT1, BBIT132
    printUImm<5>(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BREAK, BREAK_MM, BREAK_MMR6, RDDSP, WRDSP
    printUImm<10>(MI, 1, O);
    return;
    break;
  case 6:
    // DMFC2_OCTEON, DMTC2_OCTEON, LUI_MMR6, LUi, LUi64, LUi_MM
    printUImm<16>(MI, 1, O);
    return;
    break;
  case 7:
    // DMTC0, DMTC2, FORK, LSA_MMR6, MOVEP_MM, MOVEP_MMR6, MTC0, MTC0_MMR6, M...
    O << ", ";
    break;
  case 8:
    // INSERT_B
    printUImm<4>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 9:
    // INSERT_D
    printUImm<1>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // INSERT_H
    printUImm<3>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // INSERT_W
    printUImm<2>(MI, 3, O);
    O << "], ";
    printOperand(MI, 2, O);
    return;
    break;
  case 12:
    // INSVE_B
    printUImm<4>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 13:
    // INSVE_D
    printUImm<1>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 14:
    // INSVE_H
    printUImm<3>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 15:
    // INSVE_W
    printUImm<2>(MI, 2, O);
    O << "], ";
    printOperand(MI, 3, O);
    O << '[';
    printUImm<0>(MI, 4, O);
    O << ']';
    return;
    break;
  case 16:
    // LB, LB64, LBE, LBE_MM, LBE_MMR6, LBU16_MM, LBUE_MMR6, LBU_MMR6, LB_MM,...
    printMemOperand(MI, 1, O);
    return;
    break;
  case 17:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t";
    printOperand(MI, 0, O);
    return;
    break;
  case 18:
    // PREFX_MM
    O << '(';
    printOperand(MI, 0, O);
    O << ')';
    return;
    break;
  case 19:
    // RDDSP_MM, WRDSP_MM
    printUImm<7>(MI, 1, O);
    return;
    break;
  case 20:
    // REPL_QB, REPL_QB_MM
    printUImm<8>(MI, 1, O);
    return;
    break;
  case 21:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O);
    break;
  case 22:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t";
    printOperand(MI, 0, O);
    O << ", $t8";
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 28) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSMacro, ABSQ_S_PH, ABSQ_S_PH_MM, ABSQ_S_QB, ABSQ_S_QB_MMR2, ABSQ_S_W...
    return;
    break;
  case 1:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    O << ", ";
    break;
  case 2:
    // AddiuRxRxImm16, LwRxPcTcp16
    O << "\t# 16 bit inst";
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst";
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t";
    printOperand(MI, 2, O);
    return;
    break;
  case 6:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << '[';
    break;
  case 7:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst";
    return;
    break;
  case 8:
    // DMTC0, DMTC2, MTC0, MTC0_MMR6, MTC2, MTHC0_MMR6, MTTC0
    printUImm<3>(MI, 2, O);
    return;
    break;
  case 9:
    // DSLL64_32
    O << ", 32";
    return;
    break;
  case 10:
    // FORK
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // GotPrologue16
    O << "\n\taddiu\t";
    printOperand(MI, 1, O);
    O << ", $pc, ";
    printOperand(MI, 3, O);
    O << "\n ";
    return;
    break;
  case 12:
    // LBUX, LBUX_MM, LDXC1, LDXC164, LHX, LHX_MM, LUXC1, LUXC164, LUXC1_MM, ...
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 13:
    // LSA_MMR6
    printOperand(MI, 0, O);
    O << ", ";
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 14:
    // MOVEP_MM, MOVEP_MMR6
    printOperand(MI, 3, O);
    return;
    break;
  case 15:
    // MTTR
    printUImm<1>(MI, 2, O);
    O << ", ";
    printUImm<3>(MI, 3, O);
    O << ", ";
    printUImm<1>(MI, 4, O);
    return;
    break;
  case 16:
    // SLL64_32, SLL64_64
    O << ", 0";
    return;
    break;
  case 17:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 18:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove ";
    printOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 33) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDVI_B, ADDVI_D, ADDVI_H, ADDVI_W, APPEND, APPEND_MMR2, BCLRI_W, BNEG...
    printUImm<5>(MI, 2, O);
    break;
  case 2:
    // ANDI_B, NORI_B, ORI_B, SHF_B, SHF_H, SHF_W, XORI_B
    printUImm<8>(MI, 2, O);
    return;
    break;
  case 3:
    // ANDI_MMR6, ANDi, ANDi64, ANDi_MM, AUI, AUI_MMR6, DAHI, DATI, DAUI, ORI...
    printUImm<16>(MI, 2, O);
    return;
    break;
  case 4:
    // BALIGN, BALIGN_MMR2, COPY_S_W, COPY_U_W, SPLATI_W
    printUImm<2>(MI, 2, O);
    break;
  case 5:
    // BCLRI_B, BNEGI_B, BSETI_B, COPY_S_H, COPY_U_H, DMFC0, DMFC2, MFC0, MFC...
    printUImm<3>(MI, 2, O);
    break;
  case 6:
    // BCLRI_D, BNEGI_D, BSETI_D, DEXT, DEXT64_32, DINS, DROTR, DSLL, DSRA, D...
    printUImm<6>(MI, 2, O);
    break;
  case 7:
    // BCLRI_H, BNEGI_H, BSETI_H, COPY_S_B, COPY_U_B, SAT_S_H, SAT_U_H, SHLL_...
    printUImm<4>(MI, 2, O);
    break;
  case 8:
    // BINSLI_B, BINSRI_B, SLDI_H
    printUImm<3>(MI, 3, O);
    break;
  case 9:
    // BINSLI_D, BINSRI_D
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 10:
    // BINSLI_H, BINSRI_H, SLDI_B
    printUImm<4>(MI, 3, O);
    break;
  case 11:
    // BINSLI_W, BINSRI_W
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 12:
    // BINSL_B, BINSL_D, BINSL_H, BINSL_W, BINSR_B, BINSR_D, BINSR_H, BINSR_W...
    printOperand(MI, 3, O);
    break;
  case 13:
    // BMNZI_B, BMZI_B, BSELI_B
    printUImm<8>(MI, 3, O);
    return;
    break;
  case 14:
    // COPY_S_D, MFTR, SPLATI_D
    printUImm<1>(MI, 2, O);
    break;
  case 15:
    // DEXTU, DINSU
    printUImm<5, 32>(MI, 2, O);
    O << ", ";
    break;
  case 16:
    // FADD_D_MMR6, FADD_S_MMR6, FDIV_D_MMR6, FDIV_S_MMR6, FMUL_D_MMR6, FMUL_...
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // SLDI_D
    printUImm<1>(MI, 3, O);
    O << ']';
    return;
    break;
  case 18:
    // SLDI_W
    printUImm<2>(MI, 3, O);
    O << ']';
    return;
    break;
  case 19:
    // TEQ, TGE, TGEU, TLT, TLTU, TNE
    printUImm<10>(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD, ADDIUR2_MM, ADDIU_MMR6, ADDQH_PH, ADDQH_PH_MMR2, ADDQH_R_PH, ADDQ...
    return;
    break;
  case 1:
    // ALIGN, ALIGN_MMR6, CINS, CINS32, CINS64_32, CINS_i32, DALIGN, DEXT, DE...
    O << ", ";
    break;
  case 2:
    // COPY_S_B, COPY_S_D, COPY_S_H, COPY_S_W, COPY_U_B, COPY_U_H, COPY_U_W, ...
    O << ']';
    return;
    break;
  case 3:
    // DEXTU
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DINSU
    printUImm<6>(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ALIGN, ALIGN_MMR6
    printUImm<2>(MI, 3, O);
    return;
    break;
  case 1:
    // CINS, CINS32, CINS64_32, CINS_i32, EXTS, EXTS32
    printUImm<5>(MI, 3, O);
    return;
    break;
  case 2:
    // DALIGN, MFTR
    printUImm<3>(MI, 3, O);
    break;
  case 3:
    // DEXT
    printUImm<6, 1>(MI, 3, O);
    return;
    break;
  case 4:
    // DEXT64_32, EXT, EXT_MM, EXT_MMR6
    printUImm<5, 1>(MI, 3, O);
    return;
    break;
  case 5:
    // DEXTM
    printUImm<5, 33>(MI, 3, O);
    return;
    break;
  case 6:
    // DINS, INS, INS_MM, INS_MMR6
    printUImm<6>(MI, 3, O);
    return;
    break;
  case 7:
    // DINSM
    printUImm<6, 2>(MI, 3, O);
    return;
    break;
  case 8:
    // DLSA, DLSA_R6, LSA, LSA_R6
    printUImm<2, 1>(MI, 3, O);
    return;
    break;
  case 9:
    // MADD_D32, MADD_D32_MM, MADD_D64, MADD_S, MADD_S_MM, MSUB_D32, MSUB_D32...
    printOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 45) & 1) {
    // MFTR
    O << ", ";
    printUImm<1>(MI, 4, O);
    return;
  } else {
    // DALIGN
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 418 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'm', 'p', 'l', '0', 0,
  /* 54 */ 'p', '0', 0,
  /* 57 */ 'w', '0', 0,
  /* 60 */ 'f', '1', '1', 0,
  /* 64 */ 'w', '1', '1', 0,
  /* 68 */ 'f', '2', '1', 0,
  /* 72 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 85 */ 'w', '2', '1', 0,
  /* 89 */ 'f', '3', '1', 0,
  /* 93 */ 'w', '3', '1', 0,
  /* 97 */ 'a', 'c', '1', 0,
  /* 101 */ 'f', 'c', 'c', '1', 0,
  /* 106 */ 'f', '1', 0,
  /* 109 */ 'm', 'p', 'l', '1', 0,
  /* 114 */ 'p', '1', 0,
  /* 117 */ 'w', '1', 0,
  /* 120 */ 'f', '1', '2', 0,
  /* 124 */ 'w', '1', '2', 0,
  /* 128 */ 'f', '2', '2', 0,
  /* 132 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 145 */ 'w', '2', '2', 0,
  /* 149 */ 'a', 'c', '2', 0,
  /* 153 */ 'f', 'c', 'c', '2', 0,
  /* 158 */ 'f', '2', 0,
  /* 161 */ 'm', 'p', 'l', '2', 0,
  /* 166 */ 'p', '2', 0,
  /* 169 */ 'w', '2', 0,
  /* 172 */ 'f', '1', '3', 0,
  /* 176 */ 'w', '1', '3', 0,
  /* 180 */ 'f', '2', '3', 0,
  /* 184 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 197 */ 'w', '2', '3', 0,
  /* 201 */ 'a', 'c', '3', 0,
  /* 205 */ 'f', 'c', 'c', '3', 0,
  /* 210 */ 'f', '3', 0,
  /* 213 */ 'w', '3', 0,
  /* 216 */ 'f', '1', '4', 0,
  /* 220 */ 'w', '1', '4', 0,
  /* 224 */ 'f', '2', '4', 0,
  /* 228 */ 'w', '2', '4', 0,
  /* 232 */ 'f', 'c', 'c', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'w', '4', 0,
  /* 243 */ 'f', '1', '5', 0,
  /* 247 */ 'w', '1', '5', 0,
  /* 251 */ 'f', '2', '5', 0,
  /* 255 */ 'w', '2', '5', 0,
  /* 259 */ 'f', 'c', 'c', '5', 0,
  /* 264 */ 'f', '5', 0,
  /* 267 */ 'w', '5', 0,
  /* 270 */ 'f', '1', '6', 0,
  /* 274 */ 'w', '1', '6', 0,
  /* 278 */ 'f', '2', '6', 0,
  /* 282 */ 'w', '2', '6', 0,
  /* 286 */ 'f', 'c', 'c', '6', 0,
  /* 291 */ 'f', '6', 0,
  /* 294 */ 'w', '6', 0,
  /* 297 */ 'f', '1', '7', 0,
  /* 301 */ 'w', '1', '7', 0,
  /* 305 */ 'f', '2', '7', 0,
  /* 309 */ 'w', '2', '7', 0,
  /* 313 */ 'f', 'c', 'c', '7', 0,
  /* 318 */ 'f', '7', 0,
  /* 321 */ 'w', '7', 0,
  /* 324 */ 'f', '1', '8', 0,
  /* 328 */ 'w', '1', '8', 0,
  /* 332 */ 'f', '2', '8', 0,
  /* 336 */ 'w', '2', '8', 0,
  /* 340 */ 'f', '8', 0,
  /* 343 */ 'w', '8', 0,
  /* 346 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 362 */ 'f', '1', '9', 0,
  /* 366 */ 'w', '1', '9', 0,
  /* 370 */ 'f', '2', '9', 0,
  /* 374 */ 'w', '2', '9', 0,
  /* 378 */ 'f', '9', 0,
  /* 381 */ 'w', '9', 0,
  /* 384 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 391 */ 'r', 'a', 0,
  /* 394 */ 'h', 'w', 'r', '_', 'c', 'c', 0,
  /* 401 */ 'p', 'c', 0,
  /* 404 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 413 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 424 */ 'h', 'i', 0,
  /* 427 */ 'h', 'w', 'r', '_', 'c', 'p', 'u', 'n', 'u', 'm', 0,
  /* 438 */ 'l', 'o', 0,
  /* 441 */ 'z', 'e', 'r', 'o', 0,
  /* 446 */ 'h', 'w', 'r', '_', 's', 'y', 'n', 'c', 'i', '_', 's', 't', 'e', 'p', 0,
  /* 461 */ 'f', 'p', 0,
  /* 464 */ 'g', 'p', 0,
  /* 467 */ 's', 'p', 0,
  /* 470 */ 'h', 'w', 'r', '_', 'c', 'c', 'r', 'e', 's', 0,
  /* 480 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 487 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 497 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    62, 404, 497, 384, 413, 480, 487, 461, 464, 122, 62, 2, 272, 218, 
    245, 174, 299, 401, 391, 467, 441, 218, 245, 272, 299, 37, 97, 149, 
    201, 62, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 
    122, 174, 218, 245, 272, 299, 326, 360, 2, 62, 122, 174, 218, 245, 
    272, 299, 326, 360, 1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 
    9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 1, 61, 
    121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 225, 252, 
    279, 306, 333, 371, 30, 90, 1, 61, 121, 173, 217, 244, 271, 298, 
    325, 359, 9, 69, 129, 181, 225, 252, 279, 306, 333, 371, 30, 90, 
    46, 158, 237, 291, 340, 0, 120, 216, 270, 324, 8, 128, 224, 278, 
    332, 29, 12, 72, 132, 184, 46, 106, 158, 210, 237, 264, 291, 318, 
    340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 362, 8, 68, 
    128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 41, 101, 153, 205, 
    232, 259, 286, 313, 2, 62, 122, 174, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 461, 46, 106, 158, 210, 237, 
    264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 324, 
    362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 464, 
    37, 97, 149, 201, 427, 446, 394, 470, 218, 245, 272, 299, 326, 360, 
    1, 61, 121, 173, 217, 244, 271, 298, 325, 359, 9, 69, 129, 181, 
    225, 252, 279, 306, 333, 371, 30, 90, 279, 306, 37, 97, 149, 201, 
    49, 109, 161, 54, 114, 166, 391, 271, 298, 325, 359, 9, 69, 129, 
    181, 467, 326, 360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
    57, 117, 169, 213, 240, 267, 294, 321, 343, 381, 4, 64, 124, 176, 
    220, 247, 274, 301, 328, 366, 25, 85, 145, 197, 228, 255, 282, 309, 
    336, 374, 33, 93, 441, 218, 245, 272, 299, 37, 46, 106, 158, 210, 
    237, 264, 291, 318, 340, 378, 0, 60, 120, 172, 216, 243, 270, 297, 
    324, 362, 8, 68, 128, 180, 224, 251, 278, 305, 332, 370, 29, 89, 
    346, 424, 279, 306, 438, 271, 298, 325, 359, 9, 69, 129, 181, 326, 
    360, 1, 61, 121, 173, 217, 244, 225, 252, 122, 174, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDIUPC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg())) {
      // (ADDIUPC GPR32Opnd:$rd, simm19_lsl2:$imm)
      AsmString = "lapc $\x01, $\x02";
      break;
    }
    return false;
  case Mips::ADDIUPC_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg())) {
      // (ADDIUPC_MMR6 GPR32Opnd:$rd, simm19_lsl2:$imm)
      AsmString = "lapc $\x01, $\x02";
      break;
    }
    return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::BC1F:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1FL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1FL FCC0, brtarget:$offset)
      AsmString = "bc1fl $\x02";
      break;
    }
    return false;
  case Mips::BC1F_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1F_MM FCC0, brtarget:$offset)
      AsmString = "bc1f $\x02";
      break;
    }
    return false;
  case Mips::BC1T:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BC1TL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1TL FCC0, brtarget:$offset)
      AsmString = "bc1tl $\x02";
      break;
    }
    return false;
  case Mips::BC1T_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::FCC0) {
      // (BC1T_MM FCC0, brtarget:$offset)
      AsmString = "bc1t $\x02";
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK uimm10:$imm, 0)
      AsmString = "break $\xFF\x01\x01";
      break;
    }
    return false;
  case Mips::C_EQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.eq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_EQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_EQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.eq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.f.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_F_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_F_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.f.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.le.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.le.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.lt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_LT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_LT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.lt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.nge.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.nge.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngle.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngle.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngl.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGL_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGL_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngl.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ngt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_NGT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_NGT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ngt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ole.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ole.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.olt.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_OLT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_OLT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.olt.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.seq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.seq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.sf.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_SF_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_SF_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.sf.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ueq.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UEQ_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UEQ_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ueq.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ule.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULE_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULE_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ule.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.ult.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_ULT_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_ULT_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.ult.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32 FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D32_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::AFGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D32_MM FCC0, AFGR64Opnd:$fs, AFGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64 FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_D64_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_D64_MM FCC0, FGR64Opnd:$fs, FGR64Opnd:$ft)
      AsmString = "c.un.d $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::C_UN_S_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::FCC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::FGR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (C_UN_S_MM FCC0, FGR32Opnd:$fs, FGR32Opnd:$ft)
      AsmString = "c.un.s $\x02, $\x03";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DIV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DIV GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt)
      AsmString = "div $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DIVU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DIVU GPR32Opnd:$rs, GPR32Opnd:$rs, GPR32Opnd:$rt)
      AsmString = "divu $\x01, $\x03";
      break;
    }
    return false;
  case Mips::DI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MM ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI_MMR6 ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::DMT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DMT ZERO)
      AsmString = "dmt";
      break;
    }
    return false;
  case Mips::DSUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dneg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUB GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dneg $\x01";
      break;
    }
    return false;
  case Mips::DSUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rs)
      AsmString = "dnegu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO_64 &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (DSUBu GPR64Opnd:$rt, ZERO_64, GPR64Opnd:$rt)
      AsmString = "dnegu $\x01";
      break;
    }
    return false;
  case Mips::DVPE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DVPE ZERO)
      AsmString = "dvpe";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MM ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EI_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI_MMR6 ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::EMT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EMT ZERO)
      AsmString = "emt";
      break;
    }
    return false;
  case Mips::EVPE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EVPE ZERO)
      AsmString = "evpe";
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR ZERO, GPR32Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 ZERO_64, GPR64Opnd:$rs)
      AsmString = "jr $\x02";
      break;
    }
    return false;
  case Mips::JALRC_HB_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_HB_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc.hb $\x02";
      break;
    }
    return false;
  case Mips::JALRC_MMR6:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALRC_MMR6 RA, GPR32Opnd:$rs)
      AsmString = "jalrc $\x02";
      break;
    }
    return false;
  case Mips::JALR_HB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR_HB RA, GPR32Opnd:$rs)
      AsmString = "jalr.hb $\x02";
      break;
    }
    return false;
  case Mips::JIALC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC GPR32Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIALC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIALC64 GPR64Opnd:$rs, 0)
      AsmString = "jalrc $\x01";
      break;
    }
    return false;
  case Mips::JIC:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC GPR32Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::JIC64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (JIC64 GPR64Opnd:$rs, 0)
      AsmString = "jrc $\x01";
      break;
    }
    return false;
  case Mips::MFTACX:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::AC0) {
      // (MFTACX GPR32Opnd:$rt, AC0)
      AsmString = "mftacx $\x01";
      break;
    }
    return false;
  case Mips::MFTC0:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::COP0RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MFTC0 GPR32Opnd:$rd, COP0Opnd:$rt, 0)
      AsmString = "mftc0 $\x01, $\x02";
      break;
    }
    return false;
  case Mips::MFTHI:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::AC0) {
      // (MFTHI GPR32Opnd:$rt, AC0)
      AsmString = "mfthi $\x01";
      break;
    }
    return false;
  case Mips::MFTLO:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::AC0) {
      // (MFTLO GPR32Opnd:$rt, AC0)
      AsmString = "mftlo $\x01";
      break;
    }
    return false;
  case Mips::MOVE16_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO) {
      // (MOVE16_MM ZERO, ZERO)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::MTTACX:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::AC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTTACX AC0, GPR32Opnd:$rt)
      AsmString = "mttacx $\x02";
      break;
    }
    return false;
  case Mips::MTTC0:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::COP0RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTTC0 COP0Opnd:$rt, GPR32Opnd:$rd, 0)
      AsmString = "mttc0 $\x02, $\x01";
      break;
    }
    return false;
  case Mips::MTTHI:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::AC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTTHI AC0, GPR32Opnd:$rt)
      AsmString = "mtthi $\x02";
      break;
    }
    return false;
  case Mips::MTTLO:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::AC0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTTLO AC0, GPR32Opnd:$rt)
      AsmString = "mttlo $\x02";
      break;
    }
    return false;
  case Mips::NORImm:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (NORImm GPR32Opnd:$rs, GPR32Opnd:$rs, simm32_relaxed:$imm)
      AsmString = "nor	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::NORImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (NORImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "nor	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::OR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (OR GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::OR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (OR64 GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $\x01, $\x02";
      break;
    }
    return false;
  case Mips::RDHWR_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::HWRegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RDHWR_MMR6 GPR32Opnd:$rt, HWRegsOpnd:$rs, 0)
      AsmString = "rdhwr $\x01, $\x02";
      break;
    }
    return false;
  case Mips::SDBBP:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_MMR6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SDBBP_R6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SDBBP_R6 0)
      AsmString = "sdbbp";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MM ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLL_MMR6:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL_MMR6 ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SLTImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (SLTImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "slt	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::SLTUImm64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (SLTUImm64 GPR64Opnd:$rs, GPR64Opnd:$rs, imm64:$imm)
      AsmString = "sltu	$\x01, $\x03";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "neg $\x01";
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rt)
      AsmString = "negu $\x01";
      break;
    }
    return false;
  case Mips::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYNC_MMR6:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC_MMR6 0)
      AsmString = "sync";
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::SYSCALL_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL_MM 0)
      AsmString = "syscall";
      break;
    }
    return false;
  case Mips::TEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TEQ_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TEQ_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "teq $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGEU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGEU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tgeu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TGE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TGE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tge $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLTU_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLTU_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tltu $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TLT_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLT_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tlt $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::TNE_MM:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TNE_MM GPR32Opnd:$rs, GPR32Opnd:$rt, 0)
      AsmString = "tne $\x01, $\x02";
      break;
    }
    return false;
  case Mips::WAIT_MM:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT_MM 0)
      AsmString = "wait";
      break;
    }
    return false;
  case Mips::WRDSP:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::WRDSP_MM:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31) {
      // (WRDSP_MM GPR32Opnd:$rt, 31)
      AsmString = "wrdsp $\x01";
      break;
    }
    return false;
  case Mips::YIELD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (YIELD ZERO, GPR32Opnd:$rs)
      AsmString = "yield $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void MipsInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printUImm<10>(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
